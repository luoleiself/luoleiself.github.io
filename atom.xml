<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luoleiself&#39;s blog</title>
  <icon>https://luoleiself.github.io/icon.png</icon>
  <subtitle>blog</subtitle>
  <link href="https://luoleiself.github.io/atom.xml" rel="self"/>
  
  <link href="https://luoleiself.github.io/"/>
  <updated>2024-08-09T04:50:22.960Z</updated>
  <id>https://luoleiself.github.io/</id>
  
  <author>
    <name>luoleiself</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MessageChannel</title>
    <link href="https://luoleiself.github.io/2024/08/aa27b9262e74/"/>
    <id>https://luoleiself.github.io/2024/08/aa27b9262e74/</id>
    <published>2024-08-09T07:20:07.000Z</published>
    <updated>2024-08-09T04:50:22.960Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;MessageChannel&quot;&gt;&lt;a href=&quot;#MessageChannel&quot; class=&quot;headerlink&quot; title=&quot;MessageChannel&quot;&gt;&lt;/a&gt;MessageChannel&lt;/h2&gt;&lt;p&gt;允许创建一个新的消息通道, 并通过它的两个</summary>
        
      
    
    
    
    <category term="WebAPI" scheme="https://luoleiself.github.io/categories/WebAPI/"/>
    
    
    <category term="API" scheme="https://luoleiself.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>CSS3</title>
    <link href="https://luoleiself.github.io/2024/07/d4e0016c7e04/"/>
    <id>https://luoleiself.github.io/2024/07/d4e0016c7e04/</id>
    <published>2024-07-26T14:24:03.000Z</published>
    <updated>2025-03-21T13:00:10.230Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;accent-color&quot;&gt;&lt;a href=&quot;#accent-color&quot; class=&quot;headerlink&quot; title=&quot;accent-color&quot;&gt;&lt;/a&gt;accent-color&lt;/h3&gt;&lt;p&gt;为某些元素所生成的用户界面控件设置了&lt;strong&gt;强调色&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;auto 表示用户代理所选颜色, 应匹配平台的强调色(若有)&lt;/li&gt;
&lt;li&gt;&amp;lt;color&amp;gt; 指定用作强调色的颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;checked&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-css&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-css&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-css&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;accent-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#74992e&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-css&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-css&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://luoleiself.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://luoleiself.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Grid</title>
    <link href="https://luoleiself.github.io/2024/05/7356f3e0fe44/"/>
    <id>https://luoleiself.github.io/2024/05/7356f3e0fe44/</id>
    <published>2024-05-17T08:00:55.000Z</published>
    <updated>2024-12-30T09:10:37.126Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Grid&quot;&gt;&lt;a href=&quot;#Grid&quot; class=&quot;headerlink&quot; title=&quot;Grid&quot;&gt;&lt;/a&gt;Grid&lt;/h2&gt;&lt;p&gt;CSS Grid 是一个用于 web 的二维布局系统, 网格是由一系列水平及垂直的线构成的一种布局模式, 根据网格, 可以将内容按照行和列的格式进行排版.&lt;br&gt;CSS Grid 布局 和 Flexible 布局的主要区别在于 CSS Flexible 是为了一维布局服务的(沿横向或纵向), 而 CSS Grid 是为二维布局服务的(同时沿着横向和纵向)&lt;/p&gt;
&lt;h3 id=&quot;辅助属性&quot;&gt;&lt;a href=&quot;#辅助属性&quot; class=&quot;headerlink&quot; title=&quot;辅助属性&quot;&gt;&lt;/a&gt;辅助属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;网格轨道, 网格布局中使用 grid-template-rows 和 grid-template-columns 属性定义的网格上的行和列, 网格轨道是网格上任意两条相邻线之间的空间.&lt;/li&gt;
&lt;li&gt;fr 单位, 新的长度单位, 表示网格容器中占用的轨道&lt;/li&gt;
&lt;li&gt;minmax(min, max), 函数为一个行/列的尺寸设置了取值范围, 例如 minmax(100px, auto) 表示尺寸至少为 100px, 如果内容尺寸大于 100px 则会根据内容自动调整&lt;/li&gt;
&lt;li&gt;repeat(count, value), 表示轨道列表的重复片段, 允许以更紧凑的形式写入大量显示重复模式的列或行&lt;ul&gt;
&lt;li&gt;repeat(auto-fill/auto-fit, minmax(200px, 1fr)) 根据可用空间动态调整轨道列数, 每列的最小宽度为 200px, 最大为 1fr&lt;/li&gt;
&lt;li&gt;auto-fill 创建尽可能多的轨道(即使这些轨道是空的), 并且不会合并多余的轨道&lt;/li&gt;
&lt;li&gt;auto-fit 创建尽可能多的轨道, 并且会合并多余的轨道, 使得内容能够填充整个容器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;属性列表&quot;&gt;&lt;a href=&quot;#属性列表&quot; class=&quot;headerlink&quot; title=&quot;属性列表&quot;&gt;&lt;/a&gt;属性列表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;grid-template-rows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grid-template-columns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grid-template-areas&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grid-auto-flow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grid-auto-rows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grid-auto-columns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grid-gap/gap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grid-column-gap&lt;/li&gt;
&lt;li&gt;grid-row-gap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;place-items&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;align-items&lt;/li&gt;
&lt;li&gt;justify-items&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;place-content&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;align-content&lt;/li&gt;
&lt;li&gt;justify-content&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grid-area&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grid-row&lt;/li&gt;
&lt;li&gt;grid-column&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;align-self&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;justify-self&lt;/p&gt;</summary>
    
    
    
    <category term="CSS" scheme="https://luoleiself.github.io/categories/CSS/"/>
    
    
    <category term="CSS" scheme="https://luoleiself.github.io/tags/CSS/"/>
    
    <category term="Grid" scheme="https://luoleiself.github.io/tags/Grid/"/>
    
  </entry>
  
  <entry>
    <title>BroadcastChannel</title>
    <link href="https://luoleiself.github.io/2024/03/3689deed511f/"/>
    <id>https://luoleiself.github.io/2024/03/3689deed511f/</id>
    <published>2024-03-05T07:20:07.000Z</published>
    <updated>2024-08-09T04:48:44.760Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;BroadcastChannel&quot;&gt;&lt;a href=&quot;#BroadcastChannel&quot; class=&quot;headerlink&quot; title=&quot;BroadcastChannel&quot;&gt;&lt;/a&gt;BroadcastChannel&lt;/h2&gt;&lt;p&gt;该接口代理了一个命名频道, 可以让同源下的任意浏览上下文订阅它, 它允许同源的不同浏览器窗口(非 chrome 和 qq 浏览器这种方式), tab 页, frame 或者 iframe 下的不同文档之间相互通信,&lt;br&gt;通过触发一个 message 事件, 消息可以广播到所有监听了该频道的 BroadCastChannel 对象.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;channelName, 表示通道名称的字符串, 对于相同的来源下的所有浏览上下文, 一个名称只对应一个通道&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; bc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;BroadcastChannel&lt;/span&gt;(channelName);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="WebAPI" scheme="https://luoleiself.github.io/categories/WebAPI/"/>
    
    
    <category term="API" scheme="https://luoleiself.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>EventSource</title>
    <link href="https://luoleiself.github.io/2024/02/9e4187fea759/"/>
    <id>https://luoleiself.github.io/2024/02/9e4187fea759/</id>
    <published>2024-02-23T08:09:48.000Z</published>
    <updated>2025-02-06T03:07:32.172Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;EventSource&quot;&gt;&lt;a href=&quot;#EventSource&quot; class=&quot;headerlink&quot; title=&quot;EventSource&quot;&gt;&lt;/a&gt;EventSource&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当不使用 HTTP/2 时, 服务器发送事件(SSE)受到打开连接数(6)的限制, 这个限制是针对浏览器的. 每个浏览器的所有标签页中对相同域名的连接数最多支持 6 个(chrome 超过 6 个自动断开连接, firefox 超过 9 个自动断开连接)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当使用 HTTP/2 时, 最大并发 HTTP 流的数量是由服务器和客户端协商的(默认为 100)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Web 内容与服务器发送事件通信的接口, 通信方向是单向的, 数据消息只能从服务器发送到客户端. 如果接收消息中有一个 event 字段, 触发的事件与 event 字段的值相同, 如果不存在 event 字段, 则将触发通用的 message 事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;url, 表示远程资源的位置&lt;/li&gt;
&lt;li&gt;configuration, 可选, 一个对象&lt;ul&gt;
&lt;li&gt;withCredentials, 标识 CORS 是否包含凭据, 默认为 false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sse = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;EventSource&lt;/span&gt;(url, configuration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 没有 event 字段时触发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * event: message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * data: user data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * id: someid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sse.&lt;span class=&quot;property&quot;&gt;onmessage&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 触发 notice 事件回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * event: notice&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * data: useful data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * id: someid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sse.&lt;span class=&quot;title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;notice&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(evt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="WebAPI" scheme="https://luoleiself.github.io/categories/WebAPI/"/>
    
    
    <category term="API" scheme="https://luoleiself.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>web-component</title>
    <link href="https://luoleiself.github.io/2024/02/8030afef2dbd/"/>
    <id>https://luoleiself.github.io/2024/02/8030afef2dbd/</id>
    <published>2024-02-21T07:16:43.000Z</published>
    <updated>2024-11-21T13:01:56.708Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Web-Component&quot;&gt;&lt;a href=&quot;#Web-Component&quot; class=&quot;headerlink&quot; title=&quot;Web Component&quot;&gt;&lt;/a&gt;Web Component&lt;/h2&gt;&lt;p&gt;Web Component 是一套不同的技术, 允许创建可重用的定制元素(它们的功能封装在代码之外)并且在 web 应用中使用它们&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom element(自定义元素): 一组 JavaScript API, 允许自定义元素及其行为, 然后在用户界面中按照需要使用它们&lt;/li&gt;
&lt;li&gt;Shadow DOM(影子 DOM): 一组 JavaScript API, 用于将封装的 “影子”DOM 树附加到指定元素(与页面 DOM 分开呈现)并控制其关联的功能. 通过这种方式, 可以保持自定义元素的功能私有, 这样它们就可以被脚本化和样式化,而不用担心与文档的其他部分发生冲突&lt;/li&gt;
&lt;li&gt;HTML template(HTML 模板): &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 元素可以编写不在呈现页面中显示的标记模板. 然后它们可以作为自定义元素结构的基础被多次重用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;自定义元素&quot;&gt;&lt;a href=&quot;#自定义元素&quot; class=&quot;headerlink&quot; title=&quot;自定义元素&quot;&gt;&lt;/a&gt;自定义元素&lt;/h2&gt;&lt;p&gt;==封装== ==重用==&lt;/p&gt;
&lt;p&gt;创建自定义元素, 扩展浏览器中可用的元素集&lt;/p&gt;
&lt;h3 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;&lt;/a&gt;类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自定义内置元素, 继承自标准的 HTML 元素, 例如 HTMLImageElement, HTMLParagraphElement&lt;/li&gt;
&lt;li&gt;独立自定义元素, 继承自 HTML 元素基类 HTMLElement, 必须从头实现它们的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实现自定义元素&quot;&gt;&lt;a href=&quot;#实现自定义元素&quot; class=&quot;headerlink&quot; title=&quot;实现自定义元素&quot;&gt;&lt;/a&gt;实现自定义元素&lt;/h3&gt;&lt;p&gt;使用 ES6 中的类实现一个自定义元素, 该类可以扩展 HTMLElement 或者其它定制的接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在构造函数中设置初始化状态和默认值, 注册事件监听器, 创建一个影子根(shadowRoot)&lt;/li&gt;
&lt;li&gt;在构造函数中不能检查元素的属性或子元素, 不能添加新的属性或子元素&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="WebAPI" scheme="https://luoleiself.github.io/categories/WebAPI/"/>
    
    
    <category term="API" scheme="https://luoleiself.github.io/tags/API/"/>
    
    <category term="web-component" scheme="https://luoleiself.github.io/tags/web-component/"/>
    
  </entry>
  
  <entry>
    <title>Element.insert*</title>
    <link href="https://luoleiself.github.io/2023/07/ab14d13f34d4/"/>
    <id>https://luoleiself.github.io/2023/07/ab14d13f34d4/</id>
    <published>2023-07-21T04:02:45.000Z</published>
    <updated>2024-07-26T14:00:47.946Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;Element-insertAdjacentElement-position-element&quot;&gt;&lt;a href=&quot;#Element-insertAdjacentElement-position-element&quot; class=&quot;headerlink&quot; title=&quot;Element.insertAdjacentElement(position, element)&quot;&gt;&lt;/a&gt;Element.insertAdjacentElement(position, element)&lt;/h3&gt;&lt;p&gt;将一个给定的元素节点插入到相对于被调用元素的给定的一个位置, 执行成功返回插入的元素, 失败则返回 null&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;position 表示相对于该元素的位置&lt;ul&gt;
&lt;li&gt;‘beforebegin’ 在该元素本身的前面&lt;/li&gt;
&lt;li&gt;‘afterbegin’ 只在该元素中, 在该元素中的第一个子元素前面&lt;/li&gt;
&lt;li&gt;‘beforeend’ 只在该元素中, 在该元素中的最后一个子元素的后面&lt;/li&gt;
&lt;li&gt;‘afterend’ 在该元素本身的后面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;element 要插入的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- beforebegin --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- afterbegin --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- beforeend --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- afterend --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 只有当节点处于 DOM 树中且有一个父节点时 beforebegin 和 afterend 才会生效&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;  beforeBtn.&lt;span class=&quot;title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tempDiv = &lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;div&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;    tempDiv.&lt;span class=&quot;property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;backgroundColor&lt;/span&gt; = &lt;span class=&quot;title function_&quot;&gt;randomColor&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (activeElem) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;      activeElem.&lt;span class=&quot;title function_&quot;&gt;insertAdjacentElement&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;beforebegin&amp;#x27;&lt;/span&gt;, tempDiv);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;title function_&quot;&gt;setListener&lt;/span&gt;(tempDiv);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;  afterBtn.&lt;span class=&quot;title function_&quot;&gt;addEventListener&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tempDiv = &lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;div&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;    tempDiv.&lt;span class=&quot;property&quot;&gt;style&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;backgroundColor&lt;/span&gt; = &lt;span class=&quot;title function_&quot;&gt;randomColor&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (activeElem) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;      activeElem.&lt;span class=&quot;title function_&quot;&gt;insertAdjacentElement&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;afterend&amp;#x27;&lt;/span&gt;, tempDiv);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;title function_&quot;&gt;setListener&lt;/span&gt;(tempDiv);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;language-javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="WebAPI" scheme="https://luoleiself.github.io/categories/WebAPI/"/>
    
    
    <category term="API" scheme="https://luoleiself.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Performance</title>
    <link href="https://luoleiself.github.io/2023/05/4f79cfa6b1bf/"/>
    <id>https://luoleiself.github.io/2023/05/4f79cfa6b1bf/</id>
    <published>2023-05-31T06:38:57.000Z</published>
    <updated>2024-07-26T14:00:47.956Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Performance&quot;&gt;&lt;a href=&quot;#Performance&quot; class=&quot;headerlink&quot; title=&quot;Performance&quot;&gt;&lt;/a&gt;Performance&lt;/h2&gt;&lt;p&gt;Performance 接口可以获取当前页面中与性能相关的信息, 它是高级能力 Timing API 的一部分, 同时也融合了 Timeline API, Navigation Timing API, User Timing API, Resource Timing API&lt;/p&gt;
&lt;p&gt;该类型的对象可以通过调用只读属性 &lt;code&gt;window.performance&lt;/code&gt; 获取&lt;/p&gt;
&lt;h3 id=&quot;只读属性&quot;&gt;&lt;a href=&quot;#只读属性&quot; class=&quot;headerlink&quot; title=&quot;只读属性&quot;&gt;&lt;/a&gt;只读属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;navigation: 获取在指定的时间段内发生的操作相关信息, 包含页面的加载刷新、发生了多少次重定向等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;timing: 表示包含延迟相关的性能信息&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;performance.&lt;span class=&quot;property&quot;&gt;timing&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;connectStart&amp;quot;: 1685528410085,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;navigationStart&amp;quot;: 1685528410083,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;secureConnectionStart&amp;quot;: 0,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;fetchStart&amp;quot;: 1685528410085,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;domContentLoadedEventStart&amp;quot;: 1685528410878,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;responseStart&amp;quot;: 1685528410185,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;domInteractive&amp;quot;: 1685528410417,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;domainLookupEnd&amp;quot;: 1685528410085,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;responseEnd&amp;quot;: 1685528410186,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;redirectStart&amp;quot;: 0,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;requestStart&amp;quot;: 1685528410087,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;unloadEventEnd&amp;quot;: 0,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;unloadEventStart&amp;quot;: 0,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;domLoading&amp;quot;: 1685528410189,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;domComplete&amp;quot;: 1685528410896,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;domainLookupStart&amp;quot;: 1685528410085,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;loadEventStart&amp;quot;: 1685528410897,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;domContentLoadedEventEnd&amp;quot;: 1685528410878,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;loadEventEnd&amp;quot;: 1685528410897,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;redirectEnd&amp;quot;: 0,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;quot;connectEnd&amp;quot;: 1685528410085&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;memory: &lt;code&gt;非标准属性&lt;/code&gt;, 表示基本内存使用情况的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;timeOrigin: 表示性能测量开始时的时间的高精度时间戳&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="WebAPI" scheme="https://luoleiself.github.io/categories/WebAPI/"/>
    
    
    <category term="API" scheme="https://luoleiself.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>IntersectionObserver</title>
    <link href="https://luoleiself.github.io/2023/04/ec2526e79bc5/"/>
    <id>https://luoleiself.github.io/2023/04/ec2526e79bc5/</id>
    <published>2023-04-20T11:04:10.000Z</published>
    <updated>2024-07-26T14:00:47.953Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;IntersectionObserver&quot;&gt;&lt;a href=&quot;#IntersectionObserver&quot; class=&quot;headerlink&quot; title=&quot;IntersectionObserver&quot;&gt;&lt;/a&gt;IntersectionObserver&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;之前通常要使用事件监听, 并且需要频繁调用 Element.getBoundingClientRect() 方法以获取相关元素的边界信息, 并使用事件通知的方式同步进行计算, 可能造成性能问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;IntersectionObserver&lt;/code&gt; 接口提供了一种&lt;strong&gt;异步观察&lt;/strong&gt;目标元素与祖先元素或顶级文档视口(viewport)交叉状态的方法&lt;br&gt;当一个 &lt;code&gt;IntersectionObserver&lt;/code&gt; 对象被创建时, 其被配置为监听根中一段给定比例的可见区域, 一旦 &lt;code&gt;IntersectionObserver&lt;/code&gt; 被创建, 则无法更改其配置, 所以一个给定的观察者对象只能用来监听可见区域的特定变化值, 但是, 可以在同一个观察者对象中配置监听多个目标元素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交叉状态触发是成对出现的, 就像 &lt;code&gt;mouseenter&lt;/code&gt; 和 &lt;code&gt;mouseleave&lt;/code&gt; 事件一样, 有进入状态在未来某一时刻肯定会有移出状态&lt;/li&gt;
&lt;li&gt;在非交叉区域内的操作不会触发, 和 &lt;code&gt;scroll&lt;/code&gt; 事件的触发是有区别的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;应用范围&quot;&gt;&lt;a href=&quot;#应用范围&quot; class=&quot;headerlink&quot; title=&quot;应用范围&quot;&gt;&lt;/a&gt;应用范围&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;图片懒加载, 当图片滚动到可见区域时才进行加载&lt;/li&gt;
&lt;li&gt;内容无限滚动, 用户滚动到接近内容底部时直接加载更多而无需用户操作翻页&lt;/li&gt;
&lt;li&gt;检测广告的曝光情况, 为了计算广告收益, 需要直到广告元素的曝光情况&lt;/li&gt;
&lt;li&gt;在到达可见区域时执行任务或播放动画&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;触发时机&quot;&gt;&lt;a href=&quot;#触发时机&quot; class=&quot;headerlink&quot; title=&quot;触发时机&quot;&gt;&lt;/a&gt;触发时机&lt;/h3&gt;&lt;p&gt;通常只需要关注文档最接近的可滚动祖先元素的交集更改, 如果元素不是可滚动元素的后代, 则默认为设备视窗&lt;br&gt;如果要观察相对于根元素的交集, 则指定根元素为 null&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每当目标元素与设备视窗或者其他指定元素发生交集的时候执行, 设备视窗或者其他元素被称为根元素或根&lt;/li&gt;
&lt;li&gt;Observer 第一次监听目标元素时&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="WebAPI" scheme="https://luoleiself.github.io/categories/WebAPI/"/>
    
    
    <category term="API" scheme="https://luoleiself.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Stream</title>
    <link href="https://luoleiself.github.io/2023/04/628a49166594/"/>
    <id>https://luoleiself.github.io/2023/04/628a49166594/</id>
    <published>2023-04-12T07:52:05.000Z</published>
    <updated>2024-07-26T14:00:47.967Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;可读流&quot;&gt;&lt;a href=&quot;#可读流&quot; class=&quot;headerlink&quot; title=&quot;可读流&quot;&gt;&lt;/a&gt;可读流&lt;/h2&gt;&lt;h3 id=&quot;ReadableStream&quot;&gt;&lt;a href=&quot;#ReadableStream&quot; class=&quot;headerlink&quot; title=&quot;ReadableStream&quot;&gt;&lt;/a&gt;ReadableStream&lt;/h3&gt;&lt;p&gt;创建并从给定的 Handler 返回一个可读流对象&lt;/p&gt;
&lt;h4 id=&quot;RS-构造方法&quot;&gt;&lt;a href=&quot;#RS-构造方法&quot; class=&quot;headerlink&quot; title=&quot;RS 构造方法&quot;&gt;&lt;/a&gt;RS 构造方法&lt;/h4&gt;&lt;p&gt;创建并从给定的处理程序返回一个可读的流对象&lt;/p&gt;
&lt;h5 id=&quot;可读流配置项&quot;&gt;&lt;a href=&quot;#可读流配置项&quot; class=&quot;headerlink&quot; title=&quot;可读流配置项&quot;&gt;&lt;/a&gt;可读流配置项&lt;/h5&gt;&lt;p&gt;&lt;code&gt;underlyingSource&lt;/code&gt; 可选的定义可读流的行为方式的配置项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start(controller) 由开发人员定义, 当流对象被创建时立刻调用, 执行其他任何必须的设置流功能, 如果过程是异步的则返回一个 Promise&lt;ul&gt;
&lt;li&gt;controller 根据 &lt;code&gt;type=&amp;#39;bytes&amp;#39;&lt;/code&gt; 属性传递的 &lt;code&gt;ReadableStreamDefaultController&lt;/code&gt; 或 &lt;code&gt;ReadableByteStreamController&lt;/code&gt; 控制器实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pull(controller) 由开发人员定义, 当流的内部队列不满时, 会重复调用这个方法, 直到队列补满&lt;/li&gt;
&lt;li&gt;cancel(reason) 由开发人员定义, 当该流被取消时调用&lt;/li&gt;
&lt;li&gt;type 控制正在处理的可读类型的流, 默认 &lt;code&gt;ReadableStreamDefaultController&lt;/code&gt;, &lt;code&gt;type=&amp;#39;bytes&amp;#39;&lt;/code&gt; 表示 &lt;code&gt;ReadableByteStreamController&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;autoAllocateChunkSize 开启流自动分配缓冲区, 使用正整数设置&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="WebAPI" scheme="https://luoleiself.github.io/categories/WebAPI/"/>
    
    
    <category term="API" scheme="https://luoleiself.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>FileSystemAPI</title>
    <link href="https://luoleiself.github.io/2023/04/0af048824359/"/>
    <id>https://luoleiself.github.io/2023/04/0af048824359/</id>
    <published>2023-04-12T06:02:45.000Z</published>
    <updated>2024-09-24T03:11:22.699Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;目前仅在 chrome 86 (edge 86, opera 72)及以上版本支持, safari 和 firefox 暂时不支持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;允许 Web 应用程序从用户设备的本地文件系统中操作文件, 它为 Web 应用程序提供了更多的灵活性和功能, 使其更接近于本地应用程序的体验&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/File_System_API&quot;&gt;File System API&lt;/a&gt; 遵循同源策略, 只允许 Web 应用程序在具有相同源的文件系统上进行操作, 当使用该 API 时, 会提示用户授权应用程序访问文件系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将文件从本地文件系统上传到 Web 应用程序&lt;/li&gt;
&lt;li&gt;将 Web 应用程中的数据写入到本地文件系统中&lt;/li&gt;
&lt;li&gt;在用户的本地文件系统中创建、重命名和删除文件&lt;/li&gt;
&lt;li&gt;读取本地文件系统上的文件内容&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 继承&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * FileSystemHandle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *  &amp;lt;- FileSystemFileHandle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *  &amp;lt;- FileSystemDirectoryHandle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * FileSystemSyncAccessHandle&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * WritableStream&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *  &amp;lt;- FileSystemWritableFileStream&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;window.showOpenFilePicker&lt;/code&gt;, &lt;code&gt;window.showSaveFilePicker&lt;/code&gt;, &lt;code&gt;window.showDirectoryPicker&lt;/code&gt; API 只能由用户行为触发, 程序主动调用报安全错误&lt;br&gt;SecurityError: Failed to execute ‘showDirectoryPicker’ on ‘Window’: Must be handling a user gesture to show a file picker.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;createSyncAccessHandle()&lt;/code&gt;, &lt;a href=&quot;#FileSystemSyncAccessHandle&quot;&gt;FileSystemSyncAccessHandle&lt;/a&gt; 只能在专用的 web worker 中使用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;navigator.storage&lt;/code&gt; 只读属性返回一个单例的 StorageManager 对象, 只能在 HTTPS 中使用&lt;/p&gt;
&lt;h2 id=&quot;FileSystemHandle接口&quot;&gt;&lt;a href=&quot;#FileSystemHandle接口&quot; class=&quot;headerlink&quot; title=&quot;FileSystemHandle接口&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle&quot;&gt;FileSystemHandle&lt;/a&gt;接口&lt;/h2&gt;&lt;p&gt;是 File System API 表示文件或目录条目的对象, 多个句柄可以代表同一个条目，通常情况下, 使用它的子接口 &lt;code&gt;FileSystemFileHandle&lt;/code&gt; 和 &lt;code&gt;FileSystemDirectoryHandle&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FileSystemFileHandle&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#FileSystemDirectoryHandle&quot;&gt;FileSystemDirectoryHandle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="WebAPI" scheme="https://luoleiself.github.io/categories/WebAPI/"/>
    
    
    <category term="API" scheme="https://luoleiself.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Lua</title>
    <link href="https://luoleiself.github.io/2022/11/5ad9dd804c02/"/>
    <id>https://luoleiself.github.io/2022/11/5ad9dd804c02/</id>
    <published>2022-11-28T08:45:19.000Z</published>
    <updated>2024-07-26T14:00:47.954Z</updated>
    
    
    <summary type="html">&lt;p&gt;Lua 是一门强大、快速、轻量的嵌入式动态类型脚本语言, 使用 ANSI C 语言编写并以源代码形式开放, 其设计目的是为了嵌入应用程序中, 从而为应用程序提供灵活的扩展和定制功能&lt;/p&gt;
&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;p&gt;Lua 有八种基本数据类型: nil、boolean、number、string、function、userdata、thread、table&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nil 表示一个有意义的值不存在时的状态, nil 和 false 逻辑表达式中都表示假, 其他任何值都表示真&lt;/li&gt;
&lt;li&gt;userdata 表示任意存储在变量中的 C 数据, 完全用户数据: 指一块由 Lua 管理的内存对应的对象; 轻量用户数据: 指一个简单的 C 指针&lt;/li&gt;
&lt;li&gt;table 本质是一个关联数组, 数组的索引可以是数字、字符串或表类型, 下标默认从 1 开始, table 可以包含任何类型的值(nil 除外), 任何键的值若为 nil 就不会被记入表内, table 的创建通过 &lt;code&gt;构造表达式 &amp;#123;&amp;#125;&lt;/code&gt; 完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;table、function、thread、userdata 在 Lua 中是引用类型, 对其操作都是针对引用而不是针对值的操作&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;数据类型: nil boolean number string userdata function trhead table&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;nil 表示一个无效值(在条件表达式中相当于false)&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;boolean 表示 true 和 false, 除了 nil 和 false 值表示为 false, 其他值(包括0)都为 true, &amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;number 表示双精度类型的实浮点数, 数字字符串相加将转换成数字相加&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;string 表示一对双引号或者单引号包含的内容, [[ 内容 ]] 表示块字符串, .. 字符串拼接, # 计算字符串或表的长度&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;userdata 表示任意存储在变量中的 C 数据结构&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;function 由 C 或 Lua 编写的函数&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;thread 表示执行的独立线程, 用于执行协同程序&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;table 其实是一个关联数组, 数组的索引可以是数字、字符串或者表类型, 下标默认从 1 开始, table 的创建通过&amp;#x27;构造表达式&amp;#x27;完成, 空表: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;---------------------------------------&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;变量的三种类型: 全局变量, 局部变量(local 声明), 表中的域&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;变量批量赋值时, 多余的变量会赋值为 nil, 多余的值会被忽略&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;---------------------------------------&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="server" scheme="https://luoleiself.github.io/categories/server/"/>
    
    <category term="Lua" scheme="https://luoleiself.github.io/categories/server/Lua/"/>
    
    
    <category term="Lua" scheme="https://luoleiself.github.io/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Redis-List</title>
    <link href="https://luoleiself.github.io/2022/11/3f42dc25499d/"/>
    <id>https://luoleiself.github.io/2022/11/3f42dc25499d/</id>
    <published>2022-11-09T10:03:19.000Z</published>
    <updated>2024-09-19T07:48:57.433Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;Lists-命令&quot;&gt;&lt;a href=&quot;#Lists-命令&quot; class=&quot;headerlink&quot; title=&quot;Lists 命令&quot;&gt;&lt;/a&gt;Lists 命令&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Redis 3.2 之后, List 数据类型底层使用 quickList 代替双向链表和压缩列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;List 是一个有序重复的双向链表, 按照添加的顺序排序, 可以添加一个元素到列表的头部(左边)、尾部(右边), 一个列表最多可以包含 2^32-1(40 多亿) 个元素.&lt;/p&gt;
&lt;p&gt;List 类型的底层数据结构是由&lt;strong&gt;双向链表&lt;/strong&gt;或&lt;strong&gt;压缩列表&lt;/strong&gt;实现的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果列表元素的个数小于 512 个,列表每个元素值都小于 64B 时, Redis 使用&lt;strong&gt;压缩列表&lt;/strong&gt;作为底层数据结构&lt;/li&gt;
&lt;li&gt;如果列表元素不满足上面的条件, Redis 使用&lt;strong&gt;双向链表&lt;/strong&gt;作为底层数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 配置底层数据结构存储数量限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;hash-max-listpack-entries&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;hash-max-listpack-value&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;添加元素&quot;&gt;&lt;a href=&quot;#添加元素&quot; class=&quot;headerlink&quot; title=&quot;添加元素&quot;&gt;&lt;/a&gt;添加元素&lt;/h4&gt;&lt;p&gt;LPUSH 和 LPUSHX 命令将多个元素&lt;strong&gt;逆序&lt;/strong&gt;插入到列表头部&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LPUSH key element [element …] 批量添加多个元素到列表头部并返回列表的长度, 列表为空或者不存在新建&lt;/li&gt;
&lt;li&gt;LPUSHX key element [element …] 批量添加多个元素到&lt;strong&gt;已存在&lt;/strong&gt;的列表头部并返回列表的长度, 列表为空或者不存在返回 0&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; LPUSH list:zhang name1 name2 name3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; LPUSHX list:zhang name1 name4 name5 name6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; LPUSH list:zhang name1 name4 name5 name6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# LPUSH 和 LPUSHX 命令将多个元素**逆序**插入到列表头部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; LRANGE list:zhang 0 11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1) &lt;span class=&quot;string&quot;&gt;&amp;quot;name6&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 2) &lt;span class=&quot;string&quot;&gt;&amp;quot;name5&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 3) &lt;span class=&quot;string&quot;&gt;&amp;quot;name4&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 4) &lt;span class=&quot;string&quot;&gt;&amp;quot;name1&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 5) &lt;span class=&quot;string&quot;&gt;&amp;quot;name6&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 6) &lt;span class=&quot;string&quot;&gt;&amp;quot;name5&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 7) &lt;span class=&quot;string&quot;&gt;&amp;quot;name4&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 8) &lt;span class=&quot;string&quot;&gt;&amp;quot;name1&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 9) &lt;span class=&quot;string&quot;&gt;&amp;quot;name3&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10) &lt;span class=&quot;string&quot;&gt;&amp;quot;name2&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11) &lt;span class=&quot;string&quot;&gt;&amp;quot;name1&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# LPUSHX 对空列表或不存在的列表不进行操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; LPUSHX list:zhang:1 name1 name2 name3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; KEYS *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1) &lt;span class=&quot;string&quot;&gt;&amp;quot;list:zhang&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2) &lt;span class=&quot;string&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3) &lt;span class=&quot;string&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4) &lt;span class=&quot;string&quot;&gt;&amp;quot;hash:zhang&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="server" scheme="https://luoleiself.github.io/categories/server/"/>
    
    <category term="Redis" scheme="https://luoleiself.github.io/categories/server/Redis/"/>
    
    
    <category term="Redis" scheme="https://luoleiself.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-Other-Structs</title>
    <link href="https://luoleiself.github.io/2022/11/4c5a8bb1e1ca/"/>
    <id>https://luoleiself.github.io/2022/11/4c5a8bb1e1ca/</id>
    <published>2022-11-09T10:03:19.000Z</published>
    <updated>2024-07-26T14:00:47.957Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;HyperLogLog&quot;&gt;&lt;a href=&quot;#HyperLogLog&quot; class=&quot;headerlink&quot; title=&quot;HyperLogLog&quot;&gt;&lt;/a&gt;HyperLogLog&lt;/h3&gt;&lt;p&gt;HyperLogLog 是用来做基数统计的算法, 优点是在输入元素的数量或者体积非常大时, 计算基数所需的空间总是固定的、并且是很小的. 每个 HyperLogLog 键只需要花费 12KB 内存, 就可以计算接近 2^64 个不同元素的基数, 并产生标准误差接近于 0.81% 的近似值, 因为 HyperLogLog 只会根据输入元素来计算基数, 而不会储存输入元素本身&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如数据集 {1, 3, 5, 7, 5, 7, 8}, 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为 5. 基数估计就是在误差可接受的范围内，快速计算基数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PFADD key [element [element …]] 添加元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PFCOUNT key [key …] 根据 key 计算基数并返回, 0 表示 key 不存在&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; PFADD hll foo bar zap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; PFADD hll zap zap zap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; PFADD hll foo bar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; PFCOUNT hll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; PFADD other-hll 1 2 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; PFCOUNT hll other-hll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="server" scheme="https://luoleiself.github.io/categories/server/"/>
    
    <category term="Redis" scheme="https://luoleiself.github.io/categories/server/Redis/"/>
    
    
    <category term="Redis" scheme="https://luoleiself.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-PubSub</title>
    <link href="https://luoleiself.github.io/2022/11/02c91f48b138/"/>
    <id>https://luoleiself.github.io/2022/11/02c91f48b138/</id>
    <published>2022-11-09T10:03:19.000Z</published>
    <updated>2025-02-22T13:41:23.708Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;发布订阅&quot;&gt;&lt;a href=&quot;#发布订阅&quot; class=&quot;headerlink&quot; title=&quot;发布订阅&quot;&gt;&lt;/a&gt;发布订阅&lt;/h2&gt;&lt;p&gt;Redis 发布/订阅(pub/sub)是一种消息通信模式: 发送者(pub)发送消息, 订阅者(sub)接收消息&lt;br&gt;它采用事件作为基本的通信机制，提供大规模系统所要求的松散耦合的交互模式: 订阅者(如客户端)以事件订阅的方式表达出它有兴趣接收的一个事件或一类事件;发布者(如服务器)可将订阅者感兴趣的事件随时通知相关订阅者&lt;br&gt;订阅者对一个或多个频道感兴趣,只需接收感兴趣的消息,不需要知道什么样的发布者发布的. 这种发布者和订阅者的解耦合可以带来更大的扩展性和更加动态的网络拓扑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布者: 无需独占链接, 可以在 publish 发布消息的同时, 使用同一个链接进行其他操作&lt;/li&gt;
&lt;li&gt;订阅者: 需要独占链接, 在 subscribe 期间, 以阻塞的方式等待消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;发布消息&quot;&gt;&lt;a href=&quot;#发布消息&quot; class=&quot;headerlink&quot; title=&quot;发布消息&quot;&gt;&lt;/a&gt;发布消息&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;PUBLISH channel message 给指定的频道发送消息并返回接收到消息的订阅者数量, 0 表示没有订阅者&lt;/li&gt;
&lt;li&gt;SPUBLISH shardchannel message 给指定的碎片频道发送消息并返回接收到消息的订阅者数量, 0 表示没有订阅者, 7.0.0 支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;普通订阅&quot;&gt;&lt;a href=&quot;#普通订阅&quot; class=&quot;headerlink&quot; title=&quot;普通订阅&quot;&gt;&lt;/a&gt;普通订阅&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SUBSCRIBE channel [channel …] 订阅指定频道立即进入阻塞状态等待接收消息&lt;/li&gt;
&lt;li&gt;UNSUBSCRIBE [channel [channel …]] 根据给定频道取消客户端订阅, 如果未指定则取消所有频道订阅&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="server" scheme="https://luoleiself.github.io/categories/server/"/>
    
    <category term="Redis" scheme="https://luoleiself.github.io/categories/server/Redis/"/>
    
    
    <category term="Redis" scheme="https://luoleiself.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-Set-Zset</title>
    <link href="https://luoleiself.github.io/2022/11/3bfcb546cd4a/"/>
    <id>https://luoleiself.github.io/2022/11/3bfcb546cd4a/</id>
    <published>2022-11-09T10:03:19.000Z</published>
    <updated>2024-09-19T08:59:22.291Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;Sets-命令&quot;&gt;&lt;a href=&quot;#Sets-命令&quot; class=&quot;headerlink&quot; title=&quot;Sets 命令&quot;&gt;&lt;/a&gt;Sets 命令&lt;/h3&gt;&lt;p&gt;Set 是无序不重复的集合, 集合成员是唯一的, 集合对象的编码可以是 intset 或者 hashtable, 集合是通过哈希表实现的, 最大的成员数为 2^32-1(40 多亿)个成员.&lt;/p&gt;
&lt;p&gt;Set: 键名: key, 键类型: set, 键值: string&lt;/p&gt;
&lt;p&gt;Set 类型的底层数据结构是由&lt;strong&gt;哈希表&lt;/strong&gt;或&lt;strong&gt;整数集合&lt;/strong&gt;实现的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果集合中的元素都是整数且元素个数小于 512 个, Redis 使用&lt;strong&gt;整数集合&lt;/strong&gt;作为底层数据结构&lt;/li&gt;
&lt;li&gt;如果集合中的元素不满足上面条件, Redis 使用&lt;strong&gt;哈希表&lt;/strong&gt;作为底层数据结构&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 配置底层数据结构存储数量限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;set-max-intset-entries&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;成员操作&quot;&gt;&lt;a href=&quot;#成员操作&quot; class=&quot;headerlink&quot; title=&quot;成员操作&quot;&gt;&lt;/a&gt;成员操作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SADD key member [member …] 向集合中添加多个成员并返回添加成功的数量, 0 表示有重复成员&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SCARD key 获取集合成员的数量, 集合为空或者不存在返回 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SMEMBERS key 获取集合中所有的成员, 集合为空或者不存在返回 (empty array)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;是否包含成员&quot;&gt;&lt;a href=&quot;#是否包含成员&quot; class=&quot;headerlink&quot; title=&quot;是否包含成员&quot;&gt;&lt;/a&gt;是否包含成员&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;SISMEMBER key member 判断 member 是不是集合的成员, 1 是, 0 不是或者集合为空或者不存在&lt;/li&gt;
&lt;li&gt;SMISMEMBER key member [member …] 批量判断多个 member 是不是集合的成员, 1 是, 0 不是或者集合为空或者不存在, Redis 6.2.0 支持&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; KEYS *  &lt;span class=&quot;comment&quot;&gt;# 查看当前数据库中的 key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(empty array)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 空集合判断是否包含成员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SMISMEMBER myset hello hehe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1) (&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2) (&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 向 myset 添加成员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SADD myset hello world hehe haha gg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 判断 myset 是否包含成员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SMISMEMBER myset hello yy hehe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1) (&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2) (&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3) (&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="server" scheme="https://luoleiself.github.io/categories/server/"/>
    
    <category term="Redis" scheme="https://luoleiself.github.io/categories/server/Redis/"/>
    
    
    <category term="Redis" scheme="https://luoleiself.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-String-Hash</title>
    <link href="https://luoleiself.github.io/2022/11/80b3dfc88923/"/>
    <id>https://luoleiself.github.io/2022/11/80b3dfc88923/</id>
    <published>2022-11-09T10:03:19.000Z</published>
    <updated>2024-07-26T14:00:47.959Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;Strings-命令&quot;&gt;&lt;a href=&quot;#Strings-命令&quot; class=&quot;headerlink&quot; title=&quot;Strings 命令&quot;&gt;&lt;/a&gt;Strings 命令&lt;/h3&gt;&lt;p&gt;字符串是基础的 key-value 类型, 存储字节序列, 包括文本、序列化对象和二进制数组, 一个 key 对应一个 value, value 可以是字符串、整数或浮点数, value 最多可以是 &lt;strong&gt;512MB&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;String 类型的底层的数据结构实现主要是 int 和 SDS(Simple Dynamic String)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为 C 语言的字符串并不记录自身长度, 所以获取长度的复杂度为 O(n), SDS 结构里用 len 属性记录字符串长度, 所有复杂度为 O(1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;设置值&quot;&gt;&lt;a href=&quot;#设置值&quot; class=&quot;headerlink&quot; title=&quot;设置值&quot;&gt;&lt;/a&gt;设置值&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SET key value [NX|XX] [GET] [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|KEEPTTL]&lt;/p&gt;
&lt;p&gt;为 key 设置字符串的值, 执行成功返回 ok, 每次更新 key 的值时会自动清除过期时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NX 仅当 key 不存在时设置&lt;/li&gt;
&lt;li&gt;XX 仅当 key 存在时设置&lt;/li&gt;
&lt;li&gt;EX 过期时间, 单位秒&lt;/li&gt;
&lt;li&gt;PX 过期时间, 单位毫秒&lt;/li&gt;
&lt;li&gt;EXAT 过期时间戳, 单位秒&lt;/li&gt;
&lt;li&gt;PXAT 过期时间戳, 单位毫秒&lt;/li&gt;
&lt;li&gt;KEEPTTL 保留 key 关联的生存时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SET age 18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; EXPIRE age 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; TTL age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SET age 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; TTL age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用 KEEPTTL 保留 key 关联的生存时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SET age 18 EX 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; TTL age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SET age 20 KEEPTTL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; GET age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;20&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; TTL age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 79&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;SETNX key value 当 key 不存在时设置指定 key 的值, 返回值 1 成功, 0 失败&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; KEYS *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1) &lt;span class=&quot;string&quot;&gt;&amp;quot;xiaoming&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2) &lt;span class=&quot;string&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SETNX age 18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SETNX age 18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; KEYS *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1) &lt;span class=&quot;string&quot;&gt;&amp;quot;xiaoming&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2) &lt;span class=&quot;string&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3) &lt;span class=&quot;string&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;APPEND key value 在指定 key 末尾(如果为字符串)追加内容, key 不存在同 &lt;code&gt;SET&lt;/code&gt; 并返回追加内容的长度&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; APPEND age 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; GET age&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;181&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; APPEND addr beijing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; KEYS *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1) &lt;span class=&quot;string&quot;&gt;&amp;quot;xiaoming&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2) &lt;span class=&quot;string&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3) &lt;span class=&quot;string&quot;&gt;&amp;quot;addr&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4) &lt;span class=&quot;string&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; APPEND a hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; APPEND b gg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;过期时间&quot;&gt;&lt;a href=&quot;#过期时间&quot; class=&quot;headerlink&quot; title=&quot;过期时间&quot;&gt;&lt;/a&gt;过期时间&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;SETEX key seconds value 设置 key 的值并设置过期时间(单位秒), 返回 ok&lt;/li&gt;
&lt;li&gt;PSETEX key milliseconds value 设置 key 的值的值并设置过期时间(单位毫秒), 返回 ok&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SETEX addr 20 beijing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; PSETEX addr 20000 beijing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;批量设置值&quot;&gt;&lt;a href=&quot;#批量设置值&quot; class=&quot;headerlink&quot; title=&quot;批量设置值&quot;&gt;&lt;/a&gt;批量设置值&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;MSET key value [key value …] 批量设置 key 的值&lt;/li&gt;
&lt;li&gt;MSETNX key value [key value …] 批量设置 key 的值且当所有的 key 不存在时, 返回值 1 成功, 0 失败&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; KEYS *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1) &lt;span class=&quot;string&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2) &lt;span class=&quot;string&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3) &lt;span class=&quot;string&quot;&gt;&amp;quot;hash:zhang&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 当且仅当所有 key 都不存在时设置成功返回 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; MSETNX name zhangsan age 18 addr beijing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SETRANGE key offset value&lt;/p&gt;
&lt;p&gt;覆盖指定 key 的从指定偏移量开始的字符串的一部分, 返回修改后字符串长度, key 不存在则新建&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; SETRANG name 1 xyz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;integer&lt;/span&gt;) 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; GET name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;axyz1234&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="server" scheme="https://luoleiself.github.io/categories/server/"/>
    
    <category term="Redis" scheme="https://luoleiself.github.io/categories/server/Redis/"/>
    
    
    <category term="Redis" scheme="https://luoleiself.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis-app</title>
    <link href="https://luoleiself.github.io/2022/11/46691d911248/"/>
    <id>https://luoleiself.github.io/2022/11/46691d911248/</id>
    <published>2022-11-09T10:03:19.000Z</published>
    <updated>2024-12-18T08:40:33.315Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;缓存穿透、击穿、雪崩&quot;&gt;&lt;a href=&quot;#缓存穿透、击穿、雪崩&quot; class=&quot;headerlink&quot; title=&quot;缓存穿透、击穿、雪崩&quot;&gt;&lt;/a&gt;缓存穿透、击穿、雪崩&lt;/h2&gt;&lt;h3 id=&quot;缓存穿透&quot;&gt;&lt;a href=&quot;#缓存穿透&quot; class=&quot;headerlink&quot; title=&quot;缓存穿透&quot;&gt;&lt;/a&gt;缓存穿透&lt;/h3&gt;&lt;p&gt;缓存穿透是指缓存和数据库中都没有的数据, 在高并发下对不存在的 key 的操作. 由于缓存是不命中时被动写的, 并且出于容错考虑, 如果存储层查不到数据则不写入缓存, 这将导致这个不存在的数据每次请求都要到存储层去查询, 失去的缓存的意义. 在流量大时, 可能引起数据库崩溃. 或者有人利用不存在的 key 频繁攻击应用, 可能会引起应用的崩溃&lt;/p&gt;
&lt;h4 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法 &quot;&gt;&lt;/a&gt;解决办法 &lt;!-- markdownlint-disable-line --&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;接口层增加校验, 如用户鉴权校验、id 做基础校验、 id &amp;lt;= 0 的直接拦截&lt;/li&gt;
&lt;li&gt;从缓存取不到的数据, 在数据库中也取不到时,可以将 key-value 写为 key-null, 缓存有效时间设置短点, 这样可以防止攻击用户反复用同一个 key 暴力攻击&lt;/li&gt;
&lt;li&gt;布隆过滤器, 类似于一个 hash set, 用于快速判断某个元素是否存在于集合中, 其典型的应用场景就是快速判断一个 key 是否存在于某容器, 不存在就直接返回. 布隆过滤器的关键就在于 hash 算法和容器大小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;缓存击穿&quot;&gt;&lt;a href=&quot;#缓存击穿&quot; class=&quot;headerlink&quot; title=&quot;缓存击穿&quot;&gt;&lt;/a&gt;缓存击穿&lt;/h3&gt;&lt;p&gt;缓存击穿是指缓存中没有但数据库中有的数据(一般是缓存时间到期), 在高并发下对同一 key 的操作. 如果在缓存中没有获取到数据, 又同时在数据库中获取到数据, 引起数据库压力过大.&lt;/p&gt;
&lt;h4 id=&quot;解决办法-1&quot;&gt;&lt;a href=&quot;#解决办法-1&quot; class=&quot;headerlink&quot; title=&quot;解决办法 &quot;&gt;&lt;/a&gt;解决办法 &lt;!-- markdownlint-disable-line --&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;设置热点数据永不过期&lt;/li&gt;
&lt;li&gt;接口限流与熔断、降级, 重要的接口一定要做好限流策略, 防止用户恶意刷接口, 同时要降级准备, 当接口中的某些服务不可用时, 进行熔断, 失败快速返回机制&lt;/li&gt;
&lt;li&gt;加互斥锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;缓存雪崩&quot;&gt;&lt;a href=&quot;#缓存雪崩&quot; class=&quot;headerlink&quot; title=&quot;缓存雪崩&quot;&gt;&lt;/a&gt;缓存雪崩&lt;/h3&gt;&lt;p&gt;缓存雪崩是指缓存中数据大批量到过期时间, 而查询数据量巨大, 引起数据库压力过大甚至崩溃. 和缓存击穿不同的是, 缓存击穿指并发查询同一条数据, 缓存雪崩是不同数据都过期了, 很多数据都查不到从而查询数据库&lt;/p&gt;
&lt;h4 id=&quot;解决办法-2&quot;&gt;&lt;a href=&quot;#解决办法-2&quot; class=&quot;headerlink&quot; title=&quot;解决办法 &quot;&gt;&lt;/a&gt;解决办法 &lt;!-- markdownlint-disable-line --&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;缓存数据的过期时间设置随机, 防止同一时间大量数据过期现象发生&lt;/li&gt;
&lt;li&gt;如果缓存数据库是分布式部署, 将热点数据均匀分布在不同的缓存数据库中&lt;/li&gt;
&lt;li&gt;设置热点数据永不过期&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="server" scheme="https://luoleiself.github.io/categories/server/"/>
    
    <category term="Redis" scheme="https://luoleiself.github.io/categories/server/Redis/"/>
    
    
    <category term="Redis" scheme="https://luoleiself.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://luoleiself.github.io/2022/11/819f95816ecc/"/>
    <id>https://luoleiself.github.io/2022/11/819f95816ecc/</id>
    <published>2022-11-09T10:03:19.000Z</published>
    <updated>2025-03-08T13:35:32.212Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h2&gt;&lt;p&gt;Remote Dictionary Server 即远程字典服务, 是一个开源的使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API, Redis 能读的速度是 11 万次/s，写的速度是 8.1 万次/s&lt;br&gt;Redis 通常被称为数据结构服务器, 因为它的核心数据类型包括字符串、列表、字典（或哈希）、集合和排序集合等大多编程语言都支持的数据类型. 高版本版的 Redis 还添加了计算基数、地理定位和流处理等高级功能&lt;/p&gt;
&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/redis-1.jpg&quot; alt=&quot;redis-1&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="server" scheme="https://luoleiself.github.io/categories/server/"/>
    
    <category term="Redis" scheme="https://luoleiself.github.io/categories/server/Redis/"/>
    
    
    <category term="Redis" scheme="https://luoleiself.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>linux工具</title>
    <link href="https://luoleiself.github.io/2022/05/bc4d38208f0f/"/>
    <id>https://luoleiself.github.io/2022/05/bc4d38208f0f/</id>
    <published>2022-05-31T06:40:43.000Z</published>
    <updated>2025-02-26T14:55:52.163Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;命令行输出内容变身&quot;&gt;&lt;a href=&quot;#命令行输出内容变身&quot; class=&quot;headerlink&quot; title=&quot;命令行输出内容变身&quot;&gt;&lt;/a&gt;命令行输出内容变身&lt;/h3&gt;&lt;p&gt;格式: &#92;033[显示方式;前景色;背景色 m …… &#92;033[0m&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&#92;033[ 固定格式&lt;/li&gt;
&lt;li&gt;&#92;033[0m 非必需, 如果省略表示后面输出内容的样式都会应用当前设置的样式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;属性集&quot;&gt;&lt;a href=&quot;#属性集&quot; class=&quot;headerlink&quot; title=&quot;属性集&quot;&gt;&lt;/a&gt;属性集&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;前景色&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;背景色&lt;/th&gt;
&lt;th&gt;色值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;30&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;40&lt;/td&gt;
&lt;td&gt;黑色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;31&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;41&lt;/td&gt;
&lt;td&gt;红色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;32&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;42&lt;/td&gt;
&lt;td&gt;绿色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;33&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;43&lt;/td&gt;
&lt;td&gt;黄色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;34&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;44&lt;/td&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;35&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;45&lt;/td&gt;
&lt;td&gt;紫红色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;36&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;46&lt;/td&gt;
&lt;td&gt;青蓝色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;37&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;47&lt;/td&gt;
&lt;td&gt;白色&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&quot;显示方式&quot;&gt;&lt;a href=&quot;#显示方式&quot; class=&quot;headerlink&quot; title=&quot;显示方式&quot;&gt;&lt;/a&gt;显示方式&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;显示方式&lt;/th&gt;
&lt;th&gt;表现行为&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td&gt;默认&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td&gt;高亮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td&gt;下划线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td&gt;闪烁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td&gt;反色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td&gt;不可见&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出字体为绿色的 你好hello world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]# &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;&#92;033[1;32m你好hello world&#92;033[0m&#92;n&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出字体为绿色并带有下划线的 你好hello world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]# &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;&#92;033[4;32m你好hello world&#92;033[0m&#92;n&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出背景色为绿色的 你好hello world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]# &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;&#92;033[7;32m你好hello world&#92;033[0m&#92;n&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 输出内容不可见&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost ~]# &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;&#92;033[8;32m你好hello world&#92;033[0m&#92;n&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://luoleiself.github.io/categories/linux/"/>
    
    <category term="shell" scheme="https://luoleiself.github.io/categories/linux/shell/"/>
    
    
    <category term="linux" scheme="https://luoleiself.github.io/tags/linux/"/>
    
    <category term="shell" scheme="https://luoleiself.github.io/tags/shell/"/>
    
  </entry>
  
</feed>
