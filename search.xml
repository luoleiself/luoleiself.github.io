<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BABELRC</title>
    <url>/2021/12/2f42f14b8489/</url>
    <content><![CDATA[<h2 id="babel-cli"><a href="#babel-cli" class="headerlink" title="@babel/cli"></a>@babel/cli</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/cli @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li>--watch | -w 监听文件改变自动编译</li>
<li>--out-file | -o 输出指定文件名</li>
<li>--out-dir | -d 编译整个目录<ul>
<li>编译目录下所有文件输出合并为一个文件</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel index.js -w <span class="comment"># 编译并监听 index.js</span></span><br><span class="line"></span><br><span class="line">npx babel index.js -o index.min.js <span class="comment"># 编译 index.js 文件输出到 index.min.js</span></span><br><span class="line"></span><br><span class="line">npx babel src -d dist <span class="comment"># 编译 src 目录下文件输出到 dist 下</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li><p>--source-maps | -s 编译输出源码映射表</p>
<ul>
<li>true 输出 .map 文件</li>
<li>inline 文件末尾追加 data: URL 映射关系表</li>
<li>both 以上两种方式都用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel index.js -w -s <span class="comment"># 输出 .map 文件</span></span><br><span class="line">npx babel index.js -w -s inline <span class="comment"># 文件末尾追加</span></span><br></pre></td></tr></table></figure></li>
<li><p>--presets 使用预设</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel index.js -o index.min.js --presets=@babel/preset-env,@babel/preset-react <span class="comment"># 使用预设</span></span><br></pre></td></tr></table></figure></li>
<li><p>--plugins 使用插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用插件</span></span><br><span class="line">npx babel index.js -o index.min.js --plugins=@babel/proposal-class-properties,@babel/plugin-transform-runtime</span><br></pre></td></tr></table></figure></li>
<li><p>通过管道输入文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel -o bundle.min.js &lt; index.js <span class="comment"># 读取 index.js 的内容通过管道流编译输出到 bundle.min.js</span></span><br></pre></td></tr></table></figure></li>
<li><p>--no-babelrc 忽略 .babelrc 配置文件</p>
</li>
<li><p>--config-file 自定义配置文件路径</p>
</li>
<li><p>--copy-files 复制文件</p>
</li>
<li><p>--ignore 忽略某些文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx babel index.js --no-babelrc <span class="comment"># 忽略项目中的 .babelrc 配置文件</span></span><br><span class="line"></span><br><span class="line">npx babel index.js --config-file /path/to/.babelrc.json <span class="comment"># 自定义配置文件路径</span></span><br><span class="line"></span><br><span class="line">npx babel src -d dist --copy-files <span class="string">&quot;libs/**/*.js&quot;</span> <span class="comment"># 复制不需要编译的文件</span></span><br><span class="line"></span><br><span class="line">npx babel src -d dist --ignore <span class="string">&quot;src/**/*.test.js&quot;</span>,<span class="string">&quot;lib/**/*.*&quot;</span> <span class="comment"># 忽略编译文件</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="babel-core"><a href="#babel-core" class="headerlink" title="@babel/core"></a>@babel/core</h2><h3 id="Presets"><a href="#Presets" class="headerlink" title="Presets"></a>Presets</h3><ul>
<li>@babel/preset-env</li>
<li>@babel/preset-typescript</li>
<li>@babel/preset-react</li>
<li>@babel/preset-flow</li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 开启默认预设</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 关闭 esm 转化，统一交由 rollup 处理，防止冲突</span></span><br><span class="line">        <span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt; 0.25%, not dead&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;@babel/plugin-external-helpers&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="comment">// 开启 babel 各依赖联动，由此插件负责自动导入 helper 辅助函数，从而形成沙箱 polyfill</span></span><br><span class="line">      <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;corejs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="attr">&quot;proposals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;helper&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;regenerator&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="comment">// &quot;useESModules&quot;: true // 关闭 esm 转化，交由 rollup 处理，同上防止冲突 7.13.0 开启废弃</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><ul>
<li><p>@babel/cli babel 命令行工具</p>
</li>
<li><p>@babel/polyfill 7.4.0 开始被废弃, JS 标准新增的原生对象和 API 的 shim, 实现上仅仅是 core-js 和 regenerator-runtime 两个包的封装</p>
</li>
<li><p>@babel/preset-xxx transform 阶段使用到的一系列的 plugin</p>
</li>
<li><p>@babel/plugin-xxx babel 转译过程中使用到的插件</p>
<ul>
<li>@babel/plugin-transform-runtime 包含 babel 重建模块化运行时助手的插件<ul>
<li>为所有辅助函数创建 <code>@babel/runtime</code> 模块的引用, 避免编译输出中的重复引用</li>
<li>为代码创建一个沙盒环境, 避免直接的引入垫片而引起的全局环境污染</li>
</ul>
</li>
</ul>
</li>
<li><p>@babel/register 通过 require 钩子方式使用 babel 自动转译引用的 js 代码文件</p>
</li>
<li><p>@babel/standalone 提供一个 js 编译环境,不建议在生产环境中使用此工具</p>
</li>
</ul>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul>
<li>@babel/parser babel 的 js 解析函数</li>
<li>@babel/core 包含整个 babel 工作的核心模块, 提供了 babel 的转译 API</li>
<li>@babel/generator 根据 AST 生成代码</li>
<li>@babel/code-frame 用于生成错误信息, 打印出错误点源代码帧以及指出出错位置</li>
<li>@babel/runtime 包含 babel 模块化运行时助手的库, 功能类似 babel-polyfill<ul>
<li>为每个 js 文件添加运行时辅助函数</li>
<li>可能会在输出文件中注入一些跨文件相同的可能被重复使用的代码</li>
</ul>
</li>
<li>@babel/template 辅助函数, 用于从字符串形式的代码来构建 AST 树节点</li>
<li>@babel/traverse 用于对 AST 的遍历, 只要提供功能给 plugins 使用</li>
<li>@babel/types 此模块包含手动构建 AST 和检查 AST 节点类型的方法</li>
<li>@babel/helpers 一系列预制的 babel-template 函数, 用于提供给一些 plugins 使用</li>
</ul>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>Babel</tag>
      </tags>
  </entry>
  <entry>
    <title>BroadcastChannel</title>
    <url>/2024/03/3689deed511f/</url>
    <content><![CDATA[<h2 id="BroadcastChannel"><a href="#BroadcastChannel" class="headerlink" title="BroadcastChannel"></a>BroadcastChannel</h2><p>该接口代理了一个命名频道, 可以让同源下的任意浏览上下文订阅它, 它允许同源的不同浏览器窗口(非 chrome 和 qq 浏览器这种方式), tab 页, frame 或者 iframe 下的不同文档之间相互通信,<br>通过触发一个 message 事件, 消息可以广播到所有监听了该频道的 BroadCastChannel 对象.</p>
<ul>
<li><p>构造函数</p>
<ul>
<li>channelName, 表示通道名称的字符串, 对于相同的来源下的所有浏览上下文, 一个名称只对应一个通道</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bc = <span class="keyword">new</span> <span class="title class_">BroadcastChannel</span>(channelName);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li><p>实例属性</p>
<ul>
<li>name, 返回频道名称</li>
</ul>
</li>
<li><p>实例方法</p>
<ul>
<li>postMessage(), 向所有监听了相同频道的 bc 对象发送一条消息, 消息内容可以是任意类型的数据</li>
<li>close(), 关闭当前频道对象不再接收新的消息, 并允许被垃圾回收</li>
</ul>
</li>
<li><p>事件</p>
<ul>
<li>message, 当频道接收到一条消息时触发</li>
<li>messageerror, 当频道接收到一条无法反序列化的消息时触发</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bc = <span class="keyword">new</span> <span class="title class_">BroadcastChannel</span>(channelName);</span><br><span class="line">bc.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">evt</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(evt)l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bc.<span class="title function_">postMessage</span>(<span class="string">&#x27;hello BroadcastChannel&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/BroadcastChannel-1.jpg" alt="BroadcastChannel-1"></p>
<h2 id="localStorage-同源窗口通信"><a href="#localStorage-同源窗口通信" class="headerlink" title="localStorage 同源窗口通信"></a>localStorage 同源窗口通信</h2><p>当 localStorage 被修改时会触发 storage 事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置监听</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;storage&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;evt&#x27;</span>, evt);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除监听</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;storage&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;evt&#x27;</span>, evt);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/localStorage-1.jpg" alt="localStorage-1"></p>
]]></content>
      <categories>
        <category>WebAPI</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3</title>
    <url>/2024/07/d4e0016c7e04/</url>
    <content><![CDATA[<h3 id="accent-color"><a href="#accent-color" class="headerlink" title="accent-color"></a>accent-color</h3><p>为某些元素所生成的用户界面控件设置了<strong>强调色</strong></p>
<ul>
<li>auto 表示用户代理所选颜色, 应匹配平台的强调色(若有)</li>
<li>&lt;color&gt; 指定用作强调色的颜色</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">        accent-<span class="attribute">color</span>: <span class="number">#74992e</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="color-scheme"><a href="#color-scheme" class="headerlink" title="color-scheme"></a>color-scheme</h3><p>允许元素指示它可以舒适地呈现哪些颜色方案, 操作系统颜色方案的常见选择为”亮色”和”暗色”, 或”日间模式”和”夜间模式”. 当选择其中一种配色方案时, 操作系统会对用户界面进行调整, 包括表单控件、滚动条和 CSS 系统颜色的使用值</p>
<ul>
<li>normal 表示元素未指定任何配色方案, 因此应使用浏览器的默认配色方案呈现</li>
<li>light 表示可以使用操作系统<strong>亮色</strong>配色方案渲染元素</li>
<li>dark 表示可以使用操作系统<strong>深色</strong>配色方案渲染元素</li>
<li>only 禁止用户代理覆盖元素的配色方案</li>
</ul>
<p>为整个页面选择配色方案在 <code>:root</code> 元素上指定 color-scheme, 设置之后不会根据系统的主题色自动调整</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 为元素指定配色方案 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;color-scheme:dark;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color-scheme:only light;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 为整个页面指定暗色 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>-scheme: dark;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="prefers-color-scheme"><a href="#prefers-color-scheme" class="headerlink" title="prefers-color-scheme"></a>prefers-color-scheme</h3><p>CSS 媒体特性用于检测用户是否有将系统的主题色设置为<strong>亮色</strong>或<strong>深色</strong>, 可以根据系统的主题色自动调整, 前提需要定义好配色方案</p>
<ul>
<li>no-preference 表示系统未得知用户在配色方案的选项, 在布尔值上下文中执行结果为 false, 此结果无法通过媒体特性获取系统是否支持设置主题色</li>
<li>light 表示用户已告知系统选择使用亮色主题的界面</li>
<li>dark 表示用户已告知系统选择使用深色主题的界面</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设备最小高度为 680px, 或者为纵向模式的屏幕设备 */</span></span><br><span class="line"><span class="keyword">@media</span>(min-height: <span class="number">680px</span>), screen <span class="keyword">and</span> (<span class="attribute">orientation</span>: portrait) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 媒体查询配色方案 */</span></span><br><span class="line"><span class="keyword">@media</span>(prefers-color-scheme: light)&#123;</span><br><span class="line">    <span class="selector-class">.light-scheme</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: white;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span>(prefers-color-scheme: dark)&#123;</span><br><span class="line">    <span class="selector-class">.dark-scheme</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">        <span class="attribute">color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Charles-手机代理-Https-证书管理</title>
    <url>/2021/12/d4d6226b52d2/</url>
    <content><![CDATA[<h3 id="敲黑板"><a href="#敲黑板" class="headerlink" title="敲黑板"></a>敲黑板</h3><ul>
<li>开启 charles 无法代理 https, 检查电脑和手机上的 charles 证书是否过期</li>
</ul>
<h3 id="电脑删除证书"><a href="#电脑删除证书" class="headerlink" title="电脑删除证书"></a>电脑删除证书</h3><ol>
<li>使用 win + r 键调起系统运行窗口, 在输入框中输入 mmc 命令后回车<br><img data-src="/images/charles-11.jpg" alt="charles-11"></li>
<li>在弹出的对话框选择 “文件” -&gt; “添加或删除管理单元”<br><img data-src="/images/charles-12.png" alt="charles-12"></li>
</ol>
<span id="more"></span>

<ol start="3">
<li>在弹框中左侧列表选择 “证书”, 点击 “添加” 按钮, 在弹出的对话框选择 “我的用户账户” 点击 “完成” 后, 右侧列表会出现 证书 选项, 最后点击 “确定”<br><img data-src="/images/charles-13.jpg" alt="charles-13"><br><img data-src="/images/charles-14.jpg" alt="charles-14"></li>
<li>在第 2 步的窗口中会出现证书菜单, 依次展开这些菜单, 中间窗口会出现所有已安装的证书<br><img data-src="/images/charles-15.jpg" alt="charles-15"></li>
<li>选择需要删除的证书 “右键单击”, 选择 “删除”, 在弹出的对话框中选择 “是”, 完成证书删除<br><img data-src="/images/charles-16.jpg" alt="charles-16"></li>
<li>点击右上角的 “关闭” 按钮关闭控制台, 在弹出的对话框中选择 “否” 不存入控制台配置, 如果有需要也可以选择 “是” 存入控制台配置<br><img data-src="/images/charles-17.jpg" alt="charles-17"></li>
</ol>
<h3 id="电脑安装-charles-证书"><a href="#电脑安装-charles-证书" class="headerlink" title="电脑安装 charles 证书"></a>电脑安装 charles 证书</h3><ol>
<li><p>打开 charles, 选择 Help -&gt; SSL Proxing -&gt; Install Charles Root Certificate<br><img data-src="/images/charles-1.png" alt="charles-1"></p>
</li>
<li><p>在 “证书” 对话框中点击 “安装证书”<br><img data-src="/images/charles-2.jpg" alt="charles-2"></p>
</li>
<li><p>在 “证书导入向导” 对话框中选择 “本地计算机”, 点击 “下一步”<br><img data-src="/images/charles-3.jpg" alt="charles-3"></p>
</li>
<li><p>在 “证书导入向导” 对话框中选择 “将所有的证书都放入下列存储”, 点击 “浏览”<br><img data-src="/images/charles-4.jpg" alt="charles-4"></p>
</li>
<li><p>在 “选择证书存储” 对话框中选择 “受信任的根证书颁发机构”, 点击 “确认”<br><img data-src="/images/charles-5.jpg" alt="charles-5"></p>
</li>
<li><p>在弹出的对话框选择 “是” 将证书导入到浏览器的证书列表中<br><img data-src="/images/charles-10.jpg" alt="charles-10"></p>
</li>
<li><p>点击 “确定” 完成证书添加<br><img data-src="/images/charles-6.jpg" alt="charles-6"></p>
</li>
</ol>
<h3 id="手机添加-charles-证书"><a href="#手机添加-charles-证书" class="headerlink" title="手机添加 charles 证书"></a>手机添加 charles 证书</h3><ol>
<li>手机绑定 charles 代理(电脑 IP 和端口):<ol>
<li>WLAN -&gt; 修改已连接网络</li>
<li>代理改为 “手动”</li>
<li>服务器主机名添加电脑 IP</li>
<li>服务器端口添加 charles 监听端口</li>
<li>保存后连接 wifi</li>
</ol>
</li>
<li>安卓手机使用 Chrome, 苹果手机使用 safari</li>
<li>浏览器地址中输入 chls.pro/ssl 下载手机证书, 如果手机绑定代理后无法联网可以先去掉代理</li>
<li>安卓手机双击已下载证书, 在弹出的对话框填写以下信息并确定<ol>
<li>输入 “证明名称(可任意起名)”, 后期删除证书时可根据此名称查找</li>
<li>凭证用途 默认为 “VPN 和应用”, 如果改为 WLAN 会导致无效</li>
</ol>
</li>
<li>苹果手机打开设置 -&gt; 通用 -&gt; 关于本机 -&gt; 证书信任设置 -&gt; 找到已下载的 charles 证书打开信任</li>
<li>使用手机访问代理, 如果访问失败, 手机重新连接 wifi 重试<br><img data-src="/images/charles-7.jpg" alt="charles-7"></li>
</ol>
<h3 id="电脑使用-charles-无法访问百度等其他页面"><a href="#电脑使用-charles-无法访问百度等其他页面" class="headerlink" title="电脑使用 charles 无法访问百度等其他页面"></a>电脑使用 charles 无法访问百度等其他页面</h3><p>黑名单和白名单设置</p>
<ol>
<li>打开 charles, 选择 Tools -&gt; Block List | Allow List( 部分版本为 White List)<br><img data-src="/images/charles-8.png" alt="charles-8"></li>
<li>此配置为黑名单和白名单设置<br><img data-src="/images/charles-9.jpg" alt="charles-9"></li>
</ol>
<h3 id="手机微信扫码后显示白屏"><a href="#手机微信扫码后显示白屏" class="headerlink" title="手机微信扫码后显示白屏"></a>手机微信扫码后显示白屏</h3><ul>
<li>手机未安装 charles 证书会显示白屏</li>
<li>其他部分浏览器会在 地址栏 中出现非安全链接的提示图标</li>
</ul>
<h3 id="手机卸载安装的-charles-证书"><a href="#手机卸载安装的-charles-证书" class="headerlink" title="手机卸载安装的 charles 证书"></a>手机卸载安装的 charles 证书</h3><ol>
<li>打开手机 设置 -&gt; 安全 -&gt; 更多安全设置 -&gt; 加密和凭据 -&gt; 用户凭据</li>
<li>根据安装手机证书时填写的证明名称找到指定项, 点击后选择 “删除”</li>
</ol>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>charles</tag>
      </tags>
  </entry>
  <entry>
    <title>EventSource</title>
    <url>/2024/02/9e4187fea759/</url>
    <content><![CDATA[<h2 id="EventSource"><a href="#EventSource" class="headerlink" title="EventSource"></a>EventSource</h2><blockquote>
<p>当不使用 HTTP/2 时, 服务器发送事件(SSE)受到打开连接数(6)的限制, 这个限制是针对浏览器的. 每个浏览器的所有标签页中对相同域名的连接数最多支持 6 个</p>
</blockquote>
<blockquote>
<p>当使用 HTTP/2 时, 最大并发 HTTP 流的数量是由服务器和客户端协商的(默认为 100)</p>
</blockquote>
<p>Web 内容与服务器发送事件通信的接口, 通信方向是单向的, 数据消息只能从服务器发送到客户端. 如果接收消息中有一个 event 字段, 触发的事件与 event 字段的值相同, 如果不存在 event 字段, 则将触发通用的 message 事件</p>
<ul>
<li>url, 表示远程资源的位置</li>
<li>configuration, 可选, 一个对象<ul>
<li>withCredentials, 标识 CORS 是否包含凭据, 默认为 false</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sse = <span class="keyword">new</span> <span class="title class_">EventSource</span>(url, configuration);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没有 event 字段时触发</span></span><br><span class="line"><span class="comment"> * event: message</span></span><br><span class="line"><span class="comment"> * data: user data</span></span><br><span class="line"><span class="comment"> * id: someid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sse.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 触发 notice 事件回调</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * event: notice</span></span><br><span class="line"><span class="comment"> * data: useful data</span></span><br><span class="line"><span class="comment"> * id: someid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sse.<span class="title function_">addEventListener</span>(<span class="string">&#x27;notice&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(evt);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><ul>
<li>readyState, 标识连接状态的数字<ul>
<li>CONNECTING（0）</li>
<li>OPEN（1）</li>
<li>CLOSED（2）</li>
</ul>
</li>
<li>url, 表示远程资源的位置的字符串</li>
<li>withCredentials, 标识是否使用跨域资源共享(CORS)凭据来实例化</li>
</ul>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ul>
<li>close(), 关闭链接, 并将 readyState 属性设置为 CLOSED</li>
</ul>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul>
<li>error, 连接失败时触发</li>
<li>message, 接收到数据时触发</li>
<li>open, 连接打开时触发</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sse = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="string">&#x27;/api/v1/sse&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这将仅监听类似下面的事件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * event: notice</span></span><br><span class="line"><span class="comment"> * data: useful data</span></span><br><span class="line"><span class="comment"> * id: someid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sse.<span class="title function_">addEventListener</span>(<span class="string">&#x27;notice&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 同理，以下代码将监听具有字段 `event: update` 的事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sse.<span class="title function_">addEventListener</span>(<span class="string">&#x27;update&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * “message”事件是一个特例，因为它可以捕获没有 event 字段的事件，</span></span><br><span class="line"><span class="comment"> * 以及具有特定类型 `event：message` 的事件。</span></span><br><span class="line"><span class="comment"> * 它不会触发任何其他类型的事件。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sse.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebAPI</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Element.insert*</title>
    <url>/2023/07/ab14d13f34d4/</url>
    <content><![CDATA[<h3 id="Element-insertAdjacentElement-position-element"><a href="#Element-insertAdjacentElement-position-element" class="headerlink" title="Element.insertAdjacentElement(position, element)"></a>Element.insertAdjacentElement(position, element)</h3><p>将一个给定的元素节点插入到相对于被调用元素的给定的一个位置, 执行成功返回插入的元素, 失败则返回 null</p>
<ul>
<li>position 表示相对于该元素的位置<ul>
<li>‘beforebegin’ 在该元素本身的前面</li>
<li>‘afterbegin’ 只在该元素中, 在该元素中的第一个子元素前面</li>
<li>‘beforeend’ 只在该元素中, 在该元素中的最后一个子元素的后面</li>
<li>‘afterend’ 在该元素本身的后面</li>
</ul>
</li>
<li>element 要插入的元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- beforebegin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- afterbegin --&gt;</span></span><br><span class="line">  foo</span><br><span class="line">  <span class="comment">&lt;!-- beforeend --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- afterend --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 只有当节点处于 DOM 树中且有一个父节点时 beforebegin 和 afterend 才会生效</span></span></span><br><span class="line"><span class="language-javascript">  beforeBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tempDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    tempDiv.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="title function_">randomColor</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (activeElem) &#123;</span></span><br><span class="line"><span class="language-javascript">      activeElem.<span class="title function_">insertAdjacentElement</span>(<span class="string">&#x27;beforebegin&#x27;</span>, tempDiv);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setListener</span>(tempDiv);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  afterBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> tempDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    tempDiv.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="title function_">randomColor</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (activeElem) &#123;</span></span><br><span class="line"><span class="language-javascript">      activeElem.<span class="title function_">insertAdjacentElement</span>(<span class="string">&#x27;afterend&#x27;</span>, tempDiv);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setListener</span>(tempDiv);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Element-insertAdjacentHTML-position-text"><a href="#Element-insertAdjacentHTML-position-text" class="headerlink" title="Element.insertAdjacentHTML(position, text)"></a>Element.insertAdjacentHTML(position, text)</h3><p>将指定的文本解析为 Element 元素, 并将结果插入到 DOM 树中的指定位置. 它不会重新解析它正在使用的元素, 因此不会破坏元素内的现有元素, 这避免了额外的序列化步骤, 使其比直接使用 innerHTML 操作更快</p>
<ul>
<li>position 表示插入内容相对于元素的位置<ul>
<li>‘beforebegin’ 在该元素本身的前面</li>
<li>‘afterbegin’ 只在该元素中, 在该元素中的第一个子元素前面</li>
<li>‘beforeend’ 只在该元素中, 在该元素中的最后一个子元素的后面</li>
<li>‘afterend’ 在该元素本身的后面</li>
</ul>
</li>
<li>text 被解析为 HTML 或 XML 元素并插入到 DOM 树中的 DOMString</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // 只有当节点处于 DOM 树中且有一个父节点时 beforebegin 和 afterend 才会生效</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // 原为 <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  var d1 = document.getElementById(&#x27;one&#x27;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  d1.insertAdjacentHTML(&#x27;afterend&#x27;, &#x27;<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // 此时，新结构变成：</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Element-insertAdjacentText-position-element"><a href="#Element-insertAdjacentText-position-element" class="headerlink" title="Element.insertAdjacentText(position, element)"></a>Element.insertAdjacentText(position, element)</h3><p>将一个给定的文本节点插入到相对于被调用元素的给定的一个位置</p>
<ul>
<li>position 表示相对于该元素的位置<ul>
<li>‘beforebegin’ 在该元素本身的前面</li>
<li>‘afterbegin’ 只在该元素中, 在该元素中的第一个子元素前面</li>
<li>‘beforeend’ 只在该元素中, 在该元素中的最后一个子元素的后面</li>
<li>‘afterend’ 在该元素本身的后面</li>
</ul>
</li>
<li>element 被插入的文本节点的 DOMString</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 只有当节点处于 DOM 树中且有一个父节点时 beforebegin 和 afterend 才会生效</span></span></span><br><span class="line"><span class="language-javascript">  beforeBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    para.<span class="title function_">insertAdjacentText</span>(<span class="string">&#x27;afterbegin&#x27;</span>, textInput.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  afterBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    para.<span class="title function_">insertAdjacentText</span>(<span class="string">&#x27;beforeend&#x27;</span>, textInput.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Element-replaceChildren"><a href="#Element-replaceChildren" class="headerlink" title="Element.replaceChildren()"></a>Element.replaceChildren()</h3><p>将多个 Node 对象替换为该节点的后代集合</p>
<h3 id="Element-replaceWith"><a href="#Element-replaceWith" class="headerlink" title="Element.replaceWith()"></a>Element.replaceWith()</h3><p>将多个 Node 对象或字符串对象替换该节点父节点下的子节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  div.<span class="title function_">appendChild</span>(p);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  p.<span class="title function_">replaceWith</span>(span);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">outerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// &quot;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebAPI</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-下</title>
    <url>/2022/04/2c0c514706b8/</url>
    <content><![CDATA[<h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><p>Docker 网络架构源自一种叫作容器网络模型(CNM)的方案, 该方案是开源的并且支持插接式连接</p>
<p>Libnetwork 是 Docker 对 CNM 的一种实现, 提供了 Docker 核心网络架构的全部功能. 不同的驱动可以通过插拔的方式接入 Libnetwork 来提供定制化的网络拓扑</p>
<p>CNM 定义了 3 个基本要素：沙盒(Sandbox)、终端(Endpoint)和网络(Network)</p>
<ul>
<li>沙盒是一个独立的网络栈, 其中包括以太网接口、端口、路由表以及 DNS 配置</li>
<li>终端就是虚拟网络接口。就像普通网络接口一样，终端主要职责是负责创建连接. 在 CNM 中, 终端负责将沙盒连接到网络</li>
<li>网络是 802.1d 网桥(类似大家熟知的交换机)的软件实现. 因此, 网络就是需要交互的终端的集合, 并且终端之间相互独立</li>
</ul>
<p>docker 网络采用 veth-pair 技术, 每次启动容器时会自动创建一对虚拟网络设备接口, 一端连着网络协议栈, 一端彼此相连, 停止容器时自动删除, docker0 网卡作为中间的桥梁, 常见的网络模式包含 bridge, host, none, container, overlay 等.</p>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos01 centos /bin/bash</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos02 centos /bin/bash</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 08:00:27:5f:bb:e6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a00:27ff:fe5f:bbe6/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:95:38:bb:e7 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:95ff:fe38:bbe7/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">21: veth8d4dd5d@if20: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 1a:9d:58:47:ed:41 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::189d:58ff:fe47:ed41/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">25: veth60f8b26@if24: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 9a:48:44:23:44:18 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">    inet6 fe80::9848:44ff:fe23:4418/64 scope <span class="built_in">link</span></span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<h3 id="veth-pair"><a href="#veth-pair" class="headerlink" title="veth-pair"></a>veth-pair</h3><p>veth-pair 就是一对的虚拟设备接口，和 tap/tun 设备不同的是，它都是成对出现的。一端连着协议栈，一端彼此相连着. 由于它的这个特性，常常被用于构建虚拟网络拓扑。例如连接两个不同的网络命名空间(netns)，连接 docker 容器，连接网桥(Bridge)等</p>
<p><img data-src="/images/docker-2.png" alt="docker-2"></p>
<h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a><a href="https://docs.docker.com/network/">网络模式</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">2cad59b7f47d   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">1db6eddeb99f   host      host      <span class="built_in">local</span></span><br><span class="line">b2f23805b5e5   none      null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure>

<ul>
<li>bridge 桥接模式, 默认</li>
<li>host 和宿主机共享网络</li>
<li>none 不配置网络</li>
<li>container 容器内网络连通(缺点较多)</li>
</ul>
<p><img data-src="/images/docker-4.png" alt="docker-4"></p>
<h4 id="bridge-模式"><a href="#bridge-模式" class="headerlink" title="bridge 模式"></a>bridge 模式</h4><p>Docker 容器默认使用的网络模式, Docker 为每个容器创建一个虚拟网桥, 并将每个容器连接到该虚拟网桥上, 容器之间通过虚拟网桥进行通信</p>
<ul>
<li>link 使用参数方式添加连接到另一个容器，不再推荐使用<ul>
<li>自定义网络 不适用 docker0</li>
<li>docker0 不支持容器名别名连接访问</li>
</ul>
</li>
<li>network 自定义网络模式</li>
</ul>
<p>桥接模式一般使用于单机模式</p>
<ul>
<li>默认的桥接网络模式 <code>docker0</code> 不支持通过 Docker DNS 服务进行域名解析</li>
<li>自定义的桥接网络模式可以支持, 具体例子可见下方的 <a href="#zidingyiwangluomoshi">自定义网络模式</a></li>
</ul>
<h4 id="host-模式"><a href="#host-模式" class="headerlink" title="host 模式"></a>host 模式</h4><p>容器不会获得一个独立的 Network Namespace, 而是和宿主机共享 IP 地址和端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run ... --network host ...</span><br></pre></td></tr></table></figure>

<h4 id="none-模式"><a href="#none-模式" class="headerlink" title="none 模式"></a>none 模式</h4><p>禁用网络功能, 不会为 docker 容器配置任何网络配置, 容器无法访问外部网络, 也无法被外部网络访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run ... --network none ...</span><br></pre></td></tr></table></figure>

<h4 id="container-模式"><a href="#container-模式" class="headerlink" title="container 模式"></a>container 模式</h4><p>新创建的容器不会创建自己的网卡和配置自己的 IP, 而是共享一个指定容器的 IP 和端口等</p>
<ul>
<li>--network 指定容器运行的网络模式, 默认为 docker0</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run ... centos02 --network centos01 ...</span><br></pre></td></tr></table></figure>

<h4 id="overlay-模式"><a href="#overlay-模式" class="headerlink" title="overlay 模式"></a>overlay 模式</h4><p>将多个 docker 守护进程连接起来, 使 swarm 服务之间能够互相通信, 一般用于 swarm 集群</p>
<h3 id="容器通信"><a href="#容器通信" class="headerlink" title="容器通信"></a>容器通信</h3><h4 id="借助-docker0-路由功能"><a href="#借助-docker0-路由功能" class="headerlink" title="借助 docker0 路由功能"></a>借助 docker0 路由功能</h4><ul>
<li>自定义网络 不适用 docker0</li>
<li>此方式需要查看容器的 ip 信息</li>
<li>docker0 <strong>不支持</strong> 容器名 <strong>别名</strong> 连接访问</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 centos01 的 ip 信息</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos01 ip addr</span></span><br><span class="line">... 172.17.0.2</span><br><span class="line"><span class="comment"># 查看 centos02 的 ip 信息</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos02 ip addr</span></span><br><span class="line">... 172.17.0.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos01 ping centos02 只能通过 ip 测试</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos01 ping 172.17.0.3</span></span><br><span class="line">PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.065 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.047 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.041 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=4 ttl=64 time=0.042 ms</span><br><span class="line">--- 172.17.0.3 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3081ms</span><br><span class="line">rtt min/avg/max/mdev = 0.041/0.048/0.065/0.012 ms</span><br></pre></td></tr></table></figure>

<h4 id="link-参数方式"><a href="#link-参数方式" class="headerlink" title="--link 参数方式"></a>--link 参数方式</h4><p>本质上是在容器内部 hosts 文件中添加 ip 映射, 只能单向通信</p>
<p>在未知对方容器 ip 信息的情况下不能通信</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 centos02 连接到 centos01</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos02 --link centos01 centos /bin/bash</span></span><br><span class="line"><span class="comment"># centos02 ping centos01</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos02 ping centos01</span></span><br><span class="line">PING centos01 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from centos01 (172.17.0.2): icmp_seq=1 ttl=64 time=0.076 ms</span><br><span class="line">64 bytes from centos01 (172.17.0.2): icmp_seq=2 ttl=64 time=0.044 ms</span><br><span class="line">--- centos01 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.044/0.060/0.076/0.016 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 centos02 的 hosts</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos02 cat /etc/hosts</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.2      centos01 ab2b4ae51950</span><br><span class="line">172.17.0.3      8f49dabd3c2c</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos01 ping centos02 失败</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos01 ping centos02</span></span><br><span class="line">ping: centos02: Name or service not known</span><br></pre></td></tr></table></figure>

<h3 id="自定义网络模式"><a href="#自定义网络模式" class="headerlink" title="自定义网络模式  "></a>自定义网络模式 <em id="zidingyiwangluomoshi"></em> <!-- markdownlint-disable-line --></h3><ul>
<li>ls 显示所有网络模式状态</li>
<li>create 创建网络模式</li>
<li>inspect 查看指定网络模式的信息</li>
<li>rm 删除网络模式</li>
<li>prune 删除所有未使用的网络模式</li>
<li>connect 连接容器到另一个网络</li>
<li>disconnect 断开容器到另一个网络的连接</li>
</ul>
<h4 id="overlay-模式-1"><a href="#overlay-模式-1" class="headerlink" title="overlay 模式 "></a>overlay 模式 <!-- markdownlint-disable-line --></h4><ul>
<li>docker 运行在 swarm 模式</li>
<li>使用键值存储的 docker 主机集群</li>
</ul>
<h4 id="bridge-模式-1"><a href="#bridge-模式-1" class="headerlink" title="bridge 模式 "></a>bridge 模式 <!-- markdownlint-disable-line --></h4><ul>
<li>--driver 网络模式, 默认 bridge</li>
<li>--subnet CIDR 格式的子网网段</li>
<li>--gateway 子网的 IPV4 或者 IPV6 网关</li>
<li>--config-from 基于配置文件创建一个网络</li>
<li>--ip-range 设置自网络的 ip 范围</li>
<li>--label 设置网络的元数据</li>
</ul>
<ol>
<li>创建自定义网络</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker network create --subnet 192.168.0.0/16 --gateway 192.168.0.1 my-docker-net</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME            DRIVER    SCOPE</span><br><span class="line">2cad59b7f47d   bridge          bridge    <span class="built_in">local</span></span><br><span class="line">1db6eddeb99f   host            host      <span class="built_in">local</span></span><br><span class="line">b97686d7890c   my-docker-net   bridge    <span class="built_in">local</span></span><br><span class="line">b2f23805b5e5   none            null      <span class="built_in">local</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看宿主机 ip 相关信息 <!-- markdownlint-disable-line --></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 08:00:27:d3:b5:<span class="built_in">cd</span> brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic eth0</span><br><span class="line">       valid_lft 83646sec preferred_lft 83646sec</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:71:92:ec:8c brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: br-b97686d7890c: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:58:8d:a4:42 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.0.1/16 brd 192.168.255.255 scope global br-b97686d7890c</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>基于自定义网络模式创建容器 <!-- markdownlint-disable-line --></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name my-docker-net01 --network my-docker-net centos /bin/bash</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name my-docker-net02 --network my-docker-net centos /bin/bash</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看自定义网络信息 <!-- markdownlint-disable-line --></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker network inspect my-docker-net</span></span><br><span class="line">[&#123;</span><br><span class="line">  <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-docker-net&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;b97686d7890ce2da3ce1e53927a4f5c02f898f18e22d9c4766a5e761d4275568&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-04-08T10:52:46.474584772Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">  <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&quot;Config&quot;</span>: [&#123; <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;192.168.0.0/16&quot;</span>, <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;192.168.0.1&quot;</span> &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;ConfigFrom&quot;</span>: &#123;<span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">  <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;ad9cdd7a0edf2c76710388fcc71de4df129b8fddd9d5e816795689022a62b141&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-docker-net01&quot;</span>,</span><br><span class="line">      <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;e97619b1e847dc2a1e86fc9820ddfcd06a2e8d1d2685aa74d7f4bf850103bcfa&quot;</span>,</span><br><span class="line">      <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:02&quot;</span>,</span><br><span class="line">      <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.2/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;d0f5bf60fb85ef35e3ca14c357fb2a6c0ab74c4d1c7679311a0afa8c41b3af79&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-docker-net02&quot;</span>,</span><br><span class="line">      <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;1158ee5f27aaaac418cf63ab9e16a92d83d0fadb2af4c7943800628be8cf9ce3&quot;</span>,</span><br><span class="line">      <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:03&quot;</span>,</span><br><span class="line">      <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.3/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Options&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>自定义网络模式容器通信 <!-- markdownlint-disable-line --></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker exec -it my-docker-net01 ping my-docker-net02</span></span><br><span class="line">PING my-docker-net02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from my-docker-net02.my-docker-net (192.168.0.3): icmp_seq=1 ttl=64 time=0.110 ms</span><br><span class="line">64 bytes from my-docker-net02.my-docker-net (192.168.0.3): icmp_seq=2 ttl=64 time=0.046 ms</span><br><span class="line">64 bytes from my-docker-net02.my-docker-net (192.168.0.3): icmp_seq=3 ttl=64 time=0.046 ms</span><br><span class="line">64 bytes from my-docker-net02.my-docker-net (192.168.0.3): icmp_seq=4 ttl=64 time=0.046 ms</span><br><span class="line">^C</span><br><span class="line">--- my-docker-net02 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3043ms</span><br><span class="line">rtt min/avg/max/mdev = 0.046/0.062/0.110/0.027 ms</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it my-docker-net02 ping my-docker-net01</span></span><br><span class="line">PING my-docker-net01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from my-docker-net01.my-docker-net (192.168.0.2): icmp_seq=1 ttl=64 time=0.045 ms</span><br><span class="line">64 bytes from my-docker-net01.my-docker-net (192.168.0.2): icmp_seq=2 ttl=64 time=0.095 ms</span><br><span class="line">64 bytes from my-docker-net01.my-docker-net (192.168.0.2): icmp_seq=3 ttl=64 time=0.109 ms</span><br><span class="line">64 bytes from my-docker-net01.my-docker-net (192.168.0.2): icmp_seq=4 ttl=64 time=0.047 ms</span><br><span class="line">^C</span><br><span class="line">--- my-docker-net01 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3061ms</span><br><span class="line">rtt min/avg/max/mdev = 0.045/0.074/0.109/0.028 ms</span><br></pre></td></tr></table></figure>

<h3 id="跨网络模式容器通信"><a href="#跨网络模式容器通信" class="headerlink" title="跨网络模式容器通信"></a>跨网络模式容器通信</h3><blockquote>
<p>自定义 bridge 和 docker0 结合使用</p>
</blockquote>
<ul>
<li>my-docker-net01 和 my-docker-net02 运行在 my-docker-net 自定义网络模式下</li>
<li>centos01 运行在 docker0 网络模式下</li>
</ul>
<p>原理: 自定义网络模式分配 ip 信息给连接到此网络的容器</p>
<ol>
<li>查看自定义网络模式信息</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker network inspect my-docker-net</span></span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;ad9cdd7a0edf2c76710388fcc71de4df129b8fddd9d5e816795689022a62b141&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-docker-net01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;52c0425c9b4274681f523e8a3ba7748dbc586ff80eafafa39897d577abb1edb6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:02&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.2/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;d0f5bf60fb85ef35e3ca14c357fb2a6c0ab74c4d1c7679311a0afa8c41b3af79&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-docker-net02&quot;</span>,</span><br><span class="line">    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;211d41485985263ca5131423b3784fec72a4923d21170212e4e311e569fe2d26&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:03&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.3/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建基于 docker0 容器</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos01 centos</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS        PORTS     NAMES</span><br><span class="line">e2a9d9f19bd3   centos    <span class="string">&quot;/bin/bash&quot;</span>   3 seconds ago   Up 1 second             centos01</span><br><span class="line">d0f5bf60fb85   centos    <span class="string">&quot;/bin/bash&quot;</span>   22 hours ago    Up 6 hours              my-docker-net02</span><br><span class="line">ad9cdd7a0edf   centos    <span class="string">&quot;/bin/bash&quot;</span>   22 hours ago    Up 6 hours              my-docker-net01</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>connect 命令连接容器到自定义网络 <!-- markdownlint-disable-line --></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network connect [OPTIONS] NETWORK CONTAINER</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用命令将不同网络模式中的容器加入到当前网络模式中</span></span><br><span class="line"><span class="comment"># 连接 centos01 到 自定义网络 my-docker-net</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker network connect my-docker-net centos01</span></span><br><span class="line"><span class="comment"># 查看 my-docker-net 自定义网络状态</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker network inspect my-docker-net</span></span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;ad9cdd7a0edf2c76710388fcc71de4df129b8fddd9d5e816795689022a62b141&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-docker-net01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;52c0425c9b4274681f523e8a3ba7748dbc586ff80eafafa39897d577abb1edb6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:02&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.2/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;d0f5bf60fb85ef35e3ca14c357fb2a6c0ab74c4d1c7679311a0afa8c41b3af79&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-docker-net02&quot;</span>,</span><br><span class="line">    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;211d41485985263ca5131423b3784fec72a4923d21170212e4e311e569fe2d26&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:03&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.3/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;e2a9d9f19bd318a5c3a9a488a170071b1ac68b3193d33118e691306189306f3e&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;centos01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;249d9dad83b236b0d565ee00e94c27d4c7d0008d660478a251d251367c92e772&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:04&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.4/16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 centos01 ip 信息</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos01 ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">      valid_lft forever preferred_lft forever</span><br><span class="line">9: eth0@if10: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">      valid_lft forever preferred_lft forever</span><br><span class="line">11: eth1@if12: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:c0:a8:00:04 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 192.168.0.4/16 brd 192.168.255.255 scope global eth1</span><br><span class="line">      valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>与自定义网络模式中的容器通信 <!-- markdownlint-disable-line --></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认网络模式中容器 ping 自定义网络模式中容器</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos01 ping my-docker-net01</span></span><br><span class="line">PING my-docker-net01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from my-docker-net01.my-docker-net (192.168.0.2): icmp_seq=1 ttl=64 time=0.060 ms</span><br><span class="line">64 bytes from my-docker-net01.my-docker-net (192.168.0.2): icmp_seq=2 ttl=64 time=0.056 ms</span><br><span class="line">^C</span><br><span class="line">--- my-docker-net01 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.056/0.058/0.060/0.002 ms</span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos01 ping my-docker-net02</span></span><br><span class="line">PING my-docker-net02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from my-docker-net02.my-docker-net (192.168.0.3): icmp_seq=1 ttl=64 time=0.049 ms</span><br><span class="line">64 bytes from my-docker-net02.my-docker-net (192.168.0.3): icmp_seq=2 ttl=64 time=0.115 ms</span><br><span class="line">64 bytes from my-docker-net02.my-docker-net (192.168.0.3): icmp_seq=3 ttl=64 time=0.044 ms</span><br><span class="line">^C</span><br><span class="line">--- my-docker-net02 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2026ms</span><br><span class="line">rtt min/avg/max/mdev = 0.044/0.069/0.115/0.033 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义网络模式中容器 ping 默认网络模式中容器</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it my-docker-net01 ping centos01</span></span><br><span class="line">PING centos01 (192.168.0.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from centos01.my-docker-net (192.168.0.4): icmp_seq=1 ttl=64 time=0.066 ms</span><br><span class="line">64 bytes from centos01.my-docker-net (192.168.0.4): icmp_seq=2 ttl=64 time=0.050 ms</span><br><span class="line">^C</span><br><span class="line">--- centos01 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1027ms</span><br><span class="line">rtt min/avg/max/mdev = 0.050/0.058/0.066/0.008 ms</span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it my-docker-net02 ping centos01</span></span><br><span class="line">PING centos01 (192.168.0.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from centos01.my-docker-net (192.168.0.4): icmp_seq=1 ttl=64 time=0.000 ms</span><br><span class="line">64 bytes from centos01.my-docker-net (192.168.0.4): icmp_seq=2 ttl=64 time=0.048 ms</span><br><span class="line">64 bytes from centos01.my-docker-net (192.168.0.4): icmp_seq=3 ttl=64 time=0.045 ms</span><br><span class="line">^C</span><br><span class="line">--- centos01 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2011ms</span><br><span class="line">rtt min/avg/max/mdev = 0.000/0.031/0.048/0.021 ms</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>断开容器到另一个网络的连接 <!-- markdownlint-disable-line --></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 断开自定义网络和 centos01 的连接</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker network disconnect my-docker-net centos01</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos01 ping my-docker-net01</span></span><br><span class="line">ping: my-docker-net01: Name or service not known</span><br></pre></td></tr></table></figure>

<h3 id="容器与外网互联"><a href="#容器与外网互联" class="headerlink" title="容器与外网互联"></a>容器与外网互联</h3><ul>
<li>容器访问外网使用宿主机 <code>NAT</code> 转换 IP</li>
<li>外网访问容器使用 <code>docker proxy</code> 代理监听宿主机容端口映射容器端口</li>
</ul>
<p><img data-src="/images/docker-6.jpg" alt="docker-6"></p>
<h3 id="跨主机容器通信"><a href="#跨主机容器通信" class="headerlink" title="跨主机容器通信"></a>跨主机容器通信</h3><h2 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h2><h3 id="部署-nginx"><a href="#部署-nginx" class="headerlink" title="部署 nginx"></a>部署 nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost workspace]<span class="comment">#</span></span><br><span class="line"><span class="comment"># 创建宿主机挂载目录 nginx/conf.d nginx/log html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 nginx 配置文件 nginx/conf.d/default.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  location /&#123;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 html/index.html 文件</span></span><br><span class="line"></span><br><span class="line">[root@localhost workspace]<span class="comment"># docker run -id --name c_nginx -p 80:80 \</span></span><br><span class="line">&gt; -v <span class="variable">$&#123;PWD&#125;</span>/nginx/conf.d:/etc/nginx/conf.d \</span><br><span class="line">&gt; -v <span class="variable">$&#123;PWD&#125;</span>/nginx/log:/var/log/nginx \</span><br><span class="line">&gt; -v <span class="variable">$&#123;PWD&#125;</span>/html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure>

<h3 id="部署-mysql"><a href="#部署-mysql" class="headerlink" title="部署 mysql"></a>部署 mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost workspace]</span><br><span class="line"><span class="comment"># 创建宿主机挂载目录 mysql/db mysql/log mysql/conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库配置文件 touch /mysql/conf/my.cnf</span></span><br><span class="line"><span class="comment"># my.cnf</span></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=<span class="string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span></span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">[root@localhost workspace]<span class="comment"># docker run -tid -p 3306:3306 --name c_mysql \</span></span><br><span class="line">&gt; -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">&gt; -v <span class="variable">$&#123;PWD&#125;</span>/mysql/db:/var/lib/mysql \</span><br><span class="line">&gt; -v <span class="variable">$&#123;PWD&#125;</span>/mysql/log:/var/log/mysql \</span><br><span class="line">&gt; -v <span class="variable">$&#123;PWD&#125;</span>/mysql/conf:/etc/mysql \</span><br><span class="line">&gt; mysql:5.7</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%char%&#x27;; # 查看字符集</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost workspace]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS             PORTS                                                  NAMES</span><br><span class="line">6b6d19282ca8   nginx       <span class="string">&quot;/docker-entrypoint.…&quot;</span>   27 minutes ago   Up 27 minutes      0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp                      c_nginx</span><br><span class="line">c136f18229c3   mysql:5.7   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   15 hours ago     Up About an hour   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   c_mysql</span><br></pre></td></tr></table></figure>

<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><ul>
<li>Docker Compose 以服务为单位, 将为每一个服务部署一个容器</li>
<li>默认以 <code>应用目录名\_服务名\_数字</code> 方式作为容器名称</li>
<li>默认以 <code>应用目录名\_数据卷名</code> 方式作为数据卷名称</li>
<li>默认以 <code>应用目录名\_网络名</code> 方式作为网络名称</li>
</ul>
<p>Docker Compose 是定义和运行多容器 Docker 应用程序的工具, 运行部分命令时需要在 <code>docker-compose.yml</code> 文件所在目录中, 以 <code>应用目录名\_服务名\_数字</code> 编号为规则命名容器, 配置文件使用 yaml 语法, yaml 是一个可读性高，用来表达数据序列化的格式.</p>
<p>yaml 文件中不能使用 tab 缩进, 只能使用空格</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动指定服务, 不加参数则默认启动所有服务</span></span><br><span class="line">docker-compose -f -p -c --env-file up [service_name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下的命令不带服务名称则默认对所有服务执行相同操作</span></span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>-f, --file 指定配置文件</li>
<li>-p, --project-name 指定项目名称</li>
<li>--project-directory 指定项目工作目录</li>
<li>-c, --context 指定上下文环境名称</li>
<li>--env-file 指定环境变量配置文件</li>
</ul>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul>
<li><p>version 查看版本信息</p>
</li>
<li><p>build 构建服务</p>
</li>
<li><p>config 验证 docker-compose 配置文件</p>
</li>
<li><p>cp 在容器和本地文件系统之间拷贝文件</p>
</li>
<li><p>events 接收一个来自容器的真实的事件</p>
</li>
<li><p>exec 在运行的容器中打开命令行</p>
</li>
<li><p>down 停止并移除资源</p>
</li>
<li><p>kill 关闭容器</p>
</li>
<li><p>top 显示运行的进程信息</p>
</li>
<li><p>images 查看所有镜像</p>
</li>
<li><p>ls 列出正在运行的 compose 项目</p>
</li>
<li><p>logs 查看容器日志</p>
</li>
<li><p>ps 查看所有容器</p>
</li>
<li><p>port 查看公共端口绑定信息</p>
</li>
<li><p>pull 拉取服务镜像</p>
</li>
<li><p>push 推送服务镜像</p>
</li>
<li><p>start 启动服务</p>
</li>
<li><p>stop 停止服务</p>
</li>
<li><p>restart 重启服务</p>
</li>
<li><p>rm 移除已经停止的容器</p>
</li>
<li><p>run 运行命令</p>
</li>
<li><p>pause 暂停服务</p>
</li>
<li><p>unpasue 取消暂停服务</p>
</li>
<li><p>create 创建容器, deprecated, Use the <code>up</code> command with <code>--no-start</code> instead</p>
<ul>
<li>--build 启动容器之前构建镜像</li>
<li>--no-build 不构建镜像即使镜像不存在</li>
<li>--force-recreate 即使配置项或镜像没有改变也要重新创建容器</li>
<li>--no-recreate 如果容器存在则不创建新的容器</li>
<li>--scale 调整服务实例数量, 并覆盖配置文件中的 scale 配置</li>
</ul>
</li>
<li><p>up 创建服务并启动容器</p>
<ul>
<li>-f 指定配置文件</li>
<li>-d, --detach 后台运行容器</li>
<li>--attach 连接服务的输出</li>
<li>--no-attach 不连接服务的输出</li>
<li>--build 启动容器之前构建镜像</li>
<li>--no-build 不构建镜像即使镜像不存在</li>
<li>--no-start 创建服务之后不启动它</li>
<li>--no-deps 不启动关联的服务</li>
<li>--scale 调整服务实例数量, 覆盖配置文件中的 scale 配置</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker-compose up service_id # 启动指定服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整指定服务实例数量, 先去掉 docker-compose.yml 配置文件 service 指定的端口, 在单机中会出现端口占用问题</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker compose up --scale web=5 -d</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">3.9</span>   <span class="comment"># 版本</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span>   <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">&#x27;./web&#x27;</span>  <span class="comment"># 指定构建 web 服务的镜像的上下文环境目录</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span>  <span class="comment"># 指定构建镜像的配置文件名称</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;5000:5000&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;0.0.0.0:80:80/tcp&#x27;</span> <span class="comment"># 指定 ip 地址和协议, 或修改 /etc/docker/daemon.json 配置项&quot;ipv6&quot;:false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">host_ip:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span>   <span class="comment"># 配置容器目录权限</span></span><br><span class="line">    <span class="attr">read_only:</span> <span class="literal">true</span>    <span class="comment"># 开启容器文件系统只读模式</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>    <span class="comment"># 定义容器重启模式 &quot;no&quot; | always | on-failure | unless-stopped</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">my-web</span>  <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="attr">env_file:</span> <span class="string">.env</span> <span class="comment"># 环境变量配置文件</span></span><br><span class="line">    <span class="attr">environment:</span>  <span class="comment"># 设置容器内环境变量</span></span><br><span class="line">      <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">      <span class="attr">SHOW:</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">USER_INPUT:</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&#x27;bundle&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;thin&#x27;</span>, <span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;3000&#x27;</span>]  <span class="comment"># 覆盖镜像配置文件(Dockerfile)中的CMD指令</span></span><br><span class="line">    <span class="attr">entrypoint:</span>   <span class="comment"># 覆盖镜像配置文件(Dockerfile)中的 ENTRYPOINT 指令</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">php</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">vendor/bin/phpunit</span></span><br><span class="line">    <span class="attr">external_links:</span>   <span class="comment"># 将服务容器连接到 compose 应用管理以外的服务, 作用同 links</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">database:mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">database:postgresql</span></span><br><span class="line">    <span class="attr">extra_hosts:</span>  <span class="comment"># 添加主机 ip 映射关系到容器网络接口配置中(/etc/hosts)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;somehost:162.242.195.82&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;otherhost:50.31.209.229&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 挂载数据卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">db-data</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/data</span></span><br><span class="line">        <span class="attr">read_only:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">volume:</span></span><br><span class="line">          <span class="attr">nocopy:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">tempfs:</span></span><br><span class="line">          <span class="attr">size:</span> <span class="number">1024</span></span><br><span class="line">          <span class="attr">mode:</span> <span class="number">755</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">bind</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">/home/workspace</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/home/workVolume</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/workspace:/var/workspace</span>  <span class="comment"># 定义指定路径数据卷</span></span><br><span class="line">    <span class="attr">tmpfs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/run</span>  <span class="comment"># 挂载容器内临时文件系统</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tmp</span></span><br><span class="line">    <span class="attr">volumes_from:</span>     <span class="comment"># 挂载共享数据卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">service_name</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">service_name:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">container:container_name</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">container:container_name:rw</span></span><br><span class="line">    <span class="attr">networks:</span>  <span class="comment"># 自定义网络模式</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my-web-network</span></span><br><span class="line">    <span class="attr">depends_on:</span>  <span class="comment"># 服务启动依赖</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">deploy:</span>  <span class="comment"># 部署</span></span><br><span class="line">      <span class="comment"># 外部客户端连接服务的方式</span></span><br><span class="line">      <span class="comment"># vip(Virtual IP) 为服务分配虚拟 IP, 客户端使用虚拟 IP 连接</span></span><br><span class="line">      <span class="comment"># dnsrr 平台配置 dns 条目, 使用服务名称查询 IP 地址列表连接</span></span><br><span class="line">      <span class="attr">endpoint_mode:</span> <span class="string">vip</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span> <span class="comment"># 服务运行模式, global | replicaated(default)</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">6</span> <span class="comment"># 副本</span></span><br><span class="line">      <span class="attr">restart_policy:</span> <span class="comment"># 服务重启策略, 如果缺失, compose 会使用服务 restart 项</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">5s</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">window:</span> <span class="string">120s</span></span><br><span class="line">      <span class="attr">rollback_config:</span> <span class="comment"># 服务回滚设置</span></span><br><span class="line">      <span class="attr">update_config:</span> <span class="comment"># 服务升级设置</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span></span><br><span class="line">    <span class="attr">dns:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>  <span class="comment"># 自定义网络的 DNS 服务器</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">common.yml</span>   <span class="comment"># 当前配置中扩展另一个服务</span></span><br><span class="line">    <span class="attr">labels:</span>    <span class="comment"># 添加容器元数据</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;com.example.description=Accounting webapp&#x27;</span></span><br><span class="line">  <span class="attr">redis:</span> <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">volumes:</span>   <span class="comment"># 挂载数据卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/workspace</span>   <span class="comment"># 定义匿名数据卷</span></span><br><span class="line">    <span class="attr">networks:</span>   <span class="comment"># 自定义网络模式</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my-web-network</span></span><br><span class="line">    <span class="attr">links:</span>    <span class="comment"># 定义网络连接另一个服务的容器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db:mysql</span>   <span class="comment"># 可以直接使用 服务名, 或者使用 服务名:别名 方式</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;3306:3306&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">test</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">test123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dbata:/var/lib/mysql</span>   <span class="comment"># 定义具名数据卷</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my-web-network</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">dbData:</span>   <span class="comment"># 声明卷名, compose 自动创建该卷名并会添加项目名前缀</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;my-app-data&#x27;</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">front-tier:</span></span><br><span class="line">  <span class="attr">back-tier:</span></span><br><span class="line">  <span class="attr">my-web-network:</span>   <span class="comment"># 声明自定义网络模式, compose 自动创建该网络并会添加项目名前缀</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">enable_ipv6:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">configs:</span> <span class="comment"># 允许服务调整其行为而无须重新构建 docker 镜像</span></span><br><span class="line">  <span class="attr">http_config:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./httpd.conf</span></span><br><span class="line"><span class="attr">secrets:</span> <span class="comment"># 针对敏感数据的配置</span></span><br><span class="line">  <span class="attr">server-certificate:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./server.cert</span></span><br><span class="line">  <span class="attr">token:</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="string">&#x27;OAUTH_TOKEN&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="version-支持的-Docker-引擎版本"><a href="#version-支持的-Docker-引擎版本" class="headerlink" title="version 支持的 Docker 引擎版本"></a>version 支持的 Docker 引擎版本</h4><h4 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h4><ul>
<li><p>使用路径方式挂载数据卷</p>
</li>
<li><p>使用卷名方式挂载数据卷, 需要在 <code>一级配置项</code> 中声明, compose 会自动创建以项目名为前缀的卷名, 如果不需要卷名前缀, 则使用 <code>external: true</code> 指定卷名, 但是需要手动创建该卷名</p>
</li>
</ul>
<h4 id="depends-on-服务启动依赖"><a href="#depends-on-服务启动依赖" class="headerlink" title="depends_on 服务启动依赖"></a>depends_on 服务启动依赖</h4><ul>
<li>当前服务启动的依赖优先于当前服务启动</li>
<li>当前服务关闭优先于当前服务的依赖关闭</li>
</ul>
<h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Swarm 是 Docker 官方提供的一款集群管理工具, 其主要作用是把若干台 Docker 主机抽象为一个整体, 并且通过一个入口统一管理这些 Docker 主机上的各种 Docker 资源</p>
<p>从集群角度来说, 一个 Swarm 由一个或多个 Docker 节点组成. 这些节点可以是物理服务器、虚拟机、树莓派(Raspberry Pi)或云实例. 唯一的前提就是要求所有节点通过可靠的网络相连</p>
<p>节点会被配置为管理节点(Manager)或工作节点(Worker). 管理节点负责集群控制面(Control Plane), 进行诸如监控集群状态、分发任务至工作节点等操作. 工作节点接收来自管理节点的任务并执行.</p>
<p>Swarm 的配置和状态信息保存在一套位于所有管理节点上的分布式 etcd 数据库中. 该数据库运行于内存中, 并保持数据的最新状态. 关于该数据库最棒的是, 它几乎不需要任何配置, 作为 Swarm 的一部分被安装, 无须管理</p>
<ul>
<li>Swarm 和 Kubernetes 比较类似, 但是更加轻, 具有的功能也较 kubernetes 更少一些</li>
<li>Docker Swarm 包含两方面：一个企业级的 Docker 安全集群, 以及一个微服务应用编排引擎</li>
<li>Swarm 默认内置有加密的分布式集群存储(encrypted distributed cluster store)、加密网络(Encrypted Network)、公用 TLS(Mutual TLS)、安全集群接入令牌 Secure Cluster Join Token)以及一套简化数字证书管理的 PKI(Public Key Infrastructure). 我们可以自如地添加或删除节点</li>
<li>编排方面, Swarm 提供了一套丰富的 API 使得部署和管理复杂的微服务应用变得易如反掌. 通过将应用定义在声明式配置文件中, 就可以使用原生的 Docker 命令完成部署</li>
</ul>
<p><img data-src="/images/docker-7.gif" alt="docker-7"></p>
<h3 id="令牌格式"><a href="#令牌格式" class="headerlink" title="令牌格式"></a>令牌格式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PREFIX - VERSION - SWARM ID - TOKEN</span><br><span class="line"></span><br><span class="line">SWMTKN-1-5uqag7ddbx6jp9l273blxmda6308l5cn23487hbwsnw71w6dsh-eh4h7yhzchi0p6cy2ihg539jh</span><br></pre></td></tr></table></figure>

<ul>
<li>PREFIX 令牌前缀,便于区分 固定为 SWMTKN</li>
<li>VERSION Swarm 的版本信息</li>
<li>SWARM ID Swarm 认证信息的一个哈希值</li>
<li>TOKEN 标识管理节点还是工作节点的准入令牌</li>
</ul>
<h3 id="初始化-init"><a href="#初始化-init" class="headerlink" title="初始化 init"></a>初始化 init</h3><ul>
<li>--advertise-addr 指定其他节点用来连接到当前管理节点的 IP 和端口, 当节点上有多个 IP 时指定</li>
<li>--listen-addr 指定用于承载 Swarm 流量的 IP 和端口. 其设置通常与 <code>--advertise-addr</code> 相匹配, 但是当节点上有多个 IP 的时候,可用于指定具体某个 IP</li>
<li>--autolock 启用锁</li>
</ul>
<h4 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h4><ul>
<li>每个节点都需要安装 Docker, 并且能够与 Swarm 的其他节点通信</li>
</ul>
<p>需要在路由器和防火墙中开放如下端口</p>
<ul>
<li>2377/tcp: 用于客户端与 Swarm 进行安全通信</li>
<li>7946/tcp 与 7946/udp: 用于控制面 gossip 分发</li>
<li>4789/udp: 用于基于 VXLAN 的覆盖网络</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker swarm init --advertise-addr 192.168.1.2 --listen-addr 192.168.1.2</span></span><br><span class="line">Swarm initialized: current node (5r1q8c5jaawi9w1wd8yr7w3u2) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">  docker swarm <span class="built_in">join</span> --token SWMTKN-1-5uqag7ddbx6jp9l273blxmda6308l5cn23487hbwsnw71w6dsh-eh4h7yhzchi0p6cy2ihg539jh 192.168.1.2:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.</span><br></pre></td></tr></table></figure>

<h3 id="生成节点令牌"><a href="#生成节点令牌" class="headerlink" title="生成节点令牌"></a>生成节点令牌</h3><ul>
<li>join-token</li>
</ul>
<h4 id="生成管理节点令牌"><a href="#生成管理节点令牌" class="headerlink" title="生成管理节点令牌"></a>生成管理节点令牌</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker swarm join-token manager</span></span><br><span class="line">To add a manager to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">  docker swarm <span class="built_in">join</span> --token SWMTKN-1-5uqag7ddbx6jp9l273blxmda6308l5cn23487hbwsnw71w6dsh-58yur8457jq0ghy45qnvislbi 192.168.1.2:2377</span><br></pre></td></tr></table></figure>

<h4 id="生成工作节点令牌"><a href="#生成工作节点令牌" class="headerlink" title="生成工作节点令牌"></a>生成工作节点令牌</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker swarm join-token worker</span></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">  docker swarm <span class="built_in">join</span> --token SWMTKN-1-5uqag7ddbx6jp9l273blxmda6308l5cn23487hbwsnw71w6dsh-eh4h7yhzchi0p6cy2ihg539jh 192.168.1.2:2377</span><br></pre></td></tr></table></figure>

<h3 id="更新节点令牌"><a href="#更新节点令牌" class="headerlink" title="更新节点令牌"></a>更新节点令牌</h3><ul>
<li>--rotate</li>
</ul>
<h4 id="更新管理节点令牌"><a href="#更新管理节点令牌" class="headerlink" title="更新管理节点令牌"></a>更新管理节点令牌</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker swarm join-token --rotate manager</span></span><br></pre></td></tr></table></figure>

<h4 id="更新工作节点令牌"><a href="#更新工作节点令牌" class="headerlink" title="更新工作节点令牌"></a>更新工作节点令牌</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker swarm join-token --rotate worker</span></span><br></pre></td></tr></table></figure>

<h3 id="添加节点-join"><a href="#添加节点-join" class="headerlink" title="添加节点 join"></a>添加节点 join</h3><ul>
<li>--token</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker swarm join --token TOKEN HOST:PORT</span></span><br></pre></td></tr></table></figure>

<h4 id="添加管理节点"><a href="#添加管理节点" class="headerlink" title="添加管理节点"></a>添加管理节点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker swarm join --token SWMTKN-1-5uqag7ddbx6jp9l273blxmda6308l5cn23487hbwsnw71w6dsh-58yur8457jq0ghy45qnvislbi 192.168.1.2:2377</span></span><br></pre></td></tr></table></figure>

<h4 id="添加工作节点"><a href="#添加工作节点" class="headerlink" title="添加工作节点"></a>添加工作节点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker swarm join --token SWMTKN-1-5uqag7ddbx6jp9l273blxmda6308l5cn23487hbwsnw71w6dsh-eh4h7yhzchi0p6cy2ihg539jh 192.168.1.2:2377</span></span><br></pre></td></tr></table></figure>

<h3 id="移除节点"><a href="#移除节点" class="headerlink" title="移除节点"></a>移除节点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker swarm leave</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>FileSystemAccessAPI</title>
    <url>/2023/04/12766d614e53/</url>
    <content><![CDATA[<blockquote>
<p>目前仅在 chrome 86 (edge 86, opera 72)及以上版本支持, safari 和 firefox 暂时不支持</p>
</blockquote>
<p>允许 Web 应用程序从用户设备的本地文件系统中操作文件, 它为 Web 应用程序提供了更多的灵活性和功能, 使其更接近于本地应用程序的体验</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API">File System Access API</a> 遵循同源策略, 只允许 Web 应用程序在具有相同源的文件系统上进行操作, 当使用该 API 时, 会提示用户授权应用程序访问文件系统</p>
<ul>
<li>将文件从本地文件系统上传到 Web 应用程序</li>
<li>将 Web 应用程中的数据写入到本地文件系统中</li>
<li>在用户的本地文件系统中创建、重命名和删除文件</li>
<li>读取本地文件系统上的文件内容</li>
</ul>
<h3 id="FileSystemHandle接口"><a href="#FileSystemHandle接口" class="headerlink" title="FileSystemHandle接口"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/FileSystemHandle">FileSystemHandle</a>接口</h3><p>是 File System Access API 表示文件或目录条目的对象, 多个句柄可以代表同一个条目，通常情况下, 使用它的子接口 <code>FileSystemFileHandle</code> 和 <code>FileSystemDirectoryHandle</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 继承</span></span><br><span class="line"><span class="comment"> * FileSystemHandle</span></span><br><span class="line"><span class="comment"> *  &lt;- FileSystemFileHandle</span></span><br><span class="line"><span class="comment"> *  &lt;- FileSystemDirectoryHandle</span></span><br><span class="line"><span class="comment"> * FileSystemSyncAccessHandle</span></span><br><span class="line"><span class="comment"> * WritableStream</span></span><br><span class="line"><span class="comment"> *  &lt;- FileSystemWritableFileStream</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="FSH-实例属性"><a href="#FSH-实例属性" class="headerlink" title="FSH 实例属性"></a>FSH 实例属性</h4><ul>
<li>kind 返回条目的类型, <code>file</code> 表示文件, <code>directory</code> 表示目录</li>
<li>name 返回关联条目的名称</li>
</ul>
<h4 id="FSH-实例方法"><a href="#FSH-实例方法" class="headerlink" title="FSH 实例方法"></a>FSH 实例方法</h4><ul>
<li>isSameEntry() 比较两者 handle 以查看相关条目(文件或目录)是否匹配</li>
<li>queryPermission() 查询当前句柄的当前权限状态</li>
<li>remove() 请求从底层文件系统中删除由句柄表示的条目</li>
<li>requestPermission() 请求文件句柄的读取或读写权限</li>
</ul>
<h3 id="showOpenFilePicker"><a href="#showOpenFilePicker" class="headerlink" title="showOpenFilePicker"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/showOpenFilePicker">showOpenFilePicker</a></h3><p>显示一个文件选择器, 允许用户选择一个或多个文件并返回这些文件的句柄, 返回一个 Promise 对象, 并兑现一个包含 <code>FileSystemFileHandle</code> 对象的 Array 数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 可选参数, 传入一个文件选择器筛选文件的选项对象</span></span><br><span class="line">  <span class="comment">// 返回一个已兑现的包含 `FileSystemFileHandle` 对象的 Array 数组</span></span><br><span class="line">  <span class="keyword">const</span> fileHandles = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="title function_">showOpenFilePicker</span>(&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取返回结果中第一个文件对象</span></span><br><span class="line">  <span class="keyword">const</span> file = <span class="keyword">await</span> fileHandles[<span class="number">0</span>].<span class="title function_">getFile</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取返回结果中第一个可用于同步读取和写入文件的对象,</span></span><br><span class="line">  <span class="comment">// 但只能用在专用的 web workers 中</span></span><br><span class="line">  <span class="keyword">const</span> syncAccessFile = <span class="keyword">await</span> fileHandles[<span class="number">0</span>].<span class="title function_">createSyncAccessHandle</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取返回结果中第一个可用于写入文件的新创建的对象</span></span><br><span class="line">  <span class="comment">// WritableStream &lt;- FileSystemWritableFileStream</span></span><br><span class="line">  <span class="comment">// 继承 writableStream 接口的 `FileSystemWritableFileStream` 实例</span></span><br><span class="line">  <span class="comment">// 在流关闭之前, 通常将对流做的任何修改写入临时文件来实现,</span></span><br><span class="line">  <span class="comment">// 并且仅在可写文件流关闭时才将文件句柄表示的文件替换为临时文件</span></span><br><span class="line">  <span class="keyword">const</span> writer = <span class="keyword">await</span> fileHandles[<span class="number">0</span>].<span class="title function_">createWritable</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h4 id="SOFP-实例方法"><a href="#SOFP-实例方法" class="headerlink" title="SOFP 实例方法  "></a>SOFP 实例方法 <em id="showopenfilePickerfn"></em> <!-- markdownlint-disable-line--></h4><h5 id="getFile"><a href="#getFile" class="headerlink" title="getFile()"></a>getFile()</h5><p>返回一个已兑现的由句柄表示的条目在磁盘上的状态的对象</p>
<h5 id="createSyncAccessHandle"><a href="#createSyncAccessHandle" class="headerlink" title="createSyncAccessHandle()"></a>createSyncAccessHandle()</h5><p>返回一个已兑现的可用于同步读取和写入文件的 <code>FileSystemSyncAccessHandle</code> 对象</p>
<h5 id="createWritable"><a href="#createWritable" class="headerlink" title="createWritable()"></a>createWritable()</h5><p>返回一个已兑现的可用于写入文件的新创建的 <code>FileSystemWritableFileStream</code> 对象</p>
<h3 id="showSaveFilePicker"><a href="#showSaveFilePicker" class="headerlink" title="showSaveFilePicker"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showSaveFilePicker">showSaveFilePicker</a></h3><p>显示一个允许用户保存文件的文件选择器, 通过选择现有文件或者输入新文件的名称, 返回一个已兑现的 <code>FileSystemFileHandle</code> 对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 可选参数, 传入一个文件选择器筛选文件的选项对象</span></span><br><span class="line">  <span class="comment">// 返回一个已兑现的 `FileSystemFileHandle` 对象</span></span><br><span class="line">  <span class="keyword">const</span> fileHandle = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="title function_">showSaveFilePicker</span>(&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个可写流</span></span><br><span class="line">  <span class="comment">// 继承 writableStream 接口的 `FileSystemWritableFileStream` 实例</span></span><br><span class="line">  <span class="keyword">const</span> writable = <span class="keyword">await</span> fileHandle.<span class="title function_">createWritable</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写入数据</span></span><br><span class="line">  <span class="keyword">await</span> writable.<span class="title function_">write</span>(<span class="string">&#x27;Hello world!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭流</span></span><br><span class="line">  <span class="keyword">await</span> writable.<span class="title function_">close</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h4 id="SSFP-实例方法"><a href="#SSFP-实例方法" class="headerlink" title="SSFP 实例方法"></a>SSFP 实例方法</h4><p>实例方法同 <a href="#showopenfilePickerfn"><code>showOpenFilePicker</code></a> 方法返回的实例的方法</p>
<h3 id="showDirectoryPicker"><a href="#showDirectoryPicker" class="headerlink" title="showDirectoryPicker"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker">showDirectoryPicker</a></h3><p>显示一个目录选择器, 允许用户选择一个目录, 返回一个已兑现的 <code>FileSystemDirectoryHandle</code> 对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 可选参数, 传入一个目录选择器筛选目录的选项对象</span></span><br><span class="line">  <span class="comment">// 返回一个已兑现的 `FileSystemDirectoryHandle` 对象</span></span><br><span class="line">  <span class="comment">// FileSystemHandle &lt;- FileSystemDirectoryHandle</span></span><br><span class="line">  <span class="keyword">const</span> dirHandle = <span class="keyword">await</span> <span class="variable language_">window</span>.<span class="title function_">showDirectoryPicker</span>(&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历目录</span></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> [name, handle] <span class="keyword">of</span> dirHandle.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (handle.<span class="property">key</span> == <span class="string">&#x27;file&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> fileHandle = <span class="keyword">await</span> dirHandle.<span class="title function_">getFileHandle</span>(name);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(fileHandle);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> dh = dirHandle.<span class="title function_">getDirectoryHandle</span>(name);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(dh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h4 id="SDP-实例方法"><a href="#SDP-实例方法" class="headerlink" title="SDP 实例方法"></a>SDP 实例方法</h4><h5 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h5><p>返回给定对象自己的可枚举属性对的新**异步迭代[key, value]**器</p>
<h5 id="getFileHandle"><a href="#getFileHandle" class="headerlink" title="getFileHandle()"></a>getFileHandle()</h5><p>返回指定名称的文件的已兑现的 <code>FileSystemFileHandle</code> 对象</p>
<h5 id="getDirectoryHandle"><a href="#getDirectoryHandle" class="headerlink" title="getDirectoryHandle()"></a>getDirectoryHandle()</h5><p>返回指定名称的目录的已兑现的 <code>FileSystemDirectoryHandle</code> 对象</p>
<h5 id="resolve"><a href="#resolve" class="headerlink" title="resolve()"></a>resolve()</h5><p>返回一个从父句柄到指定子项的目录名称的 Promise, 子项的名称作为最后一个数组项</p>
<h5 id="removeEntry"><a href="#removeEntry" class="headerlink" title="removeEntry()"></a>removeEntry()</h5><p>尝试异步删除指定名称的文件或目录</p>
<h5 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h5><p>返回一个新的<strong>异步迭代</strong>器, 其中包含每个项目的键 <code>FileSystemDirectoryHandle</code></p>
<h5 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h5><p>返回一个新的<strong>异步迭代</strong>器, 其中包含对象中每个索引的值 <code>FileSystemDirectoryHandle</code></p>
]]></content>
      <categories>
        <category>WebAPI</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Generator和async</title>
    <url>/2021/07/bc748f2ea976/</url>
    <content><![CDATA[<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><blockquote>
<p>Generator 函数是 ES6 提供的一种异步编程解决方案, 语法行为和传统普通函数完全不同, Generator 函数是一个状态机, 封装了多个内部状态, 执行函数会返回一个迭代器对象, 返回的迭代器对象可以依次遍历 Generator 函数内部的每一个状态.</p>
</blockquote>
<ul>
<li>function 关键字和函数名之间有一个星号, 星号写在哪个位置都可以</li>
<li>函数体内部使用 yield 表达式定义不同的状态</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorld</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = <span class="title function_">helloWorld</span>();</span><br><span class="line">gen.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line">gen.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line">gen.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<p>调用 Generator 函数, 返回一个迭代器对象, 代表 Generator 函数的内部指针, 每次调用迭代器对象的 next 方法, 就会返回一个包含 value 和 done 属性的对象, value 属性表示当前的内部状态(yield 表达式)的值, done 属性表示遍历是否结束的 boolean 值</p>
<h4 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h4><blockquote>
<p>yield 表达式只能用在 Generator 函数里面, 用在其他地方都会报错</p>
</blockquote>
<ol>
<li>遇到 yield 表达式, 就暂停执行后面的操作, 并将 yield 后面紧跟的表达式的值作为返回对象的 value 属性值</li>
<li>下一次调用 next 方法时, 再继续往下执行, 直到遇到下一个 yield 表达式</li>
<li>如果没有再遇到新的 yield 表达式, 就一直运行到函数结束, 直到 return 语句为止, 并将 return 语句后面的表达式的值作为返回的对象的 value 属性值</li>
<li>如果该函数没有 return 语句, 则返回的对象的 value 属性值为 undefined</li>
</ol>
<span id="more"></span>

<h4 id="与-Iterator-接口的关系"><a href="#与-Iterator-接口的关系" class="headerlink" title="与 Iterator 接口的关系"></a>与 Iterator 接口的关系</h4><blockquote>
<p>任意数据结构的 Symbol.iterator 方法,等于该数据结构的迭代器生成函数,调用该方法会返回一个该数据结构的迭代器对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myIterator = &#123;</span><br><span class="line">  <span class="comment">// [Symbol.iterator]: function* () &#123;</span></span><br><span class="line">  <span class="comment">// 简洁写法</span></span><br><span class="line">  *[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">[...myIterator]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h4 id="next-方法的参数"><a href="#next-方法的参数" class="headerlink" title="next 方法的参数"></a>next 方法的参数</h4><blockquote>
<p>next 方法可以带一个参数,该参数被作为上一个 yield 表达式的结果, 第一次使用 next 方法时, 传递参数会被解释器忽略</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> x + <span class="number">1</span>); <span class="comment">// 第一个 yield 表达式</span></span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">yield</span> y / <span class="number">3</span>; <span class="comment">// 第二个 yield 表达式</span></span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">a.<span class="title function_">next</span>(); <span class="comment">// Object&#123;value:6, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>(); <span class="comment">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>(); <span class="comment">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">b.<span class="title function_">next</span>(); <span class="comment">// &#123; value:6, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">12</span>); <span class="comment">// &#123; value:8, done:false &#125; // 12 作为第一个 yield 表达式的结果</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">13</span>); <span class="comment">// &#123; value:42, done:true &#125; // 13 作为第二个 yield 表达式的结果</span></span><br></pre></td></tr></table></figure>

<h4 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h4><blockquote>
<p>for…of 循环可以自动循环 Generator 函数运行时生成的 Iterator 对象, 此时不再需要调用 next 方法, next 返回的对象的 done 属性为 true 时则自动中止循环且不包含该返回对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">foo</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4</span></span><br></pre></td></tr></table></figure>

<h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><p>迭代器对象的 throw 方法可以在函数体外抛出错误异常, 在 Generator 函数体内捕获</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;内部捕获&#x27;</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> gen = <span class="title function_">foo</span>();</span><br><span class="line">gen.<span class="title function_">next</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  gen.<span class="keyword">throw</span>(<span class="string">&#x27;err1&#x27;</span>);</span><br><span class="line">  gen.<span class="keyword">throw</span>(<span class="string">&#x27;err2&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;外部捕获&#x27;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 内部捕获 err1</span></span><br><span class="line"><span class="comment">// 外部捕获 err2</span></span><br></pre></td></tr></table></figure>

<h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><p>迭代器对象的 return 方法返回给定的值并且中止遍历 Generator 函数, 如果 Generator 函数内部有 try…finally, 并且正在执行 try 内部代码, 则立刻进入 finally 执行直到函数结束</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">numbers</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">numbers</span>();</span><br><span class="line">g.<span class="title function_">next</span>(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>(); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">g.<span class="keyword">return</span>(<span class="number">7</span>); <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>(); <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>(); <span class="comment">// &#123; value: 7, done: true &#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="next-throw-return-的共同点"><a href="#next-throw-return-的共同点" class="headerlink" title="next throw return 的共同点"></a>next throw return 的共同点</h4><blockquote>
<p>此三个方法本质上是一件事, 共同的作用是让 Generator 函数恢复执行并且使用不同的语句替换 yield 表达式</p>
</blockquote>
<ul>
<li>next 将 yield 表达式替换成一个值</li>
<li>throw 将 yield 表达式替换成一个 throw 语句</li>
<li>return 将 yield 表达式替换成一个 return 语句</li>
</ul>
<h4 id="yield-表达式-1"><a href="#yield-表达式-1" class="headerlink" title="yield* 表达式"></a>yield* 表达式</h4><p>用于在一个 Generator 函数内执行另外一个 Generator 函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span>* <span class="title function_">foo</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">foo</span>()) &#123;</span><br><span class="line">    <span class="keyword">yield</span> v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">bar</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;x&quot;</span></span><br><span class="line"><span class="comment">// &quot;a&quot;</span></span><br><span class="line"><span class="comment">// &quot;b&quot;</span></span><br><span class="line"><span class="comment">// &quot;y&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><blockquote>
<p>ES8 标准, Generator 函数的语法糖</p>
</blockquote>
<h4 id="与-Generator-函数的区别"><a href="#与-Generator-函数的区别" class="headerlink" title="与 Generator 函数的区别"></a>与 Generator 函数的区别</h4><h5 id="内置执行器"><a href="#内置执行器" class="headerlink" title="内置执行器"></a>内置执行器</h5><p>Generator 函数的自动执行需要依赖执行器 co 模块, async 函数自带执行器只要调用即可</p>
<h5 id="更好的语义"><a href="#更好的语义" class="headerlink" title="更好的语义"></a>更好的语义</h5><p>async 表示函数内有异步操作, await 表示后面的表达式需要等待结果</p>
<h5 id="更广的适用性"><a href="#更广的适用性" class="headerlink" title="更广的适用性"></a>更广的适用性</h5><p>co 模块规定 yield 命令后面只能是 thunk 函数或者 Promise 对象, async 函数的 await 命令后面可以是 Promise 对象和原始类型的值(数值、字符串和布尔值,此时会自动转成 Resolve 的 Promise 对象)</p>
<h5 id="返回值是-Promise"><a href="#返回值是-Promise" class="headerlink" title="返回值是 Promise"></a>返回值是 Promise</h5><p>async 的返回值是 Promise, 可以使用 then 方法指定下一步的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">  <span class="keyword">await</span> <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="async-的实现原理"><a href="#async-的实现原理" class="headerlink" title="async 的实现原理"></a>async 的实现原理</h4><p>将 Generator 函数和自动执行器包装在一个函数内</p>
<h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><h5 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h5><p>返回该对象的结果</p>
<h5 id="定义了-then-方法的对象"><a href="#定义了-then-方法的对象" class="headerlink" title="定义了 then 方法的对象"></a>定义了 then 方法的对象</h5><p>await 将当作 Promise 对象执行</p>
<h5 id="reject-状态"><a href="#reject-状态" class="headerlink" title="reject 状态"></a>reject 状态</h5><p>如果 Promise 对象变成 reject 状态,则整个 async 函数都会中断执行</p>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令其他篇</title>
    <url>/2021/04/946abb7dbe1d/</url>
    <content><![CDATA[<h3 id="其他篇"><a href="#其他篇" class="headerlink" title="其他篇"></a>其他篇</h3><h4 id="submodule-仓库"><a href="#submodule-仓库" class="headerlink" title="submodule 仓库"></a>submodule 仓库</h4><h5 id="submodule-init-初始化"><a href="#submodule-init-初始化" class="headerlink" title="submodule init 初始化"></a>submodule init 初始化</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule init [&lt;path&gt;]</span><br></pre></td></tr></table></figure>

<h5 id="submodule-deinit-删除"><a href="#submodule-deinit-删除" class="headerlink" title="submodule deinit 删除"></a>submodule deinit 删除</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule deinit [-f]</span><br><span class="line">git submodule deinit [--all]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="submodule-set-branch-设置分支"><a href="#submodule-set-branch-设置分支" class="headerlink" title="submodule set-branch 设置分支"></a>submodule set-branch 设置分支</h5><p>设置嵌套仓库的默认远程关联分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule set-branch (-b) &lt;branch&gt; [&lt;path&gt;]</span><br></pre></td></tr></table></figure>

<h5 id="submodule-set-url-设置地址"><a href="#submodule-set-url-设置地址" class="headerlink" title="submodule set-url 设置地址"></a>submodule set-url 设置地址</h5><p>设置嵌套仓库新的地址,会自动同步新的地址配置项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule set-url &lt;path&gt; &lt;newurl&gt;</span><br></pre></td></tr></table></figure>

<h5 id="submodule-add-添加"><a href="#submodule-add-添加" class="headerlink" title="submodule add 添加"></a>submodule add 添加</h5><p>在当前指定目录下添加仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add &lt;repository&gt; [&lt;path&gt;]</span><br></pre></td></tr></table></figure>

<h5 id="status-summary-查看"><a href="#status-summary-查看" class="headerlink" title="status|summary 查看"></a>status|summary 查看</h5><ul>
<li><p>递归查看嵌套仓库的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule status [--recursive] [&lt;path&gt;]</span><br></pre></td></tr></table></figure></li>
<li><p>查看嵌套仓库的提交记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule summary [&lt;path&gt;]</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="submodule-update-更新"><a href="#submodule-update-更新" class="headerlink" title="submodule update 更新"></a>submodule update 更新</h5><p>递归更新嵌套仓库信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule update [--recursive] [&lt;path&gt;]</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="archive-归档"><a href="#archive-归档" class="headerlink" title="archive 归档"></a>archive 归档</h4><ul>
<li><p>list: 显示支持的归档文件格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git archive [-l]</span><br></pre></td></tr></table></figure></li>
<li><p>format: 指定归档文件格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git archive --format=&lt;<span class="built_in">fmt</span>&gt; [&lt;path&gt;...]</span><br></pre></td></tr></table></figure></li>
<li><p>prefix: 指定归档文件前缀</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git archive --prefix=&lt;prefix&gt; [&lt;path&gt;...]</span><br></pre></td></tr></table></figure></li>
<li><p>output|o: 将归档文件写入到指定文件非输出流</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git archive [-o &lt;file&gt;] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure></li>
<li><p>add-file: 添加未被追踪的文件到归档文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git archive --add-file &lt;file&gt; [&lt;path&gt;...]</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="clean-清除"><a href="#clean-清除" class="headerlink" title="clean 清除"></a>clean 清除</h4><ul>
<li>n|dry-run: 不移除任何东西,只显示会做什么</li>
<li>f|force: 强制删除</li>
<li>i|interactive: 交互式操作</li>
<li>e: 使用正则表达式匹配</li>
</ul>
<h5 id="从工作区移除未被追踪的文件"><a href="#从工作区移除未被追踪的文件" class="headerlink" title="从工作区移除未被追踪的文件"></a>从工作区移除未被追踪的文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git clean [-n] [-f] [-i] [-e &lt;pattern&gt;] &lt;path&gt;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-上</title>
    <url>/2022/03/27a05caca8fb/</url>
    <content><![CDATA[<h2 id="敲黑板"><a href="#敲黑板" class="headerlink" title="敲黑板"></a>敲黑板</h2><ul>
<li><p>Package docker-ce is not available, but is referred to by another package.</p>
<p>如果提示未发现可用的 docker-ce 包时,检查系统镜像源是否正确(如果不能翻墙时, 使用国内的镜像源修改 /etc/apt/source.list)</p>
</li>
<li><p>Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get <a href="http://%2Fvar%2Frun%2Fdocker.sock/v1.24/images/json">http://%2Fvar%2Frun%2Fdocker.sock/v1.24/images/json</a>: dial unix /var/run/docker.sock: connect: permission denied</p>
<p>执行 docker 相关命令时提示, 表示 docker 权限不足</p>
<ul>
<li><p>使用 sudo 命令运行 docker 命令</p>
</li>
<li><p>将当前用户加入到 docker 组中</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/group | grep docker</span></span><br><span class="line">docker:x:994:vagrant</span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/gshadow | grep docker</span></span><br><span class="line">docker:!::vagrant</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd docker <span class="comment"># 添加 docker 用户组</span></span><br><span class="line">gpasswd -a <span class="variable">$USER</span> docker <span class="comment"># 添加登陆用户到 docker 用户组中</span></span><br><span class="line">newgrp docker <span class="comment"># 更新用户组</span></span><br><span class="line">或者</span><br><span class="line">usermod -aG docker <span class="variable">$USER</span> <span class="comment"># 给用户添加一个新的附属组</span></span><br><span class="line">newgrp docker <span class="comment"># 重新登陆组</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker <span class="comment"># 重启 docker 服务</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> docker <span class="comment"># 设置 docker 守护进程开机启动</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p><img data-src="/images/docker-8.webp" alt="docker-8"></p>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p><img data-src="/images/docker-1.jpg" alt="docker-1"></p>
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）</p>
<p>镜像由多个层组成, 每层叠加之后, 从外部看来就如一个独立的对象</p>
<h3 id="UnionFS-联合文件系统"><a href="#UnionFS-联合文件系统" class="headerlink" title="UnionFS 联合文件系统"></a>UnionFS 联合文件系统</h3><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p><code>/etc/docker/daemon.json</code> 配置文件修改默认镜像源</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><p>镜像的操作命令可直接用在 <code>docker</code> 或 <code>docker image</code> 命令后面</p>
<ul>
<li>images 查看本地镜像列表, 作用同 <code>image ls</code></li>
<li>rmi 删除本地镜像, 作用同 <code>image rm</code></li>
<li>tag 给镜像文件创建标签</li>
<li>build 从 Dockerfile 构建镜像</li>
<li>load|import 导入镜像归档文件</li>
<li>save 保存镜像到归档文件</li>
<li>history 查看镜像的历史信息</li>
<li>pull [OPTIONS] NAME[:TAG|@DIGEST] 从远程仓库拉取镜像</li>
</ul>
<h3 id="镜像导入和导出"><a href="#镜像导入和导出" class="headerlink" title="镜像导入和导出"></a>镜像导入和导出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker [image] save -o  # 归档一个或多个镜像文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker [image] load -i  # 从归档文件加载镜像文件</span></span><br></pre></td></tr></table></figure>

<h3 id="批量删除多个镜像"><a href="#批量删除多个镜像" class="headerlink" title="批量删除多个镜像"></a>批量删除多个镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi -f $(docker images -aq)</span><br><span class="line">docker image <span class="built_in">rm</span> -f $(docker image <span class="built_in">ls</span> -aq) <span class="comment"># 功能同上</span></span><br></pre></td></tr></table></figure>

<h3 id="从容器构建镜像"><a href="#从容器构建镜像" class="headerlink" title="从容器构建镜像"></a>从容器构建镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]] <span class="comment"># 从容器构建镜像, 提交到本地仓库</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-a, --author 提交作者</li>
<li>-m, --message 提交信息</li>
<li>-p, --pause 提交过程中是否中断容器运行, 默认为 true</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker images  # 显示所有镜像</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    12766a6745ee   2 days ago     142MB</span><br><span class="line">centos       latest    5d0da3dc9764   6 months ago   231MB</span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d -p 6666:80 nginx # 后台运行nginx并配置端口映射</span></span><br><span class="line">[root@localhost ~]<span class="comment"># curl -I localhost:6666 # 测试服务</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.21.6</span><br><span class="line">Date: Fri, 01 Apr 2022 08:44:03 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 615</span><br><span class="line">Last-Modified: Tue, 25 Jan 2022 15:03:52 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">&quot;61f01158-267&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a # 查看所有容器信息</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMES</span><br><span class="line">91b34829d2d8   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   38 seconds ago   Up 36 seconds   0.0.0.0:6666-&gt;80/tcp, :::6666-&gt;80/tcp   laughing_kowalevski</span><br><span class="line">a441e0564165   centos    <span class="string">&quot;/bin/bash&quot;</span>              2 days ago       Up 2 hours                                              vigorous_turing</span><br><span class="line"><span class="comment"># 提交指定容器的镜像并添加作者,提交信息,版本号等</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker commit -a &#x27;l.l&#x27; -m &#x27;nginx 01&#x27; 91b34829d2d8 nginx01:1.0</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker images # 查看所有镜像</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx01      1.0       9e81333043cc   2 seconds ago   142MB</span><br><span class="line">nginx        latest    12766a6745ee   2 days ago      142MB</span><br><span class="line">centos       latest    5d0da3dc9764   6 months ago    231MB</span><br></pre></td></tr></table></figure>

<h3 id="从-Dockerfile-构建镜像"><a href="#从-Dockerfile-构建镜像" class="headerlink" title="从 Dockerfile 构建镜像"></a>从 Dockerfile 构建镜像</h3><p><code>.</code> 上下文路径</p>
<ul>
<li>-f 指定配置文件, 默认 <code>$&#123;PWD&#125;/Dockerfile</code></li>
<li>-t 指定新创建的镜像名称和标签</li>
<li>--no-cache 构建镜像时不使用缓存</li>
<li>--compress 使用 gzip 压缩构建上下文环境</li>
<li>--label 设置镜像元数据</li>
<li>--network 设置构建过程中 <code>RUN</code> 指令的网络模式</li>
<li>--build-arg 通过命令行设置构建镜像过程中的参数, 可以覆盖 <code>ARG</code> 设置的参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f /path/to/Dockerfile -t name:tag .</span><br></pre></td></tr></table></figure>

<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器独立运行的一个或一组应用，是镜像运行时的实体, 它可以被启动、开始、停止、删除. 每个容器之间都是相互隔离的, 保证安全的平台</p>
<ul>
<li>应用容器化 将应用整合到容器中并且运行起来的这个过程</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps -a # 查看所有容器信息</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS                   PORTS     NAMES</span><br><span class="line">a441e0564165   centos    <span class="string">&quot;/bin/bash&quot;</span>   28 hours ago   Exited (0) 3 hours ago             vigorous_turing</span><br></pre></td></tr></table></figure>

<h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><p>容器的操作命令可直接用在 <code>docker</code> 或 <code>docker container</code> 命令后面</p>
<ul>
<li><p>create 创建新容器</p>
</li>
<li><p>run 创建并启动一个容器</p>
</li>
<li><p>start|stop|kill 启动|停止容器</p>
</li>
<li><p>pause 暂停容器</p>
</li>
<li><p>restart 重启容器</p>
</li>
<li><p>rename 重命名容器</p>
</li>
<li><p>events 获取 docker 服务器的实时事件</p>
</li>
<li><p>diff 显示容器文件系统的前后变化</p>
</li>
<li><p>ps 查看容器列表, 作用同 <code>container ls</code></p>
</li>
<li><p>inspect 查看容器详细信息, 作用同 <code>container inspect</code></p>
</li>
<li><p>logs 输出容器运行日志</p>
<ul>
<li>-f, --follow 实时输出容器运行日志</li>
<li>-n, --tail 查看指定行数</li>
<li>-t, --timestamps 输出日志添加时间戳</li>
</ul>
</li>
<li><p>rm 删除容器</p>
</li>
<li><p>port 查看容器映射端口</p>
</li>
<li><p>export 导出容器为归档文件</p>
</li>
<li><p>wait 阻塞一个或多个容器直到停止运行, 并打印容器的退出码</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker wait centos01 # 阻塞一个或多个容器直到停止运行, 并打印容器的退出码</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>如果本地不存在镜像时则先从远程拉取镜像(docker pull 镜像名)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name <span class="string">&#x27;helloWorld&#x27;</span> -it 镜像名 在启动的容器里执行的命令</span><br></pre></td></tr></table></figure>

<ul>
<li><p>--name 容器名称</p>
</li>
<li><p>-d 后台方式运行</p>
</li>
<li><p>-i,--interactive 即使没有附加也保持 STDIN 打开, 如果需要执行命令则需要开启这个选项</p>
</li>
<li><p>-t,--tty 分配一个伪终端进行执行, 一个连接用户的终端与容器 stdin 和 stdout 的桥梁</p>
</li>
<li><p>-P 将容器内部使用的网络端口映射到宿主机随机端口上</p>
</li>
<li><p>-p 指定容器的端口</p>
<ul>
<li>-p 主机 IP:主机端口:容器端口/协议</li>
<li>-p 主机端口:容器端口/协议</li>
<li>-p 容器端口/协议</li>
</ul>
</li>
<li><p>-e 设置容器运行的环境变量</p>
</li>
<li><p>-w 设置容器内部的工作目录</p>
</li>
<li><p>-h, --hostname 设置容器的主机名</p>
</li>
<li><p>-v, --volume 设置容器数据卷映射</p>
</li>
<li><p>--mount 挂载文件系统</p>
</li>
<li><p>--temps 挂载临时文件系统</p>
</li>
<li><p>--volumes-from 指定继承的数据卷容器</p>
</li>
<li><p>--label 设置容器的元数据</p>
</li>
<li><p>--ip 设置容器 IP 地址</p>
</li>
<li><p>--link 连接到另一个容器</p>
</li>
<li><p>--network 连接到指定的网络, 默认为 docker0</p>
</li>
<li><p>--privileged 授予此容器扩展权限</p>
</li>
<li><p>--entrypoint 覆盖镜像文件中默认的 ENTRYPOINT</p>
</li>
<li><p>--restart string 当容器退出后的重启策略</p>
</li>
<li><p>--read-only 只读模式挂在容器文件系统</p>
</li>
<li><p>--add-host list 添加主机 ip 映射</p>
</li>
<li><p>--dns list 设置 dns 服务</p>
</li>
<li><p>--rm 测试时临时运行容器关闭后自动删除容器</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --<span class="built_in">rm</span> -p 6666:80 --name nginx01 nginx</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker images # 查看本地所有镜像</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    12766a6745ee   44 hours ago   142MB</span><br><span class="line">centos       latest    5d0da3dc9764   6 months ago   231MB</span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a  # 查看所有容器信息</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS          PORTS     NAMES</span><br><span class="line">a441e0564165   centos    <span class="string">&quot;/bin/bash&quot;</span>   29 hours ago   Up 27 minutes             vigorous_turing</span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d --rm -p 6666:80 nginx # 后台运行容器同时配置端口映射</span></span><br><span class="line">[root@localhost ~]<span class="comment"># curl -I localhost:6666 # 测试 nginx 服务</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.21.6</span><br><span class="line">Date: Thu, 31 Mar 2022 11:52:34 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 615</span><br><span class="line">Last-Modified: Tue, 25 Jan 2022 15:03:52 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">&quot;61f01158-267&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a  # 查看所有容器信息</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                   NAMES</span><br><span class="line">2ccf4c0204ab   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   11 seconds ago   Up 10 seconds   0.0.0.0:6666-&gt;80/tcp, :::6666-&gt;80/tcp   thirsty_ishizaka</span><br><span class="line">a441e0564165   centos    <span class="string">&quot;/bin/bash&quot;</span>              29 hours ago     Up 28 minutes                                           vigorous_turing</span><br><span class="line">[root@localhost ~]<span class="comment"># docker stop 2ccf4c0204ab  # 停止指定容器</span></span><br><span class="line">2ccf4c0204ab</span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a  # 查看所有容器信息</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS          PORTS     NAMES</span><br><span class="line">a441e0564165   centos    <span class="string">&quot;/bin/bash&quot;</span>   29 hours ago   Up 28 minutes             vigorous_turing</span><br></pre></td></tr></table></figure>

<ul>
<li>示例：最简单的 nginx 服务集群</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker images # 查看所有镜像</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    12766a6745ee   3 days ago     142MB</span><br><span class="line">centos       latest    5d0da3dc9764   6 months ago   231MB</span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d --name &#x27;nginx01&#x27; -p 6666:80 nginx # 后台启动 nginx 服务配置端口映射</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -d --name &#x27;nginx02&#x27; -p 7777:80 nginx # 后台启动 nginx 服务配置端口映射</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a  # 查看所有容器信息</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS                    PORTS                                   NAMES</span><br><span class="line">335120e70611   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   6 seconds ago    Up 5 seconds              0.0.0.0:7777-&gt;80/tcp, :::7777-&gt;80/tcp   nginx02</span><br><span class="line">771fd45df0ef   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   47 seconds ago   Up 46 seconds             0.0.0.0:6666-&gt;80/tcp, :::6666-&gt;80/tcp   nginx01</span><br><span class="line">a441e0564165   centos    <span class="string">&quot;/bin/bash&quot;</span>              3 days ago       Exited (0) 22 hours ago                                           vigorous_turing</span><br><span class="line">[root@localhost ~]<span class="comment"># curl -I localhost:6666  # 测试 nginx 服务</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.21.6</span><br><span class="line">Date: Sat, 02 Apr 2022 10:42:29 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 615</span><br><span class="line">Last-Modified: Tue, 25 Jan 2022 15:03:52 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">&quot;61f01158-267&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># curl -I localhost:7777  # 测试 nginx 服务</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.21.6</span><br><span class="line">Date: Sat, 02 Apr 2022 10:42:37 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 615</span><br><span class="line">Last-Modified: Tue, 25 Jan 2022 15:03:52 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">&quot;61f01158-267&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>

<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><h4 id="exec-和-attach"><a href="#exec-和-attach" class="headerlink" title="exec 和 attach"></a>exec 和 attach</h4><ul>
<li>exec<ul>
<li>进入容器打开一个新的终端</li>
<li>退出容器, 容器正常运行</li>
</ul>
</li>
<li>attach<ul>
<li>进入容器打开正在运行的终端</li>
<li>退出容器, 容器自动停止</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps -a # 查看所有容器信息</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS          PORTS     NAMES</span><br><span class="line">a441e0564165   centos    <span class="string">&quot;/bin/bash&quot;</span>   25 hours ago   Up 31 minutes             vigorous_turing</span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it a441e0564165 /bin/bash # 交互方式进入容器</span></span><br><span class="line">[root@a441e0564165 /]<span class="comment"># exit # 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a # 查看所有容器信息</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS          PORTS     NAMES</span><br><span class="line">a441e0564165   centos    <span class="string">&quot;/bin/bash&quot;</span>   25 hours ago   Up 32 minutes             vigorous_turing</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker attach a441e0564165 # 进入容器</span></span><br><span class="line">[root@a441e0564165 /]<span class="comment"># exit # 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a # 查看所有容器信息</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS                     PORTS     NAMES</span><br><span class="line">a441e0564165   centos    <span class="string">&quot;/bin/bash&quot;</span>   25 hours ago   Exited (0) 2 seconds ago             vigorous_turing</span><br></pre></td></tr></table></figure>

<h3 id="文件拷贝-cp"><a href="#文件拷贝-cp" class="headerlink" title="文件拷贝 cp  "></a>文件拷贝 cp <em id="dockercp"></em> <!--markdownlint-disable-line--></h3><ul>
<li>-a, --archive 复制文档的所有信息</li>
</ul>
<h4 id="拷贝宿主机到容器内"><a href="#拷贝宿主机到容器内" class="headerlink" title="拷贝宿主机到容器内"></a>拷贝宿主机到容器内</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> [宿主机路径] [容器标识]:[容器内路径]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝宿主机文件到 a441e0564165 /user/local 下</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker cp -a .nvm/versions/node/v12.22.1/ a441e0564165:/usr/local/v12.22.1/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it a441e0564165 ls /usr/local</span></span><br><span class="line">bin  etc  games  include  lib  lib64  libexec  sbin  share  src  v12.22.1</span><br></pre></td></tr></table></figure>

<h4 id="拷贝容器内到宿主机"><a href="#拷贝容器内到宿主机" class="headerlink" title="拷贝容器内到宿主机"></a>拷贝容器内到宿主机</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> [容器标识]:[容器内路径] [宿主机路径]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ls /home/</span></span><br><span class="line">ubuntu  vagrant</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it a441e0564165 /bin/bash # 进入 a441e0564165</span></span><br><span class="line">[root@a441e0564165 /]<span class="comment"># ls -al /home</span></span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x 2 root root 4096 Nov  3  2020 .</span><br><span class="line">drwxr-xr-x 1 root root 4096 Apr 10 08:06 ..</span><br><span class="line">[root@a441e0564165 /]<span class="comment"># touch hello docker &gt; /home/hello.txt # 创建文件</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker cp -a a441e0564165:/home/hello.txt /home/vagrant</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls</span></span><br><span class="line">centos01  description-pak  hello.txt</span><br></pre></td></tr></table></figure>

<h3 id="容器环境变量和工作目录"><a href="#容器环境变量和工作目录" class="headerlink" title="容器环境变量和工作目录"></a>容器环境变量和工作目录</h3><ul>
<li>-e 运行容器时指定环境变量</li>
<li>-w 容器工作目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker exec -it -e PATH=/usr/local/v12.22.1/bin:$PATH centos01 node -v</span></span><br><span class="line">v12.22.1</span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it -w /usr/local centos01  pwd</span></span><br><span class="line">/usr/local</span><br></pre></td></tr></table></figure>

<h3 id="容器导入和导出"><a href="#容器导入和导出" class="headerlink" title="容器导入和导出"></a>容器导入和导出</h3><ul>
<li><p>export 从容器中导出为归档文件</p>
</li>
<li><p>import 从归档文件中导入为镜像文件</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker [container] export -o centos01.tar.gz centos01 # 归档容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入归档文件为镜像</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker [image] import centos01.tar.gz [REPOSITORY[:TAG]]</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/images/docker-3.png" alt="docker-3"></p>
<h3 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<h3 id="查看容器资源使用情况统计"><a href="#查看容器资源使用情况统计" class="headerlink" title="查看容器资源使用情况统计"></a>查看容器资源使用情况统计</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stats</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># docker stats</span></span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT     MEM %     NET I/O      BLOCK I/O     PIDS</span><br><span class="line">a441e0564165   vigorous_turing   0.00%     1.336MiB / 481.6MiB   0.28%     1.6kB / 0B   6.79MB / 0B   1</span><br></pre></td></tr></table></figure>

<h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>卷就是目录或者文件,存在于一个或多个容器中,由 docker 挂载到容器中,卷的设计目的就是数据的持久化,完全独立于容器的生存周期, 因此 Docker 不会在容器删除时删除其挂载的数据</p>
<ul>
<li>create 创建数据卷</li>
<li>inspect 显示数据卷的详细信息</li>
<li>ls 显示所有数据卷</li>
<li>rm 删除数据据按</li>
<li>prune 移除所有未使用的本地数据卷</li>
</ul>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>卷中的更改可以直接生效</li>
<li>数据卷可在容器之间共享数据</li>
<li>数据卷中的更改不会包含在镜像的更新中</li>
<li>数据卷的生命周期一直持续到没有容器使用它为止</li>
</ul>
<h3 id="数据卷类型"><a href="#数据卷类型" class="headerlink" title="数据卷类型"></a>数据卷类型</h3><p>默认挂载数据卷的权限为 <code>RW</code></p>
<p>可以在挂载数据卷时指定数据卷的权限 <code>-v [source/path]:[destination/path]:[rw]</code></p>
<ul>
<li>--mount 不指定 type 选项默认为 volume</li>
<li>-v 不能建立 tmpfs mounts</li>
</ul>
<table>
<thead>
<tr>
<th align="center">对比项</th>
<th align="center">–volume 或 -v</th>
<th align="center">–mount type=bind</th>
</tr>
</thead>
<tbody><tr>
<td align="center">若是主机路径不存在</td>
<td align="center">自动建立</td>
<td align="center">命令报错</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">对比项</th>
<th align="center">bind mount</th>
<th align="center">volume</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Source 位置</td>
<td align="center">用户指定</td>
<td align="center">/var/lib/docker/volumes/</td>
</tr>
<tr>
<td align="center">Source 为空</td>
<td align="center">覆盖 dest 为空</td>
<td align="center">保留 dest 内容</td>
</tr>
<tr>
<td align="center">Source 非空</td>
<td align="center">覆盖 dest 内容</td>
<td align="center">覆盖 dest 内容</td>
</tr>
<tr>
<td align="center">Source 种类</td>
<td align="center">文件或目录</td>
<td align="center">只能是目录</td>
</tr>
<tr>
<td align="center">可移植性</td>
<td align="center">一般（自行维护）</td>
<td align="center">强（docker 托管）</td>
</tr>
<tr>
<td align="center">宿主直接访问</td>
<td align="center">容易（仅需 chown）</td>
<td align="center">受限（需登陆 root 用户）*</td>
</tr>
</tbody></table>
<h4 id="volume-mounts"><a href="#volume-mounts" class="headerlink" title="volume mounts"></a>volume mounts</h4><p>指定 docker 挂载区域, Docker 管理宿主机文件系统的一部分(/var/lib/docker/volumes)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create [OPTIONS] [VOLUME] <span class="comment"># 创建数据卷</span></span><br><span class="line">docker run --mount <span class="built_in">type</span>=volume,<span class="built_in">source</span>=<span class="variable">$&#123;PWD&#125;</span>/<span class="variable">$&#123;CONTAINER_NAME&#125;</span>/app,destination=/app centos01 /bin/bash</span><br><span class="line">docker run -v <span class="variable">$&#123;PWD&#125;</span>/<span class="variable">$&#123;CONTAINER_NAME&#125;</span>/app:/app <span class="comment"># 作用同上一行</span></span><br></pre></td></tr></table></figure>

<h4 id="bind-mounts"><a href="#bind-mounts" class="headerlink" title="bind mounts"></a>bind mounts</h4><p>是宿主机任意文件系统, 可以存储在宿主机系统的任意位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=<span class="variable">$&#123;PWD&#125;</span>/<span class="variable">$&#123;CONTAINER_NAME&#125;</span>/app,destination=/app centos01 /bin/bash</span><br><span class="line"><span class="comment"># 如果挂载到容器中的非空目录, 则会隐藏容器中非空目录中的文件</span></span><br><span class="line">docker run -v <span class="variable">$&#123;PWD&#125;</span>/<span class="variable">$&#123;CONTAINER_NAME&#125;</span>/app:/app <span class="comment"># 作用同上一行</span></span><br></pre></td></tr></table></figure>

<h4 id="tmpfs-mounts"><a href="#tmpfs-mounts" class="headerlink" title="tmpfs mounts"></a>tmpfs mounts</h4><p>临时挂载到宿主机系统的内存中, 不会写入宿主机的文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --mount <span class="built_in">type</span>=tmpfs,tmpfs-size=512M,destination=/path/in/container</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/docker-5.jpg" alt="docker-5"></p>
<h3 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷  "></a>挂载数据卷 <em id="guazaishujujuan"></em> <!--markdownlint-disable-line--></h3><h4 id="v-挂载方式"><a href="#v-挂载方式" class="headerlink" title="-v 挂载方式"></a>-v 挂载方式</h4><h5 id="v-容器内路径-匿名挂载"><a href="#v-容器内路径-匿名挂载" class="headerlink" title="-v 容器内路径 匿名挂载  "></a>-v 容器内路径 匿名挂载 <em id="nimingguazai"></em> <!--markdownlint-disable-line--></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos01 -v /centosVolume centos /bin/bash</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker container inspect centos01</span></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;2d25068e7e073ed051b075c3d454de4cd8db89871e6e19b38aa2c44b34cee647&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/2d25068e7e073ed051b075c3d454de4cd8db89871e6e19b38aa2c44b34cee647/_data&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/centosVolume&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h5 id="v-卷名-容器内路径-具名挂载"><a href="#v-卷名-容器内路径-具名挂载" class="headerlink" title="-v 卷名:容器内路径 具名挂载"></a>-v 卷名:容器内路径 具名挂载</h5><ul>
<li>如果 <code>不需要</code> 对容器内的数据卷挂载点进行 <code>写操作</code> 时, 使用具名挂载方式备份容器内数据到宿主机中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos02 -v summary:/myVolume centos /bin/bash</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker container inspect centos02</span></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;summary&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/summary/_data&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/myVolume&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h5 id="v-宿主机路径-容器内路径-指定路径挂载"><a href="#v-宿主机路径-容器内路径-指定路径挂载" class="headerlink" title="-v /宿主机路径:容器内路径 指定路径挂载"></a>-v /宿主机路径:容器内路径 指定路径挂载</h5><ul>
<li>如果 <code>需要</code> 对容器内的数据卷挂载点进行 <code>写操作</code> 时, 使用指定路径挂载方式, 此方式会将宿主机中的数据卷挂载点数据覆盖容器内指定路径</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos03 -v $&#123;PWD&#125;/react-app/:/containerVolume centos /bin/bash</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker container inspect centos03</span></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/home/workspace/react-app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/containerVolume&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="mount-挂载方式"><a href="#mount-挂载方式" class="headerlink" title="--mount 挂载方式"></a>--mount 挂载方式</h4><h5 id="mount-具名挂载"><a href="#mount-具名挂载" class="headerlink" title="--mount 具名挂载"></a>--mount 具名挂载</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos04 --mount type=volume,source=applet_ui,destination=/appletVolume centos /bin/bash</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker container inspect centos04</span></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;applet_ui&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/applet_ui/_data&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/appletVolume&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h5 id="mount-指定路径挂载"><a href="#mount-指定路径挂载" class="headerlink" title="--mount 指定路径挂载"></a>--mount 指定路径挂载</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos05 --mount type=bind,source=$&#123;PWD&#125;/applet_uni,destination=/uniVolume centos /bin/bash</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker container inspect centos05</span></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/home/workspace/applet_uni&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/uniVolume&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="共享数据卷"><a href="#共享数据卷" class="headerlink" title="共享数据卷"></a>共享数据卷</h3><ul>
<li>--volumes-from 创建数据卷容器共享数据</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建容器并挂载数据卷</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos01 -v /home/vagrant/centos01:/home/vagrant/centos01 centos /bin/bash</span></span><br><span class="line"><span class="comment"># 容器数据卷共享数据</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker run -tid --name centos02 --volumes-from centos01 centos /bin/bash</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a  # 查看容器信息</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES</span><br><span class="line">7e2097a1476d   centos    <span class="string">&quot;/bin/bash&quot;</span>   4 seconds ago    Up 2 seconds              centos02</span><br><span class="line">ac564d66b6d4   centos    <span class="string">&quot;/bin/bash&quot;</span>   16 minutes ago   Up 16 minutes             centos01</span><br><span class="line"><span class="comment"># 宿主机中创建文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># touch /home/vagrant/centos01/hello.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it centos02 ls /home/vagrant/centos01 # 查看 centos02 文件状态</span></span><br><span class="line">hello.txt</span><br><span class="line">[root@localhost ~]<span class="comment"># docker rm -f centos01 # 删除 centos01</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS              PORTS     NAMES</span><br><span class="line">7e2097a1476d   centos    <span class="string">&quot;/bin/bash&quot;</span>   About a minute ago   Up About a minute             centos02</span><br><span class="line">[root@localhost ~]<span class="comment"># ls /home/vagrant/centos01/ # 查看宿主机文件状态</span></span><br><span class="line">hello.txt</span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><ul>
<li>.dockerignore 构建上下文忽略文件</li>
</ul>
<p>Dockerfile 是用来构建 Docker 镜像的一个指令脚本, 脚本中的每条指令执行一次都会在镜像上新建一层</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul>
<li><p>FROM 构建镜像时的基础镜像层</p>
</li>
<li><p>MAINTAINER(deprecated) 维护者信息, 使用 <code>LABEL</code> 指令代替</p>
</li>
<li><p>EXPOSE 对外暴露端口</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">EXPOSE</span> <span class="number">80</span><span class="string">/tcp</span></span><br><span class="line"><span class="string">EXPOSE</span> <span class="number">80</span><span class="string">/udp</span></span><br></pre></td></tr></table></figure></li>
<li><p>ADD 复制指令, 增强版的 <code>COPY</code> 指令, 支持文件解压和远程 URL 资源</p>
</li>
<li><p>COPY 复制指令, 从上下文目录中复制文件或者目录到容器里指定路径</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [--chown=&lt;user&gt;:&lt;group&gt;] 可选参数，用户改变复制到容器内文件的拥有者和属组</span></span><br><span class="line"><span class="string">COPY</span> [<span class="string">&quot;src&quot;</span>, <span class="string">&quot;dest&quot;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>RUN 构建镜像时执行的命令 可以存在多条指令</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">RUN</span> <span class="string">yum</span> <span class="string">-y</span> <span class="string">install</span> <span class="string">vim</span></span><br><span class="line"><span class="comment"># 合并多个相同作用的指令以减少新建镜像层数</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">yum</span> <span class="string">-y</span> <span class="string">install</span> <span class="string">wget</span> <span class="string">\</span></span><br><span class="line">  <span class="string">&amp;&amp;</span> <span class="string">wget</span> <span class="string">-O</span> <span class="string">redis.tar.gz</span> <span class="string">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span> <span class="string">\</span></span><br><span class="line">  <span class="string">&amp;&amp;</span> <span class="string">tar</span> <span class="string">-xvf</span> <span class="string">redis.tar.gz</span></span><br></pre></td></tr></table></figure></li>
<li><p>CMD 容器运行时执行的命令, 如果存在多个 <code>CMD</code> 指令, 仅最后一个生效</p>
</li>
<li><p>ENTRYPOINT 容器运行时执行的命令, 参数不会被 <code>docker run</code> 的命令行参数覆盖, 如果存在多个 <code>ENTRYPOINT</code> 指令，仅最后一个生效</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">ENTRYPOINT</span> <span class="string">&#x27;&lt;exec_cmd&gt;&#x27;</span> <span class="string">&#x27;&lt;param1&gt;&#x27;</span></span><br><span class="line"><span class="string">ENTRYPOINT</span> [<span class="string">&quot;&lt;executeable&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,<span class="string">...</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">CMD</span> <span class="string">&#x27;&lt;exec_cmd&gt;&#x27;</span> <span class="string">&#x27;&lt;param1&gt;&#x27;</span></span><br><span class="line"><span class="string">CMD</span> [<span class="string">&quot;&lt;可执行文件或命令&gt;&quot;</span>,<span class="string">&quot;&lt;param1&gt;&quot;</span>,<span class="string">&quot;&lt;param2&gt;&quot;</span>,<span class="string">...</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>ARG 构建参数, 作用与 ENV 一致, ARG 中的环境变量仅在 <code>Dockerfile</code> 内有效</p>
</li>
<li><p>ENV 设置持久化环境变量, 如果只想在构建构建阶段有效使用 <code>ARG</code> 指令</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">ARG</span> <span class="string">VERSION1</span> <span class="number">1</span></span><br><span class="line"><span class="string">ARG</span> <span class="string">VERSION=1</span></span><br><span class="line"></span><br><span class="line"><span class="string">ENV</span> <span class="string">NAME1</span> <span class="string">hello</span></span><br><span class="line"><span class="string">ENV</span> <span class="string">NAME2=hello</span></span><br></pre></td></tr></table></figure></li>
<li><p>VOLUME 定义匿名数据卷, 在启动容器时会自动挂载到 /var/lib/docker/volumes/</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 出于可移植和分享的考虑, 不支持 具名挂载 和 指定路径挂载 在 Dockerfile 中配置</span></span><br><span class="line"><span class="comment"># 只能使用 匿名挂载 配置方式</span></span><br><span class="line"><span class="comment"># 因为宿主机目录是依赖于特定宿主机的, 并不能够保证在所有的宿主机上都存在这样的目录</span></span><br><span class="line"><span class="string">VOLUME</span> [<span class="string">&quot;&lt;路径1&gt;&quot;</span>, <span class="string">&quot;&lt;路径2&gt;&quot;</span><span class="string">...</span>]</span><br><span class="line"><span class="string">VOLUME</span> <span class="string">&lt;路径&gt;</span> <span class="string">&lt;路径&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>WORKDIR 为<code>RUN</code>, <code>CMD</code>, <code>ENTRYPOINT</code>, <code>COPY</code>, <code>ADD</code> 指定工作目录</p>
</li>
<li><p>USER 指定执行后续命令的用户和用户组, 用户名和用户组必须提前存在</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">WORKDIR</span> <span class="string">/usr/local</span></span><br><span class="line"></span><br><span class="line"><span class="string">USER</span> <span class="string">&lt;用户名&gt;[:&lt;用户组&gt;]</span></span><br></pre></td></tr></table></figure></li>
<li><p>LABEL 给镜像添加元数据</p>
</li>
<li><p>SHELL 允许重写默认的 shell</p>
</li>
<li><p>STOPSIGNAL 设置当容器退出时系统调用的指令</p>
</li>
<li><p>ONBUILD 当前镜像作为其他镜像的基础镜像构建时触发</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">ONBUILD</span> <span class="string">ADD</span> <span class="string">.</span> <span class="string">/app/src</span></span><br></pre></td></tr></table></figure></li>
<li><p>HEALTHCHECK 指定监控 docker 容器服务的运行状态的方式</p>
</li>
</ul>
<h4 id="ADD-和-COPY"><a href="#ADD-和-COPY" class="headerlink" title="ADD 和 COPY"></a>ADD 和 COPY</h4><ul>
<li>ADD 复制指令, 增强版的 <code>COPY</code> 指令, 支持文件解压和远程 URL 资源</li>
<li>COPY 复制指令, 从上下文目录中复制文件或者目录到容器里指定路径</li>
</ul>
<h4 id="ARG-和-ENV"><a href="#ARG-和-ENV" class="headerlink" title="ARG 和 ENV"></a>ARG 和 ENV</h4><ul>
<li>ENV 设置持久化环境变量, 如果只想在构建构建阶段有效使用 <code>ARG</code> 指令</li>
<li>ARG 构建参数, 作用与 ENV 一致, ARG 中的环境变量仅在 <code>Dockerfile</code> 内有效</li>
</ul>
<h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><ul>
<li>不支持 具名挂载 和 指定路径挂载, 只能使用 <a href="#nimingguazai">匿名挂载</a> 方式</li>
<li>docker-compose.yml 配置项支持任意挂载方式 <a href="#guazaishujujuan">挂载数据卷</a></li>
</ul>
<h4 id="CMD-和-ENTRYPOINT"><a href="#CMD-和-ENTRYPOINT" class="headerlink" title="CMD 和 ENTRYPOINT"></a>CMD 和 ENTRYPOINT</h4><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ul>
<li>CMD 情况下, run 后面的参数将作为整体替换 <code>CMD</code> 配置项中的命令</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="string">CMD</span> [<span class="string">&#x27;/bin/bash&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;/etc/hosts&#x27;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /bin/bash ls -al 命令会整体替换 Dockerfile 中的 CMD 指令</span></span><br><span class="line">docker run -it ubuntu /bin/bash <span class="built_in">ls</span> -al</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际命令</span></span><br><span class="line">/bin/bash <span class="built_in">ls</span> -al</span><br></pre></td></tr></table></figure>

<ul>
<li>ENTRYPOINT 情况下, <code>docker run</code> 后面的参数将作为 ENTRYPOINT 配置项指令的一部分</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="string">ENTRYPOINT</span> [<span class="string">&#x27;/bin/bash&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;-l&#x27;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run 后面的参数作为 ENTRYPOINT 配置项命令参数的一部分</span></span><br><span class="line">docker run -it ubuntu -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际命令</span></span><br><span class="line">/bin/bash <span class="built_in">ls</span> -al</span><br></pre></td></tr></table></figure>

<ul>
<li>CMD 和 ENTRYPOINT 同时存在时, CMD 作为 ENTRYPOINT 配置项命令的一部分, 与书写位置没有关系</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="string">ENTRYPOINT</span> [<span class="string">&#x27;nginx&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"><span class="string">CMD</span> [<span class="string">&#x27;/etc/nginx/nginx.conf&#x27;</span>]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">是否传参</th>
<th>Dockerfile 配置项指令</th>
<th>传参运行</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Docker 命令</td>
<td>docker run nginx</td>
<td>docker run nginx /etc/nginx/new.conf</td>
</tr>
<tr>
<td align="center">衍生出的实际命令</td>
<td>nginx -c /etc/nginx/nginx.conf</td>
<td>nginx -c /etc/new.conf</td>
</tr>
</tbody></table>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul>
<li>Dockerfile 应至少指定一个 CMD 或 ENTRYPOINT 指令</li>
<li>ENTRYPOINT 应在将容器作为可执行文件时定义</li>
<li>CMD 应该用作为 ENTRYPOINT 命令定义默认参数或在容器中执行临时命令的一种方式</li>
<li>CMD 使用替代参数运行容器时将被覆盖</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>No ENTRYPOINT</th>
<th>ENTRYPOINT entry p1_entry</th>
<th>ENTRYPOINT [‘entry’,’p1_entry’]</th>
</tr>
</thead>
<tbody><tr>
<td>No CMD</td>
<td>error, not allowed</td>
<td>/bin/sh -c entry p1_entry</td>
<td>entry p1_entry</td>
</tr>
<tr>
<td>CMD [‘cmd’,’p1_cmd’]</td>
<td>cmd p1_cmd</td>
<td>/bin/sh -c entry p1_entry</td>
<td>entry p1_entry cmd p1_cmd</td>
</tr>
<tr>
<td>CMD [‘p1_cmd’,’p2_cmd’]</td>
<td>p1_cmd p2_cmd</td>
<td>/bin/sh -c entry p1_entry</td>
<td>entry p1_entry p1_cmd p2_cmd</td>
</tr>
<tr>
<td>CMD cmd p1_cmd</td>
<td>/bin/sh -c cmd p1_cmd</td>
<td>/bin/sh -c entry p1_entry</td>
<td>entry p1_entry /bin/sh -c cmd p1_cmd</td>
</tr>
</tbody></table>
<h3 id="镜像优化"><a href="#镜像优化" class="headerlink" title="镜像优化"></a>镜像优化</h3><ul>
<li>合并多个相同作用的指令以减少新建镜像层数</li>
<li>使用较小的基础镜像</li>
<li>使用 .dockerignore 文件, 从构建上下文中忽略指定的文件</li>
<li>在 RUN 之后放置 COPY 指令, 有助于 docker 能够更好的使用缓存功能</li>
<li>在安装后删除软件包</li>
<li>使用 Docker 镜像缩容工具</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li>Dockerfile 配置文件</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">centos:7</span> <span class="comment"># 基础镜像</span></span><br><span class="line"></span><br><span class="line"><span class="string">LABEL</span> <span class="string">authors=luoleiself&lt;luoleiself@163.com&gt;</span> <span class="comment"># 镜像元数据</span></span><br><span class="line"></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/usr/local/</span>   <span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">hello.txt</span> <span class="string">$PWD</span>   <span class="comment"># 复制文件</span></span><br><span class="line"></span><br><span class="line"><span class="string">VOLUME</span> [<span class="string">&quot;/var/log&quot;</span>] <span class="comment"># 挂载匿名数据卷</span></span><br><span class="line"></span><br><span class="line"><span class="string">CMD</span> [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;/usr/local/hello.txt&quot;</span>]   <span class="comment"># 容器运行时执行的命令</span></span><br></pre></td></tr></table></figure>

<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建镜像并指定镜像名称和版本号, 最后的 . 很重要,表示在当前目录下进行构建, 可以使用</span></span><br><span class="line">[root@localhost workspace]<span class="comment"># docker build -t hello:v1.0 .</span></span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/6 : FROM centos:7</span><br><span class="line"> ---&gt; eeb6ee3f44bd</span><br><span class="line">Step 2/6 : LABEL maintainer=luoleiself&lt;luoleiself@163.com&gt;</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 42aee4c83238</span><br><span class="line">Removing intermediate container 42aee4c83238</span><br><span class="line"> ---&gt; c0a8427ea1ca</span><br><span class="line">Step 3/6 : WORKDIR /usr/local/</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 0b1c0da5bfdb                   <span class="comment"># 启动临时容器</span></span><br><span class="line">Removing intermediate container 0b1c0da5bfdb    <span class="comment"># 修改元数据内部使用 `docker commit` 提交镜像后, 立即删除临时容器</span></span><br><span class="line"> ---&gt; 63cd399d1589</span><br><span class="line">Step 4/6 : COPY hello.txt <span class="variable">$PWD</span></span><br><span class="line"> ---&gt; 2e6fe81c553d</span><br><span class="line">Step 5/6 : VOLUME [<span class="string">&quot;/var/log&quot;</span>]                  <span class="comment"># 挂载匿名数据卷</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 35e67913cfb2</span><br><span class="line">Removing intermediate container 35e67913cfb2</span><br><span class="line"> ---&gt; 60419e54ac19</span><br><span class="line">Step 6/6 : CMD [<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;/usr/local/hello.txt&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 1785744ac7aa</span><br><span class="line">Removing intermediate container 1785744ac7aa</span><br><span class="line"> ---&gt; 4cd89659cce0</span><br><span class="line">Successfully built 4cd89659cce0</span><br><span class="line">Successfully tagged hello:v1.0</span><br><span class="line"></span><br><span class="line">[root@localhost workspace]<span class="comment"># docker run --name hello-v1 hello:v1.0 # 基于镜像创建容器</span></span><br><span class="line">hello docker</span><br></pre></td></tr></table></figure>

<h4 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h4><h5 id="镜像配置信息"><a href="#镜像配置信息" class="headerlink" title="镜像配置信息"></a>镜像配置信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost workspace]<span class="comment"># docker image inspect hello:v1.0</span></span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;Config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;Cmd&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;cat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/usr/local/hello.txt&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;sha256:60419e54ac191ef9170c15d90ab3e0a040ae75ab0c15b320918977336710f17e&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Volumes&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;/var/log&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;/usr/local/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Entrypoint&quot;</span>: null,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="镜像历史信息"><a href="#镜像历史信息" class="headerlink" title="镜像历史信息"></a>镜像历史信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost workspace]<span class="comment"># docker image history hello:v1.0</span></span><br><span class="line">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class="line">4cd89659cce0   25 minutes ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;cat&quot; &quot;/usr/local/he…   0B</span></span><br><span class="line">60419e54ac19   25 minutes ago   /bin/sh -c <span class="comment">#(nop)  VOLUME [/var/log]            0B</span></span><br><span class="line">2e6fe81c553d   25 minutes ago   /bin/sh -c <span class="comment">#(nop) COPY file:f5a7cb03621adea9…   13B</span></span><br><span class="line">63cd399d1589   25 minutes ago   /bin/sh -c <span class="comment">#(nop) WORKDIR /usr/local/           0B</span></span><br><span class="line">c0a8427ea1ca   25 minutes ago   /bin/sh -c <span class="comment">#(nop)  LABEL maintainer=luoleise…   0B</span></span><br><span class="line">eeb6ee3f44bd   7 months ago     /bin/sh -c <span class="comment">#(nop)  CMD [&quot;/bin/bash&quot;]            0B</span></span><br><span class="line">&lt;missing&gt;      7 months ago     /bin/sh -c <span class="comment">#(nop)  LABEL org.label-schema.sc…   0B</span></span><br><span class="line">&lt;missing&gt;      7 months ago     /bin/sh -c <span class="comment">#(nop) ADD file:b3ebbe8bd304723d4…   204MB</span></span><br></pre></td></tr></table></figure>

<h4 id="查看容器状态"><a href="#查看容器状态" class="headerlink" title="查看容器状态"></a>查看容器状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost workspace]<span class="comment"># docker container inspect hello-v1</span></span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;08785005cb382a42f41b8f7230564cf468d38be82ce74c94fb3a277ef5a64f66&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/08785005cb382a42f41b8f7230564cf468d38be82ce74c94fb3a277ef5a64f66/_data&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/var/log&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
        <category>linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令操作篇</title>
    <url>/2021/04/b0420868a4bc/</url>
    <content><![CDATA[<h3 id="操作篇"><a href="#操作篇" class="headerlink" title="操作篇"></a>操作篇</h3><h4 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init [project-name]</span><br></pre></td></tr></table></figure>

<h4 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>

<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h5><ul>
<li><p>a|all: 列出所有本地和关联远程分支</p>
</li>
<li><p>r: 列出关联远程分支</p>
</li>
<li><p>v|verbose: 列出分支并显示当前提交信息摘要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch [-a] [-r] [-v]</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<h5 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h5 id="移动-修改"><a href="#移动-修改" class="headerlink" title="移动|修改"></a>移动|修改</h5><ul>
<li><p>m: 移动|修改分支, old-branch 无则为移动操作</p>
</li>
<li><p>M: 强制移动|修改分支即使新分支存在, old-branch 无则为移动操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch [-m] [-M] [&lt;old-branch&gt;] &lt;new-branch&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h5><ul>
<li><p>c: 复制分支和分支提交历史</p>
</li>
<li><p>C: 强制复制分支和分支提交历史</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch [-c] [-M] [&lt;old-branch&gt;] &lt;new-branch&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ul>
<li><p>d: 删除本地分支,一般和 r 配合删除关联远程分支</p>
</li>
<li><p>D: 强制删除本地分支, 即使分支未被合并</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch [-d] [-D] &lt;branch-name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout [branch-name]</span><br></pre></td></tr></table></figure>

<h6 id="切换并创建新分支"><a href="#切换并创建新分支" class="headerlink" title="切换并创建新分支"></a>切换并创建新分支</h6><p>基于远程分支创建新分支,自动建立追踪关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt; [-t] [&lt;remote-branch&gt;]</span><br></pre></td></tr></table></figure>

<h5 id="分支追踪关系"><a href="#分支追踪关系" class="headerlink" title="分支追踪关系"></a>分支追踪关系</h5><ul>
<li>t|no-track: 建立|取消分支追踪关系</li>
<li>u|unset-upstream: 建立|取消分支追踪关系</li>
</ul>
<h6 id="当前分支和远程分支建立追踪关系"><a href="#当前分支和远程分支建立追踪关系" class="headerlink" title="当前分支和远程分支建立追踪关系"></a>当前分支和远程分支建立追踪关系</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -t &lt;remote-branch&gt;</span><br></pre></td></tr></table></figure>

<h6 id="指定分支和远程分支建立追踪关系"><a href="#指定分支和远程分支建立追踪关系" class="headerlink" title="指定分支和远程分支建立追踪关系"></a>指定分支和远程分支建立追踪关系</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -u &lt;local-branch&gt; &lt;remote-branch&gt;</span><br></pre></td></tr></table></figure>

<h5 id="分支追踪关系-提交摘要"><a href="#分支追踪关系-提交摘要" class="headerlink" title="分支追踪关系,提交摘要"></a>分支追踪关系,提交摘要</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch [-vv]</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/git-branch-1.jpg" alt="upstream"></p>
<h5 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h5><h6 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h6><ul>
<li>fast-forward(ff): 快速合并, 不创建新的 commit, 原分支删除后提交记录消失, 默认方式</li>
<li>no-ff: 不快速合并, 保留原有分支记录, 创建新的 commit</li>
<li>squash: 合并一些不必要的 commit, 创建新的 commit</li>
<li>stat: 合并结束后统计显示区别</li>
<li>continue: 解决冲突后结束合并</li>
<li>abort: 中断解决冲突结束合并</li>
<li>quit: 放弃合并</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge [--no-ff] &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/git-branch-2.png" alt="merge"></p>
<h6 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h6><ul>
<li>i|interactive: 交互式操作</li>
<li>continue: 解决冲突后结束合并</li>
<li>abort: 中断解决冲突结束合并</li>
<li>quit: 放弃合并</li>
<li>skip: 重启合并跳过当前的修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/git-branch-3.png" alt="rebase"></p>
<h6 id="选择合并"><a href="#选择合并" class="headerlink" title="选择合并"></a>选择合并</h6><ul>
<li><p>选择一个或者多个 commit, 合并进当前分支, 手动 commit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick [--no-commit|-n] &lt;commit-ish&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>选择 commit 区间合并, 含尾不含头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick [--ff] commit1...commitN</span><br></pre></td></tr></table></figure></li>
<li><p>选择 commit 区间合并, 包含头和尾</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick [--ff] commit1^...commitN</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><h5 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h5><ul>
<li>all|A|. 添加所有文件提交信息列表</li>
<li>i|interactive: 交互式操作</li>
<li>n|dry-run: 不执行任何操作, 只显示做什么</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add [-A] [-i] [-n] [&lt;file&gt;...]</span><br></pre></td></tr></table></figure>

<h5 id="撤销文件"><a href="#撤销文件" class="headerlink" title="撤销文件"></a>撤销文件</h5><ul>
<li><p>撤销工作区文件的变更</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- [.|&lt;file&gt;...]</span><br></pre></td></tr></table></figure></li>
<li><p>恢复上一个 commit 的所有文件到工作区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure></li>
<li><p>恢复指定 commit 的指定文件到工作区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout [commit] [file]</span><br></pre></td></tr></table></figure></li>
<li><p>恢复上次提交的文件到暂存区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset -- files</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img data-src="/images/git-checkout-1.png" alt="git-checkout-1.png"></p>
<h5 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h5><ul>
<li>a|all: git add -A 的缩写</li>
<li>m|message: commit 的注释</li>
<li>amend: 改写上一次 commit 的注释</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit [-am] [&lt;file&gt;...]</span><br></pre></td></tr></table></figure>

<h5 id="版本变更"><a href="#版本变更" class="headerlink" title="版本变更"></a>版本变更</h5><h6 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h6><ul>
<li><p>mixed: 还原版本库和暂存区, 工作区保持不变, 默认方式</p>
</li>
<li><p>soft: 还原版本库, 暂存区和工作保持不变</p>
</li>
<li><p>hard: 还原版本库和暂存区和工作区</p>
</li>
<li><p>keep: 还原版本库和暂存区, 并更新工作区中的 commit 和 HEAD 之间不同的文件, 如果不同的文件本地有更改则中止</p>
</li>
<li><p>merge: 还原版本库和暂存区, 并更新工作区中的 commit 和 HEAD 之间不同的文件, 但保留暂存区和工作区中不同的文件(既有未添加的更改), 如果不同的文件有未暂存的更改则中止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset 3f405f2</span><br><span class="line">git reset --soft HEAD^</span><br><span class="line">git reset --hard HEAD~3</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img data-src="/images/git-branch-4.png" alt="reset-1"><br><img data-src="/images/git-branch-5.png" alt="reset-2"></p>
<blockquote>
<p>reset 回退操作时只在当前分支的 commit 上操作, 跳过 merge 进来的 commit</p>
</blockquote>
<p><img data-src="/images/git-reset-1.png" alt="reset-3"></p>
<ul>
<li>其他参数区别参见 git reset --help</li>
</ul>
<h6 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h6><p>撤销一个或多个 commit, 并手动提交 commit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert [--no-commit|-n] [&lt;commit-ish&gt;...]</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h5><ul>
<li><p>d|delete: 删除指定标签</p>
</li>
<li><p>l|list: 显示所有标签列表</p>
</li>
<li><p>show: 查看指定标签信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag [-l]</span><br><span class="line">git show [&lt;tag-name&gt;]</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="创建-tag"><a href="#创建-tag" class="headerlink" title="创建 tag"></a>创建 tag</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag [&lt;tag-name&gt;] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure>

<h6 id="提交-tag"><a href="#提交-tag" class="headerlink" title="提交 tag"></a>提交 tag</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [&lt;remote&gt;] [&lt;tag-name&gt;]</span><br><span class="line">git push [&lt;remote&gt;] --tags</span><br></pre></td></tr></table></figure>

<h6 id="删除-tag"><a href="#删除-tag" class="headerlink" title="删除 tag"></a>删除 tag</h6><ul>
<li><p>删除本地 tag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag [-d] [&lt;tag-name&gt;]</span><br></pre></td></tr></table></figure></li>
<li><p>删除远程 tag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [&lt;remote&gt;] [--delete] &lt;tag-name&gt;</span><br><span class="line">git push [&lt;remote&gt;] :refs/tags/&lt;tag-name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><ul>
<li><p>stat: 统计不同数量</p>
</li>
<li><p>cached: 比较暂存区和指定 commit 的差异</p>
</li>
<li><p>staged: 比较暂存区和版本库的差异</p>
</li>
<li><p>check: 列出找到可能的空白错误</p>
</li>
<li><p>path: 指定 commit 之间的文件的差异</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff [&lt;commit&gt;] [&lt;commit&gt;] [--] [&lt;path&gt;]</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="工作区和版本库的差异"><a href="#工作区和版本库的差异" class="headerlink" title="工作区和版本库的差异"></a>工作区和版本库的差异</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>

<h6 id="暂存区和工作区的差异"><a href="#暂存区和工作区的差异" class="headerlink" title="暂存区和工作区的差异"></a>暂存区和工作区的差异</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>

<h6 id="暂存区和版本库的差异"><a href="#暂存区和版本库的差异" class="headerlink" title="暂存区和版本库的差异"></a>暂存区和版本库的差异</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff [--staged]</span><br></pre></td></tr></table></figure>

<h6 id="暂存区和指定-commit-的差异"><a href="#暂存区和指定-commit-的差异" class="headerlink" title="暂存区和指定 commit 的差异"></a>暂存区和指定 commit 的差异</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff [--cached] [&lt;commit&gt;]</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/git-diff-1.jpg" alt="diff"></p>
<hr>
<h4 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h4><p>保存当前工作区的状态以备以后继续使用并恢复干净的工作区</p>
<ul>
<li>list: 显示暂存区暂存记录</li>
<li>show: 显示暂存区最新的记录和当前工作区的不同</li>
<li>pop: 取出指定的 stash 还原到工作区中并从暂存区中移除</li>
<li>apply: 取出指定的 stash 还原到工作区不从暂存区移除</li>
<li>clear: 清空暂存区</li>
<li>drop: 从暂存区移除指定的 stash</li>
<li>create: 基于当前工作区状态创建一个 stash 对象并返回 commit</li>
<li>store: 使用返回的 commit 生成 stash 记录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git stash list</span><br><span class="line">git stash show|pop|apply|drop [&lt;stash@&#123;0&#125;&gt;]</span><br><span class="line">git stash clear</span><br><span class="line">git stash create [&lt;message&gt;]</span><br><span class="line">git stash store [-m &lt;message&gt;] &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="/images/git-stash-1.jpg" alt="stash"></p>
<hr>
<h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><h5 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h5 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h5><ul>
<li><p>all: 显示所有分支历史记录</p>
</li>
<li><p>stat: 统计每个 commit 的差异数量</p>
</li>
<li><p>follow: 显示指定文件的历史记录</p>
</li>
<li><p>summary: 显示每个 commit 的具体操作</p>
</li>
<li><p>p: 显示每个 commit 文件的修改详情</p>
</li>
<li><p>graph: 图形化显示历史记录</p>
</li>
<li><p>oneline: 每条历史记录独占一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> [&lt;remote&gt;]</span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line">git <span class="built_in">log</span> -p [&lt;commit&gt;] [&lt;file&gt;]</span><br><span class="line">git <span class="built_in">log</span> [commit[..commit]]</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><h5 id="pull-拉取远程分支信息并执行合并"><a href="#pull-拉取远程分支信息并执行合并" class="headerlink" title="pull 拉取远程分支信息并执行合并"></a>pull 拉取远程分支信息并执行合并</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [&lt;remote&gt;] [&lt;remote-branch-name&gt;[:&lt;local-branch-name&gt;]]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>all: 获取远程所有分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [--all]</span><br></pre></td></tr></table></figure></li>
<li><p>stat: 统计合并后的差异</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [--<span class="built_in">stat</span>] [&lt;remote&gt;] [&lt;remote-branch-name&gt;[:&lt;local-branch-name&gt;]]</span><br></pre></td></tr></table></figure></li>
<li><p>no-ff: 不执行快速合并</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [--no-ff] [&lt;remote&gt;] [&lt;remote-branch-name&gt;[:&lt;local-branch-name&gt;]]</span><br></pre></td></tr></table></figure></li>
<li><p>t|tags: 获取远程的 tags, 默认</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [-t] [&lt;remote&gt;] [&lt;remote-branch-name&gt;[:&lt;local-branch-name&gt;]]</span><br></pre></td></tr></table></figure></li>
<li><p>no-tags: 不拉取远程的 tags</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [--no-tags] [&lt;remote&gt;] [&lt;remote-branch-name&gt;[:&lt;local-branch-name&gt;]]</span><br></pre></td></tr></table></figure></li>
<li><p>set-upstream: 建立追踪关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [--set-upstream] [&lt;remote&gt;] [&lt;remote-branch-name&gt;[:&lt;local-branch-name&gt;]]</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="fetch-拉取远程分支信息"><a href="#fetch-拉取远程分支信息" class="headerlink" title="fetch 拉取远程分支信息"></a>fetch 拉取远程分支信息</h5><ul>
<li><p>all: 获取所有远程分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch [-all]</span><br></pre></td></tr></table></figure></li>
<li><p>t|tags: 获取远程的 tags, 默认</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch [-t] [&lt;remote&gt;] [&lt;remote-branch-name&gt;]</span><br></pre></td></tr></table></figure></li>
<li><p>no-tags: 不拉取远程的 tags</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [--no-tags] [&lt;remote&gt;] [&lt;remote-branch-name&gt;]</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="push-推送本地分支信息到远程"><a href="#push-推送本地分支信息到远程" class="headerlink" title="push 推送本地分支信息到远程"></a>push 推送本地分支信息到远程</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [&lt;remote&gt;] [&lt;local-branch-name&gt;[:&lt;remote-branch-nam&gt;]]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>all: 推送所有的分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [--all]</span><br></pre></td></tr></table></figure></li>
<li><p>f|force: 强制推送分支信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [-f] [&lt;remote&gt;] [&lt;local-branch-name&gt;[:&lt;remote-branch-nam&gt;]]</span><br></pre></td></tr></table></figure></li>
<li><p>d|delete: 删除远程分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [-d] [&lt;remote&gt;] [&lt;remote-branch-name&gt;]</span><br><span class="line">git push [&lt;remote&gt;] [:[&lt;remote_branch_name&gt;]]</span><br></pre></td></tr></table></figure></li>
<li><p>tags: 推送标签信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [&lt;remote&gt;] [&lt;tag-name&gt;]</span><br><span class="line">git push [&lt;remote&gt;] [--tags]</span><br><span class="line">git push [&lt;remote&gt;] :refs/tags/[&lt;tag-name&gt;]</span><br></pre></td></tr></table></figure></li>
<li><p>u|set-upstream: 建立分支追踪</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [-u] [&lt;remote&gt;] [&lt;remote-branch-name&gt;]</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令配置篇</title>
    <url>/2021/04/00ea2bbb2db0/</url>
    <content><![CDATA[<p><a href="https://git-scm.com/"><img data-src="/images/git-flow-1.jpg" alt="概念图"></a></p>
<h3 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><h5 id="结构型概念"><a href="#结构型概念" class="headerlink" title="结构型概念"></a>结构型概念</h5><h6 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h6><p>远程仓库, 托管代码的服务器, 团队协作开发时都与此进行同步</p>
<h6 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h6><p>本机仓库(或版本库), 管理所有被提交的代码版本, 其中 HEAD 指向最新放入仓库的版本</p>
<h6 id="Index-Stage"><a href="#Index-Stage" class="headerlink" title="Index / Stage"></a>Index / Stage</h6><p>暂存区, 临时存放改动的需要被提交的文件列表信息</p>
<h6 id="Workspace"><a href="#Workspace" class="headerlink" title="Workspace"></a>Workspace</h6><p>工作区, 当前可见的随时可以进行操作的区域</p>
<h5 id="功能型概念"><a href="#功能型概念" class="headerlink" title="功能型概念"></a>功能型概念</h5><h6 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h6><ul>
<li>修改: Git 可以感知到工作目录中的文件的变化, 然后通过 add 命令可以将变更的文件添加到暂存区</li>
<li>暂存: 通过 add 命令将工作目录中的变更的文件提交到暂存区, 等候被 commit</li>
<li>提交: 将暂存区的文件 commit 至 Git 版本库中永久保存</li>
</ul>
<h6 id="commit-节点"><a href="#commit-节点" class="headerlink" title="commit 节点"></a>commit 节点</h6><p>Git 中每次的提交都会对提交的文件生成快照并生成一个 hash 值作为唯一标识的节点, 不管 HEAD 或者 Branch 都是对 commit 节点的引用</p>
<h6 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h6><blockquote>
<p>指针或者引用, 一个仓库中只能有一个 HEAD, 指向任意一个节点/分支,并且指向的节点始终为当前工作目录</p>
</blockquote>
<hr>
<span id="more"></span>

<h4 id="Git-仓库用户凭据"><a href="#Git-仓库用户凭据" class="headerlink" title="Git 仓库用户凭据"></a>Git 仓库用户凭据</h4><p>场景: 使用 https 方式与远程仓库同步时, 不想每次都在提示框中输入用户名和密码确认, 此方式在用户家目录下创建(修改) .git-credentials 文件, 存储用户名和密码</p>
<ul>
<li><p>清除本地存储的用户名和密码凭据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --system --<span class="built_in">unset</span> credential.helper</span><br></pre></td></tr></table></figure></li>
<li><p>存储凭据, 在第一次 push 时提示输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Git-环境定制"><a href="#Git-环境定制" class="headerlink" title="Git 环境定制"></a>Git 环境定制</h4><ul>
<li>local: 读取仓库配置文件 <code>.git/config</code></li>
<li>global: 读取用户配置文件 <code>.gitconfig</code>, 不加默认为仓库配置</li>
</ul>
<h5 id="显示配置项"><a href="#显示配置项" class="headerlink" title="显示配置项"></a>显示配置项</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config [--<span class="built_in">local</span>|--global] -l|--list</span><br></pre></td></tr></table></figure>

<h5 id="使用-vim-编辑配置文件"><a href="#使用-vim-编辑配置文件" class="headerlink" title="使用 vim 编辑配置文件"></a>使用 vim 编辑配置文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config [--<span class="built_in">local</span>|--global] -e|--edit</span><br></pre></td></tr></table></figure>

<h5 id="unset-重置"><a href="#unset-重置" class="headerlink" title="unset 重置"></a>unset 重置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config [--global] --<span class="built_in">unset</span> [key]</span><br></pre></td></tr></table></figure>

<h5 id="add-添加配置"><a href="#add-添加配置" class="headerlink" title="add 添加配置"></a>add 添加配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config [--global] --add key value</span><br><span class="line">git config --add user.name Tom</span><br></pre></td></tr></table></figure>

<h5 id="get-获取配置"><a href="#get-获取配置" class="headerlink" title="get 获取配置"></a>get 获取配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config [--global] --get key</span><br><span class="line">git config --get user.name</span><br></pre></td></tr></table></figure>

<h5 id="alias-命令缩写"><a href="#alias-命令缩写" class="headerlink" title="alias 命令缩写"></a>alias 命令缩写</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config [--global] <span class="built_in">alias</span>.* value</span><br><span class="line">git config alias.co checkout</span><br></pre></td></tr></table></figure>

<h6 id="alias-log-美化"><a href="#alias-log-美化" class="headerlink" title="alias.log 美化"></a>alias.log 美化</h6><ul>
<li><p>%H commit hash</p>
</li>
<li><p>%h commit short hash</p>
</li>
<li><p>%T tree hash</p>
</li>
<li><p>%t tree short hash</p>
</li>
<li><p>%P parent hash</p>
</li>
<li><p>%p parent short hash</p>
</li>
<li><p>%a[n|N] 作者名字</p>
</li>
<li><p>%a[e|E] 作者邮箱</p>
</li>
<li><p>%a[d|D|r|t|i] 日期格式</p>
</li>
<li><p>%c[n|N] 提交者名字</p>
</li>
<li><p>%c[e|E] 提交者邮箱</p>
</li>
<li><p>%c[d|D|r|t|i] 提交的日期格式</p>
</li>
<li><p>%d ref 名称</p>
</li>
<li><p>%e encoding</p>
</li>
<li><p>%s commit 信息标题</p>
</li>
<li><p>%f 过滤 commit 信息的标题使之可以作为文件名</p>
</li>
<li><p>%b commit 信息内容</p>
</li>
<li><p>%N commit notes</p>
</li>
<li><p>%g[D|d] reflog selector</p>
</li>
<li><p>%gs reflog subject</p>
</li>
<li><p>%Cred 切换至红色</p>
</li>
<li><p>%Cgreen 切换至绿色</p>
</li>
<li><p>%Cblue 切换至蓝色</p>
</li>
<li><p>%Creset 重设颜色</p>
</li>
<li><p>%C(color) 指定颜色</p>
</li>
<li><p>%n 换行</p>
</li>
<li><p>%m left right or boundary mark</p>
</li>
<li><p>%%a raw %</p>
</li>
<li><p>%x00 print a byte from a hex code</p>
</li>
<li><p>%w([[,[,]]]) switch line wrapping, like the -w option of git-shortlog(1).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config [--global] alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><img data-src="/images/git-config-1.jpg" alt="配置1"></p>
<h5 id="remote-设置"><a href="#remote-设置" class="headerlink" title="remote 设置"></a>remote 设置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v|--verbose</span><br></pre></td></tr></table></figure>

<h6 id="add-添加"><a href="#add-添加" class="headerlink" title="add 添加"></a>add 添加</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add name url</span><br></pre></td></tr></table></figure>

<h6 id="remove-删除"><a href="#remove-删除" class="headerlink" title="remove 删除"></a>remove 删除</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote remove name</span><br></pre></td></tr></table></figure>

<h6 id="rename-修改关联仓库名称"><a href="#rename-修改关联仓库名称" class="headerlink" title="rename 修改关联仓库名称"></a>rename 修改关联仓库名称</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rename old new</span><br></pre></td></tr></table></figure>

<h6 id="set-url-设置关联仓库地址"><a href="#set-url-设置关联仓库地址" class="headerlink" title="set-url 设置关联仓库地址"></a>set-url 设置关联仓库地址</h6><ul>
<li><p>push: 设置推送 url</p>
</li>
<li><p>add: 保持当前的 url,并添加一个新的 url</p>
</li>
<li><p>delete: 将删除匹配到的 url, 并添加一个新的 url</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url [--push|--add|--delete] name url</span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="get-url-获取关联仓库地址"><a href="#get-url-获取关联仓库地址" class="headerlink" title="get-url 获取关联仓库地址"></a>get-url 获取关联仓库地址</h6><ul>
<li><p>push: 获取推送 url</p>
</li>
<li><p>all: 获取所有 url</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote get-url [--push|--all] name</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid</title>
    <url>/2024/05/7356f3e0fe44/</url>
    <content><![CDATA[<h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><p>CSS Grid 是一个用于 web 的二维布局系统, 网格是由一系列水平及垂直的线构成的一种布局模式, 根据网格, 可以将内容按照行和列的格式进行排版.<br>CSS Grid 布局 和 Flexible 布局的主要区别在于 CSS Flexible 是为了一维布局服务的(沿横向或纵向), 而 CSS Grid 是为二维布局服务的(同时沿着横向和纵向)</p>
<h3 id="辅助属性"><a href="#辅助属性" class="headerlink" title="辅助属性"></a>辅助属性</h3><ul>
<li>网格轨道, 网格布局中使用 grid-template-rows 和 grid-template-columns 属性定义的网格上的行和列, 网格轨道是网格上任意两条相邻线之间的空间.</li>
<li>fr 单位, 新的长度单位, 表示网格容器中占用的轨道</li>
<li>minmax(min, max), 函数为一个行/列的尺寸设置了取值范围, 例如 minmax(100px, auto) 表示尺寸至少为 100px, 如果内容尺寸大于 100px 则会根据内容自动调整</li>
<li>repeat(count, value), 表示轨道列表的重复片段, 允许以更紧凑的形式写入大量显示重复模式的列或行</li>
</ul>
<h3 id="属性列表"><a href="#属性列表" class="headerlink" title="属性列表"></a>属性列表</h3><ul>
<li><p>grid-template-rows</p>
</li>
<li><p>grid-template-columns</p>
</li>
<li><p>grid-template-areas</p>
</li>
<li><p>grid-auto-flow</p>
</li>
<li><p>grid-auto-rows</p>
</li>
<li><p>grid-auto-columns</p>
</li>
<li><p>grid-gap/gap</p>
<ul>
<li>grid-column-gap</li>
<li>grid-row-gap</li>
</ul>
</li>
<li><p>grid-area</p>
<ul>
<li>grid-row</li>
<li>grid-column</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><h4 id="display"><a href="#display" class="headerlink" title="display"></a>display</h4><ul>
<li>grid 指定容器的行为类似块级元素并且采用网格布局</li>
<li>inline-grid 指定容器的行为类似行内元素并且采用网格布局</li>
</ul>
<h4 id="grid-template-rows"><a href="#grid-template-rows" class="headerlink" title="grid-template-rows"></a>grid-template-rows</h4><p>基于<strong>网格行</strong>的维度定义网格线的名称和网格轨道的尺寸大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*自动调整网格轨道大小, 等价于 max-content, min-content*/</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: auto;</span><br><span class="line"><span class="comment">/*定义 4 行并且指定每行的行高, 第 2 行高度自适应*/</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="number">40px</span> auto <span class="number">40px</span> <span class="number">50px</span>;</span><br><span class="line"><span class="comment">/*定义 3 行, </span></span><br><span class="line"><span class="comment">第 1 行分配 1fr 可用空间,</span></span><br><span class="line"><span class="comment">第 2 行分配 2fr 可用空间, </span></span><br><span class="line"><span class="comment">第 3 行分配 3fr 可用空间*/</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">3</span>fr;</span><br><span class="line"><span class="comment">/*定义 3 行, 每行分配 33.33% 可用空间*/</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>网格线, 使用<strong>方框号</strong>指定每根网格线的名字, 默认从 1 开始</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义 3 行并且指定每行的行高, </span></span><br><span class="line"><span class="comment">第 2 行高度自适应, </span></span><br><span class="line"><span class="comment">指定每根网格线的名字 r1 开始*/</span></span><br><span class="line"><span class="attribute">grid-template-rows</span>: [r1] <span class="number">100px</span> [r2] auto [r3] <span class="number">100px</span> [r4];</span><br></pre></td></tr></table></figure>

<h4 id="grid-template-columns"><a href="#grid-template-columns" class="headerlink" title="grid-template-columns"></a>grid-template-columns</h4><p>基于<strong>网格列</strong>的维度定义网格线的名称和网格轨道的尺寸大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*自动调整网格轨道大小, 等价于 max-content, min-content*/</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: auto;</span><br><span class="line"><span class="comment">/*定义 3 列并指定第 1 列和第 3 列的列宽, 第 2 列宽度自适应*/</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">40px</span> auto <span class="number">50px</span>;</span><br><span class="line"><span class="comment">/*定义 3 列并且指定每列的列宽, 第 3 列分配 2fr 可用空间*/</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">40px</span> <span class="number">40px</span> <span class="number">2</span>fr;</span><br><span class="line"><span class="comment">/*定义 2 列, 第 1 列分配 1fr 可用空间, 第 2 列分配 2fr 可用空间*/</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line"><span class="comment">/*定义 3 列, </span></span><br><span class="line"><span class="comment">第 1 列和第 3 列分配 1fr 可用空间, </span></span><br><span class="line"><span class="comment">第 2 列分配 2fr 可用空间*/</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">1</span>, <span class="number">1</span>fr <span class="number">2</span>fr <span class="number">1</span>fr);</span><br><span class="line"><span class="attribute">grid-template-rows</span>: [c1] <span class="number">100px</span> [c2] auto [c3] <span class="number">100px</span> [c4];</span><br></pre></td></tr></table></figure>

<ul>
<li>网格线, 使用<strong>方框号</strong>指定每根网格线的名字, 默认从 1 开始</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*定义 3 列并且指定每列的列宽, 第 2 列宽度自适应，指定每根网格线的名字 c1 开始*/</span></span><br><span class="line"><span class="attribute">grid-template-columns</span>: [c1] <span class="number">100px</span> [c2] auto [c3] <span class="number">100px</span> [c4];</span><br></pre></td></tr></table></figure>

<h4 id="grid-template-areas"><a href="#grid-template-areas" class="headerlink" title="grid-template-areas"></a>grid-template-areas</h4><p>定义网格区域的别名, 网格区域和网格项没有关联, 但是可以和<a href="#grid-area">网格定位</a>属性关联, 例如 <code>grid-row-start</code>, <code>grid-column-start</code>, <code>grid-row-end</code>, <code>grid-column-end</code></p>
<ul>
<li>如果某些区域不需要, 则使用 <code>.</code> 表示</li>
<li>区域别名会影响到网格线, 每个区域的起始网格线自动命名为 <code>区域名-start</code>, 终止网格线自动命名为 <code>区域名-end</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义九宫格每个区域别名 */</span></span><br><span class="line"><span class="attribute">grid-template-areas</span>:</span><br><span class="line">  <span class="string">&#x27;a b c&#x27;</span></span><br><span class="line">  <span class="string">&#x27;d e f&#x27;</span></span><br><span class="line">  <span class="string">&#x27;g h i&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*左侧区域 b, 右上角区域 a, 右下角区域 c*/</span></span><br><span class="line"><span class="attribute">grid-template-areas</span>:</span><br><span class="line">  <span class="string">&#x27;b b a&#x27;</span></span><br><span class="line">  <span class="string">&#x27;b b c&#x27;</span></span><br><span class="line">  <span class="string">&#x27;b b c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*左上角区域 a, 右下角为 b 和 c, 右上角和左下角未指定区域别名*/</span></span><br><span class="line"><span class="attribute">grid-template-areas</span>:</span><br><span class="line">  <span class="string">&#x27;a a .&#x27;</span></span><br><span class="line">  <span class="string">&#x27;a a .&#x27;</span></span><br><span class="line">  <span class="string">&#x27;. b c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*顶部页眉区域 header, 底部页脚区域 footer, 中间区域 sidebar 和 main*/</span></span><br><span class="line"><span class="attribute">grid-template-areas</span>:</span><br><span class="line">  <span class="string">&#x27;header header header&#x27;</span></span><br><span class="line">  <span class="string">&#x27;sidebar main main&#x27;</span></span><br><span class="line">  <span class="string">&#x27;footer footer footer&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h4><p>精确指定在网格中被自动布局的元素如何排列, 默认值为 row</p>
<ul>
<li>row 指定自动布局算法按照通过逐行填充来排列元素, 在必要时增加新行</li>
<li>column 指定自动布局算法按照通过逐列填充来排列元素, 在必要时增加新列</li>
<li>dense 指定自动布局算法使用一种<code>稠密</code>堆积算法, 省略时使用 <code>稀疏</code> 算法, 配合 row 或 column 使用<ul>
<li><code>稠密</code>算法, 如果后面出现稍小的元素, 则会试图去填充网格中前面留下的空白, 这样会填上稍大元素留下的空白, 但同时也可能导致原来出现的次序被打乱</li>
<li><code>稀疏</code>算法, 布局算法只会向前移动, 永远不会填充空白, 这样保证了所有自动布局元素按照次序出现, 即使可能会留下被后面元素填充的空白</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-auto-flow</span>: row;</span><br><span class="line"><span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line"></span><br><span class="line"><span class="attribute">grid-auto-flow</span>: row dense;</span><br><span class="line"><span class="attribute">grid-auto-flow</span>: column dense;</span><br></pre></td></tr></table></figure>

<h4 id="grid-auto-rows"><a href="#grid-auto-rows" class="headerlink" title="grid-auto-rows"></a>grid-auto-rows</h4><p>指定<strong>隐式</strong>创建的网格横向轨道的高度, 例如某项超出了当前的网格布局区域, 浏览器会自动生成多余的网格以便放置项目</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-auto-rows</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">grid-auto-rows</span>: <span class="number">3</span>fr;</span><br><span class="line"><span class="attribute">grid-auto-rows</span>: <span class="number">25%</span>;</span><br><span class="line"><span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">100px</span>, auto);</span><br><span class="line"><span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(max-content, <span class="number">2</span>fr);</span><br></pre></td></tr></table></figure>

<h4 id="grid-auto-columns"><a href="#grid-auto-columns" class="headerlink" title="grid-auto-columns"></a>grid-auto-columns</h4><p>指定<strong>隐式</strong>创建的网格纵向轨道的宽度, 作用参考 <code>grid-auto-rows</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-auto-columns</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">grid-auto-columns</span>: <span class="number">3</span>fr;</span><br><span class="line"><span class="attribute">grid-auto-columns</span>: <span class="number">25%</span>;</span><br><span class="line"><span class="attribute">grid-auto-columns</span>: <span class="built_in">minmax</span>(<span class="number">100px</span>, auto);</span><br><span class="line"><span class="attribute">grid-auto-columns</span>: <span class="built_in">minmax</span>(max-content, <span class="number">2</span>fr);</span><br></pre></td></tr></table></figure>

<h4 id="grid-gap"><a href="#grid-gap" class="headerlink" title="grid-gap"></a>grid-gap</h4><p><code>grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</code> 网格行和列间隙的缩写</p>
<p>指定网格行和列之间的间隙, 此属性作为 <code>gap</code> 兼容低版本的别名</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-gap</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">grid-row</span>-<span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">grid-column</span>-<span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">gap</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">row-gap</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">column-gap</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure>

<h5 id="grid-column-gap"><a href="#grid-column-gap" class="headerlink" title="grid-column-gap"></a>grid-column-gap</h5><p>指定<strong>网格列</strong>之间的间隙大小</p>
<h5 id="grid-row-gap"><a href="#grid-row-gap" class="headerlink" title="grid-row-gap"></a>grid-row-gap</h5><p>指定<strong>网格行</strong>之间的间隙大小, 此属性作为 <code>row-gap</code> 兼容低版本的别名</p>
<h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><h4 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area  "></a>grid-area <em id="grid-area"></em> <!-- markdownlint-disable-line --></h4><p><code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</code> 合并简写形式</p>
<p>指定项目放在哪个区域, 是一种对 <code>grid-row-start</code>, <code>grid-column-start</code>, <code>grid-row-end</code>, <code>grid-column-end</code>的简写, 通过基线、 跨度(span)或没有(自动)的网格线放置在指定一个网格项的大小和位置, 继而确定区域的边界</p>
<ul>
<li>如果指定 4 个 <code>&lt;grid-line&gt;</code> 的值时, 第 1 个值为 <code>grid-row-start</code>, 第 2 个值为 <code>grid-column-start</code>, 第 3 个值为<code>grid-row-end</code>, 第 4 个值为 <code>grid-column-end</code><ul>
<li>当 <code>grid-column-end</code> 被忽略时, 如果 <code>grid-column-start</code> 为自定义关键字数据类型, <code>grid-column-end</code> 则为该值, 否则为 auto;</li>
<li>当 <code>grid-row-end</code> 被忽略时, 如果 <code>grid-row-start</code> 为自定义关键字数据类型, <code>grid-row-end</code> 则为该值, 否则为 auto;</li>
<li>当 <code>grid-column-start</code> 被忽略时, 如果 <code>grid-row-start</code> 为自定义关键字数据类型, 则所有四项普通写法的属性值均为该值, 否则为 auto;</li>
</ul>
</li>
<li>span, 为网格单元定义一个跨度, 使得网格单元的网格区域中的一条边界远离另一条边界 n 条基线. 默认值为 1;</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">grid-area</span>: auto;</span><br><span class="line"><span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">2</span> / auto / span <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="comment">/* 放在 3 行 3 列的中心网格位置 */</span></span><br><span class="line">  <span class="comment">/* 网格线编号, 规则见上 */</span></span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">2</span>;</span><br><span class="line">  <span class="comment">/* 网格线名 */</span></span><br><span class="line">  <span class="attribute">grid-area</span>: r2 / c2 / r3 / c3;</span><br><span class="line">  <span class="comment">/* 区域别名 */</span></span><br><span class="line">  <span class="attribute">grid-area</span>: e;</span><br><span class="line">  <span class="comment">/* 区域别名网格线起始名和终止名 */</span></span><br><span class="line">  <span class="attribute">grid-area</span>: e-start / e-start / e-end / e-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="grid-row"><a href="#grid-row" class="headerlink" title="grid-row"></a>grid-row</h4><p><code>grid-row: &lt;start-line&gt; / &lt;end-line&gt;;</code> 合并简写形式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="comment">/* 上边框是第 2 根水平网格线, 下边框是第 4 根水平网格线 */</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>;</span><br><span class="line">  <span class="comment">/* 左边框是第 1 根垂直网格线, 有边框是第 3 根垂直网格线 */</span></span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 使用网格线名 */</span></span><br><span class="line">  <span class="attribute">grid-row</span>: r2 / r4;</span><br><span class="line">  <span class="attribute">grid-column</span>: c1 / c3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="grid-row-start"><a href="#grid-row-start" class="headerlink" title="grid-row-start"></a>grid-row-start</h5><p>指定上边框所在的水平网格线</p>
<h5 id="grid-row-end"><a href="#grid-row-end" class="headerlink" title="grid-row-end"></a>grid-row-end</h5><p>指定下边框所在的水平网格线</p>
<h4 id="grid-column"><a href="#grid-column" class="headerlink" title="grid-column"></a>grid-column</h4><p><code>grid-column: &lt;start-line&gt; / &lt;end-line&gt;;</code> 合并简写形式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="comment">/* 上边框是第 2 根水平网格线, 下边框是第 3 根水平网格线 */</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="comment">/* 左边框是第 2 根垂直网格线, 有边框是第 4 根垂直网格线 */</span></span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 使用网格线名 */</span></span><br><span class="line">  <span class="attribute">grid-row</span>: r2 / r3;</span><br><span class="line">  <span class="attribute">grid-column</span>: c2 / c4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="grid-column-start"><a href="#grid-column-start" class="headerlink" title="grid-column-start"></a>grid-column-start</h5><p>指定左边框所在的垂直网格线</p>
<h5 id="grid-column-end"><a href="#grid-column-end" class="headerlink" title="grid-column-end"></a>grid-column-end</h5><p>指定有边框所在的垂直网格线</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Grid</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2021/07/1ddfb1010b19/</url>
    <content><![CDATA[<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul>
<li><p>100 Continue 请求继续</p>
</li>
<li><p>101 Switching Protocols 协议切换，通过 upgrade 消息头切换协议</p>
</li>
<li><p>102 Processing 继续执行</p>
</li>
<li><p>200 OK 请求成功</p>
</li>
<li><p>204 No Content 没有响应实体</p>
</li>
<li><p>206 Partial Content 服务器处理部分 GET 请求</p>
</li>
<li><p>301 Moved Permanently 资源永久移动</p>
</li>
<li><p>302 Move Temporarily 资源临时移动</p>
</li>
<li><p>303 See Other 参见其他</p>
</li>
<li><p>304 Not Modified 资源没有改动</p>
</li>
<li><p>305 Use Proxy 使用代理</p>
</li>
<li><p>307 Temporary Redirect 资源临时从不同的 URI 响应</p>
</li>
<li><p>400 Bad Request 错误的请求</p>
</li>
<li><p>401 Unauthorized 需要验证</p>
</li>
<li><p>403 Forbidden 服务器拒绝执行</p>
</li>
<li><p>404 Not Found 资源未找到</p>
</li>
<li><p>405 Method Not Allowed 请求方法不能用于相应资源</p>
</li>
<li><p>408 Request Timeout 请求超时</p>
</li>
<li><p>413 Request Entity Too Large 请求体超长</p>
</li>
<li><p>415 Unsupported Media Type 不支持的媒体类型</p>
</li>
<li><p>500 Internal Server Error 服务器错误</p>
</li>
<li><p>502 Bad Gateway 网关错误</p>
</li>
<li><p>504 Gateway Timeout 网关超时</p>
</li>
<li><p>505 HTTP Version Not Supported 服务器不支持的使用的 HTTP 版本</p>
</li>
</ul>
<h3 id="URL-编码常用"><a href="#URL-编码常用" class="headerlink" title="URL 编码常用"></a>URL 编码常用</h3><ul>
<li>%21 !</li>
<li>%22 “</li>
<li>%23 #</li>
<li>%24 $</li>
<li>%25 %</li>
<li>%26 &amp;</li>
<li>%27 ‘</li>
<li>%28 (</li>
<li>%29 )</li>
<li>%2F /</li>
<li>%30-9 0..9</li>
<li>%3A :</li>
<li>%3B ;</li>
<li>%3C &lt;</li>
<li>%3D =</li>
<li>%3E &gt;</li>
<li>%3F ?</li>
<li>%40 @</li>
<li>%41 A</li>
</ul>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>IntersectionObserver</title>
    <url>/2023/04/ec2526e79bc5/</url>
    <content><![CDATA[<h2 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h2><blockquote>
<p>之前通常要使用事件监听, 并且需要频繁调用 Element.getBoundingClientRect() 方法以获取相关元素的边界信息, 并使用事件通知的方式同步进行计算, 可能造成性能问题</p>
</blockquote>
<p><code>IntersectionObserver</code> 接口提供了一种<strong>异步观察</strong>目标元素与祖先元素或顶级文档视口(viewport)交叉状态的方法<br>当一个 <code>IntersectionObserver</code> 对象被创建时, 其被配置为监听根中一段给定比例的可见区域, 一旦 <code>IntersectionObserver</code> 被创建, 则无法更改其配置, 所以一个给定的观察者对象只能用来监听可见区域的特定变化值, 但是, 可以在同一个观察者对象中配置监听多个目标元素</p>
<ul>
<li>交叉状态触发是成对出现的, 就像 <code>mouseenter</code> 和 <code>mouseleave</code> 事件一样, 有进入状态在未来某一时刻肯定会有移出状态</li>
<li>在非交叉区域内的操作不会触发, 和 <code>scroll</code> 事件的触发是有区别的</li>
</ul>
<h3 id="应用范围"><a href="#应用范围" class="headerlink" title="应用范围"></a>应用范围</h3><ul>
<li>图片懒加载, 当图片滚动到可见区域时才进行加载</li>
<li>内容无限滚动, 用户滚动到接近内容底部时直接加载更多而无需用户操作翻页</li>
<li>检测广告的曝光情况, 为了计算广告收益, 需要直到广告元素的曝光情况</li>
<li>在到达可见区域时执行任务或播放动画</li>
</ul>
<h3 id="触发时机"><a href="#触发时机" class="headerlink" title="触发时机"></a>触发时机</h3><p>通常只需要关注文档最接近的可滚动祖先元素的交集更改, 如果元素不是可滚动元素的后代, 则默认为设备视窗<br>如果要观察相对于根元素的交集, 则指定根元素为 null</p>
<ul>
<li>每当目标元素与设备视窗或者其他指定元素发生交集的时候执行, 设备视窗或者其他元素被称为根元素或根</li>
<li>Observer 第一次监听目标元素时</li>
</ul>
<span id="more"></span>

<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>创建并返回一个新的 <code>IntersectionObserver</code> 实例, 当其监听到目标元素的可见部分(的比例)超过了一个或多个<strong>阈值</strong>(threshold)时, 执行指定的回调函数<br>如果指定 <code>rootMargin</code> 则会检查其是否符合语法规定, 检查阈值以确保全部在 <code>0.0</code> 到 <code>1.0</code> 之间, 并且阈值列表会按升序排列, 如果阈值列表为空, 则默认为一个 [0.0] 的数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(</span><br><span class="line">  <span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 intersectionRatio 为 0, 则目标在视野外</span></span><br><span class="line">    <span class="keyword">if</span> (entries[<span class="number">0</span>].<span class="property">intersectionRatio</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(entries, observer);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 使用文档视口作为 root</span></span><br><span class="line">    <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 添加到根的边界盒中的一组偏移量用于计算交叉值</span></span><br><span class="line">    <span class="attr">rootMargin</span>: <span class="string">&#x27;0px 0px 0px 0px&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定元素在根的可见程度每多 25% 执行一次回调函数</span></span><br><span class="line">    <span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1</span>],</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="参数-callback"><a href="#参数-callback" class="headerlink" title="参数 callback"></a>参数 callback</h4><p>当元素的可见比例超过指定阈值后, 会调用此回调函数</p>
<ul>
<li>entries 一个 <code>IntersectionObserverEntry</code> 对象的数组, 每个被触发的阈值都稍微与指定阈值有偏差</li>
<li>observer 被调用的 <code>IntersectionObserver</code> 实例</li>
</ul>
<h4 id="可选-options"><a href="#可选-options" class="headerlink" title="可选 options"></a>可选 options</h4><p>用来配置 observer 实例的对象, 如果未指定, observer 实例默认使用文档视口作为 root, 并且没有 <code>rootMargin</code>, 阈值为 0%</p>
<h5 id="root"><a href="#root" class="headerlink" title="root"></a>root</h5><p>监听元素的祖先元素对象, 其边界盒将被视作视口, 如果未指定或者为 null, 则默认为浏览器视窗</p>
<h5 id="rootMargin"><a href="#rootMargin" class="headerlink" title="rootMargin"></a>rootMargin</h5><p>一个计算交叉值时添加至根的边界盒中的一组偏移量, 类型为字符串, 可以有效的缩小或扩大根的判定范围从而满足计算需要, 默认为 <code>0px 0px 0px 0px</code></p>
<h5 id="threshold"><a href="#threshold" class="headerlink" title="threshold"></a>threshold</h5><p>规定了一个监听目标与边界盒交叉区域的比例值, 可以为一个具体的数值或是一组 <code>0.0</code> 到 <code>1.0</code> 之间的数组<br>如果指定元素在根的可见程度每多 25% 执行一次回调, 则指定为数组 <code>[0, 0.25, 0.5, 0.75, 1]</code><br>如果指定元素在根的可见程度超过 50% 执行一次回调, 则指定为 <code>0.5</code></p>
<ul>
<li>若指定为 0.0, 监听元素与根即使有 1 像素交叉, 此元素也会被视为可见, 默认为 0.0</li>
<li>若指定为 1.0, 监听元素都在可见范围内时才被视为可见</li>
</ul>
<h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><h4 id="ob-root"><a href="#ob-root" class="headerlink" title="ob.root"></a>ob.root</h4><p>只读属性, 获取当前的 <code>IntersectionObserver</code> 实例的根元素</p>
<h4 id="ob-rootMargin"><a href="#ob-rootMargin" class="headerlink" title="ob.rootMargin"></a>ob.rootMargin</h4><p>只读属性, 获取当前 <code>IntersectionObserver</code> 实例的根元素的边界盒的偏移量</p>
<h4 id="ob-thresholds"><a href="#ob-thresholds" class="headerlink" title="ob.thresholds"></a>ob.thresholds</h4><p>只读属性, 获取当前 <code>IntersectionObserver</code> 实例的根元素与监听目标的交叉区域的比例值</p>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><h4 id="ob-disconnect"><a href="#ob-disconnect" class="headerlink" title="ob.disconnect()"></a>ob.disconnect()</h4><p>停止 <code>IntersectionObserver</code> 实例对所有目标元素的监听行为</p>
<h4 id="ob-observe-targetElement"><a href="#ob-observe-targetElement" class="headerlink" title="ob.observe(targetElement)"></a>ob.observe(targetElement)</h4><p>开始监听指定元素</p>
<ul>
<li>targetElement 可见性区域被监控的元素, 此元素必须是根元素的后代元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(</span><br><span class="line">  <span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">    entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (entry.<span class="property">intersectionRatio</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        entry.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        entry.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">rootMargin</span>: <span class="string">&#x27;0px 0px 0px 0px&#x27;</span>,</span><br><span class="line">    <span class="attr">threshold</span>: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>],</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 监听多个目标元素</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.section-content&#x27;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  ob.<span class="title function_">observe</span>(el);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="ob-takeRecords"><a href="#ob-takeRecords" class="headerlink" title="ob.takeRecords()"></a>ob.takeRecords()</h4><blockquote>
<p>使用构造函数回调监听则不需要调用此方法, 调用此方法会清除挂起的交叉区域状态列表并不会执行构造函数中的回调</p>
</blockquote>
<p>返回所有观察目标的<strong>挂起的</strong>交叉区域状态的 <code>IntersectionObserverEntry</code> 对象的数组</p>
<h4 id="ob-unobserve-target"><a href="#ob-unobserve-target" class="headerlink" title="ob.unobserve(target)"></a>ob.unobserve(target)</h4><p>取消对指定目标的监听行为</p>
<ul>
<li>target 要取消监听的目标, 如果未提供参数, 则不做任何操作</li>
</ul>
<h3 id="IntersectionObserverEntry"><a href="#IntersectionObserverEntry" class="headerlink" title="IntersectionObserverEntry"></a>IntersectionObserverEntry</h3><p>接口描述了目标元素与其根元素容器在某一特定过渡时刻的交叉状态, <code>IntersectionObserverEntry</code> 的实例作为 entries 参数被传递到 IntersectionObserver 实例的回调函数中.<br>此外, 这些对象只能通过调用 <code>observer.takeRecords()</code> 来获取</p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li>boundingClientRect 只读属性, 返回包含目标元素的边界信息, 计算方式与 <code>Element.getBoundingClientRect()</code> 相同</li>
<li>intersectionRatio 只读属性, 返回 <code>intersectionRect</code> 与 <code>boundingClientRect</code> 的比例值</li>
<li>intersectionRect 只读属性, 返回一个 <code>DOMRectReadOnly</code> 用来描述根与目标元素的相交区域</li>
<li>isIntersecting 只读属性, 返回一个布尔值, 如果目标元素与交叉区域观察者对象的根相交则返回 true, 否则返回 false</li>
<li>rootBounds 只读属性, 返回一个 <code>DOMRectReadOnly</code> 用来描述交叉区域观察者中的根</li>
<li>target 只读属性, 与根出现相交区域改变的元素</li>
<li>time 只读属性, 返回一个记录从 IntersectionObserver 的时间原点到交叉被触发的时间的时间戳</li>
</ul>
<p><img data-src="/images/IntersectionObserver-1.jpg" alt="IntersectionObserver-1"><br><img data-src="/images/IntersectionObserver-2.jpg" alt="IntersectionObserver-2"></p>
]]></content>
      <categories>
        <category>WebAPI</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>JSSDK</title>
    <url>/2022/05/2261dfd57ebf/</url>
    <content><![CDATA[<h3 id="敲黑板"><a href="#敲黑板" class="headerlink" title="敲黑板"></a>敲黑板</h3><h4 id="onMenuShareAppMessage-微信提示-即将废弃"><a href="#onMenuShareAppMessage-微信提示-即将废弃" class="headerlink" title="onMenuShareAppMessage (微信提示: 即将废弃)"></a><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">onMenuShareAppMessage</a> (微信提示: 即将废弃)</h4><ul>
<li>jweixin-1.4.0.js</li>
</ul>
<h5 id="企微-4-0-6-中使用此-API-的位置"><a href="#企微-4-0-6-中使用此-API-的位置" class="headerlink" title="企微(4.0.6) 中使用此 API 的位置"></a>企微(4.0.6) 中使用此 API 的位置</h5><ul>
<li>转发</li>
<li>转发给客户</li>
<li>群发到客户群</li>
<li>发表到客户的朋友圈</li>
<li>分享到同事吧</li>
<li>分享到微信</li>
<li>分享到微信朋友圈使用此 onMenuShareTimeline, 但无法设置分享信息</li>
</ul>
<span id="more"></span>

<h4 id="updateAppMessageShareData"><a href="#updateAppMessageShareData" class="headerlink" title="updateAppMessageShareData"></a><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">updateAppMessageShareData</a></h4><ul>
<li><p>jweixin-1.4.0.js</p>
</li>
<li><p>企微(4.0.6) 使用此 API 报错: Uncaught TypeError: wx.updateAppMessageShareData is not a function</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">updateAppMessageShareData</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的标题</span></span><br><span class="line">  <span class="attr">desc</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的描述</span></span><br><span class="line">  <span class="attr">link</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的链接</span></span><br><span class="line">  <span class="attr">imgUrl</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的图片</span></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="updateTimelineShareData"><a href="#updateTimelineShareData" class="headerlink" title="updateTimelineShareData"></a><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">updateTimelineShareData</a></h4><ul>
<li><p>jweixin-1.4.0.js</p>
</li>
<li><p>企微(4.0.6) 使用此 API 报错: Uncaught TypeError: wx.updateTimelineShareData is not a function</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">updateTimelineShareData</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的标题</span></span><br><span class="line">  <span class="attr">desc</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的描述</span></span><br><span class="line">  <span class="attr">link</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的链接</span></span><br><span class="line">  <span class="attr">imgUrl</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的图片</span></span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="wx-invoke"><a href="#wx-invoke" class="headerlink" title="wx.invoke"></a><a href="https://developer.work.weixin.qq.com/document/path/90490">wx.invoke</a></h4><ul>
<li>jweixin-1.4.0.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">invoke</span>(</span><br><span class="line">  <span class="string">&#x27;shareAppMessage&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的标题</span></span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的描述</span></span><br><span class="line">    <span class="attr">link</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的链接</span></span><br><span class="line">    <span class="attr">imgUrl</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">//分享信息的图片</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">err_msg</span> == <span class="string">&#x27;shareAppMessage:ok&#x27;</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>shareAppMessage 自定义转发到会话</li>
<li>shareWechatMessage 自定义转发到微信</li>
<li>企业微信 2.4.5 及以后版本支持,微信客户端不支持(微信开发者工具也不支持)</li>
<li>使用此 API 时, 在 <code>企微(4.0.6.6516)</code> 桌面版上打开页面时会自动弹出 转发到会话 弹框, 注释此方法后则没有自动弹框, 企微手机端不受此影响</li>
</ul>
]]></content>
      <categories>
        <category>wx</category>
      </categories>
      <tags>
        <tag>wx</tag>
        <tag>jweixin</tag>
        <tag>JSSDK</tag>
      </tags>
  </entry>
  <entry>
    <title>JSUtils</title>
    <url>/2022/02/18f2de6d45f9/</url>
    <content><![CDATA[<h4 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> debounce 函数防抖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 执行方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; delay 延迟时间 默认 300 毫秒</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Function</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="keyword">function</span> (<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fn is not Function&#x27;</span>);</span><br><span class="line">  delay = delay &gt;= <span class="number">0</span> ? delay : <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line"></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> throttle 函数节流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 执行方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; delay 延迟时间 默认 300 毫秒</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Function</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> throttle = <span class="keyword">function</span> (<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fn is not Function&#x27;</span>);</span><br><span class="line">  delay = delay &gt;= <span class="number">0</span> ? delay : <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - previous &gt; delay) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(_this, args);</span><br><span class="line">      previous = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="复制剪贴板"><a href="#复制剪贴板" class="headerlink" title="复制剪贴板"></a>复制剪贴板</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> copyText 剪贴板方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; text 需要剪贴的内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> copyText = <span class="keyword">function</span> (<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="comment">// 数字没有 .length 不能执行selectText 需要转化成字符串</span></span><br><span class="line">  <span class="keyword">const</span> textString = text.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#copy-input&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!input) &#123;</span><br><span class="line">    input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">    input.<span class="property">id</span> = <span class="string">&#x27;copy-input&#x27;</span>;</span><br><span class="line">    input.<span class="property">readOnly</span> = <span class="string">&#x27;readOnly&#x27;</span>; <span class="comment">// 防止ios聚焦触发键盘事件</span></span><br><span class="line">    input.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">    input.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&#x27;-10000px&#x27;</span>;</span><br><span class="line">    input.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="string">&#x27;-1000&#x27;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(input);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  input.<span class="property">value</span> = textString;</span><br><span class="line">  <span class="comment">// ios必须先选中文字且不支持 input.select();</span></span><br><span class="line">  <span class="title function_">selectText</span>(input, <span class="number">0</span>, textString.<span class="property">length</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>), <span class="string">&#x27;execCommand&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>)) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  input.<span class="title function_">blur</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// input自带的select()方法在苹果端无法进行选择，所以需要自己去写一个类似的方法</span></span><br><span class="line">  <span class="comment">// 选择文本。createTextRange(setSelectionRange)是input方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">selectText</span>(<span class="params">textbox, startIndex, stopIndex</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (textbox.<span class="property">createTextRange</span>) &#123;</span><br><span class="line">      <span class="comment">//ie</span></span><br><span class="line">      <span class="keyword">const</span> range = textbox.<span class="title function_">createTextRange</span>();</span><br><span class="line">      range.<span class="title function_">collapse</span>(<span class="literal">true</span>);</span><br><span class="line">      range.<span class="title function_">moveStart</span>(<span class="string">&#x27;character&#x27;</span>, startIndex); <span class="comment">//起始光标</span></span><br><span class="line">      range.<span class="title function_">moveEnd</span>(<span class="string">&#x27;character&#x27;</span>, stopIndex - startIndex); <span class="comment">//结束光标</span></span><br><span class="line">      range.<span class="title function_">select</span>(); <span class="comment">//不兼容苹果</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//firefox/chrome</span></span><br><span class="line">      textbox.<span class="title function_">setSelectionRange</span>(startIndex, stopIndex);</span><br><span class="line">      textbox.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="正则篇"><a href="#正则篇" class="headerlink" title="正则篇"></a>正则篇</h4><h5 id="检查身份证号"><a href="#检查身份证号" class="headerlink" title="检查身份证号"></a>检查身份证号</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> checkCardNo 剪贴板方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; value 身份证号码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> checkCardNo = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>;</span><br><span class="line">  <span class="keyword">return</span> reg.<span class="title function_">test</span>(value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="检查手机号"><a href="#检查手机号" class="headerlink" title="检查手机号"></a>检查手机号</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> checkTel 检查手机号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String|Number</span>&#125; value 手机号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> checkTel = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^1[3,4,5,6,7,8,9][0-9]&#123;9&#125;$/</span>.<span class="title function_">test</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="检查邮箱"><a href="#检查邮箱" class="headerlink" title="检查邮箱"></a>检查邮箱</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> checkEmail 检查邮箱格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; value 邮箱</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> checkEmail = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/</span>.<span class="title function_">test</span>(value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> docCookies = &#123;</span><br><span class="line">  <span class="attr">getItem</span>: <span class="keyword">function</span> (<span class="params">sKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="built_in">decodeURIComponent</span>(</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">replace</span>(</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">RegExp</span>(</span><br><span class="line">            <span class="string">&#x27;(?:(?:^|.*;)\\s*&#x27;</span> +</span><br><span class="line">              <span class="built_in">encodeURIComponent</span>(sKey).<span class="title function_">replace</span>(<span class="regexp">/[-.+*]/g</span>, <span class="string">&#x27;\\$&amp;&#x27;</span>) +</span><br><span class="line">              <span class="string">&#x27;\\s*\\=\\s*([^;]*).*$)|^.*$&#x27;</span></span><br><span class="line">          ),</span><br><span class="line">          <span class="string">&#x27;$1&#x27;</span></span><br><span class="line">        )</span><br><span class="line">      ) || <span class="literal">null</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">setItem</span>: <span class="keyword">function</span> (<span class="params">sKey, sValue, vEnd, sPath, sDomain, bSecure</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sKey || <span class="regexp">/^(?:expires|max\-age|path|domain|secure)$/i</span>.<span class="title function_">test</span>(sKey)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sExpires = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (vEnd) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (vEnd.<span class="property">constructor</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">Number</span>:</span><br><span class="line">          sExpires =</span><br><span class="line">            vEnd === <span class="title class_">Infinity</span></span><br><span class="line">              ? <span class="string">&#x27;; expires=Fri, 31 Dec 9999 23:59:59 GMT&#x27;</span></span><br><span class="line">              : <span class="string">&#x27;; max-age=&#x27;</span> + vEnd;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">String</span>:</span><br><span class="line">          sExpires = <span class="string">&#x27;; expires=&#x27;</span> + vEnd;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">Date</span>:</span><br><span class="line">          sExpires = <span class="string">&#x27;; expires=&#x27;</span> + vEnd.<span class="title function_">toUTCString</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span> =</span><br><span class="line">      <span class="built_in">encodeURIComponent</span>(sKey) +</span><br><span class="line">      <span class="string">&#x27;=&#x27;</span> +</span><br><span class="line">      <span class="built_in">encodeURIComponent</span>(sValue) +</span><br><span class="line">      sExpires +</span><br><span class="line">      (sDomain ? <span class="string">&#x27;; domain=&#x27;</span> + sDomain : <span class="string">&#x27;&#x27;</span>) +</span><br><span class="line">      (sPath ? <span class="string">&#x27;; path=&#x27;</span> + sPath : <span class="string">&#x27;&#x27;</span>) +</span><br><span class="line">      (bSecure ? <span class="string">&#x27;; secure&#x27;</span> : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">removeItem</span>: <span class="keyword">function</span> (<span class="params">sKey, sPath, sDomain</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sKey || !<span class="variable language_">this</span>.<span class="title function_">hasItem</span>(sKey)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">cookie</span> =</span><br><span class="line">      <span class="built_in">encodeURIComponent</span>(sKey) +</span><br><span class="line">      <span class="string">&#x27;=; expires=Thu, 01 Jan 1970 00:00:00 GMT&#x27;</span> +</span><br><span class="line">      (sDomain ? <span class="string">&#x27;; domain=&#x27;</span> + sDomain : <span class="string">&#x27;&#x27;</span>) +</span><br><span class="line">      (sPath ? <span class="string">&#x27;; path=&#x27;</span> + sPath : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">hasItem</span>: <span class="keyword">function</span> (<span class="params">sKey</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(</span><br><span class="line">      <span class="string">&#x27;(?:^|;\\s*)&#x27;</span> +</span><br><span class="line">        <span class="built_in">encodeURIComponent</span>(sKey).<span class="title function_">replace</span>(<span class="regexp">/[-.+*]/g</span>, <span class="string">&#x27;\\$&amp;&#x27;</span>) +</span><br><span class="line">        <span class="string">&#x27;\\s*\\=&#x27;</span></span><br><span class="line">    ).<span class="title function_">test</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">keys</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> aKeys = <span class="variable language_">document</span>.<span class="property">cookie</span></span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      .<span class="title function_">split</span>(<span class="regexp">/\s*(?:\=[^;]*)?;\s*/</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> nIdx = <span class="number">0</span>; nIdx &lt; aKeys.<span class="property">length</span>; nIdx++) &#123;</span><br><span class="line">      aKeys[nIdx] = <span class="built_in">decodeURIComponent</span>(aKeys[nIdx]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aKeys;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="数字千分位分割"><a href="#数字千分位分割" class="headerlink" title="数字千分位分割"></a>数字千分位分割</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> numberFormat 数字千分位分割</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String|Number</span>&#125; value 数字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; delimiter 千分位分隔符, 默认为 &#x27;,&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">String</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> numberFormat = <span class="keyword">function</span> (<span class="params">value, delimiter = <span class="string">&#x27;,&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> value === <span class="string">&#x27;undefined&#x27;</span> ||</span><br><span class="line">    (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> &amp;&amp; value === <span class="literal">null</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> num = value.<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">let</span> len = num.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断数字的长度是否为 3 的倍数</span></span><br><span class="line">    <span class="keyword">let</span> remainder = len % <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> remainder &gt; <span class="number">0</span></span><br><span class="line">      ? num.<span class="title function_">slice</span>(<span class="number">0</span>, remainder) +</span><br><span class="line">          delimiter +</span><br><span class="line">          num.<span class="title function_">slice</span>(remainder, len).<span class="title function_">match</span>(<span class="regexp">/\d&#123;3&#125;/g</span>).<span class="title function_">join</span>(delimiter)</span><br><span class="line">      : num.<span class="title function_">slice</span>(<span class="number">0</span>, len).<span class="title function_">match</span>(<span class="regexp">/\d&#123;3&#125;/g</span>).<span class="title function_">join</span>(delimiter);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="根据图片尺寸计算宽高比例"><a href="#根据图片尺寸计算宽高比例" class="headerlink" title="根据图片尺寸计算宽高比例"></a>根据图片尺寸计算宽高比例</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> calcImgRatio 根据图片像素计算图片宽高比例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; width 宽度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; height 高度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">String</span>&#125; &#x27;16|9&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> calcImgRatio = <span class="keyword">function</span> (<span class="params">width, height</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="built_in">isNaN</span>(width) ||</span><br><span class="line">    <span class="keyword">typeof</span> width !== <span class="string">&#x27;number&#x27;</span> ||</span><br><span class="line">    <span class="built_in">isNaN</span>(height) ||</span><br><span class="line">    <span class="keyword">typeof</span> height !== <span class="string">&#x27;number&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Params are not Number type....&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> num = <span class="title function_">getMaxCommonDivisor</span>(width, height);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;width / num&#125;</span>|<span class="subst">$&#123;height / num&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取两个数的最大公约数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getMaxCommonDivisor</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a % b) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getMaxCommonDivisor</span>(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="Base64-图片转-File-文件"><a href="#Base64-图片转-File-文件" class="headerlink" title="Base64 图片转 File 文件"></a>Base64 图片转 File 文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span>  dataURL2File Base64 图片转 File 文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; dataUrl 图片 Base64 字符串编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; fileName File 文件对象的 name 属性, 包含文件扩展名, 非必传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">File</span>&#125;  返回 File 文件对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dataURL2File</span>(<span class="params">dataUrl, fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/data:image\/.*?;base64,/</span>.<span class="title function_">test</span>(dataUrl)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;dataUrl 参数格式错误...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!fileName) &#123;</span><br><span class="line">    fileName =</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">substring</span>(<span class="number">2</span>) +</span><br><span class="line">      <span class="string">&#x27;.&#x27;</span> +</span><br><span class="line">      dataUrl.<span class="title function_">match</span>(<span class="regexp">/:(.*?);/i</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr = dataUrl.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>),</span><br><span class="line">    mime = arr[<span class="number">0</span>].<span class="title function_">match</span>(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">    bstr = <span class="title function_">atob</span>(arr[<span class="number">1</span>]),</span><br><span class="line">    n = bstr.<span class="property">length</span>,</span><br><span class="line">    u8arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(n);</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    u8arr[n] = bstr.<span class="title function_">charCodeAt</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>([u8arr], fileName, &#123; <span class="attr">type</span>: mime &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图片对象或链接转-Base64"><a href="#图片对象或链接转-Base64" class="headerlink" title="图片对象或链接转 Base64"></a>图片对象或链接转 Base64</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span>  file2DataURL 图片对象或图片链接转 Base64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String|File</span>&#125; arg 图片对象或者图片链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">Promise</span>&#125;  返回 Promise 的 then 方法接收图片 Base64 编码字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">file2DataURL</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> isImgUrl = <span class="regexp">/((https?)?:)?\/\/.*?\.(jpg|jpeg|bmp|png|webp|gif)/i</span>.<span class="title function_">test</span>(arg);</span><br><span class="line">  <span class="keyword">var</span> isFile =</span><br><span class="line">    arg != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> arg == <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="regexp">/image\/\w+/</span>.<span class="title function_">test</span>(arg.<span class="property">type</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isFile &amp;&amp; !isImgUrl) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;arg 参数不是一个图片对象或者图片链接...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isImgUrl) &#123;</span><br><span class="line">    <span class="keyword">var</span> mime = <span class="string">&#x27;image/&#x27;</span> + arg.<span class="title function_">match</span>(<span class="regexp">/\.(jpg|jpeg|bmp|png|webp|gif)/i</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    img.<span class="property">src</span> = arg.<span class="title function_">includes</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line">      ? arg</span><br><span class="line">      : arg.<span class="title function_">includes</span>(<span class="string">&#x27;://&#x27;</span>)</span><br><span class="line">      ? <span class="string">&#x27;https&#x27;</span> + arg</span><br><span class="line">      : <span class="string">&#x27;https:&#x27;</span> + arg;</span><br><span class="line">    img.<span class="property">crossOrigin</span> = <span class="string">&#x27;anonymous&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        canvas.<span class="property">width</span> = img.<span class="property">width</span>;</span><br><span class="line">        canvas.<span class="property">height</span> = img.<span class="property">height</span>;</span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, img.<span class="property">width</span>, img.<span class="property">height</span>);</span><br><span class="line">        <span class="keyword">var</span> dataURL = canvas.<span class="title function_">toDataURL</span>(mime);</span><br><span class="line">        <span class="title function_">resolve</span>(dataURL);</span><br><span class="line">      &#125;;</span><br><span class="line">      img.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">FileReader</span> == <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;浏览器不支持 FileReader API, 请先升级浏览器...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(e.<span class="property">currentTarget</span>.<span class="property">result</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    reader.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(e);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  reader.<span class="title function_">readAsDataURL</span>(arg);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DOM-拖动"><a href="#DOM-拖动" class="headerlink" title="DOM 拖动"></a>DOM 拖动</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $popDom = <span class="literal">null</span>; <span class="comment">// 指定拖动的 DOM</span></span><br><span class="line"><span class="keyword">var</span> disX,</span><br><span class="line">  disY,</span><br><span class="line">  dragging = <span class="literal">false</span>;</span><br><span class="line">$popDom.<span class="title function_">on</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">  evt.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  <span class="keyword">var</span> popWidth = $popDom[<span class="number">0</span>].<span class="property">clientWidth</span>;</span><br><span class="line">  <span class="keyword">var</span> popHeight = $popDom[<span class="number">0</span>].<span class="property">clientHeight</span>;</span><br><span class="line">  disX = evt.<span class="property">pageX</span> - <span class="title class_">Number</span>.<span class="built_in">parseInt</span>($popDom.<span class="title function_">css</span>(<span class="string">&#x27;left&#x27;</span>), <span class="number">10</span>);</span><br><span class="line">  disY = evt.<span class="property">pageY</span> - <span class="title class_">Number</span>.<span class="built_in">parseInt</span>($popDom.<span class="title function_">css</span>(<span class="string">&#x27;top&#x27;</span>), <span class="number">10</span>);</span><br><span class="line">  dragging = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  $(<span class="variable language_">document</span>)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;mousemove.move-dom&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">      evt.<span class="title function_">stopPropagation</span>();</span><br><span class="line">      evt.<span class="title function_">preventDefault</span>();</span><br><span class="line">      <span class="keyword">if</span> (!dragging) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> clientWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">      <span class="keyword">var</span> clientHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> videoPopTop = <span class="title class_">Number</span>.<span class="built_in">parseInt</span>(evt.<span class="property">pageY</span> - disY, <span class="number">10</span>);</span><br><span class="line">      <span class="keyword">var</span> videoPopLeft = <span class="title class_">Number</span>.<span class="built_in">parseInt</span>(evt.<span class="property">pageX</span> - disX, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (videoPopTop &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        videoPopTop = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clientHeight - videoPopTop &lt; popHeight) &#123;</span><br><span class="line">        videoPopTop = clientHeight - popHeight;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (videoPopLeft &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        videoPopLeft = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clientWidth - videoPopLeft &lt; popWidth) &#123;</span><br><span class="line">        videoPopLeft = clientWidth - popWidth;</span><br><span class="line">      &#125;</span><br><span class="line">      $popDom.<span class="title function_">css</span>(&#123; <span class="attr">top</span>: videoPopTop, <span class="attr">left</span>: videoPopLeft &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">&#x27;mouseup.move-dom&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">      evt.<span class="title function_">stopPropagation</span>();</span><br><span class="line">      dragging = <span class="literal">false</span>;</span><br><span class="line">      $(<span class="variable language_">document</span>).<span class="title function_">off</span>(<span class="string">&#x27;mousemove.move-dom&#x27;</span>);</span><br><span class="line">      $(<span class="variable language_">document</span>).<span class="title function_">off</span>(<span class="string">&#x27;mouseup.move-dom&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="日期倒计时"><a href="#日期倒计时" class="headerlink" title="日期倒计时"></a>日期倒计时</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (<span class="title class_">Object</span>.<span class="property">hasOwn</span> &amp;&amp; <span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(<span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&#x27;leftDown&#x27;</span>)) ||</span><br><span class="line">    <span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;leftDown&#x27;</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;倒计时方法名重复了...想别的招儿吧!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">gtNine</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> val &gt; <span class="number">9</span> ? <span class="string">`<span class="subst">$&#123;val&#125;</span>`</span> : <span class="string">`0<span class="subst">$&#123;val&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">hasOwnProp</span>(<span class="params">obj, prop</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj.<span class="title function_">hasOwnProperty</span>(prop);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@method</span> leftDown 倒计时方法</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@description</span> Date原型对象的方法, 所有的日期时间对象都可调用</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; callback 时间计算过程返回的差值对象</span></span><br><span class="line"><span class="comment">   *    <span class="doctag">@param</span> &#123;<span class="type">days: &#x27;00&#x27;, hours: &#x27;00&#x27;, minutes: &#x27;00&#x27;, seconds: &#x27;00&#x27;</span>&#125;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@property</span> paused 只读属性, 是否暂停倒计时</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@property</span> resumed 只读属性, 是否恢复倒计时</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@property</span> canceled 只读属性, 是否取消倒计时</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@property</span> kept 只读属性, 是否跟随上一次暂停时间继续计算</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@property</span> left 只读属性, 获取倒计时当前计算后的差值</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> <span class="variable">Object</span></span></span><br><span class="line"><span class="comment">   *    <span class="doctag">@javascript</span> &#123;<span class="type"> cancel: cancel, pause: pause, resume: resume </span>&#125;</span></span><br><span class="line"><span class="comment">   *    <span class="doctag">@method</span> cancel 取消倒计时</span></span><br><span class="line"><span class="comment">   *    <span class="doctag">@method</span> pause 暂停倒计时</span></span><br><span class="line"><span class="comment">   *    <span class="doctag">@method</span> resume 恢复倒计时,  keep 参数控制是否跟随上一次暂停时间继续计算, 默认为 true</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title class_">Date</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">leftDown</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="title function_">hasOwnProp</span>(<span class="variable language_">this</span>, <span class="string">&#x27;paused&#x27;</span>) &amp;&amp;</span><br><span class="line">      <span class="title function_">hasOwnProp</span>(<span class="variable language_">this</span>, <span class="string">&#x27;resumed&#x27;</span>) &amp;&amp;</span><br><span class="line">      <span class="title function_">hasOwnProp</span>(<span class="variable language_">this</span>, <span class="string">&#x27;canceled&#x27;</span>) &amp;&amp;</span><br><span class="line">      <span class="title function_">hasOwnProp</span>(<span class="variable language_">this</span>, <span class="string">&#x27;kept&#x27;</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">&#x27;leftDown 方法不能在一个实例上重复调用, 可以使用返回的 pause, cancel, resume 方法控制当前倒计时, 或者创建新的 Date 实例调用此方法&#x27;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> _referrerTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">var</span> _paused = <span class="literal">false</span>; <span class="comment">// 是否暂停</span></span><br><span class="line">    <span class="keyword">var</span> _canceled = <span class="literal">false</span>; <span class="comment">// 是否取消</span></span><br><span class="line">    <span class="keyword">var</span> _resumed = <span class="literal">false</span>; <span class="comment">// 是否恢复</span></span><br><span class="line">    <span class="keyword">var</span> _keep = <span class="literal">true</span>; <span class="comment">// 是否跟随上一次暂停时间继续计算</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123; <span class="attr">days</span>: <span class="string">&#x27;00&#x27;</span>, <span class="attr">hours</span>: <span class="string">&#x27;00&#x27;</span>, <span class="attr">minutes</span>: <span class="string">&#x27;00&#x27;</span>, <span class="attr">seconds</span>: <span class="string">&#x27;00&#x27;</span> &#125;;</span><br><span class="line">    <span class="keyword">var</span> evt = <span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&#x27;leftDown&#x27;</span>, &#123; <span class="attr">bubbles</span>: <span class="literal">true</span>, <span class="attr">cancelable</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="keyword">var</span> evtPause = <span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&#x27;leftDown:pause&#x27;</span>, &#123; <span class="attr">bubbles</span>: <span class="literal">true</span>, <span class="attr">cancelable</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="keyword">var</span> evtResume = <span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&#x27;leftDown:resume&#x27;</span>, &#123; <span class="attr">bubbles</span>: <span class="literal">true</span>, <span class="attr">cancelable</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="keyword">var</span> evtCancel = <span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&#x27;leftDown:cancel&#x27;</span>, &#123; <span class="attr">bubbles</span>: <span class="literal">true</span>, <span class="attr">cancelable</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    evt.<span class="property">leftDown</span> = obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> getDiff = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      _referrerTime = _keep ? _referrerTime + <span class="number">1000</span> : <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getTime</span>() - _referrerTime;</span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> calcLeftTimeFn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> leftTime = <span class="title function_">getDiff</span>();</span><br><span class="line">      <span class="keyword">if</span> (leftTime &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(_timer);</span><br><span class="line">        _timer = <span class="literal">null</span>;</span><br><span class="line">        _canceled = <span class="literal">true</span>;</span><br><span class="line">        evtCancel.<span class="property">leftDown</span> = evt.<span class="property">leftDown</span> = obj;</span><br><span class="line">        <span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(evt);</span><br><span class="line">        <span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(evtCancel);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">callback</span>(obj);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> d = <span class="title class_">Math</span>.<span class="title function_">floor</span>(leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">      <span class="keyword">var</span> h = <span class="title class_">Math</span>.<span class="title function_">floor</span>((leftTime / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span>) % <span class="number">24</span>);</span><br><span class="line">      <span class="keyword">var</span> m = <span class="title class_">Math</span>.<span class="title function_">floor</span>((leftTime / <span class="number">1000</span> / <span class="number">60</span>) % <span class="number">60</span>);</span><br><span class="line">      <span class="keyword">var</span> s = <span class="title class_">Math</span>.<span class="title function_">floor</span>((leftTime / <span class="number">1000</span>) % <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">      obj[<span class="string">&#x27;days&#x27;</span>] = <span class="title function_">gtNine</span>(d);</span><br><span class="line">      obj[<span class="string">&#x27;hours&#x27;</span>] = <span class="title function_">gtNine</span>(h);</span><br><span class="line">      obj[<span class="string">&#x27;minutes&#x27;</span>] = <span class="title function_">gtNine</span>(m);</span><br><span class="line">      obj[<span class="string">&#x27;seconds&#x27;</span>] = <span class="title function_">gtNine</span>(s);</span><br><span class="line">      evt.<span class="property">leftDown</span> = obj;</span><br><span class="line">      <span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(evt);</span><br><span class="line">      <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">callback</span>(obj);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">getDiff</span>() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      _canceled = <span class="literal">true</span>;</span><br><span class="line">      evtCancel.<span class="property">leftDown</span> = evt.<span class="property">leftDown</span> = obj;</span><br><span class="line">      <span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(evt);</span><br><span class="line">      <span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(evtCancel);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">callback</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _timer = <span class="built_in">setInterval</span>(calcLeftTimeFn.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">      <span class="attr">paused</span>: &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> _paused &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;paused is the read-only property&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;paused is the read-only property&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">resumed</span>: &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> _resumed &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resumed is the read-only property&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;resumed is the read-only property&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">canceled</span>: &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> _canceled &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;canceled is the read-only property&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;canceled is the read-only property&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">kept</span>: &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> _keep &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;kept is the read-only property&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;kept is the read-only property&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">left</span>: &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> obj &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;left is the read-only property&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;left is the read-only property&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 取消倒计时</span></span><br><span class="line">    <span class="keyword">var</span> cancel = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(_canceled) <span class="keyword">return</span>;</span><br><span class="line">      _canceled = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (_timer) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(_timer);</span><br><span class="line">        _timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      evtCancel.<span class="property">leftDown</span> = obj;</span><br><span class="line">      <span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(evtCancel);</span><br><span class="line">      <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">callback</span>(obj);</span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">// 暂停倒计时</span></span><br><span class="line">    <span class="keyword">var</span> pause = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(_canceled || _paused) <span class="keyword">return</span>;</span><br><span class="line">      _paused = <span class="literal">true</span>;</span><br><span class="line">      _resumed = !_paused;</span><br><span class="line">      <span class="keyword">if</span> (_timer) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(_timer);</span><br><span class="line">        _timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      evtPause.<span class="property">leftDown</span> = obj;</span><br><span class="line">      <span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(evtPause);</span><br><span class="line">      <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">callback</span>(obj);</span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">// 是否跟随上一次暂停时间继续计算, 默认为 true, 传入 false 则按照当前时间重新计算</span></span><br><span class="line">    <span class="keyword">var</span> resume = <span class="keyword">function</span> (<span class="params">keep = <span class="literal">true</span></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(_canceled || _resumed) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span>(_timer)&#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(_timer);</span><br><span class="line">        _timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      _resumed = <span class="literal">true</span>;</span><br><span class="line">      _paused = !_resumed;</span><br><span class="line">      _keep = keep === <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">      <span class="title function_">calcLeftTimeFn</span>();</span><br><span class="line">      _timer = <span class="built_in">setInterval</span>(calcLeftTimeFn.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">1000</span>);</span><br><span class="line">      evtResume.<span class="property">leftDown</span> = obj;</span><br><span class="line">      <span class="variable language_">window</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(evtResume);</span><br><span class="line">      <span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">callback</span>(obj);</span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">cancel</span>: cancel, <span class="attr">pause</span>: pause, <span class="attr">resume</span>: resume &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示用效果方法</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">randRGBA</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">256</span>);</span><br><span class="line">  <span class="keyword">let</span> g = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">256</span>);</span><br><span class="line">  <span class="keyword">let</span> b = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">256</span>);</span><br><span class="line">  a =</span><br><span class="line">    a &gt;= <span class="number">1</span></span><br><span class="line">      ? <span class="number">1</span></span><br><span class="line">      : <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">          .<span class="title function_">toString</span>()</span><br><span class="line">          .<span class="title function_">match</span>(<span class="regexp">/\d\.\d&#123;1&#125;/</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`rgba(<span class="subst">$&#123;r&#125;</span>,<span class="subst">$&#123;g&#125;</span>,<span class="subst">$&#123;b&#125;</span>,<span class="subst">$&#123;a&#125;</span>)`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() + <span class="number">1000000</span>);</span><br><span class="line"><span class="comment">// 方式一：回调函数的参数</span></span><br><span class="line"><span class="keyword">var</span> &#123; pause, resume, cancel &#125; = date.<span class="title function_">leftDown</span>(<span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="title function_">randRGBA</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// // 方式二：事件监听回调函数参数的 leftDown 字段获取</span></span><br><span class="line"><span class="comment">// window.addEventListener(&#x27;leftDown&#x27;, function (evt) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(evt)</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// window.addEventListener(&#x27;leftDown:pause&#x27;, function (evt) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(evt)</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// window.addEventListener(&#x27;leftDown:resume&#x27;, function (evt) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(evt)</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// window.addEventListener(&#x27;leftDown:cancel&#x27;, function (evt) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(evt)</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br></pre></td></tr></table></figure>

<h4 id="JS-创建-Element"><a href="#JS-创建-Element" class="headerlink" title="JS 创建 Element"></a>JS 创建 Element</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承关系</span></span><br><span class="line"><span class="comment">EventTarget</span></span><br><span class="line"><span class="comment">  &lt;- Node</span></span><br><span class="line"><span class="comment">    &lt;- Document</span></span><br><span class="line"><span class="comment">    &lt;- DocumentFragment</span></span><br><span class="line"><span class="comment">    &lt;- Element</span></span><br><span class="line"><span class="comment">      &lt;- HTMLElement</span></span><br><span class="line"><span class="comment">      &lt;- SVGElement</span></span><br><span class="line"><span class="comment">    &lt;- [Attr](https://developer.mozilla.org/zh-CN/docs/Web/API/Attr)</span></span><br><span class="line"><span class="comment">    &lt;- CharacterData</span></span><br><span class="line"><span class="comment">      &lt;- Comment </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* is.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="property">isArray</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">undefinedOrNull</span>(<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> v === <span class="literal">undefined</span> || v === <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">primitive</span>(<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="keyword">typeof</span> v === <span class="string">&#x27;string&#x27;</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> v === <span class="string">&#x27;number&#x27;</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> v === <span class="string">&#x27;boolean&#x27;</span> ||</span><br><span class="line">    v <span class="keyword">instanceof</span> <span class="title class_">String</span> ||</span><br><span class="line">    v <span class="keyword">instanceof</span> <span class="title class_">Number</span> ||</span><br><span class="line">    v <span class="keyword">instanceof</span> <span class="title class_">Boolean</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">string</span>(<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(v) === <span class="string">&#x27;[object String]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> v !== <span class="literal">null</span> &amp;&amp; <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(v) === <span class="string">&#x27;[object Object]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(v) === <span class="string">&#x27;[object Function]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">promise</span>(<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(v) === <span class="string">&#x27;[object Promise]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">asyncFn</span>(<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(v) === <span class="string">&#x27;[object AsyncFunction]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">generatorFn</span>(<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(v) === <span class="string">&#x27;[object GeneratorFunction]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> is <span class="keyword">from</span> <span class="string">&#x27;./is.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">tag, props, child</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> children,</span><br><span class="line">    attrs,</span><br><span class="line">    el =</span><br><span class="line">      is.<span class="title function_">undefinedOrNull</span>(tag) || (is.<span class="title function_">string</span>(tag) &amp;&amp; tag.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        ? <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line">        : <span class="variable language_">document</span>.<span class="title function_">createElement</span>(tag);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (child !== <span class="literal">undefined</span> &amp;&amp; child !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is.<span class="title function_">object</span>(props)) &#123;</span><br><span class="line">      attrs = props;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (props !== <span class="literal">undefined</span> &amp;&amp; props !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is.<span class="title function_">object</span>(props)) &#123;</span><br><span class="line">      attrs = props;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      child = props;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (is.<span class="title function_">primitive</span>(child)) &#123;</span><br><span class="line">    children = [<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(child)];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child <span class="keyword">instanceof</span> <span class="title class_">HTMLElement</span>) &#123;</span><br><span class="line">    children = [child];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is.<span class="title function_">array</span>(child)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; child.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (is.<span class="title function_">primitive</span>(child[i])) &#123;</span><br><span class="line">        child[i] = <span class="title function_">h</span>(<span class="literal">undefined</span>, child[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    children = child;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (children !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      el.<span class="title function_">appendChild</span>(children[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (is.<span class="title function_">object</span>(attrs)) &#123;</span><br><span class="line">    <span class="title function_">setElAttrs</span>(el, attrs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setElAttrs</span>(<span class="params">el, props</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    !(el <span class="keyword">instanceof</span> <span class="title class_">HTMLElement</span>) ||</span><br><span class="line">    !(el <span class="keyword">instanceof</span> <span class="title class_">Node</span>) ||</span><br><span class="line">    !is.<span class="title function_">object</span>(props)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;cls&#x27;</span> || key === <span class="string">&#x27;class&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!is.<span class="title function_">string</span>(props[key]) &amp;&amp; !is.<span class="title function_">array</span>(props[key])) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      el.<span class="title function_">setAttribute</span>(</span><br><span class="line">        <span class="string">&#x27;class&#x27;</span>,</span><br><span class="line">        is.<span class="title function_">array</span>(props[key]) ? [...<span class="keyword">new</span> <span class="title class_">Set</span>(props[key])].<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>) : props[key]</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;style&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> sty = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> (is.<span class="title function_">string</span>(props[key])) &#123;</span><br><span class="line">        sty = props[key];</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is.<span class="title function_">object</span>(props[key])) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> props[key]) &#123;</span><br><span class="line">          sty += k + <span class="string">&#x27;:&#x27;</span> + props[key][k] + <span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      el.<span class="title function_">setAttribute</span>(key, sty);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;data&#x27;</span> || key.<span class="title function_">includes</span>(<span class="string">&#x27;data-&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (is.<span class="title function_">primitive</span>(props[key])) &#123;</span><br><span class="line">        el.<span class="title function_">setAttribute</span>(key, props[key]);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is.<span class="title function_">object</span>(props[key])) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> props[key]) &#123;</span><br><span class="line">          el.<span class="title function_">setAttribute</span>(key + <span class="string">&#x27;-&#x27;</span> + k, props[key][k]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;on&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!is.<span class="title function_">object</span>(props[key])) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> props[key]) &#123;</span><br><span class="line">        el.<span class="title function_">addEventListener</span>(k, props[key][k]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    el.<span class="title function_">setAttribute</span>(key, props[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JS-批量样式"><a href="#JS-批量样式" class="headerlink" title="JS 批量样式"></a>JS 批量样式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dom 添加边框</span></span><br><span class="line">[].<span class="property">forEach</span>.<span class="title function_">call</span>($$(<span class="string">&#x27;*&#x27;</span>), <span class="function">(<span class="params">dom</span>) =&gt;</span> &#123;</span><br><span class="line">  dom.<span class="property">style</span>.<span class="property">outline</span> =</span><br><span class="line">    <span class="string">&#x27;1px solid #&#x27;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="number">1</span> &lt;&lt; <span class="number">24</span>))).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生成颜色</span></span><br><span class="line"><span class="function">() =&gt;</span></span><br><span class="line">  <span class="string">&#x27;#&#x27;</span> +</span><br><span class="line">  <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">0xffffff</span>)</span><br><span class="line">    .<span class="title function_">toString</span>(<span class="number">16</span>)</span><br><span class="line">    .<span class="title function_">padEnd</span>(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    .<span class="title function_">toUpperCase</span>();</span><br></pre></td></tr></table></figure>

<h4 id="修改-history"><a href="#修改-history" class="headerlink" title="修改 history"></a>修改 history</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改历史记录阻止后退功能</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">history</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">pushState</span>) &#123;</span><br><span class="line">    $(<span class="variable language_">window</span>).<span class="title function_">on</span>(<span class="string">&#x27;popstate&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">pushState</span>(<span class="string">&#x27;forward&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">forward</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">pushState</span>(<span class="string">&#x27;forward&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">//在IE中必须得有这两行</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">forward</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="存储单位转换"><a href="#存储单位转换" class="headerlink" title="存储单位转换"></a>存储单位转换</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatSizeUnits</span>(<span class="params">kb</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> units = [<span class="string">&#x27;KB&#x27;</span>, <span class="string">&#x27;MB&#x27;</span>, <span class="string">&#x27;GB&#x27;</span>, <span class="string">&#x27;TB&#x27;</span>, <span class="string">&#x27;PB&#x27;</span>];</span><br><span class="line">  <span class="keyword">let</span> unitIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (kb &gt;= <span class="number">1024</span> &amp;&amp; unitIndex &lt; units.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">    kb /= <span class="number">1024</span>;</span><br><span class="line">    unitIndex++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;kb.toFixed(<span class="number">2</span>)&#125;</span> <span class="subst">$&#123;units[unitIndex]&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua</title>
    <url>/2022/11/5ad9dd804c02/</url>
    <content><![CDATA[<p>Lua 是一门强大、快速、轻量的嵌入式动态类型脚本语言, 使用 ANSI C 语言编写并以源代码形式开放, 其设计目的是为了嵌入应用程序中, 从而为应用程序提供灵活的扩展和定制功能</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Lua 有八种基本数据类型: nil、boolean、number、string、function、userdata、thread、table</p>
<ul>
<li>nil 表示一个有意义的值不存在时的状态, nil 和 false 逻辑表达式中都表示假, 其他任何值都表示真</li>
<li>userdata 表示任意存储在变量中的 C 数据, 完全用户数据: 指一块由 Lua 管理的内存对应的对象; 轻量用户数据: 指一个简单的 C 指针</li>
<li>table 本质是一个关联数组, 数组的索引可以是数字、字符串或表类型, 下标默认从 1 开始, table 可以包含任何类型的值(nil 除外), 任何键的值若为 nil 就不会被记入表内, table 的创建通过 <code>构造表达式 &#123;&#125;</code> 完成</li>
</ul>
<p>table、function、thread、userdata 在 Lua 中是引用类型, 对其操作都是针对引用而不是针对值的操作</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据类型: nil boolean number string userdata function trhead table&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;nil 表示一个无效值(在条件表达式中相当于false)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;boolean 表示 true 和 false, 除了 nil 和 false 值表示为 false, 其他值(包括0)都为 true, &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;number 表示双精度类型的实浮点数, 数字字符串相加将转换成数字相加&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;string 表示一对双引号或者单引号包含的内容, [[ 内容 ]] 表示块字符串, .. 字符串拼接, # 计算字符串或表的长度&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;userdata 表示任意存储在变量中的 C 数据结构&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;function 由 C 或 Lua 编写的函数&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;thread 表示执行的独立线程, 用于执行协同程序&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;table 其实是一个关联数组, 数组的索引可以是数字、字符串或者表类型, 下标默认从 1 开始, table 的创建通过&#x27;构造表达式&#x27;完成, 空表: &#123;&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;变量的三种类型: 全局变量, 局部变量(local 声明), 表中的域&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;变量批量赋值时, 多余的变量会赋值为 nil, 多余的值会被忽略&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>table 其实是关联数组, 可以使用任意类型值(除了 nil)作为数组的索引, 不固定大小</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> tb1 = &#123;<span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;grapes&quot;</span>&#125;</span><br><span class="line"><span class="keyword">local</span> tb2 = &#123;name = <span class="string">&quot;zhangsan&quot;</span>, age = <span class="number">18</span>, <span class="string">&quot;beijing&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序前: for 遍历 tb1&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> key, val <span class="keyword">in</span> <span class="built_in">pairs</span>(tb1) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(val) <span class="comment">-- banana orange apple grapes</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;声明空表&quot;</span>, tb1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;声明非空表&quot;</span>, tb2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后: for 遍历 tb1&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> key, val <span class="keyword">in</span> <span class="built_in">pairs</span>(tb1) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(val) <span class="comment">-- apple banana grapes hello world orange</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;for 遍历 tb2&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> key, val <span class="keyword">in</span> <span class="built_in">pairs</span>(tb2) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(key, <span class="string">&quot;:&quot;</span>, val) <span class="comment">-- 1:beijing  age:18  name:zhangsan</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------------------&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h4><p>lua 中的每个值都可以有一个元表, 元表就是一个普通的 lua 表, 它用于定义原始值再特定操作下的行为</p>
<p>元表决定了一个对象在数学运算、位运算、比较、连接、取长度、调用、索引时的行为, 元表还可以定义一个函数, 当表对象或用户数据对象在垃圾回收时调用它</p>
<p>元表中的键对应着不同的事件名, 键关联的值被称为 元方法, 通过 <code>getmetatable</code> 方法获取任何值的元表, 通过 <code>setmetatable</code> 方法设置元表</p>
<p>lua 中不能改变 table 以外其他类型的值的元表, 如果需要使用 C API</p>
<ul>
<li>__add ‘+’ 操作, 如果任何值不是数值类型(包括不能转换数值的字符串)做加法, lua 就会尝试调用此方法, lua 查找两个操作数是否定义此元方法, 只要有一个操作数包含, 则将两个操作数作为参数传入元方法, 元方法的结果作为这个操作的结果, 如果找不到元方法, 则抛出一个错误</li>
<li>__sub, ‘-‘ 操作, 行为和 <code>add</code> 操作类似</li>
<li>__mul, ‘*‘ 操作, 行为和 <code>add</code> 操作类似</li>
<li>__div, ‘/‘ 操作, 行为和 <code>add</code> 操作类似</li>
<li>__mod, ‘%’ 操作, 行为和 <code>add</code> 操作类似</li>
<li>__pow, ‘^’ 幂操作, 行为和 <code>add</code> 操作类似</li>
<li>__unm, ‘-‘ 取负操作, 行为和 <code>add</code> 操作类似</li>
<li>__idiv, ‘//‘ 向下取整除法, 行为和 <code>add</code> 操作类似</li>
<li>__band, ‘&amp;’ 按位与运算, 行为和 <code>add</code> 操作类似, 不同的是 lua 会在任何一个操作数无法转换为整数时尝试取元方法</li>
<li>__bor, ‘|’ 按位或运算, 行为和 <code>band</code> 操作类似</li>
<li>__bxor, ‘~’ 按位异或运算, 行为和 <code>band</code> 操作类似</li>
<li>__bnot, ‘!’ 按位非运算, 行为和 <code>band</code> 操作类似</li>
<li>__shl, ‘&lt;&lt;’ 左移操作, 行为和 <code>band</code> 操作类似</li>
<li>__shr, ‘&gt;&gt;’ 右移操作, 行为和 <code>band</code> 操作类似</li>
<li>__concat, ‘..’ 连接操作, 行为和 <code>add</code> 操作类似, 不同的是 lua 在任何操作数即不是字符串也不是数字(数字总能转换为对应的字符串)的情况下尝试取元方法</li>
<li>__len, ‘#’ 取长度操作, 如果对象不是字符串, lua 尝试取元方法, 如果有元方法, 则调用并将对象以参数形式传入, 返回值作为结果, 如果对象是一张表且没有元方法, lua 使用表的取长度操作, 其他情况均抛出错误</li>
<li>__eq, ‘==’ 操作, 行为和 <code>add</code> 操作类似, 不同的是 lua 仅在两个值都是 table 或都是完全用户数据, 且它们不是同一个对象时才尝试取元方法, 调用的结果总是会被转换为布尔值</li>
<li>__lt, ‘&lt;’ 操作, 行为和 <code>add</code> 操作类似, 不同的是 lua 仅在两个值不全为整数也不全为字符串时才尝试取元方法, 调用的结果总是会被转换为布尔值</li>
<li>__le, ‘&lt;=’ 操作, 和其他操作不同, 此元方法可能用到两个不同的事件, 首先查找两个操作数的 <code>__le</code> 元方法, 如果找不到则再次查找 <code>__lt</code> 元方法, 它会假设 a &lt;= b 等价于 not(b &lt; a), 调用的结果总是会被转换为布尔值</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- metatable.lua</span></span><br><span class="line">myTable = &#123;k1 = <span class="number">1</span>, k2 = <span class="number">2</span>&#125;</span><br><span class="line">newTable = &#123;k1 = <span class="number">3</span>, k2 = <span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(myTable, &#123;</span><br><span class="line">    <span class="built_in">__add</span> = <span class="function"><span class="keyword">function</span><span class="params">(t1, t2)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__add was called...&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t1) <span class="keyword">do</span></span><br><span class="line">                <span class="built_in">print</span>(k, v)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t2) <span class="keyword">do</span></span><br><span class="line">                <span class="built_in">print</span>(k, v)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    <span class="built_in">__sub</span> = <span class="function"><span class="keyword">function</span><span class="params">(t1, t2)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__sub was called...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(t2.k1 - t1.k1, t2.k2 - t1.k2)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    <span class="built_in">__pow</span> = <span class="function"><span class="keyword">function</span><span class="params">(t1, t2)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__pow was called...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> ^ <span class="number">2</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    <span class="built_in">__mod</span> = <span class="function"><span class="keyword">function</span><span class="params">(t1, t2)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__mod was called...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> % <span class="number">3</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    __band = <span class="function"><span class="keyword">function</span><span class="params">(t1, t2)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__band was called...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span> &amp; <span class="number">5</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    __shl = <span class="function"><span class="keyword">function</span><span class="params">(t1, t2)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__shl was called...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> t1.k2 &lt;&lt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    <span class="built_in">__lt</span> = <span class="function"><span class="keyword">function</span><span class="params">(t1, t2)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__lt was called...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> t1.k2 &lt; t2.k2</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(myTable + newTable) <span class="comment">-- __add 操作</span></span><br><span class="line"><span class="built_in">print</span>(myTable - newTable) <span class="comment">-- __sub 操作</span></span><br><span class="line"><span class="built_in">print</span>(myTable ^ newTable) <span class="comment">-- __pow 操作</span></span><br><span class="line"><span class="built_in">print</span>(myTable % newTable) <span class="comment">-- __mod 操作</span></span><br><span class="line"><span class="built_in">print</span>(myTable &amp; newTable) <span class="comment">-- __band 操作</span></span><br><span class="line"><span class="built_in">print</span>(myTable &lt;&lt; newTable) <span class="comment">-- __shl 操作</span></span><br><span class="line"><span class="built_in">print</span>(myTable &lt; newTable) <span class="comment">-- __lt 操作</span></span><br><span class="line">[root@centos7 workspace]# lua metatable.lua</span><br><span class="line"><span class="built_in">__add</span> was called...	<span class="comment">-- __add 操作	&lt;!-- markdownlint-disable-line --&gt;</span></span><br><span class="line">k1      <span class="number">1</span></span><br><span class="line">k2      <span class="number">2</span></span><br><span class="line">k1      <span class="number">3</span></span><br><span class="line">k2      <span class="number">4</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="built_in">__sub</span> was called...	<span class="comment">-- __sub 操作	&lt;!-- markdownlint-disable-line --&gt;</span></span><br><span class="line"><span class="number">2</span>       <span class="number">2</span></span><br><span class="line"><span class="number">1000</span></span><br><span class="line"><span class="built_in">__pow</span> was called...	<span class="comment">-- __pow 操作 	&lt;!-- markdownlint-disable-line --&gt;</span></span><br><span class="line"><span class="number">100.0</span></span><br><span class="line"><span class="built_in">__mod</span> was called...	<span class="comment">-- __mod 操作	&lt;!-- markdownlint-disable-line --&gt;</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">__band was called...	<span class="comment">-- __band 操作	&lt;!-- markdownlint-disable-line --&gt;</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">__shl was called...	<span class="comment">-- __shl 操作	&lt;!-- markdownlint-disable-line --&gt;</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="built_in">__lt</span> was called...	<span class="comment">-- __lt 操作	&lt;!-- markdownlint-disable-line --&gt;</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>__tostring, 元方法用于修改表的输出行为(自定义输出内容)</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> mtstringstr = <span class="string">[[</span></span><br><span class="line"><span class="string">mtstring = setmetatable(&#123; 10, 20, 30&#125;, &#123;</span></span><br><span class="line"><span class="string">    __tostring = function (t)</span></span><br><span class="line"><span class="string">        local sum = 0</span></span><br><span class="line"><span class="string">        for k, v in pairs(t) do</span></span><br><span class="line"><span class="string">            sum = sum + v</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">        return &quot;表中所有元素的和为 &quot;..sum</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">print(mtstring) -- 表中所有元素的和为 60</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(mtstringstr)</span><br><span class="line">mtstring = <span class="built_in">setmetatable</span>(&#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;, &#123;</span><br><span class="line">    <span class="built_in">__tostring</span> = <span class="function"><span class="keyword">function</span> <span class="params">(t)</span></span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">            sum = sum + v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;表中所有元素的和为 &quot;</span>..sum</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(mtstring) <span class="comment">-- 表中所有元素的和为 60</span></span><br></pre></td></tr></table></figure>

<ul>
<li>__call, 函数调用操作 func(args), 当 lua 尝试调用一个非函数的值时会尝试取元方法, 如果存在元方法则调用该方法, func 作为第一个参数传入, 原来调用的参数一次排在后面</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">myTable = &#123;k1 = <span class="number">1</span>, k2 = <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line">newTable = &#123;k1 = <span class="number">3</span>, k2 = <span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(myTable, &#123;</span><br><span class="line">    <span class="built_in">__call</span> = <span class="function"><span class="keyword">function</span><span class="params">(t1, t2)</span></span></span><br><span class="line">        <span class="keyword">local</span> num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t1) <span class="keyword">do</span></span><br><span class="line">            num = num + v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t2) <span class="keyword">do</span></span><br><span class="line">            num = num + v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(myTable(newTable))</span><br><span class="line">[root@centos7 workspace]# lua metatable.lua</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<ul>
<li>__index, table[key] 查找操作, 当 table 不是表或者 table 中不存在 key 这个键时, lua 会尝试取元方法<ul>
<li>如果 __index 键包含一个 table 时, lua 则会在这个 table 中查找相应的 key</li>
<li>如果 __index 键包含一个函数时, lua 则会调用这个函数, table 和 key 作为参数传递给函数并接收函数的返回值作为结果</li>
</ul>
</li>
</ul>
<p>查找顺序:</p>
<ol>
<li>在 table 中查找, 如果找到则返回该元素, 否则继续</li>
<li>判断该 table 是否有元表, 如果没有则返回 nil, 否则继续</li>
<li>判断元表是否有 __index 键, 如果没有则返回 nil, 如果 __index 键包含一个 table, 则重复 1. 2. 3, 如果 __index 键包含一个函数, 则返回调用该函数的返回值</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------__index是table---------&quot;</span>)</span><br><span class="line">t = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;<span class="built_in">__index</span> = &#123; name = <span class="string">&quot;hello world&quot;</span> &#125;&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t = setmetatable(&#123;&#125;, &#123;__index = &#123; name = \&quot;hello world\&quot; &#125;&#125;)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;print(t.name)&quot;</span>, t.name) <span class="comment">-- hello world</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;print(t.foo)&quot;</span>, t.foo) <span class="comment">-- nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------__index是函数---------&quot;</span>)</span><br><span class="line">mytable = <span class="built_in">setmetatable</span>(&#123;foo = <span class="string">&quot;bar&quot;</span>&#125;,&#123;</span><br><span class="line">    <span class="built_in">__index</span> = <span class="function"><span class="keyword">function</span><span class="params">(t, k)</span></span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="string">&quot;baz&quot;</span> <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;baz = baz&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">local</span> mytableStr = <span class="string">[[</span></span><br><span class="line"><span class="string">mytable = setmetatable(&#123;foo = &quot;bar&quot;&#125;,&#123;</span></span><br><span class="line"><span class="string">    __index = function(t, k)</span></span><br><span class="line"><span class="string">        if k == &quot;baz&quot; then</span></span><br><span class="line"><span class="string">            return &quot;baz = baz&quot;</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">            return nil</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">&#125;)]]</span></span><br><span class="line"><span class="built_in">print</span>(mytableStr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;print(mytable.foo, mytable.baz)&quot;</span>, mytable.foo, mytable.baz) <span class="comment">-- bar     baz = baz</span></span><br></pre></td></tr></table></figure>

<ul>
<li>__newindex, table[key] = value 索引赋值操作, 发生在 table 不是表或者 table 中不存在 key 这个键时, lua 会尝试取元方法<ul>
<li>如果 __newindex 键包含一个 table 时, lua 则会对这个 table 做索引赋值操作, 索引过程有可能会引发另一次元方法</li>
<li>如果 __newindex 键包含一个 函数时, lua 会调用这个函数而不进行赋值操作, table、key、value 将作为函数的参数传入</li>
</ul>
</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------__newindex是table---------&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> mtnewmtstr = <span class="string">[[</span></span><br><span class="line"><span class="string">mtnewmt = &#123;&#125;</span></span><br><span class="line"><span class="string">mtnew = setmetatable(&#123; name = &quot;hello world&quot; &#125;, &#123; __newindex = mtnewmt&#125;)</span></span><br><span class="line"><span class="string">print(mtnew.name) -- hello world</span></span><br><span class="line"><span class="string">mtnew.name = &quot;hello lua&quot;</span></span><br><span class="line"><span class="string">print(mtnew.name, mtnewmt.name) -- hello lua  nil</span></span><br><span class="line"><span class="string">mtnew.addr = &quot;beijing&quot;</span></span><br><span class="line"><span class="string">print(mtnew.addr, mtnewmt.addr) -- nil  beijing</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(mtnewmtstr)</span><br><span class="line">mtnewmt = &#123;&#125;</span><br><span class="line">mtnew = <span class="built_in">setmetatable</span>(&#123; name = <span class="string">&quot;hello world&quot;</span> &#125;, &#123; <span class="built_in">__newindex</span> = mtnewmt&#125;)</span><br><span class="line"><span class="built_in">print</span>(mtnew.name) <span class="comment">-- hello world</span></span><br><span class="line">mtnew.name = <span class="string">&quot;hello lua&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mtnew.name, mtnewmt.name) <span class="comment">-- hello lua  nil</span></span><br><span class="line">mtnew.addr = <span class="string">&quot;beijing&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mtnew.addr, mtnewmt.addr) <span class="comment">-- nil beijing</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------__newindex是函数---------&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> mtnewmt2str = <span class="string">[[</span></span><br><span class="line"><span class="string">mtnewmt2 = setmetatable(&#123; name = &quot;hello world&quot; &#125;, &#123;</span></span><br><span class="line"><span class="string">    __newindex = function(t, k, v)</span></span><br><span class="line"><span class="string">        rawset(t, k, &quot;gg_&quot;..&quot;\&quot;&quot;..v..&quot;\&quot;&quot;..&quot;_gg&quot;)</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">mtnewmt2.age = 18</span></span><br><span class="line"><span class="string">mtnewmt2.addr = &quot;beijing&quot;</span></span><br><span class="line"><span class="string">print(mtnewmt2.name, mtnewmt2.age, mtnewmt2.addr) -- hello world     gg_&quot;18&quot;_gg      gg_&quot;beijing&quot;_gg</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line">mtnewmt2 = <span class="built_in">setmetatable</span>(&#123; name = <span class="string">&quot;hello world&quot;</span> &#125;, &#123;</span><br><span class="line">    <span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span><span class="params">(t, k, v)</span></span></span><br><span class="line">        <span class="built_in">rawset</span>(t, k, <span class="string">&quot;gg_&quot;</span>..<span class="string">&quot;\&quot;&quot;</span>..v..<span class="string">&quot;\&quot;&quot;</span>..<span class="string">&quot;_gg&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line">mtnewmt2.age = <span class="number">18</span></span><br><span class="line">mtnewmt2.addr = <span class="string">&quot;beijing&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mtnewmt2.name, mtnewmt2.age, mtnewmt2.addr) <span class="comment">-- hello world     gg_&quot;18&quot;_gg      gg_&quot;beijing&quot;_gg</span></span><br></pre></td></tr></table></figure>

<ul>
<li>__gc, 垃圾收集元方法, 当垃圾收集循环时触发</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- metatable.lua</span></span><br><span class="line">myTable = &#123;k1 = <span class="number">1</span>, k2 = <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(myTable, &#123;</span><br><span class="line">    <span class="built_in">__gc</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__gc was called...&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line">myTable = <span class="literal">nil</span></span><br><span class="line">[root@centos7 workspace]# lua metatable.lua</span><br><span class="line"><span class="built_in">__gc</span> was called...</span><br></pre></td></tr></table></figure>

<h3 id="弱表"><a href="#弱表" class="headerlink" title="弱表"></a>弱表</h3><p>弱表指内部元素为 <code>弱引用</code> 的表, 垃圾收集器会忽略弱引用计数, 如果一个对象只被弱引用引用时, 垃圾收集器就会回收这个对象<br>一张弱表可以有弱键或者弱值, 也可以键值都是弱引用, 仅包含弱键的表允许垃圾收集器回收它的键, 但会阻止对值所指的对象回收, 若一张表的键值均为弱引用, 那么收集器可以回收其中的任意键和值<br>在任何情况下, 只要键或值的任意一项被回收, 相关联的键值对都会从表中移除<br>一张表的元表中的 __mode 域控制着这张表的弱属性</p>
<ul>
<li>当 __mode 域是一个包含字符 k 的字符串时, 这张表的所有键都为弱引用</li>
<li>当 __mode 域是一个包含字符 v 的字符串时, 这张表的所有值都为弱引用</li>
</ul>
<p>属性为 <code>弱键强值</code> 的表也被称为 <code>暂时表</code>, 对于一张暂时表, 它的值是否可达仅取决于其对应键是否可达<br>对一张表的弱属性的修改仅在下次手机循环才生效, 只有那些有显式构造过程的对象才会从弱表中移除, 值, 例如数字和轻量 C 函数, 不受垃圾收集器管辖, 因此不会从弱表中移除(除非它们的关联项被回收)</p>
<h3 id="协程"><a href="#协程" class="headerlink" title="协程  "></a>协程 <em id="coroutine"></em> <!-- markdownlint-disable-line --></h3><p>lua 支持协程(协同式多线程), 一个协程在 lua 中代表了一段独立的执行线程, 协程拥有独立的堆栈, 独立的局部变量, 同时又与其他协程共享全局变量和其他大部分东西,</p>
<p>协程和线程的主要区别：</p>
<p>一个具有多个线程的程序可以同时运行多个线程, 协程却需要彼此协作的运行, 在任一指定时刻只有一个协程在运行, 并且这个正在运行的协程只有在明确的被要求挂起时才会被挂起</p>
<p>协程的运行可能被两种方式终止, 正常途径是主函数返回(显式返回或者执行完最后一条指令), 非正常途径是发生了一个未捕获的错误, 对于正常结束, <code>coroutine.resume()</code> 将返回 true 和协程主函数的返回值, 当错误发生时, <code>coroutine.resume()</code> 将返回 false 和错误信息</p>
<ul>
<li>coroutine.create(func) 创建 coroutine 并返回协程句柄, 当和 resume 配合使用时就唤醒函数调用</li>
<li>coroutine.resume(co [, val1, …]) 重启 coroutine 并将参数传入, 协程正常运行返回 true 和 传给 yield 的所有值(当协程让出)或者主体函数的所有返回值(当协程中止), 有错误发生时返回 false 和错误信息</li>
<li>coroutine.isyieldable() 判断正在运行的协程是否可以让出, 可以返回 1, 否则返回 0</li>
<li>coroutine.yield(args) 挂起 coroutine, 如果有参数则将参数返回给调用线程</li>
<li>coroutine.status(co) 查看 coroutine 的状态, 通常返回 dead, suspended, running</li>
<li>coroutine.wrap(f) 创建 coroutine 并返回一个函数, 启动协程需要手动调用这个函数</li>
<li>coroutine.running() 返回当前正在运行的 coroutine 和一个布尔值, 如果当前运行的协程是主线程, 布尔值为 true, 否则为 false</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- coroutine.lua</span></span><br><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(i)</span></span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="number">120</span>) <span class="comment">-- 120</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co)) <span class="comment">-- dead</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">running</span>()) <span class="comment">-- thread:0xef8018 true</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">wrap</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(i)</span></span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line">co(<span class="number">110</span>) <span class="comment">-- 110</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">running</span>()) <span class="comment">-- thread:0xef8018 true</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line">[root@centos7 workspace]# lua <span class="built_in">coroutine</span>.lua</span><br><span class="line"><span class="number">120</span></span><br><span class="line">dead</span><br><span class="line">thread: <span class="number">0xef8018</span>        <span class="literal">true</span></span><br><span class="line"><span class="comment">---------------</span></span><br><span class="line"><span class="number">110</span></span><br><span class="line">thread: <span class="number">0xef8018</span>        <span class="literal">true</span></span><br><span class="line">(<span class="string">&quot;---------------&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- coroutine.lua</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">(a)</span></span></span><br><span class="line">    <span class="comment">-- 4. 执行打印 foo 2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;foo&quot;</span>, a)</span><br><span class="line">    <span class="comment">-- 5. 挂起协程返回结果 4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(<span class="number">2</span>*a)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">co = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="params">(a,b)</span></span></span><br><span class="line">        <span class="comment">-- 2. 执行打印 co-body 1 10</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;co-body&quot;</span>, a, b)</span><br><span class="line">        <span class="comment">-- 3. 调用 foo 函数传入参数 2</span></span><br><span class="line">        <span class="comment">-- 8. 执行赋值操作将 resume 的参数 r 赋值给局部变量 r</span></span><br><span class="line">        <span class="keyword">local</span> r = foo(a+<span class="number">1</span>)</span><br><span class="line">        <span class="comment">-- 9. 执行打印 co-body r</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;co-body&quot;</span>, r)</span><br><span class="line">        <span class="comment">-- 10. 挂起协程返回结果 11 -9</span></span><br><span class="line">        <span class="comment">-- 13. 执行赋值操作将 resume 的参数 x y 赋值给局部变量 r s</span></span><br><span class="line">        <span class="keyword">local</span> r, s = <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(a+b, a-b)</span><br><span class="line">        <span class="comment">-- 14. 执行打印 co-body x y</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;co-body&quot;</span>, r, s)</span><br><span class="line">        <span class="comment">-- 15. 返回结果 10 end, 协程执行完成退出</span></span><br><span class="line">        <span class="keyword">return</span> b, <span class="string">&quot;end&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 1. 唤起协程传入参数 1 10  -- 6. 输出结果 main true 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment">-- 7. 唤起协程传入参数 r  -- 11. 输出结果 main true 11 -9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">&quot;r&quot;</span>))</span><br><span class="line"><span class="comment">-- 12. 唤起协程传入参数 x y  -- 16. 输出结果 main true 10 end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>))</span><br><span class="line"><span class="comment">-- 17. 唤起协程传入参数 x y, 协程执行完毕输出结果 main false cannot resume dead coroutine</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>))</span><br><span class="line">[root@centos7 workspace]# lua <span class="built_in">coroutine</span>.lua</span><br><span class="line">co-body <span class="number">1</span>       <span class="number">10</span></span><br><span class="line">foo     <span class="number">2</span></span><br><span class="line">main    <span class="literal">true</span>    <span class="number">4</span></span><br><span class="line">co-body r</span><br><span class="line">main    <span class="literal">true</span>    <span class="number">11</span>      <span class="number">-9</span></span><br><span class="line">co-body x       y</span><br><span class="line">main    <span class="literal">true</span>    <span class="number">10</span>      <span class="keyword">end</span></span><br><span class="line">main    <span class="literal">false</span>   cannot <span class="built_in">resume</span> dead <span class="built_in">coroutine</span></span><br></pre></td></tr></table></figure>

<h4 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> newProducer</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">producer</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(v) <span class="comment">-- 发送数据后就挂起 coroutine</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">consumer</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">        <span class="comment">-- 唤起 coroutine, 接收 coroutine 挂起时返回的结果</span></span><br><span class="line">        <span class="keyword">local</span> <span class="built_in">status</span>, value = <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(newProducer)</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">newProducer = <span class="built_in">coroutine</span>.<span class="built_in">create</span>(producer)</span><br><span class="line">consumer()</span><br></pre></td></tr></table></figure>

<h3 id="词法约定"><a href="#词法约定" class="headerlink" title="词法约定"></a>词法约定</h3><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>and break do else elseif end false for function goto if in local nil not or repeat return then true until while</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--这是单行注释, 不会被执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">这是多行注释, 不会被执行</span></span><br><span class="line"><span class="comment">这是多行注释, 不会被执行</span></span><br><span class="line"><span class="comment">这是多行注释, 不会被执行</span></span><br><span class="line"><span class="comment">这是多行注释, 不会被执行</span></span><br><span class="line"><span class="comment">]]</span><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;单行注释: \n-- 单行注释内容&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;多行注释: \n--[[ \n 多行注释内容\n 多行注释内容\n 多行注释内容\n]]--&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html = <span class="string">[[</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;a href=&quot;//www.baidu.com&quot;&gt;baidu&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;块字符串[[ ]]:\n&quot;</span>, html)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串拼接 .. :&quot;</span>, <span class="string">&quot;hello&quot;</span>..<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;计算字符串的长度 # :&quot;</span>, #html)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;% 作为特殊字符的转义字符, 就像正则表达式中的转义字符 \\&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;匹配模式: %a 表示任意字符, %c 表示任意控制字符, %d 表示任意数字, %l 表示任意小写字母, %u 表示任意大写字母, %s 表示任意空白字符, %w 表示任意字母/数字, %x 表示任意十六进制数, %p 表示任意标点, %z 表示任意代表0的字符&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当上述字符类用大写表示时, 表示与非此字符类的任意字符匹配, %S 表示任意非空白字符&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;alo\n123&quot;&#x27;</span> <span class="comment">--  字符串中包含另一种字符串的引号不需要转义</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">alo</span></span><br><span class="line"><span class="comment">123&quot;</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">a = <span class="string">&quot;alo\n123\&quot;&quot;</span> <span class="comment">-- 字符串中包含相同的引号需要进行转义</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">alo</span></span><br><span class="line"><span class="comment">123&quot;</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">a = <span class="string">&#x27;\97lo\10\04923&quot;&#x27;</span> <span class="comment">-- 使用 \XX 的十六进制形式表示字符</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">alo</span></span><br><span class="line"><span class="comment">123&quot;</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">a = <span class="string">&#x27;\u&#123;3b1&#125; \u&#123;3b2&#125; \u&#123;3b3&#125;&#x27;</span> <span class="comment">-- 使用 \u&#123;XXX&#125; 十六进制表示用 UTF-8 编码的 Unicode 字符</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">-- α β γ</span></span><br><span class="line"><span class="comment">-- 使用 [[ ]] 表示多行字符串</span></span><br><span class="line">a = <span class="string">[[alo</span></span><br><span class="line"><span class="string">123&quot;]]</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">alo</span></span><br><span class="line"><span class="comment">123&quot;</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="comment">-- 使用任意数量的 = 间隔分隔表示对其它多行字符串的引用</span></span><br><span class="line">a = <span class="string">[==[</span></span><br><span class="line"><span class="string">alo</span></span><br><span class="line"><span class="string">123&quot;</span></span><br><span class="line"><span class="string">]==]</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">alo</span></span><br><span class="line"><span class="comment">123&quot;</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure>

<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>Lua 有三种变量: 全局变量, 局部变量和表的域<br>所有没有显式声明的局部变量名都被当做全局变量, 在变量的首次赋值之前, 默认值都为 nil<br>变量的作用范围开始于声明它们之后的第一个语句段</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span> <span class="comment">-- 全局变量</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> x = x <span class="comment">-- 新的本地变量 x, 并赋值 10</span></span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment">-- 10 第一层作用域的本地变量</span></span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">local</span> x = x + <span class="number">1</span> <span class="comment">-- 取最近的变量 x 的值加 1 并赋值给新的本地变量 x</span></span><br><span class="line">        <span class="built_in">print</span>(x) <span class="comment">-- 12 第二层作用域的本地变量</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment">-- 11 第一层作用域的本地变量</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">-- 10 全局变量</span></span><br></pre></td></tr></table></figure>

<h4 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h4><ul>
<li>if, if exp then block {elseif exp then block} [else block] end</li>
<li>while, while exp do block end</li>
<li>for, for exp do block end</li>
<li>repeat, repeat block until exp</li>
</ul>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul>
<li>算术运算符: + - * / // % ^ -</li>
<li>关系运算符: == ~= &lt; &lt;= &gt; &gt;=</li>
<li>逻辑运算符: and or not</li>
<li>位运算符: &amp; | ~ &lt;&lt; &gt;&gt;</li>
<li>字符串拼接: ..</li>
<li>取长度操作符(元方法__len): #</li>
</ul>
<h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><ul>
<li>冒号语法可以用来定义方法, 使函数有一个隐形的形参 self, 代表函数自己</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;面向对象: lua 使用 table 描述对象的属性, 使用 function 描述方法, 使用 table + function 模拟面向对象&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br><span class="line"><span class="comment">-- 冒号语法可以用来定义方法, 使函数有一个隐形的形参 self, 代表函数自己</span></span><br><span class="line"><span class="comment">-- Meta class</span></span><br><span class="line">Shape = &#123;area = <span class="number">0</span>&#125;</span><br><span class="line"><span class="comment">-- 基础类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:new</span> <span class="params">(o,side)</span></span></span><br><span class="line">  o = o <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">  <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">  <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">  side = side <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">  <span class="built_in">self</span>.area = side*side;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 基础类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape:printArea</span> <span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;面积为 &quot;</span>,<span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">myshape = Shape:new(<span class="literal">nil</span>,<span class="number">10</span>)</span><br><span class="line">myshape:printArea()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line">Square = Shape:new()</span><br><span class="line"><span class="comment">-- 派生类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square:new</span> <span class="params">(o,side)</span></span></span><br><span class="line">  o = o <span class="keyword">or</span> Shape:new(o,side)</span><br><span class="line">  <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">  <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 派生类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square:printArea</span> <span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;正方形面积为 &quot;</span>,<span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">mysquare = Square:new(<span class="literal">nil</span>,<span class="number">10</span>)</span><br><span class="line">mysquare:printArea()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line">Rectangle = Shape:new()</span><br><span class="line"><span class="comment">-- 派生类方法 new</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle:new</span> <span class="params">(o,length,breadth)</span></span></span><br><span class="line">  o = o <span class="keyword">or</span> Shape:new(o)</span><br><span class="line">  <span class="built_in">setmetatable</span>(o, <span class="built_in">self</span>)</span><br><span class="line">  <span class="built_in">self</span>.<span class="built_in">__index</span> = <span class="built_in">self</span></span><br><span class="line">  <span class="built_in">self</span>.area = length * breadth</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 派生类方法 printArea</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle:printArea</span> <span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;矩形面积为 &quot;</span>,<span class="built_in">self</span>.area)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 创建对象</span></span><br><span class="line">myrectangle = Rectangle:new(<span class="literal">nil</span>,<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">myrectangle:printArea()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="C-API-中的函数和类型"><a href="#C-API-中的函数和类型" class="headerlink" title="C API 中的函数和类型"></a>C API 中的函数和类型</h3><ul>
<li>lua_status(lua_State *L) 返回线程 L 的状态, 正常状态为 0(LUA_OK), 当线程用 lua_resume 执行完毕并抛出了一个错误时, 状态值时错误码, 如果线程被挂起, 状态为 LUA_YIELD</li>
<li>lua_version(lua_State *L) 返回在 Lua 内核中保存的版本数字的地址</li>
</ul>
<h3 id="辅助库"><a href="#辅助库" class="headerlink" title="辅助库"></a>辅助库</h3><p>辅助库提供了一些便捷函数, 方便在 C 中为 Lua 编程, 基础 API 提供了 C 和 Lua 交互用的主要函数, 而辅助库则为一些常见的任务提供了高阶函数<br>所有辅助库中的函数和类型都定义在头文件 lauxlib.h 中, 它们均带有前缀 luaL_<br>辅助库中的所有的函数都基于基础 API 实现<br>一些辅助库函数会在内部使用一些额外的栈空间, 当辅助库使用的栈空间少于 5 个时, 它们不会取检查栈大小, 而是简单的假设栈够用<br>一些辅助库看中的函数用于检查 C 函数的参数, 因为错误信息格式化为指代参数</p>
<h4 id="函数和类型"><a href="#函数和类型" class="headerlink" title="函数和类型"></a>函数和类型</h4><ul>
<li>luaL_addchar(luaL_Buffer *B, char c) 向缓存 B 添加一个字节 c</li>
<li>luaL_addlstring(luaL_Buffer *B, const char *s, size_t l) 向缓存 B 添加一个长度为 l 的字符串 s, 这个字符串可以包含零</li>
<li>luaL_addstring(luaL_Buffer *B, const char *s) 向緩存 B 添加一个零结尾的字符串 s</li>
<li>luaL_callmeta(lua_State *L, int obj, const char *e) 调用一个元方法, 如果在索引 obj 处的对象有元表, 且元表有域 e, 这个函数会以该对象为参数调用这个域, 这种情况下, 函数返回真并将调用返回值压栈, 如果这个位置没有元表, 或没有对应的元方法, 此函数返回假(并不会将任何东西压栈)</li>
<li>luaL_dostring(lua_State *L, const char *str) 加载并运行指定的字符串(使用 luaL_loadstring 或者 luaL_pcall 定义), 如果没有错误返回假, 有错误返回真</li>
<li>luaL_getmetatable(lua_State *L, const char *tname) 将注册表中 tname 对应的元表压栈, 如果没有 tname 对应的元表, 则将 nil 压栈并返回假</li>
<li>luaL_len(lua_State *L, int index) 以数字形式返回给定索引处值的 长度, 等价于在 lua 中使用 # 的操作, 如果结果不是一个整数, 则抛出一个错误</li>
<li>luaL_loadstring(lua_State *L, const char *s) 将一个字符串加载为 lua 代码块, 这个函数使用 lua_load 加载一个零结尾的字符串 s, 返回值和 lua_load 相同</li>
</ul>
<h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><p>标准库提供了一些有用的函数, 它们都是直接用 C API 实现的, 其中一些函数提供了原本语言就有的服务(type/getmetatable), 另一些提供和 <code>外部</code> 打交道的服务(I/O)<br>还有些本可以用 lua 本身来实现, 但在 C 中实现可以满足关键点上的性能需求(例如 table.sort)<br>所有的库都是直接用 C API 实现的, 并以分离的 C 模块形式提供</p>
<h4 id="基础库"><a href="#基础库" class="headerlink" title="基础库"></a>基础库</h4><ul>
<li>assert(v[,message]) 如果参数 v 的值为假(nil 或 false)就会调用 error, message 为错误对象, 否则返回所有的参数</li>
<li>error (message [, level]) 终止正在执行的函数, 并返回 message 的内容作为错误信息, level 指示获取错误的位置: 1 默认, 为调用 error 的位置(文件+行), 2 指出调用 error 函数的函数, 0 不添加错误位置信息</li>
<li>pcall(f [, arg1, …]) 传入参数, 以保护模式调用函数 f</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;错误: 语法错误 和 运行时错误&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;assert(arg1, arg2) 类型断言, 如果第一个参数为真, assert 不做任何处理, 否则将第二个作为错误信息输出:  assert(type(a) == &#x27;number&#x27;, &#x27;a 不是一个数字&#x27;)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pcall() 保护模式调用, 接收一个函数和要传递给函数的参数, 以保护模式执行第一个参数, 可以捕获函数执行中的任何错误, 无错误返回 true, 有错误返回 false 和 errorinfo&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;xpcall() 第一个参数和第二个后面的参数作用同 pcall, 第二个参数为一个错误处理函数, 当错误发生时, lua 会在调用栈展开前调用错误处理函数, debug.debug() 提示一个 lua 提示符, 让用户来检查错误的原因, debug.traceback() 根据调用栈来构建一个扩展的错误消息&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>collectgarbage ([opt [, arg]]) 垃圾收集器的通用接口, opt 提供了一组不同的功能</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;垃圾回收: lua 采用了自动内存管理, collectgarbage([opt] [, arg])&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;collectgarbage(&#x27;collect&#x27;) 做一次完整的垃圾回收循环&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;collectgarbage(&#x27;count&#x27;) 以 K 字节为单位返回 lua 使用的总内存数&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;collectgarbage(&#x27;restart&#x27;) 重启垃圾回收器的自动运行&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;collectgarbage(&#x27;setpause&#x27;) 将 arg 设置为收集器的间歇率, 返回间歇率的前一个值&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;collectgarbage(&#x27;setstepmul&#x27;) 返回步进倍率的前一个值&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;collectgarbage(&#x27;step&#x27;) 单步运行垃圾收集器, 步长大小由 arg 决定&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;collectgarbage(&#x27;stop&#x27;) 停止垃圾收集器的运行&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;collectgarbage(&#x27;isrunning&#x27;) 返回表示收集器是否在工作的布尔值&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>getmetatable(object) 返回 object 的元表, 如果不包含元表则返回 nil</li>
<li>ipairs(t) 返回 3 个值(迭代函数, 表 t, 以及 0)</li>
<li>pairs(t) 如果 t 有元方法 __pairs, 以 t 为参数调用它并返回其返回的前 3 个值,否则, 返回 3 个值(迭代函数, 表 t, 以及 nil)</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(t) <span class="keyword">do</span> <span class="comment">-- 将迭代键值对(1, t[1]), (2, t[2]) ... 知道第一个空值</span></span><br><span class="line">    body</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">    body</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<ul>
<li>print(…) 接收任意数量的参数, 并将它们的值打印到 stdout</li>
<li>rawequal(v1, v2) 在不触发任何元方法的情况检查 v1 和 v2 是否相等, 返回一个布尔值</li>
<li>rawlen(v) 在不触任何元方法的情况下返回对象 v 的长度</li>
<li>rawset(table, index, value) 在不触发任何元方法的情况将 table[index] 设置为 value, table 必须是一张表</li>
<li>tonumber(e [, base]) 尝试将 e 转换为一个指定 base 进制的数字</li>
<li>tostring(v) 将参数 v 转换为可阅读的字符串形式</li>
<li>type(v) 返回指定参数的类型编码的字符串形式</li>
</ul>
<h4 id="协程库"><a href="#协程库" class="headerlink" title="协程库"></a><a href="#coroutine">协程库</a></h4><h4 id="包管理库"><a href="#包管理库" class="headerlink" title="包管理库"></a>包管理库</h4><p>模块: 封装公用的代码以 API 接口的形式在其他地方调用, 简单理解是将变量、常量、函数放在一个 table 里面，然后 return 返回</p>
<p>使用 require 方法加载模块, require(&quot;模块名&quot;) 或者 require &quot;模块名&quot;</p>
<p>模块的加载机制: require 用于搜索 lua 文件的路径是存放在全局变量 package.path 中, 当 lua 启动后, 会以环境变量 LUA_PATH 的值来初始这个环境变量, 如果没有找到该环境变量, 则使用一个编译时定义的默认路径来初始化, 此环境变量也可以自定义设置, 在搜索过程中, 如果找到该文件, 则使用 pacakge.loadfile 来加载模块, 否则就去找 C 程序库, 搜索的文件路径是从全局变量 package.cpath 获取, 而这个变量则是通过环境变量 LUA_CPATH 来初始, 此时搜索的文件是 so 或 dll 类型的文件, 如果找到了则使用 package.loadlib 来加载</p>
<ul>
<li>require(modename) 加载一个模块</li>
<li>package.config 描述一些为包管理准备的编译期配置信息的串</li>
<li>package.cpath 模块在 C 加载器中加载时的搜索路径</li>
<li>package.loaded 控制哪些模块已经被加载的表</li>
<li>package.loadlib(libname, funcname)</li>
<li>package.path 模块在 lua 加载器中加载时搜索路径</li>
<li>package.preload 保存一些特殊模块的加载器</li>
<li>package.searchers 控制如何加载模块的表</li>
<li>package.searchpath(name, path [, sep [, rep]]) 在指定 path 中搜索指定的 name</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> modulestr = <span class="string">[[</span></span><br><span class="line"><span class="string">local tst = &#123;&#125;</span></span><br><span class="line"><span class="string">local name = &quot;hello world&quot;</span></span><br><span class="line"><span class="string">function tst.getName()</span></span><br><span class="line"><span class="string">  return name</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">return tst</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">local tst = require(&quot;tst&quot;)</span></span><br><span class="line"><span class="string">print(tst.getName())</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(modulestr)</span><br></pre></td></tr></table></figure>

<h4 id="字符串控制"><a href="#字符串控制" class="headerlink" title="字符串控制"></a>字符串控制</h4><p>这个库提供了字符串处理的通用函数</p>
<ul>
<li>string.upper 转换大写”, string.upper(“AbCdE”))</li>
<li>string.lower 转换小写”, string.lower(“AbCdE”))</li>
<li>string.gsub 字符串查找替换”, string.gsub(“hello world”, “l”, ‘r’))</li>
<li>string.find 查找子串位置”, string.find(“hello lua user”, “lua”))</li>
<li>string.reverse 字符串反转”, string.reverse(“hello world”))</li>
<li>string.format 根据字符串模板返回格式化的字符串”, string.format(“the value is %d”, 4))</li>
<li>string.char 返回数值表示的字符, byte 返回字符的数值表示”, string.char(96, 99, 100), string.byte(‘ABCD’))</li>
<li>string.len 返回字符串的长度”, string.len(“abc”))</li>
<li>string.rep 返回字符串的 n 个拷贝”, string.rep(“abc”, 3))</li>
<li>string.gmatch 返回一个迭代器函数, 每次调用函数返回一个字符串中找到的下一个符合 pattern 模式的子串, 可以结合 for 循环查找”)</li>
<li>string.match 返回在字符串中查找符合匹配模式的第一个子串”)</li>
<li>string.sub 截取字符串”, string.sub(‘hello world’, 1, 6))</li>
</ul>
<h4 id="基础-UTF-8-支持"><a href="#基础-UTF-8-支持" class="headerlink" title="基础 UTF-8 支持"></a>基础 UTF-8 支持</h4><p>这个库提供了怼 UTF-8 编码的基础支持, 所有的函数都放在表 utf8 中, 此库不提供除编码处理之外的任何 unicode 支持</p>
<ul>
<li>utf8.char(…) 接收零个或多个整数, 将每个整数转换成对应的 UTF-8 字节序列, 并返回这些序列连接到一起的字符串</li>
<li>utf8.codes(s) 返回一系列的值, 迭代出字符串 s 中所有的字符</li>
<li>utf8.codepoint(s [, i [, j]]) 以整数形式返回 s 中从位置 i 到 j 间(包括两端啊)所有字符的编码, 默认 i 为 1, j 为 i</li>
<li>uft8.len(s [, i [, j]]) 返回字符串 s 中从位置 i 到 j 间(包含两端) UTF-8 字符的个数, 默认 i 为 1, j 为 -1</li>
<li>uft8.offset(s, n [, i]) 返回编码在 s 中的第 n 个字符的开始位置(按字节数)(从位置 i 开始统计), 如果指定的字符不在其中或在结束点之后, 函数返回 nil</li>
</ul>
<h4 id="表控制"><a href="#表控制" class="headerlink" title="表控制"></a>表控制</h4><ul>
<li>table.insert(list, [pos, ] value) 在 list 的位置 pos 处插入元素 value, 并向后移动元素, table.insert(tb1, 3, “hello world”)</li>
<li>table.pack(…) 返回用所有参数乘以键 1, 2, 等填充的新表, 并将 n 这个域设为参数的总数</li>
<li>table.remove(list [, pos]) 移除 list 中 pos 位置的元素并返回移除的元素, pos 默认为 #list, table.remove(tb2, 2)</li>
<li>table.sort(list [, comp]]) 对 list 进行排序, 如果提供了参数 comp, 则 comp 必须是一个可以接收两个列表内元素为参数的函数, table.sort(tb1)</li>
<li>table.unpack(list [, i [, j]]) 返回 list 中的元素, 默认 i 为 1, j 为 #list</li>
<li>table.concat 列出表中指定区间的所有元素, table.concat({“hello”, “world”, “lua”, 2022}, “-“)</li>
</ul>
<h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><p>这个库提供了基本的数学函数, 所有函数都放在表 math 中, 注解有 integer/float 的函数会对整数参数返回整数结果, 对浮点(或混合)参数返回浮点结果, 圆整函数(math.ceil, math.floor, math.modf)的结果在整数范围内是返回整数, 否则返回浮点数</p>
<h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>I/O 库提供了两套不同风格的文件处理接口</p>
<ul>
<li>简单模式(simple mode), 它提供设置默认输入文件及默认输出文件的操作, 所有的输入输出操作都针对这些默认文件</li>
<li>完全模式(complete mode), 当使用隐式文件句柄时, 所有的操作都是由表 io 提供, 若使用显式文件句柄, io.open 会返回一个文件句柄, 且所有的操作都由该文件句柄的方法来提供</li>
</ul>
<p>表 io 中也提供了三个和 C 中含义相同的预定义文件句柄: io.stdin, io.stdout, 以及 io.stderr, I/O 库永远不会关闭这些文件</p>
<ul>
<li><p>io.close([file]) 等价于 file:close(), 不指定 file 时关闭默认输出文件</p>
</li>
<li><p>io.flush() 等价于 io.output():flush()</p>
</li>
<li><p>io.input([file]) 当文件名调用它时, (以文本模式)来打开该名字的文件, 并将文件句柄设为默认输入文件, 如果用文件句柄调用它时, 就简单的将该句柄设为默认输入文件, 如果调用时不传参数, 则返回当前的默认输入文件</p>
</li>
<li><p>io.lines([filename …]) 以读模式打开指定的文件名并返回一个迭代函数, 此迭代函数的工作方式和用一个已打开的文件去调用 file:lines(…) 得到的迭代器相同, 当迭代函数检测到文件结束, 它不返回值(让循环结束)并自动关闭文件</p>
<p>调用 io.lines() (不传文件名) 等价于 io.input():lines(‘*|’), 按行迭代标准输入文件, 在此情况下, 循环结束后它不会关闭文件</p>
</li>
<li><p>io.open(filename [, mode]) 用字符串 mode 指定的模式打开一个文件并返回新的文件句柄, 当出错时, 返回 nil 和错误信息</p>
<ul>
<li>r 读模式, 默认</li>
<li>w 写模式</li>
<li>a 追加模式</li>
<li>r+ 更新模式, 所有之前的数据都保留</li>
<li>w+ 更新模式, 所有之前的数据都删除</li>
<li>a+ 追加更新模式, 所有之前的数据都保留, 只允许在文件尾部写入</li>
</ul>
</li>
<li><p>io.output([file]) 类似于 io.input(), 不过都针对默认输出文件操作</p>
</li>
<li><p>io.popen(prog [, mode]) 跟系统有关, 不是所有平台都提供, 用一个分离进程开启程序 prog, 返回的文件句柄可用于从这个程序中读取数据</p>
</li>
<li><p>io.read(…) 等价于 io.input():read(…)</p>
</li>
<li><p>io.tmpfile() 返回一个临时文件的句柄, 这个文件以更新模式打开, 在程序结束时自动删除</p>
</li>
<li><p>io.type(obj) 检查 obj 是否是合法的文件句柄, 如果是返回 ‘file’, 如果是关闭的文件句柄返回 ‘closed file’, 不是则返回 nil</p>
</li>
<li><p>io.write(…) 等价于 io.output():write(…)</p>
</li>
<li><p>file:close() 关闭文件</p>
</li>
<li><p>file:flush() 将写入的数据保存到 file 中</p>
</li>
<li><p>file:lines(…) 返回一个迭代器函数, 每次调用迭代器时, 都从文件中按指定格式读取数据, 默认 ‘|’</p>
</li>
<li><p>file:read(…) 按照指定格式读取文件, 默认读取一行</p>
<ul>
<li>*|l 默认, 从当前位置开始读取一行, 遇到文件末尾(EOF)返回 nil</li>
<li>*L 读取一行并保留行结束标记(如果有的话), 当在文件末尾时，返回 nil</li>
<li>*n 从当前位置读取数字直到行尾或者非数字字符结束并返回结果, 否则返回 nil</li>
<li>*i 读取一个整数并返回</li>
<li>*a 从当前位置开始读取所有内容</li>
<li>number 从当前位置读取指定数量 number 个字符并返回</li>
</ul>
</li>
<li><p>file:seek([where [, offset]]) 设置及获取当前文件的位置</p>
<ul>
<li>cur 从当前位置开始, 默认</li>
<li>set 从文件头开始</li>
<li>end 从文件尾开始</li>
<li>offset 默认 0, 偏移量</li>
</ul>
</li>
<li><p>file:setvbuf(mode [, size]) 设置文件的缓冲模式</p>
<ul>
<li>no 不缓冲, 输出操作立刻生效</li>
<li>full 完全缓冲, 只有在缓存满或当显式的对文件调用 flush 时才真正做输出操作</li>
<li>line 行缓冲, 缓冲有效将到每次换行前, 对于某些特殊文件(例如终端设备)缓冲到任何输入前</li>
<li>size 以字节为单位指定缓冲区大小</li>
</ul>
</li>
<li><p>file:write(…) 将参数的值逐个写入 file, 参数必须是字符串或数字, 成功返回 file, 否则返回 nil 和错误信息</p>
</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件 I/O: 用于读取和处理文件&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;简单模式(simple mode): 拥有一个当前输入文件和一个当前输入文件, 并且提供针对这些文件相关的操作&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;完全模式(complete mode): 使用外部的文件句柄来实现, 它以一种面向对象的方式, 将所有的文件操作定义为文件句柄的方法&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;简单模式:&quot;</span>)</span><br><span class="line"><span class="comment">-- 以追加的方式打开可读可写文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;a+&quot;</span>)</span><br><span class="line"><span class="comment">-- 设置默认输入文件为 test</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(file)</span><br><span class="line"><span class="comment">-- 读取文件</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用 io.read(\&quot;*n\&quot;) 从当前位置读取数字直到行尾或者非数字字符结束并返回结果, 否则返回 nil&quot;</span>, <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*n&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用 io.read 从当前位置读取一行&quot;</span>,<span class="built_in">io</span>.<span class="built_in">read</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用 io.read(&#x27;*|&#x27;) 从当前位置读取一行, 遇到文件末尾(EOF)返回 nil&quot;</span>, <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*|&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用 io.read(number) 从当前位置读取指定 number 个数的字符并返回&quot;</span>, <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="number">10</span>))</span><br><span class="line"><span class="comment">-- 写入文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;-- 在当前位置追加内容, 追加的内容是注释\n&quot;</span>)</span><br><span class="line"><span class="comment">-- 再次读取内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用 io.read(\&quot;*a\&quot;) 从当前位置读取整个文件&quot;</span>, <span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*a&quot;</span>))</span><br><span class="line"><span class="comment">-- 关闭文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;完全模式: 使用 file:function_name 代替 io:function_name&quot;</span>)</span><br><span class="line"><span class="comment">-- 打开文件</span></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line"><span class="comment">-- 输出文件第一行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;读取一行&quot;</span>, file:<span class="built_in">read</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;读取一行&quot;</span>, file:<span class="built_in">read</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;读取 10 个字符&quot;</span>, file:<span class="built_in">read</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;file:seek(where, offset) 设置和获取当前文件位置&quot;</span>, file:seek())</span><br><span class="line"><span class="comment">-- 写入文件</span></span><br><span class="line">file:<span class="built_in">write</span>(<span class="string">&quot;-- 完全模式插入的内容\n&quot;</span>)</span><br><span class="line">file:seek(<span class="string">&#x27;set&#x27;</span>) <span class="comment">-- &#x27;set&#x27; 从文件头开始, &#x27;cur&#x27; 从当前位置, &#x27;end&#x27; 从文件尾开始, offset: 0 偏移量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;读取所有内容&quot;</span>, file:<span class="built_in">read</span>(<span class="string">&quot;*a&quot;</span>))</span><br><span class="line"><span class="comment">-- 关闭文件</span></span><br><span class="line">file:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>

<h4 id="操作系统库"><a href="#操作系统库" class="headerlink" title="操作系统库"></a>操作系统库</h4><ul>
<li>os.clock() 返回程序使用的按秒计 CPU 时间的近似值</li>
<li>os.date([format [, time]]) 返回一个包含日期及时刻的字符串或表, 格式化方法取决于所给字符串 format</li>
<li>os.difftime(t2, t1) 返回以秒计算的时刻 t1 到 t2 的差值</li>
<li>os.execute([command]) 调用系统解释器执行 command, 执行成功返回 true, 否则返回 nil, 在第一个返回值之后, 函数返回一个字符串加一个数字<ul>
<li>exit 命令正常结束, 接下来的数字是命令的退出状态码</li>
<li>signal 命令被信号打断, 接下来的数字是打断该命令的信号</li>
</ul>
</li>
<li>os.exit([code [, close]]) 终止宿主程序, 如果 close 为真, 在退出前关闭 lua 状态机<ul>
<li>如果 code 为 true, 返回的状态码是 EXIT_SUCCESS</li>
<li>如果 code 为 false, 返回的状态码是 EXIT_FAILURE</li>
<li>如果 code 是一个数字, 返回的状态码就是这个数字, code 默认值为 true</li>
</ul>
</li>
<li>os.getenv(varname) 返回进程环境变量 varname 的值, 如果未定义则返回 nil</li>
<li>os.remove(filename) 删除指定的文件, 如果函数失败则返回 nil 和错误信息</li>
<li>os.rename(oldname, newname) 重命名文件, 如果函数失败则返回 nil 和错误信息</li>
<li>os.setlocale(locale [, category]) 设置程序的当前区域, locale 是一个区域设置的系统相关字符串, category 是一个描述由改变哪个分类的可选字符串: all, collate, ctype, monetary, numeric, time, 默认为 all</li>
<li>os.time([table]) 当不传参数时, 返回当前时刻, 如果传入一张表则返回由这张表表示的时刻, 这张表必须包含域 year, month, day, 可以包含 hour(默认为 12), min(默认为 0), sec(默认为 0), 以及 isdst(默认为 nil)</li>
<li>os.tmpname() 返回一个可用于临时文件的文件名字符串, 这个文件在使用前必须显式打开, 不再使用时需要显式删除</li>
</ul>
<h4 id="调试库"><a href="#调试库" class="headerlink" title="调试库"></a>调试库</h4><p>lua 提供了 debug 库用于提供创建自定义调试器的功能</p>
<ul>
<li>debug.debug() 进入一个用户交互模式,运行用户输入的每个字符串, 使用简单命令以及其他调试设置, 用户可以检阅全局变量和局部变量, 改变变量的值, 计算一些表达式等等, 输入一行仅包含 count 的字符串将结束这个函数继续向下运行</li>
<li>debug.gethook([thread]) 返回三个表示线程钩子设置的值: 当前钩子函数, 当前钩子掩码, 当前钩子计数</li>
<li>debug.getinfo([thread,] f [, what]) 返回一个关于函数信息的表, 也可以提供一个数字 f 表示的函数, 数字 f 表示运行在指定线程的调用栈对应层次上的函数, 0 层表示当前函数(getinfo 自身), 1 层表示调用 getinfo 的函数</li>
<li>debug.getlocal([thread, ] f, local) 返回在栈的 f 层处函数的索引为 local 的局部变量的名字和值, 此函数不仅用于访问显式定义的局部变量, 还包括形参, 临时变量等</li>
<li>debug.getmetatable(value) 返回给定 value 的元表, 如果没有则返回 nil</li>
<li>debug.getregistry() 返回注册表表, 这是一个预定以的表, 可以用来保存任何 C 代码想保存的 lua 值</li>
<li>debug.getupvalue(f, up) 返回函数 f 的第 up 个上值的名字和值, 如果没有则返回 nil</li>
<li>debug.getuservalue(u) 返回关联在 u 上的 lua 值, 如果 u 并非用户数据, 返回 nil</li>
<li>debug.sethook([thread,] hook, mask [, count]) 将一个函数作为钩子函数设入, 字符串 mask 以及数字 count 决定了钩子将在何时调用, mask: c 每当 lua 调用一个函数, 调用此钩子, r 每当 lua 从一个函数内返回时, 调用钩子, l 每当 lua 进入新的一行时, 调用钩子</li>
<li>debug.setlocal([thread, ] level, local, value) 将 value 赋值给栈上第 level 层函数的第 local 个局部变量, 如果没有那个变量返回 nil, 如果 level 越界则抛出一个错误</li>
<li>debug.setmetatable(value, table) 将 value 的元表设置为 table(可以是 nil), 返回 value</li>
<li>debug.setupvalue(f, up, value) 将 value 设置为函数 f 第 up 个上值, 如果函数没有那个上值返回 nil, 否则返回 up 上值的名字</li>
<li>debug.setuservalue(udata, value) 将 value 设置为 udata 的关联值, udata 必须是一个完全用户数据, 返回 udata</li>
<li>debug.traceback([thread,] [message [, level]]) 追踪堆栈信息, message 被添加到栈回朔信息的头部, level 指定从栈的哪一层开始回朔(默认: 1)</li>
<li>debug.upvalueid(f, n) 返回指定函数第 n 个上值的唯一标识符(一个轻量用户数据), 这个唯一标识符可以让程序检查两个不同的闭包是否共享了上值, 如果是则返回相同的标识符</li>
<li>debug.upvaluejoin(f1, n1, f2, n2) 让 lua 闭包 f1 的第 n1 个值引用 lua 闭包 f2 的第 n2 个值</li>
</ul>
<h3 id="其他语法"><a href="#其他语法" class="headerlink" title="其他语法"></a>其他语法</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">#!/usr/<span class="keyword">local</span>/bin/lua</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用 type函数获取类型: type()&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a = 100 type(a)&quot;</span>, <span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;type(nil)&quot;</span>, <span class="built_in">type</span>(<span class="literal">nil</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;for(condition) do ... end 循环, 泛型 for 循环通过一个迭代器函数(pairs)来遍历所有值&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;while(condition) do ... end 循环&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;repeat ... until(condition) 循环, 先执行一次语句再判断条件, 像 while do&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> ru = <span class="string">[[</span></span><br><span class="line"><span class="string">repeat</span></span><br><span class="line"><span class="string">        statements</span></span><br><span class="line"><span class="string">until(conditiion)</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(ru)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;循环控制语句: break goto&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;goto 将控制流程转到被标记的语句处, ::label::&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> var=<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span> <span class="keyword">do</span> <span class="comment">-- 第一个值为初始值, 第二个值为终止条件，第三个值为步长,省略默认为 1</span></span><br><span class="line">        <span class="built_in">print</span>(var) <span class="comment">-- 1 3 5 7 9</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;函数声明 function, 变长参数 ...&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> defineFunc = <span class="string">[[</span></span><br><span class="line"><span class="string">optional_function_scope function function_name(argument1, ..., argumentN)</span></span><br><span class="line"><span class="string">        function_body</span></span><br><span class="line"><span class="string">        return result_params_comma_separated</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"><span class="built_in">print</span>(defineFunc, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(n)</span></span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">elseif</span> n &gt; <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span>  <span class="string">&#x27;&gt; 1&#x27;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test(1)&quot;</span>, test(<span class="number">1</span>)) <span class="comment">-- true</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test(0)&quot;</span>, test(<span class="number">0</span>)) <span class="comment">-- false</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test(2)&quot;</span>, test(<span class="number">2</span>)) <span class="comment">-- &gt; 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;迭代器(iterator): 是一种对象, 能够用来遍历标准模板库容器中的部分或全部元素, 每个迭代器对象代表容器中的确定的地址&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;使用闭包模拟实现迭代器, 需要创建一个闭包的代价&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">values</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span> i = i + <span class="number">1</span>; <span class="keyword">return</span> t[i] <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">tb = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> values(tb) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;泛型 for: 自身保存迭代状态, 不必付出闭包的代价&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;for k, v in pairs(t) do ... end&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;无状态的迭代器: 不保留任何状态的迭代器, 在循环中可以利用无状态迭代器避免创建闭包花费额外的代价&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;pairs() 会无序输出所有数据, 遇到 nil 不会停止输出&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, <span class="string">&quot;ipairs() 按照 key 的顺序输出数据, 跳过字符串的 key, 遇到不连续的数据、nil会停止输出&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;多状态的迭代器: 使用闭包, 或者将所有的状态信息封装到 table 内&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------------------------&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h3><p>LuaRocks 是一个 Lua 包管理器，基于 Lua 语言开发，提供一个命令行的方式来管理 Lua 包依赖、安装第三方 Lua 包等，社区比较流行的包管理器之一</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># wget https://luarocks.org/releases/luarocks-3.9.2.tar.gz</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># tar zxpf luarocks-3.9.2.tar.gz</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># cd luarocks-3.9.2</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># ./configure &amp;&amp; make &amp;&amp; sudo make install</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># luarocks --version</span></span><br></pre></td></tr></table></figure>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>--help 查看命令帮助信息</li>
<li>show &lt;rock&gt; 显示指定包的详细信息</li>
<li>doc &lt;rock&gt; 查看指定包的文档</li>
<li>search &lt;rock&gt; 查找服务器中的指定包</li>
<li>list 列出所有安装的包</li>
<li>install &lt;rock&gt; 安装指定的包<ul>
<li>--check-lua-versions 检查包的兼容性</li>
</ul>
</li>
<li>remove &lt;rock&gt; 移除指定的包</li>
<li>purge 移除所有的包</li>
<li>path 显示当前配置的包的目录</li>
<li>build 编译安装当前目录的 rock</li>
<li>make 在当前目录中使用 rockspec 文件编译安装 rock</li>
<li>pack 在当前目录下创建一个 rock</li>
<li>unpack &lt;rock&gt; 解包一个 rock</li>
<li>upload &lt;rockspec&gt; 创建一个 rock 并上传到公共服务器</li>
</ul>
<h4 id="连接-redis"><a href="#连接-redis" class="headerlink" title="连接 redis"></a>连接 redis</h4><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span> <span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="keyword">local</span> client = redis.connect(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> res = client:ping()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> name = client:get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> xiaoming = client:hgetall(<span class="string">&#x27;xiaoming&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> key, val <span class="keyword">in</span> <span class="built_in">pairs</span>(xiaoming) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(key, <span class="string">&quot; =&gt; &quot;</span>, val)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>server</category>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>MutationObserver</title>
    <url>/2021/07/f148f882ba3d/</url>
    <content><![CDATA[<h2 id="MutationObserver"><a href="#MutationObserver" class="headerlink" title="MutationObserver"></a>MutationObserver</h2><p>MutationObserver 接口提供监视对 DOM 树所做更改的能力, 用于替代 Mutation Events 的新 API, 与 Events 不同的是: 事件是同步触发, 即 DOM 发生变动会立刻触发相应事件, MutationObserver 则是<strong>异步触发</strong>, DOM 发生变动以后并不会马上触发, 而是要等到当前所有 DOM 操作都结束后才触发, 所有监听操作以及相应的处理都是在其他任务执行完成之后异步执行的, 并且在 DOM 更改触发之后,将更改记录存储在数组之中, 统一进行回调通知</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>创建并返回一个新的 <code>MutationObserver</code> 实例, 会在指定的 DOM 发生变化时被调用</p>
<ul>
<li><p>参数 callback</p>
<p>当被指定的节点或子树以及配置项有 Dom 变化时会被调用, 回调函数有两个参数:</p>
<ul>
<li>MutationRecord 描述所有被触发改动的记录对象数组</li>
<li>MutationObserver 调用该函数的 MutationObserver 对象</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个观察器并传入回调函数</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="keyword">function</span> (<span class="params">MutationRecord, observer</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MutationRecord</span>, observer);</span><br><span class="line">  <span class="comment">// [&#123;</span></span><br><span class="line">  <span class="comment">//   addedNodes: NodeList []</span></span><br><span class="line">  <span class="comment">//   attributeName: &quot;&quot;</span></span><br><span class="line">  <span class="comment">//   attributeNamespace: null</span></span><br><span class="line">  <span class="comment">//   nextSibling: null</span></span><br><span class="line">  <span class="comment">//   oldValue: &quot;&quot;</span></span><br><span class="line">  <span class="comment">//   previousSibling: null</span></span><br><span class="line">  <span class="comment">//   removedNodes: NodeList []</span></span><br><span class="line">  <span class="comment">//   target:</span></span><br><span class="line">  <span class="comment">//   type: &quot;attributes&quot;</span></span><br><span class="line">  <span class="comment">// &#125;]</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 指定观察变动的 DOM 节点和配置项</span></span><br><span class="line">observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#someElement&#x27;</span>), &#123;</span><br><span class="line">  <span class="attr">subtree</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">childList</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">attributes</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 停止观察器</span></span><br><span class="line">observer.<span class="title function_">disconnect</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>返回值 MutationObserver 对象</li>
</ul>
<span id="more"></span>

<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><h4 id="observer-disconnect"><a href="#observer-disconnect" class="headerlink" title="observer.disconnect()"></a>observer.disconnect()</h4><p>阻止 MutationObserver 实例继续接收的通知, 直到再次调用其 observe 方法, 该观察者对象包含的回调函数都不会再被调用</p>
<ul>
<li>参数 无</li>
<li>返回值 undefined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">observer.<span class="title function_">disconnect</span>();</span><br></pre></td></tr></table></figure>

<h4 id="observer-observe"><a href="#observer-observe" class="headerlink" title="observer.observe()"></a>observer.observe()</h4><p>配置 MutationObserver 在 DOM 更改匹配给定选项时, 通过其回调函数开始接收通知</p>
<ul>
<li>参数<ul>
<li>target DOM 树种一个要观察变化的 DOM Node</li>
<li>options 可选, 一个可选的 <code>MutationObserverInit</code> 对象, 此对象的配置描述了 DOM 的哪些变化应该提供给当前观察者的 callback</li>
</ul>
</li>
<li>返回值 undefined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">observer.<span class="title function_">observe</span>(<span class="title class_">Element</span>, &#123; <span class="attr">subtree</span>: <span class="literal">true</span>, <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">attributes</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="observer-takeRecords"><a href="#observer-takeRecords" class="headerlink" title="observer.takeRecords()"></a>observer.takeRecords()</h4><blockquote>
<p>使用场景是在断开观察者之前立即获取所有未处理的更改记录, 以便在停止观察者时可以处理任何未处理的更改</p>
</blockquote>
<p>返回所有匹配 DOM 更改的<strong>挂起的</strong>状态队列并清除队列, 使变更队列保持为空</p>
<ul>
<li>参数 无</li>
<li>返回值 <code>MutationRecord</code> 对象列表, 每个对象都描述了应用于 DOM 树某部分的一次改动</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = observer.<span class="title function_">takeRecords</span>();</span><br></pre></td></tr></table></figure>

<h5 id="MutationRecord"><a href="#MutationRecord" class="headerlink" title="MutationRecord"></a>MutationRecord</h5><p>每个 <code>MutationRecord</code> 代表一个独立的 DOM 变化在每次随 DOM 变化时作为 MutationObserver 回调函数的参数传入</p>
<ul>
<li>type String,<ul>
<li>如果是属性变化, 则返回 “attributes”</li>
<li>如果是 characterData 节点变化, 则返回 “characterData”</li>
<li>如果是子节点树 childList 变化, 则返回 “childList”</li>
</ul>
</li>
<li>target Node,<ul>
<li>根据 type 类型返回变化所影响的节点</li>
</ul>
</li>
<li>addedNodes NodeList, 返回被添加的节点,如果无则为空的 NodeList</li>
<li>removedNodes NodeList, 返回被移除的节点, 如果无则为空的 NodeList</li>
<li>previousSibling Node, 返回被添加或移除的节点之前的兄弟节点, 或者 null</li>
<li>nextSibling Node, 返回被添加或移除的节点之后的兄弟节点,或者 null</li>
<li>attributeName String, 返回被修改的属性的属性名, 或者 null</li>
<li>attributeNamespace String, 返回被修改属性的命名空间, 或者 null</li>
<li>oldValue String, 如果使当前属性有效,则需要在 MutationObserverInit 参数中配置 attributeOldValue 或者 characterDataOldValue 为 true<ul>
<li>如果属性 attributes 变化, 返回变化之前的属性值</li>
<li>如果 characterData 变化, 返回变化之前的数据</li>
<li>如果子节点树 childList 变化, 返回 null</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">mutationRecord, observer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mutationRecord, observer);</span><br><span class="line">&#125;);</span><br><span class="line">observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>), &#123;</span><br><span class="line">  <span class="attr">attributes</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">attributeOldValue</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">attributeFilter</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="attr">characterData</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">characterDataOldValue</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [&#123;</span></span><br><span class="line"><span class="comment">//   addedNodes: NodeList []</span></span><br><span class="line"><span class="comment">//   attributeName: &quot;title&quot;</span></span><br><span class="line"><span class="comment">//   attributeNamespace: null</span></span><br><span class="line"><span class="comment">//   nextSibling: null</span></span><br><span class="line"><span class="comment">//   oldValue: &quot;hello new root 1&quot;</span></span><br><span class="line"><span class="comment">//   previousSibling: null</span></span><br><span class="line"><span class="comment">//   removedNodes: NodeList []</span></span><br><span class="line"><span class="comment">//   target: &quot;div#root.helloRoothelloRoot1.helloRoot1&quot;</span></span><br><span class="line"><span class="comment">//   type: &quot;attributes&quot;</span></span><br><span class="line"><span class="comment">// &#125;]</span></span><br></pre></td></tr></table></figure>

<h3 id="MutationObserverInit"><a href="#MutationObserverInit" class="headerlink" title="MutationObserverInit"></a>MutationObserverInit</h3><p>描述了 MutationObserver 的配置, 主要被用作 observe 方法的参数模型</p>
<h4 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h4><ul>
<li><p>attributeFilter 可选, 要监视的特定属性名称的数组, 未包含此属性则对所有属性的更改都会触发变动通知, 无默认值</p>
</li>
<li><p>attributeOldValue 可选, 当监视节点的属性改动时, 将此属性设为 true 将记录任何有改动的属性的上一个值, 无默认值</p>
</li>
<li><p>attributes 三选一,设为 true 以观察受监视元素的属性值变更, 默认 false</p>
</li>
<li><p>characterData 三选一, 设为 true 以监视指定目标节点或子节点树中节点所包含的字符数据的变化, 无默认值</p>
</li>
<li><p>characterDataOldValue 设为 true 以在文本在受监视节点上发生更改时记录节点文本的先前值, 无默认值</p>
</li>
<li><p>childList 三选一, 设为 true 以监视目标节点(如果 subtree 为 true, 则包含子孙节点)添加或删除新的子节点, 默认 false</p>
</li>
<li><p>subtree 设为 true 以将监视范围扩展至目标节点整个节点树中的所有节点, 默认 false</p>
</li>
</ul>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>当调用 observe 方法时, childList, attributes, characterData 三个属性之中, 至少有一个必须为 true, 否则抛出 TypeError 异常</p>
]]></content>
      <categories>
        <category>WebAPI</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Performance</title>
    <url>/2023/05/4f79cfa6b1bf/</url>
    <content><![CDATA[<h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>Performance 接口可以获取当前页面中与性能相关的信息, 它是高级能力 Timing API 的一部分, 同时也融合了 Timeline API, Navigation Timing API, User Timing API, Resource Timing API</p>
<p>该类型的对象可以通过调用只读属性 <code>window.performance</code> 获取</p>
<h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><ul>
<li><p>navigation: 获取在指定的时间段内发生的操作相关信息, 包含页面的加载刷新、发生了多少次重定向等</p>
</li>
<li><p>timing: 表示包含延迟相关的性能信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">performance.<span class="property">timing</span>;</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;connectStart&quot;: 1685528410085,</span></span><br><span class="line"><span class="comment">//   &quot;navigationStart&quot;: 1685528410083,</span></span><br><span class="line"><span class="comment">//   &quot;secureConnectionStart&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;fetchStart&quot;: 1685528410085,</span></span><br><span class="line"><span class="comment">//   &quot;domContentLoadedEventStart&quot;: 1685528410878,</span></span><br><span class="line"><span class="comment">//   &quot;responseStart&quot;: 1685528410185,</span></span><br><span class="line"><span class="comment">//   &quot;domInteractive&quot;: 1685528410417,</span></span><br><span class="line"><span class="comment">//   &quot;domainLookupEnd&quot;: 1685528410085,</span></span><br><span class="line"><span class="comment">//   &quot;responseEnd&quot;: 1685528410186,</span></span><br><span class="line"><span class="comment">//   &quot;redirectStart&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;requestStart&quot;: 1685528410087,</span></span><br><span class="line"><span class="comment">//   &quot;unloadEventEnd&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;unloadEventStart&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;domLoading&quot;: 1685528410189,</span></span><br><span class="line"><span class="comment">//   &quot;domComplete&quot;: 1685528410896,</span></span><br><span class="line"><span class="comment">//   &quot;domainLookupStart&quot;: 1685528410085,</span></span><br><span class="line"><span class="comment">//   &quot;loadEventStart&quot;: 1685528410897,</span></span><br><span class="line"><span class="comment">//   &quot;domContentLoadedEventEnd&quot;: 1685528410878,</span></span><br><span class="line"><span class="comment">//   &quot;loadEventEnd&quot;: 1685528410897,</span></span><br><span class="line"><span class="comment">//   &quot;redirectEnd&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;connectEnd&quot;: 1685528410085</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>memory: <code>非标准属性</code>, 表示基本内存使用情况的对象</p>
</li>
<li><p>timeOrigin: 表示性能测量开始时的时间的高精度时间戳</p>
</li>
</ul>
<span id="more"></span>

<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul>
<li>resourcetimingbufferfull: 当浏览器的资源时间性能缓冲区已满时触发</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">performance.<span class="property">onresourcetimingbufferfull</span> = <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;warning: Resource Timing Buffer is FULL!&#x27;</span>);</span><br><span class="line">  performance.<span class="title function_">setResourceTimingBufferSize</span>(<span class="number">300</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="p9e-clearMarks"><a href="#p9e-clearMarks" class="headerlink" title="p9e.clearMarks()"></a>p9e.clearMarks()</h4><p>将给定的 mark 从浏览器的性能输入缓冲区中移除, 如果未指定参数则所有 entryType 值为 mark 的 <a href="#PerformanceEntry">PerformanceEntry</a> 将从缓冲区中移除</p>
<ul>
<li>参数 name</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">performance.<span class="title function_">clearMarks</span>();</span><br></pre></td></tr></table></figure>

<h4 id="p9e-clearMeasures"><a href="#p9e-clearMeasures" class="headerlink" title="p9e.clearMeasures()"></a>p9e.clearMeasures()</h4><p>将给定的 measure 从浏览器的性能输入缓冲区中移除, 如果未指定参数则所有 entryType 值为 measure 的 <a href="#PerformanceEntry">PerformanceEntry</a> 将从缓冲区移除</p>
<ul>
<li>参数 name</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">performance.<span class="title function_">clearMeasures</span>();</span><br></pre></td></tr></table></figure>

<h4 id="p9e-clearResourceTimings"><a href="#p9e-clearResourceTimings" class="headerlink" title="p9e.clearResourceTimings()"></a>p9e.clearResourceTimings()</h4><p>将所有 entryType 值为 resource 的 <a href="#PerformanceEntry">PerformanceEntry</a> 从缓冲区移除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">performance.<span class="title function_">clearResourceTimings</span>();</span><br></pre></td></tr></table></figure>

<h4 id="p9e-getEntries"><a href="#p9e-getEntries" class="headerlink" title="p9e.getEntries()"></a>p9e.getEntries()</h4><p>基于给定的 filter 返回一个 <a href="#PerformanceEntry">PerformanceEntry</a> 对象列表, 如果没有符合 filter 条件的返回空数组, 如果未指定参数则返回所有 <a href="#PerformanceEntry">PerformanceEntry</a></p>
<ul>
<li>参数<ul>
<li>options: 可选属性, 一个包含键值对的过滤配置项<ul>
<li>name: <code>PerformanceEntry</code> 的名字</li>
<li>entryType: <code>PerformanceEntry</code> 的 entryType, 合法的类型可以从 <code>PerformanceEntry.entryType</code> 获取</li>
<li>initiatorType: 初始化资源的类型, 在 <code>PerformanceResourceTiming.initiatorType</code> 接口中定义</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有的 PerformanceEntry</span></span><br><span class="line"><span class="keyword">const</span> entries = performance.<span class="title function_">getEntries</span>();</span><br><span class="line"><span class="comment">// 获取指定的 PerformanceEntry</span></span><br><span class="line"><span class="keyword">const</span> entries = performance.<span class="title function_">getEntries</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;https://developer.mozilla.org/favicon-192x192.png&#x27;</span>,</span><br><span class="line">  <span class="attr">entryType</span>: <span class="string">&#x27;resource&#x27;</span>,</span><br><span class="line">  <span class="attr">initiatorType</span>: <span class="string">&#x27;other&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="p9e-getEntriesByName"><a href="#p9e-getEntriesByName" class="headerlink" title="p9e.getEntriesByName()"></a>p9e.getEntriesByName()</h4><p>基于给定的 name 和 entryType 返回一个 <a href="#PerformanceEntry">PerformanceEntry</a> 对象列表, 如果未找到返回空数组</p>
<ul>
<li>参数<ul>
<li>name: <code>PerformanceEntry</code> 的名字</li>
<li>type: <code>PerformanceEntry</code> 的 entryType</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">performance.<span class="title function_">mark</span>(<span class="string">&#x27;Begin&#x27;</span>);</span><br><span class="line"><span class="comment">// do something in 20 seconds</span></span><br><span class="line">performance.<span class="title function_">mark</span>(<span class="string">&#x27;End&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> entries = performance.<span class="title function_">getEntriesByName</span>(<span class="string">&#x27;Begin&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>);</span><br><span class="line"><span class="comment">// [&#123;</span></span><br><span class="line"><span class="comment">//   name: &#x27;Begin&#x27;,</span></span><br><span class="line"><span class="comment">//   entryType: &#x27;mark&#x27;,</span></span><br><span class="line"><span class="comment">//   startTime: 92068.30000019073,</span></span><br><span class="line"><span class="comment">//   duration: 0,</span></span><br><span class="line"><span class="comment">// &#125;];</span></span><br><span class="line"><span class="keyword">const</span> entries = performance.<span class="title function_">getEntriesByName</span>(<span class="string">&#x27;End&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>);</span><br><span class="line"><span class="comment">// [&#123;</span></span><br><span class="line"><span class="comment">//   name: &#x27;End&#x27;,</span></span><br><span class="line"><span class="comment">//   entryType: &#x27;mark&#x27;,</span></span><br><span class="line"><span class="comment">//   startTime: 112071.60000038147,</span></span><br><span class="line"><span class="comment">//   duration: 0,</span></span><br><span class="line"><span class="comment">// &#125;];</span></span><br></pre></td></tr></table></figure>

<h4 id="p9e-getEntriesByType"><a href="#p9e-getEntriesByType" class="headerlink" title="p9e.getEntriesByType()"></a>p9e.getEntriesByType()</h4><p>基于给定的 entryType 返回一个 <a href="#PerformanceEntry">PerformanceEntry</a> 对象的列表, 未指定参数返回 TypeError, 未找到返回空数组</p>
<ul>
<li>参数 entryType: <code>PerformanceEntry</code> 的 entryType</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> entries = performance.<span class="title function_">getEntriesByType</span>(<span class="string">&#x27;paint&#x27;</span>);</span><br><span class="line"><span class="comment">// [&#123;</span></span><br><span class="line"><span class="comment">//     &quot;name&quot;: &quot;first-paint&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;entryType&quot;: &quot;paint&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;startTime&quot;: 682,</span></span><br><span class="line"><span class="comment">//     &quot;duration&quot;: 0</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     &quot;name&quot;: &quot;first-contentful-paint&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;entryType&quot;: &quot;paint&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;startTime&quot;: 682,</span></span><br><span class="line"><span class="comment">//     &quot;duration&quot;: 0</span></span><br><span class="line"><span class="comment">// &#125;]</span></span><br></pre></td></tr></table></figure>

<h4 id="p9e-mark"><a href="#p9e-mark" class="headerlink" title="p9e.mark()  "></a>p9e.mark() <em id="performance.mark"></em> <!--markdownlint-disable-line--></h4><blockquote>
<p>通过 <code>performance.getEntries*</code> 方法可以获取到</p>
</blockquote>
<p>根据给定的 name, 在浏览器的性能输入缓冲区中创建一个相关的 timestamp, 如果指定的 name 已经存在于 <code>PerformanceTiming</code> 接口则抛出一个 SyntaxError</p>
<ul>
<li>参数 name: 指定标记的名字</li>
</ul>
<p>标记的 <a href="#PerformanceEntry">PerformanceEntry</a> 默认包含的属性</p>
<ul>
<li>entryType: 默认为 mark</li>
<li>name: 调用 mark 方法时指定的 name</li>
<li>startTime: 调用 mark 方法时的时间戳</li>
<li>duration: 默认为 0(标记没有持续时间)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dogMark = performance.<span class="title function_">mark</span>(<span class="string">&#x27;dog&#x27;</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;dog&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;entryType&quot;: &quot;mark&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;startTime&quot;: 671450.1999998093,</span></span><br><span class="line"><span class="comment">//   &quot;duration&quot;: 0</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">performance.<span class="title function_">getEntriesByName</span>(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>);</span><br><span class="line"><span class="comment">// [&#123;</span></span><br><span class="line"><span class="comment">//   name: &#x27;dog&#x27;,</span></span><br><span class="line"><span class="comment">//   entryType: &#x27;mark&#x27;,</span></span><br><span class="line"><span class="comment">//   startTime: 671450.1999998093,</span></span><br><span class="line"><span class="comment">//   duration: 0,</span></span><br><span class="line"><span class="comment">// &#125;];</span></span><br></pre></td></tr></table></figure>

<h4 id="p9e-measure"><a href="#p9e-measure" class="headerlink" title="p9e.measure()  "></a>p9e.measure() <em id="performance.measure"></em> <!--markdownlint-disable-line--></h4><blockquote>
<p>通过 <code>performance.getEntries*</code> 方法可以获取到</p>
</blockquote>
<p>在浏览器的指定 start mark 和 end mark 间的性能输入缓冲区中创建一个指定的 timestamp</p>
<ul>
<li>参数<ul>
<li>name: 指定测量的名字</li>
<li>startMark: 可选属性, 表示测量开始的标记名字</li>
<li>endMark: 可选属性, 表示测量结束的标记名字</li>
</ul>
</li>
</ul>
<p>测量的 <a href="#PerformanceEntry">PerformanceEntry</a> 默认包含的属性</p>
<ul>
<li>entryType: 默认为 measure</li>
<li>name: 调用 measure 方法时指定的 name</li>
<li>startTime: 调用 measure 方法开始的时间戳</li>
<li>duration: 测量的持续时间, 通常为结束时间戳减去开始时间戳的差值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">performance.<span class="title function_">mark</span>(<span class="string">&#x27;my-measure-start-mark&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  performance.<span class="title function_">mark</span>(<span class="string">&#x27;my-measure-end-mark&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果使用的 mark 不存在需要先创建, 否则报错</span></span><br><span class="line">  performance.<span class="title function_">measure</span>(</span><br><span class="line">    <span class="string">&#x27;my-measure&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;my-measure-start-mark&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;my-measure-end-mark&#x27;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> entries = performance.<span class="title function_">getEntriesByName</span>(<span class="string">&#x27;my-measure&#x27;</span>);</span><br><span class="line">  <span class="comment">// [&#123;</span></span><br><span class="line">  <span class="comment">//   name: &#x27;my-measure&#x27;,</span></span><br><span class="line">  <span class="comment">//   entryType: &#x27;measure&#x27;,</span></span><br><span class="line">  <span class="comment">//   startTime: 111720.0999994278,</span></span><br><span class="line">  <span class="comment">//   duration: 20006.300000190735,</span></span><br><span class="line">  <span class="comment">// &#125;];</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清除缓冲区 entryType 为 mark 的标记</span></span><br><span class="line">  performance.<span class="title function_">clearMarks</span>();</span><br><span class="line">  <span class="comment">// 清除缓冲区 entryType 为 measure 的标记</span></span><br><span class="line">  performance.<span class="title function_">clearMeasures</span>();</span><br><span class="line">&#125;, <span class="number">20000</span>);</span><br></pre></td></tr></table></figure>

<h4 id="p9e-now"><a href="#p9e-now" class="headerlink" title="p9e.now()"></a>p9e.now()</h4><p>返回一个表示从性能测量时刻开始经过的毫秒数, 这个时间戳不是高精度的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">performance.<span class="title function_">now</span>();</span><br><span class="line"><span class="comment">// 24152.300000190735;</span></span><br></pre></td></tr></table></figure>

<h4 id="p9e-setResourceTimingBufferSize"><a href="#p9e-setResourceTimingBufferSize" class="headerlink" title="p9e.setResourceTimingBufferSize()"></a>p9e.setResourceTimingBufferSize()</h4><p>将浏览器的 resource timing 缓冲区的大小设置为 <a href="#PerformanceEntry">PerformanceEntry</a> 对象的指定数量</p>
<h4 id="p9e-toJSON"><a href="#p9e-toJSON" class="headerlink" title="p9e.toJSON()"></a>p9e.toJSON()</h4><p>返回 performance 对象的 JSON 对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">performance.<span class="title function_">toJSON</span>();</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;timeOrigin&quot;: 1685527847332.7,</span></span><br><span class="line"><span class="comment">//   &quot;timing&quot;: &#123;</span></span><br><span class="line"><span class="comment">//     &quot;connectStart&quot;: 1685527848166,</span></span><br><span class="line"><span class="comment">//     &quot;navigationStart&quot;: 1685527848164,</span></span><br><span class="line"><span class="comment">//     &quot;secureConnectionStart&quot;: 0,</span></span><br><span class="line"><span class="comment">//     &quot;fetchStart&quot;: 1685527848166,</span></span><br><span class="line"><span class="comment">//     &quot;domContentLoadedEventStart&quot;: 1685527848860,</span></span><br><span class="line"><span class="comment">//     &quot;responseStart&quot;: 1685527848276,</span></span><br><span class="line"><span class="comment">//     &quot;domInteractive&quot;: 1685527848521,</span></span><br><span class="line"><span class="comment">//     &quot;domainLookupEnd&quot;: 1685527848166,</span></span><br><span class="line"><span class="comment">//     &quot;responseEnd&quot;: 1685527848277,</span></span><br><span class="line"><span class="comment">//     &quot;redirectStart&quot;: 0,</span></span><br><span class="line"><span class="comment">//     &quot;requestStart&quot;: 1685527848169,</span></span><br><span class="line"><span class="comment">//     &quot;unloadEventEnd&quot;: 0,</span></span><br><span class="line"><span class="comment">//     &quot;unloadEventStart&quot;: 0,</span></span><br><span class="line"><span class="comment">//     &quot;domLoading&quot;: 1685527848281,</span></span><br><span class="line"><span class="comment">//     &quot;domComplete&quot;: 1685527849039,</span></span><br><span class="line"><span class="comment">//     &quot;domainLookupStart&quot;: 1685527848166,</span></span><br><span class="line"><span class="comment">//     &quot;loadEventStart&quot;: 1685527849039,</span></span><br><span class="line"><span class="comment">//     &quot;domContentLoadedEventEnd&quot;: 1685527848860,</span></span><br><span class="line"><span class="comment">//     &quot;loadEventEnd&quot;: 1685527849039,</span></span><br><span class="line"><span class="comment">//     &quot;redirectEnd&quot;: 0,</span></span><br><span class="line"><span class="comment">//     &quot;connectEnd&quot;: 1685527848166</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   &quot;navigation&quot;: &#123;</span></span><br><span class="line"><span class="comment">//     &quot;type&quot;: 2,</span></span><br><span class="line"><span class="comment">//     &quot;redirectCount&quot;: 0</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="PerformanceEntry"><a href="#PerformanceEntry" class="headerlink" title="PerformanceEntry  "></a>PerformanceEntry <em id="PerformanceEntry"></em> <!-- markdownlint-disable-line --></h2><p>PerformanceEntry 对象代表了 performance 时间列表中的单个 metric 数据, 每个 performance entry 都可以在应用运行过程中通过手动调用 <a href="#performance.mark">performance.mark</a> 或 <a href="#performance.measure">performance.measure</a> 方法创建, 同时, performance entry 在资源加载的时候也会被动生成(例如 img, css, script 等资源)</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li>name: 只读属性, 表示 PerformanceEntry 的名字</li>
<li>entryType: 只读属性, 表示上报的 performance metric 的 entryType 类型, 例如 ‘mark’<ul>
<li>frame/navigation: 文档的地址</li>
<li>resource: 请求的资源的地址</li>
<li>mark: 当调用 <code>performance.mark()</code> 方法时作为 <code>PerformanceEntry</code> 的 name</li>
<li>measure: 当调用 <code>performance.measure()</code> 方法时作为 <code>PerformanceEntry</code> 的 name</li>
<li>paint: 其他例如 <code>first-paint</code> 或 <code>first-contentful-paint</code></li>
</ul>
</li>
<li>startTime: 只读属性, 表示 metric 上报时的时间</li>
<li>duration: 只读属性, 表示 DOMHighResTimeStamp 事件的耗时</li>
</ul>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ul>
<li>toJSON() 返回 PerformanceEntry 对象的 JSON 格式数据</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">performance.<span class="title function_">getEntries</span>()[<span class="number">0</span>].<span class="title function_">toJSON</span>();</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEntry&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;entryType&quot;: &quot;navigation&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;startTime&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;duration&quot;: 2278.7000007629395,</span></span><br><span class="line"><span class="comment">//   &quot;initiatorType&quot;: &quot;navigation&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;nextHopProtocol&quot;: &quot;http/1.1&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;renderBlockingStatus&quot;: &quot;blocking&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;workerStart&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;redirectStart&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;redirectEnd&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;fetchStart&quot;: 6.100000381469727,</span></span><br><span class="line"><span class="comment">//   &quot;domainLookupStart&quot;: 6.100000381469727,</span></span><br><span class="line"><span class="comment">//   &quot;domainLookupEnd&quot;: 6.100000381469727,</span></span><br><span class="line"><span class="comment">//   &quot;connectStart&quot;: 9.100000381469727,</span></span><br><span class="line"><span class="comment">//   &quot;connectEnd&quot;: 831.1000003814697,</span></span><br><span class="line"><span class="comment">//   &quot;secureConnectionStart&quot;: 722.1000003814697,</span></span><br><span class="line"><span class="comment">//   &quot;requestStart&quot;: 831.3000001907349,</span></span><br><span class="line"><span class="comment">//   &quot;responseStart&quot;: 1025.1000003814697,</span></span><br><span class="line"><span class="comment">//   &quot;responseEnd&quot;: 1026.5,</span></span><br><span class="line"><span class="comment">//   &quot;transferSize&quot;: 12336,</span></span><br><span class="line"><span class="comment">//   &quot;encodedBodySize&quot;: 12036,</span></span><br><span class="line"><span class="comment">//   &quot;decodedBodySize&quot;: 55753,</span></span><br><span class="line"><span class="comment">//   &quot;serverTiming&quot;: [],</span></span><br><span class="line"><span class="comment">//   &quot;unloadEventStart&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;unloadEventEnd&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;domInteractive&quot;: 1506.2000007629395,</span></span><br><span class="line"><span class="comment">//   &quot;domContentLoadedEventStart&quot;: 1912.9000005722046,</span></span><br><span class="line"><span class="comment">//   &quot;domContentLoadedEventEnd&quot;: 1913.5,</span></span><br><span class="line"><span class="comment">//   &quot;domComplete&quot;: 2278.5,</span></span><br><span class="line"><span class="comment">//   &quot;loadEventStart&quot;: 2278.7000007629395,</span></span><br><span class="line"><span class="comment">//   &quot;loadEventEnd&quot;: 2278.7000007629395,</span></span><br><span class="line"><span class="comment">//   &quot;type&quot;: &quot;navigate&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;redirectCount&quot;: 0,</span></span><br><span class="line"><span class="comment">//   &quot;activationStart&quot;: 0</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="PerformanceObserver"><a href="#PerformanceObserver" class="headerlink" title="PerformanceObserver"></a>PerformanceObserver</h2><p>PerformanceObserver 用于检测性能度量事件, 在浏览器的性能时间轴记录新的 performance entry 的时候将会被通知</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>使用给定的观察者生成一个新的 <code>PerformanceObserver</code> 实例, 当通过 <code>observe</code> 方法注册的条目类型的性能条目事件被记录下来时, 会调用该观察者回调</p>
<ul>
<li><p>参数 callback<br>观察者的性能事件被记录时将调用构造函数注册的回调, 回调函数有两个参数:</p>
<ul>
<li>list: 描述性能观察条目列表</li>
<li>observer: 调用该函数的 PerformanceObserver 对象</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="keyword">function</span> (<span class="params">list, observer</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(list, observer);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="title function_">getEntries</span>());</span><br><span class="line">  <span class="comment">// console.log(list.getEntriesByName());</span></span><br><span class="line">  <span class="comment">// console.log(list.getEntriesByType());</span></span><br><span class="line">  <span class="comment">// [&#123;</span></span><br><span class="line">  <span class="comment">//   name: &#x27;https://pvx.xcar.com.cn/ckl.gif?1=1&amp;b=chrome&amp;pw=1068&amp;ph=1057&amp;pvh=1057&amp;st=0&amp;dm=https%3A%2F%2Faikahao.xcar.com.cn&amp;lp=https%3A%2F%2Faikahao.xcar.com.cn%2Fmy%2Fregister.html&amp;ref=https%3A%2F%2Faikahao.xcar.com.cn%2F&amp;ds=1920x1200&amp;uv=640afc3c3b6e1&amp;pvx_uv=640afc3c76993&amp;_t=1685520132758&amp;_wd=false&amp;_uid=16034823&amp;tpinfo=%5B%7B%220%22%3A%22127167%22%7D%5D&#x27;,</span></span><br><span class="line">  <span class="comment">//   entryType: &#x27;resource&#x27;,</span></span><br><span class="line">  <span class="comment">//   startTime: 10342.599999427795,</span></span><br><span class="line">  <span class="comment">//   duration: 24.40000057220459,</span></span><br><span class="line">  <span class="comment">//   initiatorType: &#x27;img&#x27;,</span></span><br><span class="line">  <span class="comment">//   nextHopProtocol: &#x27;&#x27;,</span></span><br><span class="line">  <span class="comment">//   renderBlockingStatus: &#x27;non-blocking&#x27;,</span></span><br><span class="line">  <span class="comment">//   workerStart: 0,</span></span><br><span class="line">  <span class="comment">//   redirectStart: 0,</span></span><br><span class="line">  <span class="comment">//   redirectEnd: 0,</span></span><br><span class="line">  <span class="comment">//   fetchStart: 10342.599999427795,</span></span><br><span class="line">  <span class="comment">//   domainLookupStart: 0,</span></span><br><span class="line">  <span class="comment">//   domainLookupEnd: 0,</span></span><br><span class="line">  <span class="comment">//   connectStart: 0,</span></span><br><span class="line">  <span class="comment">//   connectEnd: 0,</span></span><br><span class="line">  <span class="comment">//   secureConnectionStart: 0,</span></span><br><span class="line">  <span class="comment">//   requestStart: 0,</span></span><br><span class="line">  <span class="comment">//   responseStart: 0,</span></span><br><span class="line">  <span class="comment">//   responseEnd: 10367,</span></span><br><span class="line">  <span class="comment">//   transferSize: 0,</span></span><br><span class="line">  <span class="comment">//   encodedBodySize: 0,</span></span><br><span class="line">  <span class="comment">//   decodedBodySize: 0,</span></span><br><span class="line">  <span class="comment">//   serverTiming: [],</span></span><br><span class="line">  <span class="comment">// &#125;];</span></span><br><span class="line">&#125;);</span><br><span class="line">observer.<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;mark&#x27;</span>, <span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;measure&#x27;</span>, <span class="string">&#x27;resource&#x27;</span>] &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>返回值 PerformanceObserver 对象</li>
</ul>
<h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><ul>
<li>supportedEntryTypes: 只读属性, 返回用户代理支持的 PerformanceObserver 接口的属性数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">PerformanceObserver</span>.<span class="property">supportedEntryTypes</span>;</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;element&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;event&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;first-input&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;largest-contentful-paint&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;layout-shift&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;longtask&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;mark&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;measure&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;navigation&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;paint&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;resource&#x27;,</span></span><br><span class="line"><span class="comment">// ];</span></span><br></pre></td></tr></table></figure>

<h3 id="observer-方法"><a href="#observer-方法" class="headerlink" title="observer 方法"></a>observer 方法</h3><h4 id="observer-disconnect"><a href="#observer-disconnect" class="headerlink" title="observer.disconnect()"></a>observer.disconnect()</h4><p>用于阻止性能观察者接收任何性能条目事件</p>
<ul>
<li>参数 无</li>
<li>返回值 undefined</li>
</ul>
<h4 id="observer-observe"><a href="#observer-observe" class="headerlink" title="observer.observe()"></a>observer.observe()</h4><p>用于观察传入的参数中指定的性能条目类型的集合, 当记录一个指定类型的性能条目时, 性能检测对象的回调函数将会被调用</p>
<ul>
<li>参数<ul>
<li>options: 一个包含单个键值对的对象, 该键值对的键名为 entryTypes, 如果未传入 options 或 options 实参为空数组会抛出 TypeError<ul>
<li>entryTypes: 一个放字符串的数组, 字符串的有效值取值在性能条目类型中, 如果取值无效则浏览器会自动忽略</li>
</ul>
</li>
</ul>
</li>
<li>返回值 undefined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">observer.<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>, <span class="string">&#x27;measure&#x27;</span>] &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="observer-takeRecords"><a href="#observer-takeRecords" class="headerlink" title="observer.takeRecords()"></a>observer.takeRecords()</h4><p>返回当前存储在性能观察器中的性能条目列表, 并将其清空</p>
<ul>
<li>参数 无</li>
<li>返回值 <a href="#PerformanceEntry">PerformanceEntry</a> 对象列表</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> records = observer.<span class="title function_">takeRecords</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebAPI</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>JS小结</title>
    <url>/2022/03/28e7482b798b/</url>
    <content><![CDATA[<blockquote>
<p>–no-sandbox –disable-web-security –user-data-dir=C:\chromedata</p>
</blockquote>
<blockquote>
<p>fetch() 表单上传时, 不能设置 <code>Content-Type</code> 头, 否则会丢失文件边界</p>
</blockquote>
<h3 id="浏览器引擎"><a href="#浏览器引擎" class="headerlink" title="浏览器引擎"></a>浏览器引擎</h3><table>
<thead>
<tr>
<th align="center">浏览器</th>
<th align="center">渲染引擎</th>
<th align="center">js 引擎</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IE</td>
<td align="center">Trident</td>
<td align="center">JScript(IE3.0-IE8.0) / Chakra(IE9~)</td>
</tr>
<tr>
<td align="center">Chrome</td>
<td align="center">webkit / Blink</td>
<td align="center">V8</td>
</tr>
<tr>
<td align="center">Safari</td>
<td align="center">webkit</td>
<td align="center">Nitro(SquirrelFish)</td>
</tr>
<tr>
<td align="center">Firefox</td>
<td align="center">Gecko</td>
<td align="center">~Monkey 系列(SpiderMonkey / TraceMonkey / JaegerMonkey / OdinMonkey)</td>
</tr>
<tr>
<td align="center">Opera</td>
<td align="center">WebKit / Blink</td>
<td align="center">Carakan</td>
</tr>
</tbody></table>
<h3 id="改变原数组的方法"><a href="#改变原数组的方法" class="headerlink" title="改变原数组的方法"></a>改变原数组的方法</h3><ul>
<li><p>pop 从数组中删除最后一个元素,并返回该元素的值(数组为空时返回 undefined). 此方法更改数组的长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure></li>
<li><p>push 将一个或多个元素添加到数组的末尾, 并返回该数组的新长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(element1, ..., elementN);</span><br></pre></td></tr></table></figure></li>
<li><p>shift 从数组中删除第一个元素,并返回该元素的值(数组为空则返回 undefined). 此方法更改数组的长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure></li>
<li><p>unshift 将一个或多个元素添加到数组的开头. 并返回该数组的新长度(该方法修改原有数组)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">unshift</span>(element1, ..., elementN);</span><br></pre></td></tr></table></figure>

<span id="more"></span></li>
<li><p>reverse 将数组中元素的位置颠倒, 并返回该数组. 该方法会改变原数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">reverse</span>();</span><br></pre></td></tr></table></figure></li>
<li><p>sort 用<a href="https://en.wikipedia.org/wiki/In-place_algorithm">原地算法</a>对数组的元素进行排序, 并返回数组</p>
<ul>
<li>compareFunction 用来指定按某种顺序进行排列的函数, 省略则按照转换为的字符串的 unicode 位点进行排序<ul>
<li>firstEl 第一个用于比较的元素</li>
<li>secondEl 第二个用于比较的元素</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>([compareFunction]);</span><br></pre></td></tr></table></figure></li>
<li><p>splice 通过删除或替换现有元素或者原地添加新的元素来修改数组, 并以数组形式返回被修改的内容. 此方法会改变原数组</p>
<ul>
<li>start 指定修改的开始位置</li>
<li>deleteCount 整数, 表示要移除的数组元素的个数, 如果为 0 或者负数, 则不移除元素</li>
<li>item1, item2 要添加进数组的元素,从 start 位置开始, 不指定则删除数组元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">splice</span>(start[, deleteCount[, item1[, item2[, ...]]]]);</span><br></pre></td></tr></table></figure></li>
<li><p>fill 用一个固定值填充一个数组中从起始索引到终止索引内的全部元素. 不包括终止索引. 返回修改后的数组</p>
<ul>
<li>value 用来填充数组元素的值</li>
<li>start 起始索引, 默认值为 0</li>
<li>end 终止索引, 默认值为 this.length</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">fill</span>(value[, start[, end]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// fill with 0 from position 2 until position 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: [1, 2, 0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fill with 5 from position 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">fill</span>(<span class="number">5</span>, <span class="number">1</span>));</span><br><span class="line"><span class="comment">// expected output: [1, 5, 5, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">fill</span>(<span class="number">6</span>));</span><br><span class="line"><span class="comment">// expected output: [6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure></li>
<li><p>copyWithin 浅复制数组的一部分到同一数组中的另一个位置, 并返回它, 不会改变原数组的长度. 返回改变后的数组</p>
<ul>
<li>target 整数, 复制序列到该位置, 如果是负数, target 将从末尾开始计算. 如果 target 大于等于 arr.length, 将会不发生拷贝</li>
<li>start 整数, 开始复制元素的起始位置, 如果是负数, start 将从末尾开始计算. 如果 start 被忽略, copyWithin 将会从 0 开始复制</li>
<li>end 整数, 开始复制元素的结束位置, copyWithin 将会拷贝到该位置, 但不包括 end 这个位置的元素. 如果是负数, end 将从末尾开始计算. 如果忽略则复制到数组结尾</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">copyWithin</span>(target[, start[, end]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="comment">// copy to index 0 the element at index 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">copyWithin</span>(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;d&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// copy to index 1 all elements from index 3 to the end</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">copyWithin</span>(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line"><span class="comment">// expected output: Array [&quot;d&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;e&quot;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="表单-accept-属性"><a href="#表单-accept-属性" class="headerlink" title="表单 accept 属性"></a>表单 accept 属性</h3><p>表单 input type=”file” 上传图片时，accept 属性以文件名结尾格式在部分手机上使用时会提示 ‘没有应用可执行此操作’, 将文件名结尾的格式改为 MIME 类型的格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.png,.jpg,.jpeg&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/png,image/jpeg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="beforescriptexecute-afterscriptexecute"><a href="#beforescriptexecute-afterscriptexecute" class="headerlink" title="beforescriptexecute|afterscriptexecute "></a>beforescriptexecute|afterscriptexecute <!-- markdownlint-disable-line --></h3><p>当 HTML 文档中的 script 标签内的代码执行<code>前|后</code>触发该事件, 如果这个 script 标签是用 <code>appendChild</code> 等方法动态插入的, 则不会触发该类事件</p>
<h3 id="IOS-v-model-短信验证码自动填充两次"><a href="#IOS-v-model-短信验证码自动填充两次" class="headerlink" title="IOS v-model 短信验证码自动填充两次"></a>IOS v-model 短信验证码自动填充两次</h3><p>原因是ios系统bug，复制验证码会触发 UITextFieldTextDidChangeNotification 监听事件，导致验证码出现两次</p>
<ul>
<li>如果 type 是 text 或者 password 时, 可以给 input 添加 maxlength 属性限制最大长度.</li>
<li>如果 type 是 number 时, 可以监听 @input 事件进行截字.</li>
</ul>
<h3 id="IE-10-开始不再支持条件注释引入资源"><a href="#IE-10-开始不再支持条件注释引入资源" class="headerlink" title="IE 10 开始不再支持条件注释引入资源"></a><a href="https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/hh801214(v=vs.85)?redirectedfrom=MSDN">IE 10 开始不再支持条件注释引入资源</a></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./main.css&quot; /&gt;</span></span><br><span class="line"><span class="comment">  &lt;script type=&quot;text/javascript&quot; src=&quot;./main.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h3><p>ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区, 可以理解为一个字节数组. 不能直接操作 ArrayBuffer, 需要通过 <code>类型化数组对象(TypedArray)</code>或 <code>DataView</code> 操作<br>ArrayBuffer 构造函数创建一个以字节为单位的固定长度的新 ArrayBuffer, 或者从现有的数据中获取数组缓冲区(例如: Base64 字符串或者 Blob 类文件对象 )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">10</span>); <span class="comment">// 创建一个 10 字节的缓冲区</span></span><br><span class="line"><span class="keyword">var</span> i8a = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(buffer); <span class="comment">// 并使用 Int32Array 视图引用它</span></span><br></pre></td></tr></table></figure>

<h4 id="TypedArray"><a href="#TypedArray" class="headerlink" title="TypedArray"></a>TypedArray</h4><p>不能实例化<br>描述底层 <code>二进制数据缓冲区(ArrayBuffer)</code> 的类数组视图, 没有可用的 TypedArray 全局属性和 TypedArray 构造函数, 其为所有类型化数组的子类提供了实用方法的通用接口, 当创建 TypedArray 子类(例如 Int8Array) 的实例时, 在内存中会创建数组缓冲区, 如果将 ArrayBuffer 实例作为构造函数参数时, 则使用该 ArrayBuffer.</p>
<ul>
<li>Int8Array -128 到 127, 1 字节, 8 位有符号整型(补码)</li>
<li>Uint8Array 0 到 255, 1 字节, 8 位无符号整型</li>
<li>Uint8ClampedArray 0 到 255, 1 字节, 8 位无符号整型(一定在 0 - 255 之间)</li>
<li>Int16Array -32768 到 32767, 2 字节, 16 位有符号整型(补码)</li>
<li>Uint16Array 0 到 65535, 2 字节, 16 位无符号整型</li>
<li>Int32Array -2147483648 到 2147483647, 4 字节, 32 位有符号整型(补码)</li>
<li>Uint32Array 0 到 4294967295, 4 字节, 32 位无符号整型</li>
<li>Float32Array -3.4E38 到 3.4E38 并且 1.2E-38 是最小的正数, 4 字节, 32 位 IEEE 浮点数(7 位有效数字，例如 1.234567)</li>
<li>Float64Array -1.8E308 到 1.8E308 并且 5E-324 是最小的正数, 8 字节, 64 位 IEEE 浮点数(16 位有效数字，例如 1.23456789012345)</li>
<li>BigInt64Array -263 到 263 - 1, 8 字节, 64 位有符号整型(补码)</li>
<li>BigUint64Array 0 到 264 - 1, 8 字节, 64 位无符号整型</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ia = <span class="keyword">new</span> <span class="title class_">Int8Array</span>(<span class="number">10</span>);</span><br><span class="line">ia[<span class="number">0</span>] = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>

<h4 id="DataView"><a href="#DataView" class="headerlink" title="DataView"></a>DataView</h4><p>DataView 是一个可以从二进制 <code>ArrayBuffer</code> 对象中读写多种数值类型的底层接口, 使用它时, 不需要考虑不同平台的字节序问题<br>DataView 构造函数可以传入一个已经存在的 <code>ArrayBuffer</code> 或 <code>SharedArrayBuffer</code> 作为数据源, 第二个参数可以指定 buffer 中的字节偏移, 第三个参数可以指定 DataView 对象的字节长度, 返回表示指定数据缓冲区的新 DataView 对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer);</span><br><span class="line"></span><br><span class="line">view.<span class="title function_">setUint8</span>(<span class="number">0</span>, <span class="number">42</span>); <span class="comment">// 设置指定偏移量的值</span></span><br><span class="line">view.<span class="title function_">getUint8</span>(<span class="number">0</span>); <span class="comment">// 获取指定偏移量的值</span></span><br><span class="line"></span><br><span class="line">view.<span class="title function_">setInt32</span>(<span class="number">1</span>, <span class="number">2147483647</span>);</span><br><span class="line">view.<span class="title function_">getInt32</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="document-activeElement"><a href="#document-activeElement" class="headerlink" title="document.activeElement"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/activeElement">document.activeElement</a></h3><blockquote>
<p>只读属性</p>
</blockquote>
<p>用来返回当前在 DOM 或 shadow DOM 树中处于焦点状态 Element, 如 HTMLInputElement 或 HTMLTextAreaElement 元素中有文字被选中时, activeElement 属性就会返回该元素, 其它情况如 select 元素或者 input, textarea 元素</p>
<h4 id="Element-scrollIntoViewIfNeeded"><a href="#Element-scrollIntoViewIfNeeded" class="headerlink" title="Element.scrollIntoViewIfNeeded"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoViewIfNeeded">Element.scrollIntoViewIfNeeded</a></h4><blockquote>
<p>非标准化</p>
</blockquote>
<p>用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域内, 如果该元素已经处在浏览器窗口的可见区域内, 则不会发生滚动, 此方法是 Element.scrollIntoView 方法的专有变体</p>
<ul>
<li>true, 默认值, 元素将在其所在滚动区的可视区域中居中对齐</li>
<li>false, 元素将在其所在可视区域最近的边缘对齐(根据元素距离顶部边缘或者底部边缘的最小值对齐)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;child&#x27;</span>);</span><br><span class="line">el.<span class="title function_">scrollIntoViewIfNeeded</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Element-scrollIntoView"><a href="#Element-scrollIntoView" class="headerlink" title="Element.scrollIntoView"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView">Element.scrollIntoView</a></h4><p>滚动元素的父容器, 使被调用 scrollIntoView 的元素对用户可见, 取决于其它元素的布局情况, 此元素可能不会完全滚动到顶端或底端</p>
<ul>
<li>alignToTop, 对齐方式, 可选<ul>
<li>true, 元素的顶端将和其所在滚动区的可视区域的顶端对齐, 相应参数 <code>scrollIntoViewOptions: &#123;block: &quot;start&quot;, inline: &quot;nearest&quot;&#125;</code></li>
<li>false, 元素的底端将和其所在滚动区的可视区域的底端对齐, 相应参数 <code>scrollIntoViewOptions: &#123;block: &quot;end&quot;, inline: &quot;nearest&quot;&#125;</code></li>
</ul>
</li>
<li>scrollIntoViewOptions 配置项, 可选<ul>
<li>behavior, 定义滚动是立即的还是平滑的动画<ul>
<li>smooth, 滚动应该是平滑的动画</li>
<li>instant, 滚动应该通过一次跳跃立刻发生</li>
<li>auto, 滚动行为由 scroll-behavior 的计算值决定</li>
</ul>
</li>
<li>block, 定义垂直方向的对齐方式, start, center, end, nearest, 默认为 start</li>
<li>inline, 定义水平方向的对齐, start, center, end, nearest, 默认为 nearest</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"></span><br><span class="line">el.<span class="title function_">scrollIntoView</span>();</span><br><span class="line">el.<span class="title function_">scrollIntoView</span>(<span class="literal">false</span>);</span><br><span class="line">el.<span class="title function_">scrollIntoView</span>(&#123; <span class="attr">block</span>: <span class="string">&#x27;end&#x27;</span> &#125;);</span><br><span class="line">el.<span class="title function_">scrollIntoView</span>(&#123; <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span>, <span class="attr">block</span>: <span class="string">&#x27;end&#x27;</span>, <span class="attr">inline</span>: <span class="string">&#x27;nearest&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>避免使用 eval, 可以使用 <code>Function(&#39;&quot;use strict&quot;; console.log(&quot;hello world&quot;)&#39;)()</code> 代替, <code>Function</code> 直接调用此构造函数可以动态创建函数</p>
<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify">JSON.stringify</a></h3><ul>
<li>转换值如果有 toJSON 方法则直接使用该方法的返回值</li>
<li>非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中</li>
<li>布尔值、数字、字符串的包装对象在序列化过程中自动转换成对应的原始值</li>
<li>undefined、任意的函数、symbol 值在序列化过程中会被忽略(出现在非数组对象的属性值中时, 出现在数组中时会被转换为 null), undefined、函数单独转换时被转换为 undefined</li>
<li>对包含循环引用的对象(对象之间相互引用)会抛出错误</li>
<li>所有以 symbol 为属性键的属性都会被完全忽略掉, 即使 replacer 参数中指定包含了它们</li>
<li>Date 日期调用了 toJSON 方法将其转换为 string 字符串</li>
<li>NaN 和 Infinity 格式的数值及 null 都会被当作 null</li>
<li>其它类型的对象, 包括 Map/WeakMap/Set/WeakSet, 仅会序列化可枚举的属性</li>
</ul>
<h3 id="export-default-import"><a href="#export-default-import" class="headerlink" title="export default import"></a>export default import</h3><ul>
<li>export default 向外暴露的成员，可以使用任意变量来接收</li>
<li>在一个模块中, export default 只允许向外暴露一次</li>
<li>在一个模块中, 可以同时使用 export default 和 export 向外暴露成员</li>
<li>使用 export 向外暴露的成员, 只能使用 <code>&#123; &#125;</code> 的形式来接收, 这种形式称为 按需导出</li>
<li>export 可以向外暴露多个成员, 同时, 如果某些成员在 import 导入时不需要, 可以不在 <code>&#123; &#125;</code> 中定义</li>
<li>使用 export 导出的成员, 必须严格按照导出时候的名称来使用 <code>&#123; &#125;</code> 按需接收</li>
<li>如果想更改变量名称可以使用 as 定义别名</li>
</ul>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>React.md</title>
    <url>/2022/02/7ec5bd96e943/</url>
    <content><![CDATA[<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>React 18.3.1</p>
<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><ul>
<li>只有当在组件树中 相同的 位置渲染 相同的 组件时, React 才会一直保留着组件的 state</li>
<li>在一般安全的情况下采用批处理方式处理 state 更新</li>
</ul>
<h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><p>设计 React 的核心前提是认为 UI 只是把数据通过映射关系变换成另一种形式的数据。同样的输入必会有同样的输出。这恰好就是纯函数。</p>
<h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><p>需要把 UI 抽象成多个隐藏内部细节，又可复用的函数。通过在一个函数中调用另一个函数来实现复杂的 UI</p>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>将两个或者多个不同的抽象通过组合再次抽象成一个抽象</p>
<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>使用不可变的数据模型, 把可以改变 state 的函数串联起来作为原点放置在顶层</p>
<p>状态不存在于组件内, 状态是由 React 保存的, React 通过组件在渲染树中的位置将它保存的每个状态与正确的组件关联起来</p>
<ul>
<li>这个变量是否通过 props 从父组件中获取，如果是，则不是一个状态</li>
<li>这个变量是否在组件的整个生命周期中都保持不变，如果是，则不是一个状态</li>
<li>这个变量是否可以通过其他状态(state)或者属性(props)计算得到，如果是，则不是一个状态</li>
<li>这个变量是否在组件的 render 方法中使用，如果不在，则不是一个状态</li>
</ul>
<span id="more"></span>

<h4 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h4><ul>
<li>不直接操作数据源, 副本替换, 可以保持以前版本的数据完好无损, 并在以后重用它们</li>
<li>不直接操作数据源, 副本替换, 使组件比较其数据是否已更改的成本非常低, 提高子组件的渲染性能</li>
</ul>
<h4 id="构建-state-原则"><a href="#构建-state-原则" class="headerlink" title="构建 state 原则"></a>构建 state 原则</h4><ul>
<li><p>合并关联的 state, 如果总是同时更新两个或更多的 state 变量时, 考虑将它们合并为一个单独的 state</p>
</li>
<li><p>避免互相矛盾的 state, 当 state 结构中存在多个相互矛盾不一致的 state 时, 应避免这种情况</p>
</li>
<li><p>避免冗余的 state, 如果渲染期间从组件的 props 或其它现有的 state 中计算出一些信息, 则不应该作为 state</p>
</li>
<li><p>避免重复的 state, 当同一数据在多个 state 之间或多个嵌套对象中重复时, 这很难保持它们同步, 应避免这种情况</p>
</li>
<li><p>避免深度嵌套的 state, 深度分层的 state 更新起来很不方面, 尽量以扁平化方式构建 state</p>
</li>
<li><p>尽量避免在 state 中镜像 props, 会与从父组件传递的属性失去同步(将不会更新), 只有想要忽略特定 props 属性的所有更新时, 使用镜像 props 才有意义, 约定 prop 名称以 <code>initial</code> 或 <code>default</code> 开头, 以说明该 prop 的新值将被忽略</p>
</li>
</ul>
<h4 id="响应式值"><a href="#响应式值" class="headerlink" title="响应式值"></a>响应式值</h4><p>props 和 state 并不是唯一的响应式值, 从它们计算出的值都是响应式的, 如果 props 或 state 发生变化, 组件将重新渲染, 从中计算出的值也会随之变化, 所以需要将响应式值包括在 Effect 的依赖项中</p>
<ul>
<li>所有在组件内部直接声明的变量和函数</li>
</ul>
<h4 id="对-state-进行保留和重置"><a href="#对-state-进行保留和重置" class="headerlink" title="对 state 进行保留和重置"></a>对 state 进行保留和重置</h4><ul>
<li>将组件渲染在不同的位置, 可以重置 state</li>
<li>使用 key 重置 state, key 不是全局唯一的, 只是标识父组件内部的顺序</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Scoreboard</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="comment">/* 如果只用一个 Counter 组件通过 props 传递 person 属性的方式切换用户会出现 state 不会被重置*/</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 第 1 种方式: 在不同位置上, 渲染两个 Counter 组件, 在切换不同的用户时可以重置 state */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;isPlayerA &amp;&amp; <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">person</span>=<span class="string">&quot;Taylor&quot;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;!isPlayerA &amp;&amp; <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">person</span>=<span class="string">&quot;Sarah&quot;</span> /&gt;</span> &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* 第 2 种方式: 在同一位置上, 使用 key 为 Counter 组件添加标识, 让 React 区分组件 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;isPlayerA </span></span><br><span class="line"><span class="language-xml">        ? (<span class="tag">&lt;<span class="name">Counter</span> <span class="attr">key</span>=<span class="string">&quot;Taylor&quot;</span> <span class="attr">person</span>=<span class="string">&quot;Taylor&quot;</span> /&gt;</span>) </span></span><br><span class="line"><span class="language-xml">        : (<span class="tag">&lt;<span class="name">Counter</span> <span class="attr">key</span>=<span class="string">&quot;Sarah&quot;</span> <span class="attr">person</span>=<span class="string">&quot;Sarah&quot;</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setIsPlayerA(!isPlayerA) &#125;&gt;下一位玩家！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Counter 组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params">&#123; person &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [score, setScore] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [hover, setHover] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> className = <span class="string">&#x27;counter&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (hover) &#123;</span><br><span class="line">    className += <span class="string">&#x27; hover&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;className&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onPointerEnter</span>=<span class="string">&#123;()</span> =&gt;</span> setHover(true)&#125;</span></span><br><span class="line"><span class="language-xml">      onPointerLeave=&#123;() =&gt; setHover(false)&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;person&#125; 的分数：&#123;score&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setScore(score + 1)&#125;&gt;加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="React-Component-deprected"><a href="#React-Component-deprected" class="headerlink" title="React.Component(deprected)"></a>React.Component(deprected)</h2><h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><ul>
<li><p>constructor(props)</p>
<ul>
<li>初始化内部 state，只能在构造函数中直接为 state 赋值，其他方法中应使用 this.setState()</li>
<li>为事件处理函数绑定实例</li>
</ul>
</li>
<li><p>static getDerivedStateFromProps(props, state)</p>
<ul>
<li>在 render() 方法执行前调用, 初始化挂载及后续更新都会被调用</li>
<li>返回一个对象来更新 state, 如果返回 null, 则不更新任何内容</li>
<li>无法访问组件实例</li>
</ul>
</li>
<li><p>render() class 组件中唯一必须实现的方法, 返回以下类型之一</p>
<ul>
<li>React 元素</li>
<li>数组或者 Fragments</li>
<li>Portals</li>
<li>字符串或者数值类型</li>
<li>布尔类型或者 null,什么都不渲染</li>
</ul>
</li>
<li><p>componentDidMount()</p>
<ul>
<li>组件挂载后立即调，DOM 节点的初始化应该放在这里</li>
</ul>
</li>
<li><p>static getDerivedStateFromProps(props, state)</p>
</li>
<li><p>shouldComponentUpdate(nextProps, nextState)</p>
<ul>
<li>返回值影响组件是否会重新渲染</li>
<li>默认返回值为 true</li>
<li>首次渲染或者使用 forceUpdate() 时不会调用该方法</li>
<li>返回 false 不会调用 render() 和 componentDidUpdate() 方法</li>
</ul>
</li>
<li><p>render()</p>
</li>
<li><p>getSnapshotBeforeUpdate(prevProps, prevState)</p>
<ul>
<li>在最近一次渲染输出(提交到 DOM 节点)之前调用</li>
<li>返回值作为 componentDidUpdate 方法的第三个参数 snapshot 传递,否则此参数为 undefined</li>
</ul>
</li>
<li><p>componentDidUpdate(prevProps, prevState, snapshot)</p>
</li>
<li><p>componentWillUnmount() 组件卸载及销毁之前直接调用,此方法中不应该使用 setState() 方法,组件不会被重新渲染</p>
</li>
</ul>
<h2 id="深入-JSX"><a href="#深入-JSX" class="headerlink" title="深入 JSX"></a>深入 JSX</h2><ul>
<li><p>只能返回一个根元素</p>
</li>
<li><p>标签必须闭合</p>
</li>
<li><p>大部分属性使用驼峰方式</p>
</li>
<li><p>自定义的组件必须以大写字母开头</p>
</li>
<li><p>React 将 boolean, null, undefined 视为空值, 不做任何渲染</p>
</li>
</ul>
<h3 id="JSX-中的-Props"><a href="#JSX-中的-Props" class="headerlink" title="JSX 中的 Props"></a>JSX 中的 Props</h3><ul>
<li><p>JavaScript 表达式作为 Props</p>
</li>
<li><p>字符串字面量</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个JSX表达式是等价的,</span></span><br><span class="line">&lt;<span class="title class_">MyComponent</span> message=<span class="string">&quot;hello world&quot;</span> /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">message</span>=<span class="string">&#123;</span>&#x27;<span class="attr">hello</span> <span class="attr">world</span>&#x27;&#125; /&gt;</span></span></span><br><span class="line"><span class="comment">// 字符串字面量赋值给 prop 时，它的值是未转义的</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">message</span>=<span class="string">&quot;<span class="symbol">&amp;lt;</span>3&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">message</span>=<span class="string">&#123;</span>&#x27;&lt;<span class="attr">3</span>&#x27;&#125; /&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>Props 默认值为 True</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyTextBox</span> autocomplete /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyTextBox</span> <span class="attr">autocomplete</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>属性展开</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此方法容易将不必要的 props 传递给不相关的组件，</span></span><br><span class="line"><span class="comment">// 或者将无效的 HTML 属性传递给 DOM,谨慎使用该语法.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; kind, ...other &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> className = kind === <span class="string">&#x27;primary&#x27;</span> ? <span class="string">&#x27;PrimaryButton&#x27;</span> : <span class="string">&#x27;SecondaryButton&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> &#123;<span class="attr">...other</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">kind</span>=<span class="string">&#x27;primary&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&#x27;clicked!&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Hello World!</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="JSX-中的-children"><a href="#JSX-中的-children" class="headerlink" title="JSX 中的 children"></a>JSX 中的 children</h3><ul>
<li>包含在开始和结束标签之间的 JSX 内容将作为特定属性 props.children 传递给组件.</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">&#123;title, children&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">title</span>=<span class="string">&#x27;my-component&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      This is children</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>tag p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>批量子元素</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用子元素回调 numTimes 次，来重复生成组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Repeat</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> items = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.<span class="property">numTimes</span>; i++) &#123;</span><br><span class="line">    items.<span class="title function_">push</span>(props.<span class="title function_">children</span>(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;items&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ListOfTenThings</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Repeat</span> <span class="attr">numTimes</span>=<span class="string">&#123;10&#125;</span>&gt;</span>&#123;(index) =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>This is item &#123;index&#125; in the list<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">Repeat</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="React-Hook"><a href="#React-Hook" class="headerlink" title="React Hook"></a>React Hook</h2><p>一个特殊的函数, 只能在组件或自定义 Hook 的顶层调用</p>
<ul>
<li>React 16.8 新增</li>
<li>可以在函数组件内”钩入” React State 及生命周期等特性的函数</li>
<li>不能在 class 组件中使用</li>
</ul>
<h3 id="Hook-规则"><a href="#Hook-规则" class="headerlink" title="Hook 规则"></a>Hook 规则</h3><ul>
<li>只能在函数最顶层调用 Hook, 不能在循环、条件判断或者嵌套函数中调用</li>
<li>只能在 React 的函数组件中调用 Hook, 不能在其他 JavaScript 函数中调用</li>
<li>对 Hook 的每个调用完全独立于对同一个 Hook 的其他调用</li>
</ul>
<h3 id="React-内置-Hook"><a href="#React-内置-Hook" class="headerlink" title="React 内置 Hook"></a>React 内置 Hook</h3><h4 id="useId"><a href="#useId" class="headerlink" title="useId  "></a>useId <em id="useId"></em> <!--markdownlint-disable-line--></h4><p>生成传递给无障碍属性的唯一 ID, 不能用来生成数据列表中的 key</p>
<ul>
<li>能够确保与服务器端渲染一起工作</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> id = <span class="title function_">useId</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useId&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PasswordFiled</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> passwordHintId = <span class="title function_">useId</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">aria-describedby</span>=<span class="string">&#123;passwordHintId&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&#123;passwordHintId&#125;</span>&gt;</span>密码至少包含 18 个字符<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><ul>
<li>用于保存渲染间的数据</li>
<li>更新变量并触发 React 再次渲染组件</li>
<li>调用 set 函数不会改变已经执行的代码中当前的 state</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(initialState);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// useState 实现原理</span></span><br><span class="line"><span class="keyword">let</span> componentHooks = []; <span class="comment">// 把 state 存储在外面</span></span><br><span class="line"><span class="keyword">let</span> currentHookIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useState</span>(<span class="params">initialValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> pair = componentHooks[currentHookIndex];</span><br><span class="line">  <span class="keyword">if</span>(pair)&#123;</span><br><span class="line">    currentHookIndex++;</span><br><span class="line">    <span class="keyword">return</span> pair;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第一次渲染时</span></span><br><span class="line">  pair = [initialValue, setState];</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setState</span>(<span class="params">nextState</span>)&#123;</span><br><span class="line">    pair[<span class="number">0</span>] = nextState;</span><br><span class="line">    <span class="title function_">updateDOM</span>(); <span class="comment">// 更新DOM</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储这个 pair 用于将来的渲染</span></span><br><span class="line">  <span class="comment">// 并且为下一次 hook 的调用做准备</span></span><br><span class="line">  componentHooks[currentHookIndex] = pair;</span><br><span class="line">  currentHookIndex++;</span><br><span class="line">  <span class="keyword">return</span> pair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>初始 state 参数只在第一次渲染时会被用到</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> [fruit, setFruit] = <span class="title function_">useState</span>(<span class="string">&#x27;banana&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>([&#123; <span class="attr">text</span>: <span class="string">&#x27;learn React Hooks&#x27;</span> &#125;]);</span><br><span class="line"><span class="title function_">setTodos</span>([...todos, &#123; <span class="attr">text</span>: <span class="string">&#x27;Hello setTodos&#x27;</span> &#125;]); <span class="comment">// 和 this.setState 的区别: 不会进行 state 合并</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数式更新, 新的 state 需要通过之前的 state 计算得出</li>
<li>React 将更新函数放入队列中, 在下一次渲染期间, React 将通过队列将所有更新函数应用于先前的状态来计算下一个状态</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setCount</span>(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount - <span class="number">1</span>);</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setCount.bind(null,</span> (<span class="attr">prevCount</span>) =&gt;</span> prevCount + 1)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>和当前的 state 合并更新, 如果更新函数返回值和当前 state 完全相同，则重渲染会被跳过</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setState</span>(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...prevState, ...updateValues &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>惰性初始 state, 初始 state 需要通过复杂计算获得, 可以使用回调函数返回计算后的初始 state</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ... 初始 state 的复杂计算</span></span><br><span class="line">  <span class="keyword">return</span> initialState;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer  "></a>useReducer <em id="useReducer"></em> <!--markdownlint-disable-line--></h4><p>整合组件的状态更新逻辑</p>
<p>将组件拥有的许多状态更新逻辑的事件处理程序整合到一个 外部函数 中, 这个函数称为 reducer</p>
<ul>
<li>每个 action 都描述了一个单一的用户交互, 即使它会引发数据的多个变化</li>
<li>reducer 用于更新 state 的纯函数, 即当输入相同时, 输出也相同, 参数为 state 和 action</li>
<li>init 用于计算初始值的函数, 如果存在, 使用 <code>init(initialArg)</code> 的执行结果作为初始值, 否则使用 initialArg</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialArg, init);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现原理</span></span><br><span class="line"><span class="keyword">import</span> &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>)&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;delete&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Unknow action: &#x27;</span> + action.<span class="property">tye</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useReducer</span>(<span class="params">reducer, initialState</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = <span class="title function_">useState</span>(initialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">action</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> nextState = <span class="title function_">reducer</span>(state, action);</span><br><span class="line">    <span class="title function_">setState</span>(nextState);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [state, dispatch];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>指定初始 state<ul>
<li>(redux 的参数约定)将初始 state 作为第二个参数传入 useReducer,可传入 undefined.</li>
<li>如果 Reducer Hook 的返回值和当前 state 相同, React 将跳过子组件的渲染及副作用的执行</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useReducer&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数器 Demo</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;increment&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;decrement&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      Count: &#123;state.count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;decrement&#x27; &#125;)&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &#x27;increment&#x27; &#125;)&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>惰性初始化</p>
<ul>
<li>useReducer 的第三个参数, initialArg 将作为 init 函数的参数并返回新的 state</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">initialState</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...initialState &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...state &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params">&#123; initialState &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState, init);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123;...state&#125;<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="useContext"><a href="#useContext" class="headerlink" title="useContext  "></a>useContext <em id="useContext"></em> <!-- markdownlint-disable-line --></h4><p>深度传递信息</p>
<p>Context 允许父组件向其下层无论多深的任何组件提供信息, 而无需通过 props 显式传递</p>
<ul>
<li>接收一个 context 对象(React.createContext 的返回值)并返回该 context 的当前值</li>
<li>仍需要在上层组件树中使用 Provider 提供 context</li>
</ul>
<p>使用 Context: 如果以下方法不适合再考虑使用</p>
<ul>
<li>从传递 props 开始, 这样做能够清晰的展示组件的数据流</li>
<li>抽象组件并将 jsx 作为 children 传递, 将使用 props 传递的属性抽象为 children 组件传递</li>
</ul>
<p>使用场景:</p>
<ul>
<li>主题</li>
<li>当前账户</li>
<li>路由</li>
<li>状态管理</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> someValue = <span class="title function_">useContext</span>(someContext);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createContext, useContext, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> themes = &#123;</span><br><span class="line">  <span class="attr">light</span>: &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;30px&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#0088ff&#x27;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;#eeeeee&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">dark</span>: &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&#x27;30px&#x27;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&#x27;#ffffff&#x27;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&#x27;#222222&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title function_">createContext</span>(themes);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ContextDemo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useState</span>(<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;themes[theme]&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ContextDemo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>current theme: &#123;theme&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemeButton</span> <span class="attr">onClick</span>=<span class="string">&#123;setTheme.bind(null,</span> (<span class="attr">prevState</span>) =&gt;</span> (prevState === &#x27;dark&#x27; ? &#x27;light&#x27; : &#x27;dark&#x27;))&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ThemeButton</span>(<span class="params">&#123;onClick&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用 useContext 代替 ThemeContext.consumer 消费组件</span></span><br><span class="line">  <span class="keyword">const</span> theme = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">...theme</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      useContext button</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>层级标题</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createContext, useContext&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LevelContext</span> = <span class="title function_">createContext</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Heading</span>(<span class="params">&#123;children&#125;</span>)&#123;</span><br><span class="line">  <span class="comment">// 组件内部读取上层的 level</span></span><br><span class="line">  <span class="keyword">const</span> level = <span class="title function_">useContext</span>(<span class="title class_">LevelContext</span>);</span><br><span class="line">  <span class="keyword">switch</span>(level)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;unknown level: &#x27;</span> + level);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Section</span>(<span class="params">&#123;children&#125;</span>)&#123;</span><br><span class="line">  <span class="comment">// 使用 useContext 读取上层的 level, 不需要在 props 接收 level</span></span><br><span class="line">  <span class="keyword">const</span> level = <span class="title function_">useContext</span>(<span class="title class_">LevelContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LevelContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;level</span> + <span class="attr">1</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">LevelContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &#123;<span class="comment">/* </span></span><br><span class="line"><span class="comment">      在 Section 内部使用 useContext 读取上层的 level,</span></span><br><span class="line"><span class="comment">      不需要在此处向 Section 内部传递 level </span></span><br><span class="line"><span class="comment">    */</span>&#125;</span><br><span class="line">    &lt;<span class="title class_">Section</span>&gt; </span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Heading</span>&gt;</span>主标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>副标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>副标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>副标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>子标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>子标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>子标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>子标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>子子标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>子子标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>子子标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Heading</span>&gt;</span>子子标题<span class="tag">&lt;/<span class="name">Heading</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Section</span>&gt;</span></span></span><br><span class="line">    &lt;/<span class="title class_">Section</span>&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>嵌套 Context</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createContext, useContext, useReducer&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TasksContext</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TasksDispatchContext</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TasksProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* ... */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">TasksProvider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TasksProvider</span>(<span class="params">&#123;children&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [tasks, dispatch] = <span class="title function_">useReducer</span>(tasksReducer, initialTasks);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TasksContext</span> <span class="attr">value</span>=<span class="string">&#123;tasks&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TasksDispatchContext</span> <span class="attr">value</span>=<span class="string">&#123;dispatch&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">TasksDispatchContext</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">TasksContext</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tasksReducer</span>(<span class="params">state, action</span>)&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><p>Effect 允许指定由渲染本身, 而不是特定事件引起的副作用</p>
<ul>
<li>异步执行，不会阻塞浏览器更新</li>
<li>useEffect 每次在调用一个新的 effect 之前对前一个 effect 进行清理，防止内存泄漏或崩溃的问题</li>
<li>尽量避免使用 对象 和 函数 作为 Effect 依赖, 否则会使 Effect 更频繁地重新同步</li>
<li>如果 Effect 的不同部分因不同原因需要重新运行, 将其拆分为多个 Effect</li>
<li>默认情况下，它在第一次渲染之后和每次更新之后都会执行</li>
<li>第二个参数为依赖项数组, 控制 effect 的执行时机<ul>
<li>依赖项为空数组, 表示只会在组件挂载后执行</li>
<li>没有依赖项数组时, 表示每次重新渲染后重新执行</li>
</ul>
</li>
</ul>
<p>不使用 Effect 的情况:</p>
<ul>
<li>不必为了渲染而使用 Effect 来转换数据</li>
<li>不必使用 Effect 来处理用户事件</li>
</ul>
<p>日志出现两次挂载的原因, React 在开发环境中会在初始化挂载组件后, 立即再挂载一次, 帮助查找问题所在</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(setup, dependencies?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 组件卸载时调用, 可选</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// effect 会比较数组中所有参数是否和前一次的参数全等，如果有一个不相等则执行 effect</span></span><br><span class="line">  <span class="comment">// 依赖项数组为空，只执行一次 effect</span></span><br><span class="line">&#125;, [count]); <span class="comment">// 仅在 count 更改时更新</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 没有依赖项数组：每次重新渲染后重新运行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="在-Effect-中请求数据"><a href="#在-Effect-中请求数据" class="headerlink" title="在 Effect 中请求数据"></a>在 Effect 中请求数据</h5><ul>
<li>Effect 不能在服务器上运行, 服务器渲染的 HTML 将只包含没有数据的 Loading 状态</li>
<li>在 Effect 中请求数据容易造成网络瀑布, 当请求一些数据再渲染子组件, 然后重复这样的过程来请求子组件的数据</li>
<li>在 Effect 中直接请求数据通常意味着不会预加载或缓存数据</li>
<li>不符合工效学, 在调用 fetch 时, 需要编写大量样板代码, 以避免像竞争条件这样的 bug</li>
</ul>
<h4 id="useEffectEvent"><a href="#useEffectEvent" class="headerlink" title="useEffectEvent"></a>useEffectEvent</h4><ul>
<li>只在 Effect 内部调用</li>
<li>永远不要把它们传递给其他的组件或 Hook</li>
</ul>
<p>从 Effect 中提取非响应式逻辑, 在 响应式逻辑(Effect) 中使用响应式值而不用担心引起周围代码因为变化而重新执行</p>
<ul>
<li>EffectEvent 是非响应式的并且必须从依赖项中删除</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> onSomething = <span class="title function_">useEffectEvent</span>(callback);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useContext, useEffect, useEffectEvent&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 聊天室应用</span></span><br><span class="line"><span class="comment">// https://zh-hans.react.dev/learn/separating-events-from-effects</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123;url&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;items&#125; = <span class="title function_">useContext</span>(<span class="title class_">ShoppingCartContext</span>);</span><br><span class="line">  <span class="keyword">const</span> numberOfItems = items.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 非响应式逻辑, 内部读取的 numberOfItems 一直都是最新的</span></span><br><span class="line">  <span class="comment">// 但是 numberOfItems 自己变化不会引起重新渲染</span></span><br><span class="line">  <span class="keyword">const</span> onVisit = <span class="title function_">useEffectEvent</span>(<span class="function"><span class="params">visitedUrl</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">logVisit</span>(visitedUrl, numberOfItems);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Effect 内部依然是响应式的, url 变化会去调用 onVisit</span></span><br><span class="line">    <span class="title function_">onVisit</span>(url);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 日志 logVisit 想加入购物车数量时, 需要添加依赖项 numberOfItems</span></span><br><span class="line">    <span class="comment">// 如果依赖项加入 numberOfItems, 就改变了 logVisit 日志的作用</span></span><br><span class="line">    <span class="comment">// 使用 useEffectEvent 提取非响应式逻辑</span></span><br><span class="line">    <span class="comment">// logVisit(url, numberOfItems); // 缺少依赖项 numberOfItems</span></span><br><span class="line">  &#125;,[url]);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h4><blockquote>
<p>只在客户端运行, 在服务器渲染期间不会运行</p>
</blockquote>
<p>在浏览器重新绘制屏幕之前触发, 可能会影响性能, 尽可能使用 useEffect</p>
<ul>
<li>它会在所有的 DOM 变更之后同步调用 effect, 可以使用它来读取 DOM 布局并同步触发重渲染</li>
<li>计算布局, 不希望用户看到某些元素在移动</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useLayoutEffect</span>(setup, dependencies?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRef, useState, useLayoutEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createPortal&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Tooltip</span>(<span class="params">&#123;children, targetRect&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [tooltipHeight, setTooltipHeight] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;height&#125; = ref.<span class="property">current</span>.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">    <span class="title function_">setTooltipHeight</span>(height); <span class="comment">// 重新渲染提示框的位置</span></span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tooltipX = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> tooltipY = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(targetRect !== <span class="literal">null</span>)&#123;</span><br><span class="line">    tooltipX = targetRect.<span class="property">left</span>;</span><br><span class="line">    tooltipY = targetRect.<span class="property">top</span> - tooltipHeight;</span><br><span class="line">    <span class="keyword">if</span>(tooltipY &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      tooltipY = targetRect.<span class="property">bottom</span>; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createPortal</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ToolTipContainer</span> <span class="attr">x</span>=<span class="string">&#123;tooltipX&#125;</span> <span class="attr">y</span>=<span class="string">&#123;tooltipY&#125;</span> <span class="attr">contentRef</span>=<span class="string">&#123;ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ToolTipContainer</span>&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useInsertionEffect"><a href="#useInsertionEffect" class="headerlink" title="useInsertionEffect"></a>useInsertionEffect</h4><blockquote>
<p>只在客户端运行, 在服务器渲染期间不会运行</p>
</blockquote>
<p>为 CSS-in-js 库的作者特意打造的, 除非正在使用 CSS-in-js 库并且需要注入样式, 否则应该使用 useEffect 或 useLayoutEffect</p>
<ul>
<li>为布局副作用触发之前将元素插入到 DOM 中</li>
<li>不能在内部更新状态</li>
</ul>
<p>CSS-in-js 常见的实现方法:</p>
<ul>
<li>使用编译器静态提取到 CSS 文件</li>
<li>内联样式, 例如 <code>&lt;div style=&#123;&#123;opacity: 1&#125;&#125;&gt;</code></li>
<li>运行时注入 <code>&lt;style&gt;</code> 标签</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useInsertionEffect</span>(setup, dependencies?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useInsertionEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isInserted = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useCSS</span>(<span class="params">rule</span>)&#123;</span><br><span class="line">  <span class="title function_">useInsertionEffec</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 在此注入 &lt;style&gt; 标签</span></span><br><span class="line">    <span class="keyword">if</span>(!isInserted.<span class="title function_">has</span>(rule))&#123;</span><br><span class="line">      isInserted.<span class="title function_">add</span>(rule);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(<span class="title function_">getStyleForRule</span>(rule));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> rule;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> className = <span class="title function_">useCss</span>(<span class="string">&#x27;...&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useActionState-experimental"><a href="#useActionState-experimental" class="headerlink" title="useActionState(experimental)"></a>useActionState(experimental)</h4><p>可以根据某个表单动作的结果更新 state 的 Hook</p>
<p>调用 useActionState 时在参数中传入现有的表单动作函数以及一个初始状态, 返回一个新的 action 函数和一个 form state 以供在 form 中使用, 这个新的 form state 也会作为参数传入提供的表单动作函数</p>
<ul>
<li><p>form state 是一个只在表单被提交触发 action 后才会被更新的值</p>
</li>
<li><p>如果 action 是一个 url, form 的行为就是普通表单提交</p>
</li>
<li><p>如果 action 是一个函数, form 的行为由这个函数控制, action 同时会重写 <code>&lt;button&gt;</code>、<code>&lt;input type=&quot;submit&quot;/&gt;</code>、<code>&lt;input type=&quot;image&quot;/&gt;</code> 的 formAction(表单提交的 url) 属性</p>
</li>
<li><p>action 作为函数, 当表单被提交时触发</p>
<ul>
<li>第一个参数为上一次调用 action 函数的返回值, 第一次调用时传入的是 initialState</li>
<li>余下的参数为普通表单动作接到的参数</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, formAction] = <span class="title function_">useActionState</span>(action, initialState, permalink?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useActionState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params">prevState, formData</span>)&#123;</span><br><span class="line">  <span class="comment">// await fetch();</span></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(), <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> prevState + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">StatusForm</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, formAction] = <span class="title function_">useActionState</span>(increment, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// action 是 url 则直接提交表单, 如果是函数, 则控制表单的提交行为</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;formAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;state&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* form 的 action, enctype, method, target 属性可以被 button, type=&quot;submit&quot;, type=&quot;image&quot; */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* 的 formaction, formenctype, formmethod, formtarget 属性重写*/&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">formAction</span>=<span class="string">&#123;formAction&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* button 和 input type=&quot;submit&quot;, input type=&quot;image&quot; 是等价的 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">formAction</span>=<span class="string">&#123;formAction&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">formAction</span>=<span class="string">&#123;formAction&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h4><blockquote>
<p>允许在多次渲染中缓存函数的 Hook, 通常应用于性能优化</p>
</blockquote>
<ul>
<li>把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新</li>
<li>优化针对于子组件渲染</li>
<li>第二个参数为依赖项数组<ul>
<li>没有依赖项数组时, 每次都会返回一个新的函数</li>
<li>依赖项为空数组时, 不需要依赖项</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cachedFn = <span class="title function_">useCallback</span>(fn, dependencies);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedCallback = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">doSomething</span>(a, b);</span><br><span class="line">&#125;, [a, b]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次都返回一个新函数: 没有依赖项数组</span></span><br><span class="line"><span class="keyword">const</span> cachedFn = <span class="title function_">useCallback</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">doSomething</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h4><p>缓存每次重新渲染都需要计算的结果</p>
<p>把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算 memoized 值</p>
<ul>
<li>优化针对于当前组件高开销的计算</li>
<li>传入 useMemo 的函数会在渲染期间执行</li>
<li>第二个参数为依赖项数组<ul>
<li>没有依赖项数组时, 每次渲染都会计算新的值</li>
<li>依赖项为空数组时, 不需要依赖项</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cachedValue = <span class="title function_">useMemo</span>(calculateValue, dependencies);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useMemo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TodoList</span>(<span class="params">&#123;todos, tab&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> visibleTodos = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">filterTodos</span>(todos, tab), [todos, tab]);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useRef"><a href="#useRef" class="headerlink" title="useRef  "></a>useRef <em id="useRef"></em> <!--markdownlint-disable-line--></h4><p>希望 React 记住某些信息, 但又不想让这些信息触发新的渲染时, 使用 ref</p>
<ul>
<li>ref 在重新渲染之间由 React 保留, 更改 ref 不会触发更新</li>
<li>通过 .current 访问该 ref 的值, 不要在渲染期间写入或读取 ref.current, 会破坏这些预期行为</li>
<li>引用 DOM 节点, 在 DOM 节点被移除时, React 将重置 ref 的值为 null</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> refContainer = <span class="title function_">useRef</span>(initialValue);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> refDemo = <span class="title function_">useRef</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(refDemo.<span class="property">current</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRef&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TextInputWithFocusButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleBtnClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// `current` 指向已挂载到 DOM 上的文本输入元素</span></span><br><span class="line">    inputEl.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleBtnClick&#125;</span>&gt;</span>Focus the input<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>批量操作 DOM, 使用 ref 回调, 将函数传递给 ref 属性, 当需要设置 ref 时, React 将调用 ref 回调并传入 DOM 节点,<ul>
<li>并在需要清除它时传入 null</li>
<li>或者手动返回一个回调函数, 在回调函数内管理 map</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRef, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setupCatList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> catList = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    catList.<span class="title function_">push</span>(<span class="string">&quot;https://loremflickr.com/320/240/cat?lock=&quot;</span> + i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> catList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 批量 ref, 使用 ref 回调</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> itemsRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [catList, setCatList] = <span class="title function_">useState</span>(setupCatList);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">getMap</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!itemsRef.<span class="property">current</span>)&#123;</span><br><span class="line">      itemsRef.<span class="property">current</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> itemsRef.<span class="property">current</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">scrollToCat</span>(<span class="params">cat</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="title function_">getMap</span>();</span><br><span class="line">    <span class="keyword">const</span> node = map.<span class="title function_">get</span>(cat); <span class="comment">// 获取 map 中存储的 DOM 节点</span></span><br><span class="line"></span><br><span class="line">    node.<span class="title function_">scrollToView</span>(&#123;</span><br><span class="line">      <span class="attr">behivor</span>: <span class="string">&#x27;smooth&#x27;</span>,</span><br><span class="line">      <span class="attr">block</span>: <span class="string">&#x27;nearest&#x27;</span>,</span><br><span class="line">      <span class="attr">inline</span>: <span class="string">&#x27;center&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> scrollToCat(catList[0])&#125;&gt;first<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> scrollToCat(catList[1])&#125;&gt;second<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> scrollToCat(catList[2])&#125;&gt;third<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;catList.map(cat =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;cat&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">ref</span>=<span class="string">&#123;</span> <span class="attr">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              const map = getMap();</span></span><br><span class="line"><span class="language-xml">              if(node)&#123;</span></span><br><span class="line"><span class="language-xml">                map.set(cat, node);</span></span><br><span class="line"><span class="language-xml">              &#125; else &#123;</span></span><br><span class="line"><span class="language-xml">                // 方式1: 清除 DOM</span></span><br><span class="line"><span class="language-xml">                map.delete(cat);</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">              // 方式2: 清除 DOM</span></span><br><span class="line"><span class="language-xml">              return () =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                map.delete(cat);</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;cat&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不能访问其他组件的 DOM 节点, 借助 <a href="#forwardRef">forwardRef</a> 函数</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRef&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyInput</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 报错, 不能访问其他组件的 DOM 节点, 需要结合 forwardRef 使用</span></span><br><span class="line">    inputRef.<span class="property">current</span>.<span class="title function_">focus</span>(); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyInput</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h4><blockquote>
<p>自定义由 ref 暴露出来的句柄</p>
</blockquote>
<ul>
<li><p>useImperativeHandle 应当和 <a href="#forwardRef">forwardRef</a> 一起使用</p>
</li>
<li><p>使用 ref 时自定义暴露给父组件的实例值</p>
</li>
<li><p>createHandle 函数不需要参数, 返回想要暴露的 ref 的句柄</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useImperativeHandle</span>(ref, createHandle, dependencies?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRef, forwardRef, useImperativeHandle&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyInput</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> realInputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="comment">// 限制对外层暴露的功能</span></span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 只暴露 focus 和 scrollIntoView 方法</span></span><br><span class="line">    <span class="title function_">focus</span>(<span class="params"></span>)&#123;</span><br><span class="line">      realInputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">scrollIntoView</span>(<span class="params"></span>)&#123;</span><br><span class="line">      realInputRef.<span class="property">current</span>.<span class="title function_">scrollIntoView</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;realInputRef&#125;</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">    inputRef.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyInput</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>input Focus<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useDebugValue"><a href="#useDebugValue" class="headerlink" title="useDebugValue"></a>useDebugValue</h4><blockquote>
<p>可用于在 React 开发者工具中为自定义 Hook 添加标签</p>
</blockquote>
<ul>
<li>第二个可选参数, 只有在Hook被检查时才会被调用，接收debug值作为参数，并返回一个格式化的显示值</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useDebugValue</span>(value， format?);</span><br><span class="line"></span><br><span class="line"><span class="comment">// useDebugValue(date, date =&gt; date.toLocalDateString());</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useDebugValue, useSyncExternalStore&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useOnlineStatus</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = <span class="title function_">useSyncExternalStore</span>(subscribe, <span class="function">() =&gt;</span> navigator.<span class="property">onLine</span>, <span class="function">() =&gt;</span> <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 在开发者工具中为 StatusBar 组件添加标签</span></span><br><span class="line">  <span class="title function_">useDebugValue</span>(isOnline ? <span class="string">&#x27;Online&#x27;</span> : <span class="string">&#x27;Offline&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">StatusBar</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = <span class="title function_">useOnlineStatus</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">StatusBar</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useDeferredValue"><a href="#useDeferredValue" class="headerlink" title="useDeferredValue"></a>useDeferredValue</h4><blockquote>
<p>允许延迟更新 UI 的非关键部分, 以让其他部分先更新</p>
</blockquote>
<ul>
<li>当 useDeferredValue 接收到与之前不同的值时, 除了当前渲染, 它还会安排一个后台重新渲染, 这个后台是可被中断的, 如果 value 有新的更新, React 会从头开始重新启动后台渲染</li>
<li>useDeferredValue 本身不能阻止额外的网络请求</li>
<li>useDeferredValue 本身不会引起任何固定的延迟, 一旦 React 完成原始的重新渲染, 它会立即开始使用新的延迟值处理后台重新渲染, 由事件(例如 输入)引起的任何更新都会中断后台重新渲染, 并被优先处理</li>
<li>由 useDeferredValue 引起的后台重新渲染在提交到屏幕之前不会触发 Effect, 如果后台重新渲染被暂停, Effect 将在数据加载后和 UI 更新后运行</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> deferredValue = <span class="title function_">useDeferredValue</span>(value, initialValue);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState, useDeferredValue, <span class="title class_">Suspense</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> deferredQuery = <span class="title function_">useDeferredValue</span>(query);</span><br><span class="line">  <span class="keyword">const</span> isStale = query !== deferredQuery;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> sty = &#123;</span><br><span class="line">    <span class="attr">opacity</span>: isStale ? <span class="number">0.5</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">transition</span>: isStale ? <span class="string">&#x27;opacity 0.2s 0.2s linear&#x27;</span>: <span class="string">&#x27;opacity 0.2s 0.2s linear&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次输入时, 旧的列表会略微变暗, 直到新的结果列表加载完毕</span></span><br><span class="line">  <span class="comment">// 或者使用 CSS 过渡来延迟变暗的过程</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Search albums:</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;query&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setQuery(e.target.value)&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;sty&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 查询结果列表 */&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">SearhReasults</span> <span class="attr">query</span>=<span class="string">&#123;deferredQuery&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useSyncExternalStore"><a href="#useSyncExternalStore" class="headerlink" title="useSyncExternalStore"></a>useSyncExternalStore</h4><p>订阅外部 store</p>
<ul>
<li>subscribe 接收一个单独的 callback 参数并把它订阅到 store 上, 当 store 发生改变时调用被提供的 callback, 引起组件重新渲染</li>
<li>getSnapshot 返回组件需要的 store 中的数据快照, store 不变的情况下, 重复调用必须返回同一个值, 否则, React 就会重新渲染组件</li>
<li>getServerSnapshot 返回 store 中数据的初始快照, 只会在服务器渲染时, 以及在客户端进行 hydration 时被用到</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> snapshot = <span class="title function_">useSyncExternalStore</span>(subscribe, getSnapshot, getServerSnapshot?);</span><br></pre></td></tr></table></figure>

<ul>
<li>监听 store</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useSyncExternalStore&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> nextId = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> todos = [&#123;<span class="attr">id</span>: nextId++, <span class="attr">text</span>: <span class="string">&#x27;Todo # 1&#x27;</span>&#125;];</span><br><span class="line"><span class="keyword">let</span> listeners = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todosStore = &#123;</span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    todos = [...todos, &#123;<span class="attr">id</span>: nextId++, <span class="attr">text</span>: <span class="string">&#x27;Todo # &#x27;</span> + nextId&#125;];</span><br><span class="line">    <span class="title function_">emitChange</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">listener</span>)&#123;</span><br><span class="line">    <span class="comment">// 接收一个 callback, 并返回一个 cleanup 函数</span></span><br><span class="line">    listeners = [...listeners, listener];</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      listeners = listeners.<span class="title function_">filter</span>(<span class="function"><span class="params">l</span> =&gt;</span> l !== listener);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getSnapshot</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> todos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">emitChange</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> listener <span class="keyword">of</span> listeners)&#123;</span><br><span class="line">    <span class="title function_">listener</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TodosApp</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> todos = <span class="title function_">useSyncExternalStore</span>(todosStore.<span class="property">subscribe</span>, todos.<span class="property">getSnapshot</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> todosStore.addTodo()&#125;&gt;Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;todos.map(todo =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>订阅浏览器 API</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useSyncExternalStore&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subscribe</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;online&#x27;</span>, callback);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;offline&#x27;</span>, callback);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;online&#x27;</span>, callback);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;offline&#x27;</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useOnlineStatus</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = <span class="title function_">useSyncExternalStore</span>(subscribe, <span class="function">() =&gt;</span> navigator.<span class="property">onLine</span>, <span class="function">() =&gt;</span> <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useOptimistic-experimental"><a href="#useOptimistic-experimental" class="headerlink" title="useOptimistic(experimental)"></a>useOptimistic(experimental)</h4><p>更乐观的更新用户界面, 这种技术有助于使应用程序在感觉上响应地更加快速</p>
<ul>
<li><p>界面立即更新为预期的结果, 而不是等待服务器的响应来反映更改</p>
</li>
<li><p>允许在进行异步操作时显示不同 state, 接受 state 作为参数, 并返回该 state 的副本, 在异步操作(如网络请求)期间可以不同</p>
</li>
<li><p>optimisticState 结果乐观状态, 除非有操作挂起, 否则它等于 state, 在这种情况下, 它等于 updateFn 返回的值</p>
</li>
<li><p>addOptimistic 触发乐观更新时调用的 dispatch 函数, 接收一个任意类型的参数 optimisticValue, 并以 state 和 optimisticValue 作为参数调用 updateFn</p>
</li>
<li><p>updateFn 接受当前的 state 和传递给 addOptimistic 的乐观值, 并返回结果乐观状态</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">cnost [optimisticState, addOptimistic] = <span class="title function_">useOptimistic</span>(state, updateFn);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useOptimistic, useRef, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Thread</span>(<span class="params">&#123;messages, sendMessage&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> formRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [optimisticMessages, addOptimisticMessage] = <span class="title function_">useOptimistic</span>(messages, <span class="function">(<span class="params">state, optimisticValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用乐观值</span></span><br><span class="line">    <span class="comment">// 合并返回新的 state</span></span><br><span class="line">    <span class="keyword">return</span> [...state, &#123;<span class="attr">text</span>: optimisticValue, <span class="attr">sending</span>: <span class="literal">true</span>&#125;];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">formAction</span>(<span class="params">formData</span>)&#123;</span><br><span class="line">    <span class="title function_">addOptimisticMessage</span>(formData.<span class="title function_">get</span>(<span class="string">&#x27;message&#x27;</span>));</span><br><span class="line">    formRef.<span class="property">current</span>.<span class="title function_">reset</span>();</span><br><span class="line">    <span class="comment">// 异步操作</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sendMessage</span>(formData); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;optimisticMessages.map((message, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;message.text&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;message.sending &amp;&amp; <span class="tag">&lt;<span class="name">small</span>&gt;</span>发送中...<span class="tag">&lt;/<span class="name">small</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;formAction&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;formRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;hello...&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [messages, setMessages] = <span class="title function_">useState</span>([</span><br><span class="line">    &#123;<span class="attr">text</span>: <span class="string">&#x27;你好, 在这!&#x27;</span>, <span class="attr">sending</span>: <span class="literal">false</span>, <span class="attr">key</span>: <span class="number">1</span>&#125;</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sendMessage</span>(<span class="params">formData</span>)&#123;</span><br><span class="line">    <span class="comment">// 模拟异步操作</span></span><br><span class="line">    <span class="keyword">const</span> sentMessage = <span class="keyword">await</span> <span class="title function_">deliverMessage</span>(formData.<span class="title function_">get</span>(<span class="string">&#x27;message&#x27;</span>));</span><br><span class="line">    <span class="comment">// 更新状态</span></span><br><span class="line">    <span class="title function_">setMessages</span>(<span class="function"><span class="params">messages</span> =&gt;</span> [...messages, &#123;<span class="attr">text</span>: sentMessage&#125;]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Thread</span> <span class="attr">messages</span>=<span class="string">&#123;messages&#125;</span> <span class="attr">sendMessage</span>=<span class="string">&#123;sendMessage&#125;/</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deliverMessage</span>(<span class="params">message</span>)&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>));</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useTransition"><a href="#useTransition" class="headerlink" title="useTransition"></a>useTransition</h4><p>在不阻塞 UI 的情况下更新状态, 将某些状态更新标记为 transition</p>
<ul>
<li>transition 更新不能用于控制文本输入</li>
<li>isPending 是否存在待处理的 transition</li>
<li>startTransition 调用此函数将状态更新标记为 transition, 传递给此函数的函数必须是同步的, React 会立即执行此函数, 并将在其执行期间发生的所有状态更新标记为 transition, 如果在其执行期间, 尝试稍后执行状态更新, 这些状态更新不会被标记为 transition</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [isPending, startTransition] = <span class="title function_">useTransition</span>();</span><br></pre></td></tr></table></figure>

<h3 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h3><ul>
<li>Hook 的名称必须以 use 开头</li>
<li>自定义 Hook 共享的是状态逻辑, 而不是状态本身</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useDemo</span>(<span class="params">prop</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行订阅</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 执行取消订阅</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>网络状态 Hook</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useEffect,useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法检测已离线的网络</span></span><br><span class="line"><span class="comment">// 如果在生成初始 HTML 的服务端直接使用它是无效的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useOnlineStatus</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleOnline</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">setIsOnline</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleOffline</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">setIsOnline</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;online&#x27;</span>, handleOnline);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;offline&#x27;</span>, handleOffline);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;online&#x27;</span>, handleOnline);</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;offline&#x27;</span>, handleOffline);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[]);</span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进版, 使用 useSyncExternalStore</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subscribe</span>(<span class="params">callback</span>)&#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;online&#x27;</span>, callback);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;offline&#x27;</span>, callback);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;online&#x27;</span>, callback);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;offline&#x27;</span>, callback);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useOnlineStatus</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useSyncExternalStore</span>(subscribe, <span class="function">() =&gt;</span> navigator.<span class="property">onLine</span>, <span class="function">() =&gt;</span> <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="React-组件"><a href="#React-组件" class="headerlink" title="React 组件"></a>React 组件</h2><h3 id="React-内置组件"><a href="#React-内置组件" class="headerlink" title="React 内置组件"></a>React 内置组件</h3><h4 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h4><p>通常使用 <code>&lt;&gt;...&lt;/&gt;</code> 简写形式代替, 允许在不添加额外节点的情况下将子元素组合</p>
<ul>
<li>如果传递一个 key 给 Fragment 时, 不能使用简写形式</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Fragment</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Post</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PostTitle</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PostBody</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染 key</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Blog</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> posts.<span class="title function_">map</span>(<span class="function"><span class="params">post</span> =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span> <span class="attr">key</span>=<span class="string">&#123;post.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PostTitle</span> <span class="attr">title</span>=<span class="string">&#123;post.title&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PostBody</span> <span class="attr">body</span>=<span class="string">&#123;post.body&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Profiler"><a href="#Profiler" class="headerlink" title="Profiler"></a>Profiler</h4><p>允许编程式测量 React 树的渲染性能, 可以嵌套测量应用的不同部分</p>
<ul>
<li>id 字符串, 用于标识正在测量的 UI 部分</li>
<li>onRender 当包裹的组件树更新时, React 回调此函数, 并传入有关渲染内容和所花费时间的信息</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Profiler</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onRender</span>(<span class="params">id, phase, actualDuration, baseDuration, startTime, commitTime</span>)&#123;</span><br><span class="line">  <span class="comment">// id 字符串, 为 Profiler 树的属性</span></span><br><span class="line">  <span class="comment">// phase 标识书的渲染阶段, 取值: mount, update, nested-update</span></span><br><span class="line">  <span class="comment">// actualDuration 渲染 Profiler 树的毫秒数</span></span><br><span class="line">  <span class="comment">// baseDuration 估算在没有任何优化的情况下重新渲染整棵 Profiler 子树所需的毫秒数</span></span><br><span class="line">  <span class="comment">// startTime 开始渲染此次更新时的时间戳</span></span><br><span class="line">  <span class="comment">// commitTime React 提交此次更新时的时间戳</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Profiler</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">onRender</span>=<span class="string">&#123;onRender&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* ... */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Profiler</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="StrictMode"><a href="#StrictMode" class="headerlink" title="StrictMode"></a>StrictMode</h4><p>为整个应用启动严格模式, 尽早发现组件中的常见错误</p>
<p>所有的检查仅在开发环境中进行, 不会影响生产构建</p>
<ul>
<li>组件将重新渲染一次, 以查找由于非纯渲染而引起的错误</li>
<li>组件将重新运行 Effect 一次, 以查找由于缺少 Effect 清理而引起的错误</li>
<li>组件将被检查是否使用了已弃用的 API</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">StrictMode</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createRoot&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 部分开启严格模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* ... */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h4><p>允许子组件完成加载前展示后备方案, Suspense 无法检测到 Effect 或事件处理程序中获取数据的情况</p>
<ul>
<li>children 真正的 UI 渲染内容, 如果 children 在渲染中被挂起, Suspense 将会渲染 fallback</li>
<li>fallback 真正的 UI 未渲染完成时代替其渲染的备用 UI</li>
</ul>
<p>激活 Suspense 组件的数据源</p>
<ul>
<li>支持 Suspense 的框架如 Relay 和 Next.js</li>
<li>使用 lazy 懒加载组件代码</li>
<li>使用 use 读取 Promise 的值</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Suspense</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">Loading</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;/* ... */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="React-API"><a href="#React-API" class="headerlink" title="React API"></a>React API</h2><h3 id="act"><a href="#act" class="headerlink" title="act"></a>act</h3><p>测试助手, 用于在做出断言之前应用挂起的 React 更新, 通常用在测试库中</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;act&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">act</span>(<span class="keyword">async</span> actFn);</span><br></pre></td></tr></table></figure>

<h3 id="cache-experimental"><a href="#cache-experimental" class="headerlink" title="cache(experimental)"></a>cache(experimental)</h3><p>允许缓存数据获取或计算的结果, 在任何组件之外调用创建带有缓存的函数版本</p>
<ul>
<li>仅供与 服务器组件一起使用</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;cache&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> cachedFn = <span class="title function_">cache</span>(fn);</span><br></pre></td></tr></table></figure>

<h3 id="createContext"><a href="#createContext" class="headerlink" title="createContext"></a>createContext</h3><p>创建一个 Context 提供给子组件, 通常和 <a href="#useContext">useContext</a> 配合使用</p>
<h3 id="forwardRef"><a href="#forwardRef" class="headerlink" title="forwardRef  "></a>forwardRef <em id="forwardRef"></em> <!--markdownlint-disable-line--></h3><p>允许组件使用 ref 将 DOM 节点暴露给父组件</p>
<ul>
<li>render 渲染函数, React 将使用 props 和 ref 调用此函数, 返回的 JSX 作为组件的输出</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">SomeComponent</span> = <span class="title function_">forwardRef</span>(render);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;forwardRef, useRef&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyInput</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MyInput</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;/</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a>lazy</h3><p>在组件第一次被渲染之前延迟加载组件的代码, 通过将懒加载组件或其任何父级包装到 Suspense 边界中实现</p>
<ul>
<li>load 该函数返回一个 Promise 或一个 thenable 对象, React 首次调用 load 后将等待解析, 然后将解析值的 .default 渲染为 React 组件</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">LazyComponent</span> = <span class="title function_">lazy</span>(load);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;lazy&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MarkdownPreview</span> = <span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./MarkdownPreview.js&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">Loading</span>/&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MarkdownPreview</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspene</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h3><p>允许组件在 props 没有改变的情况下跳过重新渲染</p>
<p>只有当组件经常使用完全相同的 props 进行渲染时, 并且其重新渲染逻辑是非常昂贵的, 使用 memo 优化才有意义</p>
<ul>
<li>记忆化只与从父组件传递给组件的 props 有关, 即使组件已被记忆化, 当其使用的 context 发生变化时, 仍将重新渲染</li>
<li>componennt 要进行缓存的组件, memo 不会修改该组件, 而是返回一个新的、记忆化的组件, 接受任何有效的 React 组件, 包含函数式组件和 <a href="#forwardRef">forwardRef</a> 组件</li>
<li>arePropsEqual 该函数接收两个参数, 组件的上一个 props 和新的 props 进行比较<ul>
<li>新的 props 和旧的 props 具有相同的输出时返回 true</li>
<li>否则返回 false</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MemoizedComponent</span> = <span class="title function_">memo</span>(component, arePropsEqual?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Greeting</span> = <span class="title function_">memo</span>(<span class="keyword">function</span> <span class="title function_">Greeting</span>(<span class="params">&#123;name&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="startTransition"><a href="#startTransition" class="headerlink" title="startTransition"></a>startTransition</h3><p>在不阻塞 UI 的情况下更新 state</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;startTransition&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TabContainer</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [tab, setTab] = <span class="title function_">useState</span>(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">selectTab</span>(<span class="params">tab</span>)&#123;</span><br><span class="line">    <span class="title function_">startTransition</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">selectTab</span>(tab);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="use-experimental"><a href="#use-experimental" class="headerlink" title="use(experimental)"></a>use(experimental)</h3><p>读取类似于 Promise 或 context 的资源的值</p>
<ul>
<li>可以在 循环 或 条件 语句中调用 use, 调用 use 的函数仍然必须是一个 组件 或 Hook</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> value = <span class="title function_">use</span>(resource);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;use&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MessageComponent</span>(<span class="params">&#123;messagePromise&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> message = <span class="title function_">use</span>(messagePromise);</span><br><span class="line">  <span class="keyword">const</span> theme - <span class="title function_">use</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="experimental-taintObjectReference-experimental"><a href="#experimental-taintObjectReference-experimental" class="headerlink" title="experimental_taintObjectReference(experimental)"></a>experimental_taintObjectReference(experimental)</h3><p>允许阻止特定对象实例被传递给客户端组件, 例如 user 对象</p>
<ul>
<li>message 对象被传递给客户端组件时显示的消息</li>
<li>object 被污染的对象, React 会阻止直接将 函数 和 类 传递给客户端组件, 并把默认的错误消息替换在 message 中定义的内容</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">experimental_taintObjectReference</span>(message, object);</span><br></pre></td></tr></table></figure>

<h3 id="taintUniqueValue-experimental"><a href="#taintUniqueValue-experimental" class="headerlink" title="taintUniqueValue(experimental)"></a>taintUniqueValue(experimental)</h3><p>阻止将唯一值传递给客户端组件, 例如 密码、密钥或令牌</p>
<ul>
<li>message  value 被传递给客户端组件时显示的消息</li>
<li>lifetime 指定 value 应该被污染多长时间的任何对象, 只要此对象仍然存在, 将阻止把 value 发送给任何客户端组件</li>
<li>value 具有高熵的字符串或字节的唯一序列</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">taintUniqueValue</span>(message, lifetime, value);</span><br></pre></td></tr></table></figure>

<h2 id="ReactDOM-Hook"><a href="#ReactDOM-Hook" class="headerlink" title="ReactDOM Hook"></a>ReactDOM Hook</h2><h3 id="useFormStatus-experimental"><a href="#useFormStatus-experimental" class="headerlink" title="useFormStatus(experimental)"></a>useFormStatus(experimental)</h3><p>提供上一次表单提交状态信息, 仅获取父级 form 的状态信息</p>
<ul>
<li>pending 标识父级 form 是否正在等待提交, 如果调用 useFormStatus 的组件未嵌套在 form 中, 总是返回 false</li>
<li>data 包含父级 form 正在提交的 formData 数据, 如果没有进行提交为 null</li>
<li>method  标识父级 form 使用 GET 或 POST 进行提交, 默认使用 GET</li>
<li>action 传递给父级 form 的 action 属性的函数引用, 如果没有父级 form 则为 null</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;pending, data, method, action&#125; = <span class="title function_">useFormStatus</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useFormStatus&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Submit</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;pending, data, method&#125; = <span class="title function_">useFormStatus</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;pending&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;pending ? &#x27;提交...&#x27; : &#x27;提交&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;data ? `请求 $&#123;data.get(&#x27;username&#x27;)&#125;...` : &#x27;&#x27;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>method 为 &#123;method&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params">&#123;action&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;action&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Submit</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">action</span>=<span class="string">&#123;submitForm&#125;/</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不会返回在同一组件中渲染的 form 的状态信息, 仅获取父级 form 的状态信息</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// useFormStatus 不会跟踪此组件中渲染的表单, pending 永远不会为 true</span></span><br><span class="line">  <span class="comment">// 需要将 useFormStatus 改成在 Form 组件的子组件中调用</span></span><br><span class="line">  <span class="keyword">const</span> &#123;pending&#125; = <span class="title function_">useFormStatus</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;submit&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ReactDOM-组件"><a href="#ReactDOM-组件" class="headerlink" title="ReactDOM 组件"></a>ReactDOM 组件</h2><h3 id="自定义-HTML-元素"><a href="#自定义-HTML-元素" class="headerlink" title="自定义 HTML 元素"></a>自定义 HTML 元素</h3><p>渲染一个带连字符的标签 如 <code>&lt;my-elment&gt;</code>, React 会认为渲染自定义 HTML 元素</p>
<ul>
<li>所有自定义元素的 props 都将被序列化为字符串, 并且总是使用属性(attribute)进行设置</li>
<li>自定义元素接受 <code>class</code> 而不是 <code>className</code>, 接受 <code>for</code> 而不是 <code>htmlFor</code></li>
<li>如果使用 is 属性渲染一个内置的浏览器 HTML 元素, 将被视为自定义元素</li>
</ul>
<h3 id="属性差异"><a href="#属性差异" class="headerlink" title="属性差异"></a>属性差异</h3><p>在 React 中，所有的 DOM 特性和属性（包括事件处理）都应该是小驼峰命名的方式。例如，与 HTML 中的 tabindex 属性对应的 React 的属性是 tabIndex。例外的情况是 <code>aria-*</code> 以及 <code>data-*</code> 属性，一律使用小写字母命名。比如, 你依然可以用 aria-label 作为 aria-label。</p>
<ul>
<li><p>dangerouslySetInnerHTML React 为浏览器 DOM 提供 innerHTML 的替换方案</p>
<ul>
<li>不能同时传递 children 和 dangerouslySetInnerHTML</li>
<li>直接设置 HTML 存在风险</li>
<li>key 为 __html</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createMarkup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">__html</span>: <span class="string">&#x27;First &amp;middot; Second&#x27;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dangerouslySetInnerHTML</span>=<span class="string">&#123;createMarkup()&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>for JavaScript 中的保留字，React 中内置元素使用 htmlFor 代替</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;label htmlFor=<span class="string">&quot;htmlFor&quot;</span>&gt;htmlFor&lt;/label&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;htmlFor&quot;</span> <span class="attr">id</span>=<span class="string">&quot;htmlFor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>suppressContentEditableWarning 此属性禁用 当 DOM 元素拥有 contentEditable 属性时，React 发出警告</p>
</li>
<li><p>suppressHydrationWarning 此属性禁用警告, 如果 React 服务器与客户端渲染不同的内容时发出警告</p>
</li>
</ul>
<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><ul>
<li><p>React 不支持在 option 元素上传递 selected 属性</p>
</li>
<li><p>checked 控制复选框或单选按钮是否被选中</p>
</li>
<li><p>value 控制文本框、下拉框、文本域的输入文本</p>
</li>
</ul>
<p>以下属性仅在 <code>非受控元素</code> 中有效</p>
<ul>
<li>defaultChecked 指定复选框或单选按钮的初始值</li>
<li>defaultValue 指定文本框、下拉框、文本域的初始值</li>
</ul>
<h3 id="合成事件"><a href="#合成事件" class="headerlink" title="合成事件"></a>合成事件</h3><p>事件处理程序接收到一个 React 合成的事件对象</p>
<p><code>SyntheticEvent</code> 为 React 的事件包装器, 是所有事件的基类型</p>
<ul>
<li><p>事件: on + 事件名称 + Capture(捕获阶段触发)</p>
</li>
<li><p>事件处理器: handle + 事件名称</p>
</li>
<li><p>阻止事件冒泡手动调用 <code>e.stopPropagation()</code></p>
</li>
<li><p>阻止部分 html 元素的浏览器默认行为调用 <code>e.preventDefault()</code></p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClickCapture</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClickCapture</span>=<span class="string">&#123;handleClickCapture&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>除了以下标准属性, React 针对不同事件额外附加了其他 属性, 如 ClipboardEvent 事件附加了 clipboardData</p>
<ul>
<li>bubbles 布尔值, 返回是否会在 DOM 中冒泡传播</li>
<li>cancelable 布尔值, 返回事件是否可以被取消</li>
<li>currentTarget DOM 节点, 返回当前事件处理程序所附加到的节点在 React 树中的位置</li>
<li>defaultPrevented 布尔值, 返回是否调用了 preventDefault</li>
<li>eventPhase 数字, 返回事件当前所处的阶段</li>
<li>isTrusted 布尔值, 返回事件是否由用户发起</li>
<li>target DOM 节点, 返回事件发生的节点(可能是远程子节点)</li>
<li>timestamp 数字, 返回事件发生的时间</li>
<li>nativeEvent DOM event 对象, 浏览器的原生事件对象</li>
</ul>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li><p>preventDefault 阻止事件的默认浏览器行为</p>
</li>
<li><p>stopPropagation 阻止事件在 React 树中的传播</p>
</li>
<li><p>isDefaultPrevented 布尔值, 返回是否调用了 preventDefault 方法</p>
</li>
<li><p>isPropagationStopped 布尔值, 返回是否调用 stopPropagation 方法</p>
</li>
<li><p>persist 不适用 ReactDOM, 在 React Native 中, 调用此函数以读取事件后的属性</p>
</li>
<li><p>isPersistent 不适用 ReactDOM, 在 React Native 中, 返回是否调用了 persist</p>
</li>
</ul>
<h2 id="ReactDOM-API"><a href="#ReactDOM-API" class="headerlink" title="ReactDOM API"></a>ReactDOM API</h2><h3 id="createPortal"><a href="#createPortal" class="headerlink" title="createPortal"></a>createPortal</h3><p>允许将 JSX 作为 children 渲染到 DOM 的不同部分</p>
<ul>
<li>children React 可以渲染的任何内容</li>
<li>domNode 某个已经存在的 DOM 节点</li>
<li>key 用作 portal key 的独特字符串或数字</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createPortalDOM = <span class="title function_">createPortal</span>(children, domNode, key?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createPortal&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createPortalDOM = <span class="title function_">createPortal</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">List</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;createPortalDOM&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flushSync"><a href="#flushSync" class="headerlink" title="flushSync"></a>flushSync</h3><p>允许强制 React 立即同步更新 DOM, 使用此方法可能严重影响应用程序的性能</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">flushSync</span>(callback);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRef, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;flushSync&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> listRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>([]); </span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleAdd</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> newTodo = &#123;<span class="attr">id</span>: nextId++, <span class="attr">text</span>: text&#125;;</span><br><span class="line">    <span class="comment">// 强制 React 立即同步更新 DOM</span></span><br><span class="line">    <span class="title function_">flushSync</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="title function_">setText</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      <span class="title function_">setTodos</span>([...todos, newTodo]);</span><br><span class="line">    &#125;);</span><br><span class="line">    listRef.<span class="property">current</span>.<span class="property">lastChild</span>.<span class="title function_">scrollIntoView</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="comment">/* ... */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="findDOMNode-deprected"><a href="#findDOMNode-deprected" class="headerlink" title="findDOMNode(deprected)"></a>findDOMNode(deprected)</h3><p>React 18 开始, 使用 ref 代替</p>
<p>获取组件实例对用的浏览器 DOM 节点</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> domNode = <span class="title function_">findDOMNode</span>(componentInstance);</span><br></pre></td></tr></table></figure>

<h3 id="hydrate-deprected"><a href="#hydrate-deprected" class="headerlink" title="hydrate(deprected)"></a>hydrate(deprected)</h3><p>React 18 开始, 使用 <a href="#hydrateRoot">hydrateRoot</a> 代替</p>
<p>允许 React 17 及以下版本中使用 <code>react-dom/server</code> 生成的 HTML 内容作为浏览器 DOM 节点, 并在其中显示 React 组件</p>
<ul>
<li>reactNode 用于渲染现有的 HTML, 通常是 JSX 片段, 并且使用像 <code>renderToString(&lt;App/&gt;)</code> 的 ReactDOM Server 方法渲染</li>
<li>domNode 在服务器中被渲染为根节点的 DOM 元素</li>
<li>callback React 将在组件 hydrate 后调用</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">hydrate</span>(reactNode, domNode, callback?);</span><br></pre></td></tr></table></figure>

<h3 id="render-deprected"><a href="#render-deprected" class="headerlink" title="render(deprected)"></a>render(deprected)</h3><p>React 18 开始, 使用 <a href="#createRoot">createRoot</a> 代替</p>
<p>将一段 JSX 片段渲染到浏览器 DOM 容器节点中</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(reactNode, domNode, callback?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">App</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./App.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="unmountComponentAtNode-deprected"><a href="#unmountComponentAtNode-deprected" class="headerlink" title="unmountComponentAtNode(deprected)"></a>unmountComponentAtNode(deprected)</h3><p>React 18 开始, 使用 root.unmount 代替</p>
<p>从 DOM 中移除一个已挂载的 React 组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">unmountComponentAtNode</span>(domNode);</span><br></pre></td></tr></table></figure>

<h3 id="preconnect-experimental"><a href="#preconnect-experimental" class="headerlink" title="preconnect(experimental)  "></a>preconnect(experimental) <em id="preconnect"></em> <!--markdownlint-disable-line--></h3><p>提前连接到一个期望从中加载资源的服务器</p>
<ul>
<li>对同一服务器进行多次调用 preconnect 具有与单次调用相同的结果</li>
<li>在浏览器中, 可以在任何情况下调用 preconnect</li>
<li>服务器端渲染时, 只有在渲染组件或在从渲染组件中发起的异步上下文中调用 preconnect 时才会生效, 任何其他调用都会被忽略</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">preconnect</span>(href);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;preconnect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">AppRoot</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 预连接到主机</span></span><br><span class="line">  <span class="title function_">preconnect</span>(<span class="string">&#x27;https://example.com&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="prefetchDNS-experimental"><a href="#prefetchDNS-experimental" class="headerlink" title="prefetchDNS(experimental)"></a>prefetchDNS(experimental)</h3><p>允许提前查找期望从中加载资源的服务器的 IP, 和 <a href="#preconnect">preconnect</a> 类似</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">prefetchDNS</span>(href);</span><br></pre></td></tr></table></figure>

<h3 id="preinit-experimental"><a href="#preinit-experimental" class="headerlink" title="preinit(experimental)  "></a>preinit(experimental) <em id="preinit"></em> <!--markdownlint-disable-line--></h3><blockquote>
<p>React 框架通常会内置资源处理方案, 不需要手动调用此 API</p>
</blockquote>
<p>预获取和评估样式表或外部脚本</p>
<ul>
<li><p>对于具有相同的 href 的多个 preinit 调用具有与单个调用相同的结果</p>
</li>
<li><p>在浏览器中, 可以在任何情况下调用 preinit</p>
</li>
<li><p>在服务器端渲染时, 只有在渲染组件或在从渲染组件中发起的异步上下文中调用 preinit 时才会生效, 任何其他调用都会被忽略</p>
</li>
<li><p>href 要下载并执行的资源的 url</p>
</li>
<li><p>options</p>
<ul>
<li>as 标识资源的类型, 可能的值 script, style</li>
<li>precedence 与样式表一起使用时必需, 指定样式表相对于其他样式表的插入位置, 可能的值 reset, low, meduim, high</li>
<li>crossOrigin 标识要使用的 CORS 策略, 可能的值为 anonymous, use-credentials</li>
<li>integrity 标识资源的加密哈希, 用于验证其真实性</li>
<li>nonce 标识使用严格 CSP(安全内容策略) 时允许资源的加密随机数</li>
<li>fetchPriority 建议获取资源的相对优先级, 可能的值为 auto(默认), high, low</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">preinit</span>(href, options);</span><br></pre></td></tr></table></figure>

<h3 id="preinitModule-experimental"><a href="#preinitModule-experimental" class="headerlink" title="preinitModule(experimental)  "></a>preinitModule(experimental) <em id="preinitModule"></em> <!--markdownlint-disable-line--></h3><blockquote>
<p>React 框架通常会内置资源处理方案, 不需要手动调用此 API</p>
</blockquote>
<p>预获取和评估 ESM 模块</p>
<p>执行时机参考 <a href="#preinit">preinit</a></p>
<ul>
<li>href 要下载并执行的模块的 url</li>
<li>options<ul>
<li>as 只能取值 script</li>
<li>crossOrigin 同 <a href="#preinit">preinit</a></li>
<li>integrity 同 <a href="#preinit">preinit</a></li>
<li>nonce 同 <a href="#preinit">preinit</a></li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">preinitModule</span>(href, options)</span><br></pre></td></tr></table></figure>

<h3 id="preload-experimental"><a href="#preload-experimental" class="headerlink" title="preload(experimental)"></a>preload(experimental)</h3><blockquote>
<p>React 框架通常会内置资源处理方案, 不需要手动调用此 API</p>
</blockquote>
<p>预获取期望使用的资源, 比如样式表、字体、外部脚本</p>
<p>执行时机和参数参考 <a href="#preinit">preinit</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">preload</span>(href, options);</span><br></pre></td></tr></table></figure>

<h3 id="preloadModule-experimental"><a href="#preloadModule-experimental" class="headerlink" title="preloadModule(experimental)"></a>preloadModule(experimental)</h3><blockquote>
<p>React 框架通常会内置资源处理方案, 不需要手动调用此 API</p>
</blockquote>
<p>预获取期望使用的 ESM 模块</p>
<p>执行时机和参数参考 <a href="#preinitModule">preinitModule</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">preloadModule</span>(href, options);</span><br></pre></td></tr></table></figure>

<h2 id="客户端-API"><a href="#客户端-API" class="headerlink" title="客户端 API"></a>客户端 API</h2><p><code>react-dom/client</code> API 允许在客户端(浏览器) 渲染 React 组件, 通常在应用程序项目顶层调用</p>
<h3 id="createRoot"><a href="#createRoot" class="headerlink" title="createRoot  "></a>createRoot <em id="createRoot"></em> <!--markdownlint-disable-line--></h3><p>允许在浏览器的 DOM 节点中创建根节点以显示 React 组件</p>
<ul>
<li><p>domNode 某个已经存在的 DOM 节点</p>
</li>
<li><p>options</p>
<ul>
<li>onCaughtError(experimental) 当 React 捕获到错误边界时调用</li>
<li>onUncaughtError(experimental) 当错误边界抛出了一个无法捕获的错误时调用</li>
<li>onRecoverableError 当 React 自动从错误中恢复时调用</li>
<li>identifierPrefix 一个字符串, React 使用此字符串作为 <a href="#useId">useId</a> 生成的 id 的前缀, 当在一个页面中使用多个根节点时可以避免冲突</li>
</ul>
</li>
<li><p>root.render(reactNode) 将一段 JSX 片段渲染为 React 组件并显示, 首次调用时 React 将清空根节点所有已经存在的 HTML</p>
</li>
<li><p>root.unmount() 销毁 React 根节点中的一个已经渲染的树</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(domNode, options?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createPortal&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createRoot&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(reactNode);</span><br></pre></td></tr></table></figure>

<h3 id="hydrateRoot"><a href="#hydrateRoot" class="headerlink" title="hydrateRoot  "></a>hydrateRoot <em id="hydrateRoot"></em> <!--markdownlint-disable-line--></h3><!-- 允许在先前路由 `react-dom/server` 生成的浏览器 HTML DOM 节点中展示 React 组件 -->
<p>用 hydrateRoot 函数将 React 连接到 React 在服务器端环境中渲染的 HTML 中</p>
<p>开发模式下, React 会在 hydrate 期间发出不匹配警告. 在不匹配的情况下, 不能保证内容差异会被修补, 出于性能原因, 这很重要, 因为在大多数应用程序中, 不匹配很少见, 因此验证所有标记将是非常昂贵而不可行的</p>
<ul>
<li><p>domNode 一个在服务器端渲染时呈现为根元素的 DOM 元素</p>
</li>
<li><p>reactNode 用于渲染已存在 HTML 的 React 节点, 通常是 JSX 片段, 并且使用像 <code>renderToPipeableStream(&lt;App/&gt;)</code> 的方法渲染</p>
</li>
<li><p>options 参数同 <a href="#createRoot">createRoot</a> 的 options</p>
</li>
<li><p>root.render(reactNode) 更新一个 hydrate 根组件中的 React 组件来渲染浏览器端 DOM 元素</p>
</li>
<li><p>root.unmount() 销毁 React 根节点内的渲染树</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title function_">hydrateRoot</span>(domNode, reactNode, options?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState, useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;hydreateRoot&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg1</span></span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="comment">// 由 react-dom/server 生成的 HMTL 内容</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Is Server<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [isClient, setIsClient] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">setIsClient</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;,[]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;isClient ? &#x27;Is Client&#x27; : &#x27;Is Server&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hydreateRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>), <span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// eg2</span></span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="comment">// 由 react-dom/server 生成的 HTML 内容</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world! <span class="comment">&lt;!-- --&gt;</span>0<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type something here&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">&#123;counter&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world! &#123;counter&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type something here&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">hydrateRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>), <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">counter</span>=<span class="string">&#123;0&#125;/</span>&gt;</span></span>);</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">counter</span>=<span class="string">&#123;i&#125;/</span>&gt;</span></span>);</span><br><span class="line">  i++;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="服务端-API"><a href="#服务端-API" class="headerlink" title="服务端 API"></a>服务端 API</h2><p><code>react-dom/server</code> API 允许在服务器端将 React 组件渲染为 HTML, 仅在服务器端应用程序顶层调用</p>
<h3 id="Node-js-流服务器-API"><a href="#Node-js-流服务器-API" class="headerlink" title="Node.js 流服务器 API"></a>Node.js 流服务器 API</h3><h4 id="renderToNodeStream-deprected"><a href="#renderToNodeStream-deprected" class="headerlink" title="renderToNodeStream(deprected)"></a>renderToNodeStream(deprected)</h4><p>React 18 开始, 改用 <a href="#renderToPipeableStream">renderToPipeableStream</a></p>
<p>输出 HTML 字符串的 Node.js 只读流, 此方法会缓冲所有输出, 因此实际上它并没有提供任何流式传输的好处</p>
<p>在客户端使用 <a href="#hydrateRoot">hydrateRoot</a> 使服务器生成的 HTML 具有交互功能</p>
<ul>
<li>reactNode 要渲染为 HTML 的 React 节点</li>
<li>options<ul>
<li>identifierPrefix 字符串前缀, 由 <a href="#useId">useId</a> 生成的 id 使用</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stream = <span class="title function_">renderToNodeStream</span>(reactNode, options?);</span><br></pre></td></tr></table></figure>

<h4 id="renderToPipeableStream"><a href="#renderToPipeableStream" class="headerlink" title="renderToPipeableStream  "></a>renderToPipeableStream <em id="renderToPipeableStream"></em> <!--markdownlint-disable-line--></h4><p>将一个 React 组件树渲染为管道化(pipeable)的 Node.js 流</p>
<p>在客户端使用 <a href="#hydrateRoot">hydrateRoot</a> 使服务器生成的 HTML 具有交互功能</p>
<ul>
<li><p>options</p>
<ul>
<li>bootstrapScriptContent 指定被放入 script 标签中作为其内容的字符串</li>
<li>bootstrapScripts 一个字符串数组, 将被转化为 script 标签嵌入页面</li>
<li>bootstrapModules 和 bootstrapScripts 类似, 但是嵌入页面的是 <code>&lt;script type=&quot;module&quot;&gt;</code></li>
<li>identifierPrefix 字符串前缀, 由 <a href="#useId">useId</a> 生成的 id 使用</li>
<li>namespaceURI 一个字符串, 指定与流相关联的 命名控件 URI, 默认是常规的 HTML, 可以指定 SVG</li>
<li>nonce 标识使用严格 CSP(安全内容策略) 时允许资源的加密随机数</li>
<li>onAllReady 函数, 在所有渲染完成时触发, 包括 shell 和 所有额外的 content, 可以代替 onShellReady 用于爬虫和静态内容生成</li>
<li>onShellReady 函数, 在 shell 初始化渲染后立即调用</li>
<li>onShellError 函数, 在 shell 发生错误渲染时调用</li>
<li>onError 函数, 出现异常错误时触发</li>
<li>progressiveChunkSize 一个块中的字节数</li>
</ul>
</li>
<li><p>返回一个包含了 pipe 和 abort 方法的对象</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;pipe, abort&#125; = <span class="title function_">renderToPipeableStream</span>(reactNode, options?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;renderToPipeableStream&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/server&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;pipe, abort&#125; = <span class="title function_">renderTopipeableStream</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, &#123;</span><br><span class="line">    <span class="attr">bootstrapScriptContent</span>: <span class="string">`window.assetMap = function()&#123; alert(&#x27;assetMap&#x27;) &#125;`</span>,</span><br><span class="line">    <span class="attr">bootstrapScripts</span>: [<span class="string">&#x27;./main.js&#x27;</span>],</span><br><span class="line">    <span class="title function_">onShellReady</span>(<span class="params"></span>)&#123;</span><br><span class="line">      response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>);</span><br><span class="line">      <span class="title function_">pipe</span>(response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="renderToStaticNodeStream"><a href="#renderToStaticNodeStream" class="headerlink" title="renderToStaticNodeStream"></a>renderToStaticNodeStream</h4><p>将 Node.js 只读流渲染为非交互式 React 树, 无法 hydrate 交互功能</p>
<p>输出 HTML 字符串的 Node.js 只读流, 此方法会缓冲所有输出, 因此实际上它并没有提供任何流式传输的好处</p>
<p>此方法输出的 HTML 不能被客户端 hydrate 转换成具有交互功能</p>
<ul>
<li>options<ul>
<li>identifierPrefix 字符串前缀, 由 <a href="#useId">useId</a> 生成的 id 使用</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stream = <span class="title function_">renderToStaticNodeStream</span>(reactNode, options?);</span><br></pre></td></tr></table></figure>

<h3 id="Web-流服务器-API"><a href="#Web-流服务器-API" class="headerlink" title="Web 流服务器 API"></a>Web 流服务器 API</h3><p>具有 web 流的环境中可用, 包括 浏览器, Deno, 以及一些现代 Edge 运行时</p>
<ul>
<li>ReadableStream</li>
<li>WritableStream</li>
<li>TransformStream</li>
</ul>
<h4 id="renderToReadableStream"><a href="#renderToReadableStream" class="headerlink" title="renderToReadableStream"></a>renderToReadableStream</h4><p>将 React 树渲染后发送至 web 流</p>
<p>参数配置参考 <a href="#renderToPipeableStream">renderToPipeableStream</a> 的 options</p>
<p>在客户端使用 <a href="#hydrateRoot">hydrateRoot</a> 使服务器生成的 HTML 具有交互功能</p>
<ul>
<li>返回一个 Promise<ul>
<li>如果 shell 渲染成功, 则 Promise 将 resolve 为 web 可读流</li>
<li>如果 shell 渲染失败, 则 Promise 将 reject</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stream = <span class="title function_">renderToReadableStream</span>(reactNode, options?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;renderToReadableStream&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">request</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> stream = <span class="keyword">await</span> <span class="title function_">renderToReadableStream</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,&#123;</span><br><span class="line">    <span class="attr">bootstrapScripts</span>: [<span class="string">&#x27;./main.js&#x27;</span>],</span><br><span class="line">    <span class="attr">identifierPrefix</span>: <span class="string">&#x27;w&#x27;</span>,</span><br><span class="line">    <span class="title function_">onError</span>(<span class="params">error</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">      <span class="title function_">logServerCrashReport</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(stream, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span>&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非流环境-API"><a href="#非流环境-API" class="headerlink" title="非流环境 API"></a>非流环境 API</h3><h4 id="renderToString"><a href="#renderToString" class="headerlink" title="renderToString"></a>renderToString</h4><p>将 React 树渲染为一个 HTML 字符串, 不支持流式传输或等待数据</p>
<p>在客户端使用 <a href="#hydrateRoot">hydrateRoot</a> 使服务器生成的 HTML 具有交互功能</p>
<ul>
<li><p>不完全支持 Suspense, 如果某个组件触发 Suspense, API 不会等待其内容解析完成, 将找到最近的 Suspense 边界并在 HTML 中渲染其 fallback 属性</p>
</li>
<li><p>options</p>
<ul>
<li>identifierPrefix 字符串前缀, 由 <a href="#useId">useId</a> 生成的 id 使用</li>
</ul>
</li>
<li><p>返回一个 HTML 字符串</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> html = <span class="title function_">renderToString</span>(reactNode, options?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;renderToString&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/server&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="title function_">renderToString</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>);</span><br><span class="line">  response.<span class="title function_">send</span>(html);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="renderToStaticMarkup"><a href="#renderToStaticMarkup" class="headerlink" title="renderToStaticMarkup"></a>renderToStaticMarkup</h4><p>将非交互的 React 组件渲染成 HTML 字符串, 无法 hydrate 交互功能</p>
<ul>
<li><p>renderToStaticMarkup 的输出无法进行二次渲染, 仅需要呈现纯静态内容时使用</p>
</li>
<li><p>renderToStaticMarkup 对 Suspense 的支持有限, 如果一个组件触发了 Suspense, API 立即将后备方案作为 HTML 输出</p>
</li>
<li><p>renderToStaticMarkup 在浏览器中可以使用, 不建议在客户端代码中使用它</p>
</li>
<li><p>options</p>
<ul>
<li>identifierPrefix 字符串前缀, 由 <a href="#useId">useId</a> 生成的 id 使用</li>
</ul>
</li>
<li><p>返回一个 HTML 字符串</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> html = <span class="title function_">renderToStaticMarkup</span>(reactNode, options?);</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;renderToStaticMarkup&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/server&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="title function_">renderToStaticMarkup</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>);</span><br><span class="line">  response.<span class="title function_">send</span>(html);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="React-Router"><a href="#React-Router" class="headerlink" title="React Router"></a>React Router</h2><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><h4 id="不支持-data-APIs"><a href="#不支持-data-APIs" class="headerlink" title="不支持 data APIs"></a>不支持 data APIs</h4><ul>
<li><code>&lt;BrowserRouter&gt;</code></li>
<li><code>&lt;MemoryRouter&gt;</code></li>
<li><code>&lt;HashRouter&gt;</code></li>
<li><code>&lt;NativeRouter&gt;</code> 用于 React Native</li>
<li><code>&lt;StaticRouter&gt;</code></li>
</ul>
<h4 id="支持-data-APIs"><a href="#支持-data-APIs" class="headerlink" title="支持 data APIs"></a>支持 data APIs</h4><p>使用此方式创建路由, 同时启用用于数据获取的 loader, actions, fetchers 等 API</p>
<ul>
<li>createBrowserRouter</li>
<li>createMemoryRouter</li>
<li>createHashRouter</li>
<li>createStaticRouter</li>
</ul>
<h5 id="createBrowserRouter"><a href="#createBrowserRouter" class="headerlink" title="createBrowserRouter  "></a>createBrowserRouter <em id="createBrowserRouter"></em> <!--markdownlint-disable-line--></h5><ul>
<li>basename 基础路径</li>
<li>future 用于启用新版本语法的标记</li>
<li>hydrationData 当使用服务器端渲染时允许从服务器端获取数据</li>
<li>unstable_dataStrategy 低水平 API, 将会覆盖 React Router 内部的 loader, action 的执行</li>
<li>unstable_patchRoutesOnMis</li>
<li>window 用于区分环境, 对开发者工具或者测试来说非常有用</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(routes, &#123;</span><br><span class="line">  <span class="attr">basename</span>: <span class="string">&#x27;/app&#x27;</span>,</span><br><span class="line">  <span class="attr">hydrationData</span>: &#123;</span><br><span class="line">    <span class="attr">root</span>: &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="createStaticHandler"><a href="#createStaticHandler" class="headerlink" title="createStaticHandler"></a>createStaticHandler</h5><p>通常用于服务器端渲染的 数据获取和提交, 配合 <code>createStaticRouter</code> 使用</p>
<ul>
<li>routes 路由信息</li>
<li>options<ul>
<li>basename</li>
<li>future</li>
<li>mapRouteProperties</li>
</ul>
</li>
</ul>
<p>返回值</p>
<ul>
<li>query() 执行当前请求的 action, loader 并返回 context 包含了渲染页面的所有数据<ul>
<li>request</li>
<li>opts<ul>
<li>routeId 如果需要调用不同的路由的 action 或 loader, 传入指定的 routeId</li>
<li>requestContext 将请求上下文信息传入 action 或 loader</li>
</ul>
</li>
</ul>
</li>
<li>dataRoutes 路由信息</li>
</ul>
<h5 id="createStaticRouter"><a href="#createStaticRouter" class="headerlink" title="createStaticRouter"></a>createStaticRouter</h5><ul>
<li>routes 路由信息</li>
<li>context 请求的上下文信息</li>
<li>ops<ul>
<li>future</li>
</ul>
</li>
</ul>
<p>返回值</p>
<ul>
<li>router</li>
</ul>
<h5 id="StaticRouterProvider"><a href="#StaticRouterProvider" class="headerlink" title="StaticRouterProvider"></a>StaticRouterProvider</h5><p>接收来自 <code>createStaticHandler</code> 的 context 和  <code>createStaticRouter</code> 的 router, 用于服务器端渲染</p>
<ul>
<li>router 通过 createStaticRouter 创建的路由</li>
<li>context 接收来自 staticHandler.query 的结果作为数据</li>
<li>hydrate 是否禁用客户端自动数据连接</li>
<li>nonce 标识使用严格 CSP(安全内容策略) 时允许资源的加密随机数</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">StrictMode</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createStaticHandler, createStaticRouter, <span class="title class_">StaticRouterProvider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;renderToString&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">renderHtml</span>(<span class="params">req</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;query, dataRoutes&#125; = <span class="title function_">createStaticHandler</span>(routes);</span><br><span class="line">  <span class="keyword">const</span> fetchRequest = <span class="title function_">createFetchRequest</span>(req);</span><br><span class="line">  <span class="keyword">const</span> context = <span class="keyword">await</span> <span class="title function_">query</span>(fetchRequest);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(context <span class="keyword">instanceof</span> <span class="title class_">Response</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> router = <span class="title function_">createStaticRouter</span>(dataRoutes, context);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">renderToString</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">StaticRouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;router&#125;</span> <span class="attr">context</span>=<span class="string">&#123;context&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="RouterProvider"><a href="#RouterProvider" class="headerlink" title="RouterProvider"></a>RouterProvider</h5><p>路由根组件, 所有的路由对象或者 Data APIS 都通过此组件注入 React 应用程序</p>
<ul>
<li>router</li>
<li>fallbackElement 后备内容</li>
<li>future</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">StrictMode</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createRoot&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createBrowserRouer, createRoutesFromElements, <span class="title class_">RouterProvider</span>, <span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 JSX 元素创建路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(</span><br><span class="line">  <span class="title function_">createRoutesFromElements</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">path</span>=<span class="string">&quot;/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Root</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      errorElement=&#123;<span class="tag">&lt;<span class="name">ErrorPage</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      loader=&#123;rootLoader&#125;</span></span><br><span class="line"><span class="language-xml">      action=&#123;rootAction&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Dashboard</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">      &#123;/* ... */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 使用对象形式创建路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Root</span>/&gt;</span></span>,</span><br><span class="line">    <span class="attr">loader</span>: rootLoader,</span><br><span class="line">    <span class="attr">action</span>: rootAction,</span><br><span class="line">    <span class="attr">errorElement</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">ErrorPage</span>/&gt;</span></span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;<span class="attr">index</span>: <span class="literal">true</span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Dashboard</span>/&gt;</span></span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"><span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;router&#125;</span> <span class="attr">fallbackElement</span>=<span class="string">&#123;</span>&lt;<span class="attr">SpinnerOfDom</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="Route"><a href="#Route" class="headerlink" title="Route  "></a>Route <em id="Route"></em> <!--markdownlint-disable-line--></h3><p>React Router 创建路由的 <a href="#internal-component">内置组件</a>, data APIs 由类似 <a href="#createBrowserRouter">createBrowserRouter</a> 创建的路由才有效</p>
<ul>
<li><p>index 标识当路由未匹配到时默认匹配</p>
</li>
<li><p>path 路由</p>
</li>
<li><p>caseSensitive  path 是否区分大小写</p>
</li>
<li><p>element/Component 当路由匹配时渲染</p>
</li>
<li><p>handle 当前路由的任意数据, 作用同 <a href="#useMatches">useMatches</a></p>
</li>
<li><p>使用对象方式创建</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createBrowserRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Root</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">errorElement</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">ErrorPage</span> /&gt;</span></span>,</span><br><span class="line">    <span class="attr">loader</span>: <span class="keyword">async</span> (&#123;request, params&#125;) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fetch</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">action</span>: <span class="keyword">async</span> (&#123;request&#125;) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">update</span>(<span class="keyword">await</span> request.<span class="title function_">formData</span>());</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: []</span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 JSX 元素创建</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createBrowserRouter, createRoutesFromElements, <span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(<span class="title function_">createRoutesFromElements</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">path</span>=<span class="string">&quot;/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Root</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    errorElement=&#123;<span class="tag">&lt;<span class="name">ErrorPage</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    lazy=&#123;() =&gt; import(&#x27;./a&#x27;)&#125;</span></span><br><span class="line"><span class="language-xml">    loader=&#123;async (&#123;request, params&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">      return fetch();</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    action=&#123;async (&#123;request&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">      return update(await request.formData());</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  &gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">index</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">DashBoard</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">))</span><br></pre></td></tr></table></figure>

<h4 id="Route-action"><a href="#Route-action" class="headerlink" title="Route.action  "></a>Route.action <em id="Route.action"></em> <!--markdownlint-disable-line--></h4><p>当 React Router 抽象了异步 UI 和重新验证的复杂性时, 为应用程序提供了一种使用简单的 HTML 和 HTTP 语句执行数据更改的方法</p>
<p>每当应用程序向路由发送 non-get(POST, PUT, PATCH, DELETE) 请求的时候都会被调用</p>
<p>动态路由参数分别传递给 <a href="#Route.loader">loader</a>, <a href="#useParams">useMatch</a>, <a href="#useParams">useParams</a></p>
<ul>
<li>request  request 请求实例</li>
<li>params 动态路由参数</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createBrowserRouter, createRoutesFromElements, <span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(</span><br><span class="line">  <span class="title function_">createRoutesFromElements</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">path</span>=<span class="string">&quot;/projects/:id/delete&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">action</span>=<span class="string">&#123;async</span> (&#123;<span class="attr">request</span>, <span class="attr">params</span>&#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        console.log(params.id);</span></span><br><span class="line"><span class="language-xml">        const formData = request.formData();</span></span><br><span class="line"><span class="language-xml">        return deleteProjectById(params.id);</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      &#123;/* .... */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="Route-loader"><a href="#Route-loader" class="headerlink" title="Route.loader  "></a>Route.loader <em id="Route.loader"></em> <!--markdownlint-disable-line--></h4><p>组件渲染之前调用定义的 loader 函数并将返回的数据传入 React 元素</p>
<p>动态路由参数分别传递给 <a href="#Route.action">action</a>, <a href="#useMatch">useMatch</a>, <a href="#useParams">useParams</a></p>
<ul>
<li>params 动态路由参数</li>
<li>request request 请求实例</li>
<li>hydrate 服务器端渲染时处理 hydrate 数据</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createBrowserRouter, createRoutesFromElements, <span class="title class_">Route</span>, useLoaderData&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(</span><br><span class="line">  <span class="title function_">createRoutesFromElements</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">path</span>=<span class="string">&quot;/projects/:id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Projects</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      loader=&#123;async (&#123;request, params&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        console.log(params.id);</span></span><br><span class="line"><span class="language-xml">        const res = await fetch();</span></span><br><span class="line"><span class="language-xml">        if(res.status == 404) &#123;</span></span><br><span class="line"><span class="language-xml">          throw new Response(&#x27;Not Found&#x27;, &#123;status: 404&#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">        return res.json();</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      &#123;/* ... */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Projects</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> projects = <span class="title function_">useLoaderData</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    projects</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Route-lazy"><a href="#Route-lazy" class="headerlink" title="Route.lazy"></a>Route.lazy</h4><p>路由懒加载</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createBrowserRouter, createRoutesFromElements, <span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(</span><br><span class="line">  <span class="title function_">createRoutesFromElements</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">path</span>=<span class="string">&quot;/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Layout</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;a&quot;</span> <span class="attr">lazy</span>=<span class="string">&#123;()</span> =&gt;</span> import(&#x27;./a&#x27;)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;b&quot;</span> <span class="attr">lazy</span>=<span class="string">&#123;()</span> =&gt;</span> import(&#x27;./b&#x27;)&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="Route-shouldRevalidate"><a href="#Route-shouldRevalidate" class="headerlink" title="Route.shouldRevalidate"></a>Route.shouldRevalidate</h4><p>如果定义了此函数, 将在路由的 loader 调用之前执行此函数验证新数据, 如果返回 false 则不在调用 loader 并且保持当前页面数据不变</p>
<h4 id="Route-errorElement-errorBoundary"><a href="#Route-errorElement-errorBoundary" class="headerlink" title="Route.errorElement/errorBoundary"></a>Route.errorElement/errorBoundary</h4><p>当组件的 loader, action 或者在渲染过程中抛出错误时代替 element 显示</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createBrowserRouter, createRoutesFromElements, <span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(</span><br><span class="line">  <span class="title function_">createRoutesFromElements</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">errorElement</span>=<span class="string">&#123;</span>&lt;<span class="attr">ErrorElement</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      loader=&#123;async (&#123;request, params&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        const res = await fetch();</span></span><br><span class="line"><span class="language-xml">        if(res.status == 404)&#123;</span></span><br><span class="line"><span class="language-xml">          throw new Response(&#x27;Not Found&#x27;, &#123;status: 404&#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">        const json = res.json();</span></span><br><span class="line"><span class="language-xml">        return &#123;json&#125;</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      &#123;/* ... */&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="Route-hydrateFallbackElement-hydrateFallback"><a href="#Route-hydrateFallbackElement-hydrateFallback" class="headerlink" title="Route.hydrateFallbackElement/hydrateFallback"></a>Route.hydrateFallbackElement/hydrateFallback</h4><p>初始化服务器端渲染的内容没有被 hyrate 的组件, 如果未使用类似 <a href="#createBrowserRouter">createBrowserRouter</a> 创建的路由则无效, 通常 SSR 的应用不会使用此项</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createBrowserRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">loader</span>: rootLoader,</span><br><span class="line">    <span class="title class_">Component</span>: <span class="title class_">Root</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;invoice&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;invoice/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">loader</span>: invoiceLoader,</span><br><span class="line">        <span class="title class_">Component</span>: <span class="title class_">Invoice</span>,</span><br><span class="line">        <span class="attr">hydrateFallback</span>: <span class="title class_">InvoiceFallback</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">future</span>:&#123;</span><br><span class="line">    <span class="attr">v7_partialHydration</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">hydrationData</span>:&#123;</span><br><span class="line">    <span class="attr">root</span>:&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="React-Router-内置组件"><a href="#React-Router-内置组件" class="headerlink" title="React Router 内置组件  "></a>React Router 内置组件 <em id="internal-component"></em> <!--markdownlint-disable-line--></h3><h4 id="Await"><a href="#Await" class="headerlink" title="Await  "></a>Await <em id="Await"></em> <!--markdownlint-disable-line--></h4><p>用于呈现具有自动错误处理功能的延迟值</p>
<ul>
<li>children React 元素或者一个函数</li>
<li>resolve 返回一个 Promise 当延迟值被 resolve 后渲染</li>
<li>errorElement 当 resolve 被 reject 后渲染</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Await</span>, useLoaderData, defer, <span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">loader</span>=<span class="string">&#123;async</span> () =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">    let book = await getBook();</span></span><br><span class="line"><span class="language-xml">    let reviews = getviews();</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    return defer(&#123;book, reviews&#125;);</span></span><br><span class="line"><span class="language-xml">  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  element=&#123;<span class="tag">&lt;<span class="name">Book</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">&gt;</span></span><br><span class="line"><span class="language-xml">  &#123;/* ... */&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Book</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;book, reviews&#125; = <span class="title function_">useLoaderData</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Await</span> <span class="attr">resolve</span>=<span class="string">&#123;reviews&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Review</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Await</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h4><p>围绕普通 HTML 表单的包装器, 模拟浏览器进行客户端路由和数据更改</p>
<ul>
<li>action</li>
<li>method</li>
<li>navigate 标识表单默认提交行为提交之后的动作是否跳转</li>
<li>fetchKey</li>
<li>replace 标识表单提交行为替换当前历史记录栈</li>
<li>relative 标识表单提交的后的跳转路径</li>
<li>reloadDocument 标识跳过 React Router 的表单提交行为并使用浏览器内置的表单默认行为</li>
<li>state</li>
<li>preventScrollReset 标识表单提交行为是否滚动页面位置</li>
</ul>
<h4 id="Link"><a href="#Link" class="headerlink" title="Link  "></a>Link <em id="Link"></em> <!--markdownlint-disable-line--></h4><p>路由导航</p>
<ul>
<li>relative 相对路径, 默认为 Route 的相对层级</li>
<li>preventScrollRest 标识是否滚动到页面顶部</li>
<li>replace 标识是否替换当前历史记录栈</li>
<li>state 任何状态</li>
<li>reloadDocument</li>
</ul>
<h4 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a>NavLink</h4><p>特殊的 Link, 可以标识当前活动状态的导航</p>
<ul>
<li>className 通过函数自定义样式</li>
<li>style 通过函数自定义样式</li>
<li>children</li>
<li>end 改变路由匹配逻辑, 当前路由是否以 to 结尾</li>
<li>caseSensitive 是否区分大小写</li>
<li>aria-current</li>
<li>reloadDocument</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavLink</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">NavLink</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">to</span>=<span class="string">&quot;/message&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">className</span>=<span class="string">&#123;(&#123;isActive,</span> <span class="attr">isPending</span>, <span class="attr">isTransitioning</span>&#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">    return isPending ? &#x27;pending&#x27; : isActive ? &#x27;active&#x27; : &#x27;&#x27;</span></span><br><span class="line"><span class="language-xml">  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  style=&#123;(&#123;isActive, isPending, isTransitioning&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">    return &#123;</span></span><br><span class="line"><span class="language-xml">      fontWeight: isActive ? &#x27;bold&#x27; : &#x27;&#x27;,</span></span><br><span class="line"><span class="language-xml">      color: isPending ? &#x27;red&#x27; : &#x27;black&#x27;,</span></span><br><span class="line"><span class="language-xml">      viewTransitionName: isTransitioning ? &#x27;slide&#x27; : &#x27;&#x27;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Navigate"><a href="#Navigate" class="headerlink" title="Navigate"></a>Navigate</h4><p>当组件渲染后改变当前的路由, 通常用在 class 组件中, 建议使用 <a href="#useNavigate">useNavigate</a> Hook</p>
<ul>
<li>to 跳转的目标路由</li>
<li>replace 是否使用替换模式</li>
<li>state 任何状态</li>
<li>relative</li>
</ul>
<h4 id="Outlet"><a href="#Outlet" class="headerlink" title="Outlet"></a>Outlet</h4><p>渲染嵌套子路由</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DashBoard</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>DashBoard<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* ... */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">DashBoard</span>/&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">path</span>=<span class="string">&quot;message&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">DashBoardMessage</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;tasks&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">DashBoardTasks</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Route-1"><a href="#Route-1" class="headerlink" title="Route"></a><a href="#Route">Route</a></h4><p>React Router <a href="#internal-component">内置组件</a></p>
<h4 id="Routes"><a href="#Routes" class="headerlink" title="Routes"></a>Routes</h4><p>匹配组件内的 Route, 通常用于不使用 <a href="#createBrowserRouter">createBrowserRouter</a> 创建的 Route</p>
<h4 id="ScrollRestoration"><a href="#ScrollRestoration" class="headerlink" title="ScrollRestoration"></a>ScrollRestoration</h4><p>在渲染完成之后模拟浏览器在位置更改时的滚动恢复, 以确保滚动位置恢复到正确的位置</p>
<h3 id="React-Router-内置-Hook"><a href="#React-Router-内置-Hook" class="headerlink" title="React Router 内置 Hook"></a>React Router 内置 Hook</h3><h4 id="useActionData"><a href="#useActionData" class="headerlink" title="useActionData"></a>useActionData</h4><p>获取上一个导航操作结果的返回值, 如果没有提交操作则返回 undefined</p>
<h4 id="useAsyncError"><a href="#useAsyncError" class="headerlink" title="useAsyncError"></a>useAsyncError</h4><p>获取最近的 <a href="#Await">Await</a> 组件被 rejection 的结果</p>
<h4 id="useAsyncValue"><a href="#useAsyncValue" class="headerlink" title="useAsyncValue"></a>useAsyncValue</h4><p>获取最近的 <a href="#Await">Await</a> 组件被 resolved 的结果</p>
<h4 id="useBeforeUnload"><a href="#useBeforeUnload" class="headerlink" title="useBeforeUnload"></a>useBeforeUnload</h4><p>当用户离开页面时 (window.onbeforeunload) 保存重要的数据</p>
<h4 id="useBlocker"><a href="#useBlocker" class="headerlink" title="useBlocker"></a>useBlocker</h4><p>阻止用户离开当前页面, 并呈现自定义 UI 提示用户允许确认导航</p>
<ul>
<li>state 当前 blocker 的状态<ul>
<li>unblocked 空闲没有阻止状态</li>
<li>blocked 阻止状态</li>
<li>proceeding 正在从阻断器中前进</li>
</ul>
</li>
<li>proceed() 允许跳转</li>
<li>reset() 重置 blocker 状态并留在当前位置</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> blocker = <span class="title function_">useBlocker</span>();</span><br></pre></td></tr></table></figure>

<h4 id="useFetcher"><a href="#useFetcher" class="headerlink" title="useFetcher"></a>useFetcher</h4><p>不想在更改 URL 的情况下调用 <a href="#Route.loader">loader</a>, <a href="#Route.action">action</a>获取页面的数据并重新验证, 或者需要同时进行多个更新</p>
<p>与服务器的许多交互不是导航事件, useFetcher 允许将 UI 插入到操作或 <a href="#Route.loader">loader</a> 中而不引起导航</p>
<ul>
<li><p>key 默认为 内置组件 生成唯一的 key</p>
</li>
<li><p>fetcher.Form 像 Form <a href="#internal-component">内置组件</a> 一样, 只是不会引起导航</p>
</li>
<li><p>fetcher.state 标识当前 Fetcher 的状态</p>
<ul>
<li>idle 空闲</li>
<li>submiting 由 fetcher 使用 post, put, patch, delete 提交正在调用路由操作</li>
<li>loading fetcher 正在调用 fetcher.load 或者在单独提交或调用用 <code>useRevalidator</code> 之后重新验证</li>
</ul>
</li>
<li><p>fetcher.data 获取从 <a href="#Route.loader">loader</a> 或 <a href="#Route.action">action</a> 加载的数据</p>
</li>
<li><p>fetcher.formData 当使用 fetcher.Form 和 <code>fetcher.submit()</code> 时, formData 可用</p>
</li>
<li><p>fetcher.json 当使用 <code>fetcher.submit(data, &#123;formEnctype: &#39;application/json&#39;&#125;)</code> 提交时可用</p>
</li>
<li><p>fetcher.text 当使用 <code>fetcher.submit(data, &#123;formEnctype: &#39;text/plain&#39;&#125;)</code> 提交时可用</p>
</li>
<li><p>fetcher.formAction 提交时的 form 的 url</p>
</li>
<li><p>fetcher.formMethod 提交时的方法 get, post, put, patch, delete</p>
</li>
<li><p>fetcher.load(href, options) 从 <a href="#Route.loader">loader</a> 中获取数据</p>
</li>
<li><p>fetcher.submit(data, options?) 包含了 <a href="#useSubmit">useSubmit</a> 调用的实例, 接收和 <a href="#useSubmit">useSubmit</a> 相同的参数</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useFetcher&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SomeCompoent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> fetcher = <span class="title function_">useFetcher</span>(&#123;<span class="attr">key</span>: <span class="string">&#x27;new-key&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetcher.<span class="title function_">submit</span>(data, options);</span><br><span class="line">    fetcher.<span class="title function_">load</span>(href);</span><br><span class="line">  &#125;,[fetcher]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染的表单不会引起导航 </span></span><br><span class="line">  <span class="keyword">return</span> （</span><br><span class="line">    &lt;fetcher.<span class="property">Form</span> action=<span class="string">&quot;/fetcher-action&quot;</span> method=<span class="string">&#x27;post&#x27;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onclick</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        if(fetcher.state === &#x27;idle&#x27; &amp;&amp; !fetcher.data)&#123;</span></span><br><span class="line"><span class="language-xml">          fetcher.submit(fetcher.formData?.get(&#x27;username&#x27;), &#123;formEnctype: &#x27;application/json&#x27;&#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>fetcher.formAction &#123;fetcher.formAction&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>fetcher.formMethod &#123;fetcher.formMethod&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      &#123;fetcher.<span class="property">json</span> ? (<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;fetcher.json&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>) : (<span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>json: null<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)&#125;</span><br><span class="line">      &#123;fetcher.<span class="property">data</span> ? (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;fetcher.data&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>) : (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading data...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)&#125;</span><br><span class="line">    &lt;/fetcher.<span class="property">Form</span>&gt;</span><br><span class="line">  ）  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useFetchers"><a href="#useFetchers" class="headerlink" title="useFetchers"></a>useFetchers</h4><p>获取除了 load, submit, Form 属性的 fetcher 数组</p>
<h4 id="useFormAction"><a href="#useFormAction" class="headerlink" title="useFormAction"></a>useFormAction</h4><p>用在 Form <a href="#internal-component">内置组件</a> 内部自动解析当前路由的默认和相关操作</p>
<ul>
<li>可以直接计算当前的 formAction</li>
<li>也可以用在 <a href="#useSubmit">useSubmit</a> 或者 <code>fetcher.submit</code> 中</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useFormAction&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DeleteButton</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> formAction = <span class="title function_">useFormAction</span>(<span class="string">&#x27;destroy&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">formAction</span>=<span class="string">&#123;formAction&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">formMethod</span>=<span class="string">&quot;post&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      Delete</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> submit = <span class="title function_">useSubmit</span>();</span><br><span class="line"><span class="keyword">const</span> formAction = <span class="title function_">useFormAction</span>(<span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line"><span class="title function_">submit</span>(formData, &#123;formAction&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="useHref"><a href="#useHref" class="headerlink" title="useHref"></a>useHref</h4><h4 id="useInRouterContext"><a href="#useInRouterContext" class="headerlink" title="useInRouterContext"></a>useInRouterContext</h4><p>返回组件是否在 Router 的上下文环境中渲染的</p>
<h4 id="useLinkClickHandler"><a href="#useLinkClickHandler" class="headerlink" title="useLinkClickHandler"></a>useLinkClickHandler</h4><p>获取 Link 的 click 事件句柄</p>
<h4 id="useLoaderData"><a href="#useLoaderData" class="headerlink" title="useLoaderData"></a>useLoaderData</h4><p>获取路由 <a href="#Route.loader">loader</a> 返回的数据, 当路由 loader 被调用之后, 数据将自动重新验证并从 loader 中返回最新结果</p>
<p>useLoaderData 不会启动获取, 只读取 React Router 内部管理的结果</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">StrictMode</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createRoot&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useLoaderData, createBrowserRouter, createRoutesFromElements, <span class="title class_">RouterProvider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Albums</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> albums = <span class="title function_">useLoaderData</span>();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Albums<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowserRouter</span>(<span class="title function_">createRoutesFromElements</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">path</span>=<span class="string">&quot;/&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Albums</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    loader=&#123;async (&#123;request, params&#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">      return fakeFecth();</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  /&gt;</span></span><br><span class="line">));</span><br><span class="line"><span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;router&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">StrictMode</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h4><p>获取当前 location 的对象</p>
<ul>
<li>location.hash</li>
<li>location.key</li>
<li>location.pathname</li>
<li>location.search</li>
<li>location.state 通过 <a href="#Link">&lt;Link state/&gt;</a> 或者 <a href="#useNavigate">navigate</a> 创建的</li>
</ul>
<h4 id="useMatch"><a href="#useMatch" class="headerlink" title="useMatch  "></a>useMatch <em id="useMatch"></em> <!--markdownlint-disable-line--></h4><p>返回给定路径相对于当前位置上匹配的数据</p>
<p>动态路由参数分别传递给 <a href="#Route.loader">loader</a>, <a href="#Route.action">action</a>, <a href="#useParams">useParams</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useMatch, useParams&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Random</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> match = <span class="title function_">useMatch</span>(<span class="string">&#x27;/projects/:projectId/tasks/:taskId&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> params = <span class="title function_">useParams</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match.<span class="property">params</span>.<span class="property">projectId</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match.<span class="property">params</span>.<span class="property">taskId</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="property">projectId</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="property">taskId</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useMatches"><a href="#useMatches" class="headerlink" title="useMatches  "></a>useMatches <em id="useMatches"></em> <!--markdownlint-disable-line--></h4><p>获取当前页面匹配到的路由信息</p>
<h4 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate  "></a>useNavigate <em id="useNavigate"></em> <!--markdownlint-disable-line--></h4><p>返回一个 navigate 函数, 能够以编程式导航, 该函数接收两个参数</p>
<ul>
<li>to 跳转的目标路由</li>
<li>options<ul>
<li>replace</li>
<li>state</li>
<li>preventScrollReset</li>
<li>relative</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useNavigate&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useLogoutTimer</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> userIsInactive = <span class="title function_">useFakeInactive</span>();</span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(userIsInactive)&#123;</span><br><span class="line">      fake.<span class="title function_">logout</span>();</span><br><span class="line">      <span class="title function_">naviagte</span>(<span class="string">&#x27;/session-time-out&#x27;</span>, &#123;<span class="attr">state</span>: &#123;<span class="attr">token</span>: <span class="string">&#x27;token&#x27;</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[userIsInactive]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useNavigation"><a href="#useNavigation" class="headerlink" title="useNavigation"></a>useNavigation</h4><p>获取当前页面的所有导航信息</p>
<ul>
<li>navigation.state</li>
<li>navigation.location</li>
<li>navigation.formData</li>
<li>navigation.json</li>
<li>navigation.text</li>
<li>navigation.formAction</li>
<li>navigation.formMethod</li>
<li>navigation.formEnctype</li>
</ul>
<h4 id="useNavigationType"><a href="#useNavigationType" class="headerlink" title="useNavigationType"></a>useNavigationType</h4><p>返回当前页的导航类型</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">type <span class="title class_">NavigationType</span> = <span class="string">&#x27;POP&#x27;</span> | <span class="string">&#x27;PUSH&#x27;</span> | <span class="string">&#x27;REPLACE&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="useParams"><a href="#useParams" class="headerlink" title="useParams  "></a>useParams <em id="useParams"></em> <!--markdownlint-disable-line--></h4><p>返回当前 url 中被 Route 匹配到的动态路由参数对象</p>
<p>动态路由参数分别传递给 <a href="#Route.loader">loader</a>, <a href="#Route.action">action</a>, <a href="#useMatch">useMatch</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Books</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;id&#125; = <span class="title function_">useParams</span>();</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="title class_">Route</span></span><br><span class="line">  path=<span class="string">&quot;/books/:id&quot;</span></span><br><span class="line">  element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Books</span>/&gt;</span></span>&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="useResolvedPath"><a href="#useResolvedPath" class="headerlink" title="useResolvedPath"></a>useResolvedPath</h4><p>返回给定 to 相对于当前位置的 pathname</p>
<h4 id="useRevalidator"><a href="#useRevalidator" class="headerlink" title="useRevalidator"></a>useRevalidator</h4><p>返回一个验证器对象, 允许重新验证数据</p>
<ul>
<li>revalidator.state</li>
<li>revalidator.revalidate()</li>
</ul>
<h4 id="useRouteError"><a href="#useRouteError" class="headerlink" title="useRouteError  "></a>useRouteError <em id="useRouteError"></em> <!--markdownlint-disable-line--></h4><p>用在 errorElement 内部, 捕获由 <a href="#Route.action">action</a>, <a href="#Route.loader">loader</a>, 或者渲染期间抛出的错误</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRouteError, isRouteErrorResponse, <span class="title class_">Route</span>, json&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ErrorBoundary</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> error = <span class="title function_">useRouteError</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_">isRouteErrorResponse</span>(error))&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Oops!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;error.status&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;error.statusText&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;error.data?.message &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;error.data.message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Oops<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Route</span></span><br><span class="line">  errorElement=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">ErrorBoundary</span>/&gt;</span></span>&#125;</span><br><span class="line">  action=&#123;<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="title function_">json</span>(</span><br><span class="line">      &#123;<span class="attr">message</span>: <span class="string">&#x27;email is required&#x27;</span> &#125;,</span><br><span class="line">      &#123;<span class="attr">status</span>: <span class="number">400</span>&#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="useRouteLoaderData"><a href="#useRouteLoaderData" class="headerlink" title="useRouteLoaderData"></a>useRouteLoaderData</h4><p>路由树上任何位置的当前渲染路线上的数据都可用, 对于树深层需要来自更高层路由的数据的组件以及需要树深层的子路由的数据的父路由非常有用</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRouteLoaderData&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SomeComp</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="title function_">useRouteLoaderData</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createBrowserRouter</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="title function_">fetchUser</span>(),</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Root</span> /&gt;</span></span></span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;jobs/:jobId&#x27;</span>,</span><br><span class="line">        <span class="attr">loader</span>: loaderJob,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">JobListing</span> /&gt;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h4 id="useRoutes"><a href="#useRoutes" class="headerlink" title="useRoutes"></a>useRoutes</h4><p>相当于 Routes <a href="#internal-component">内置组件</a> 的函数版本</p>
<h4 id="useSearchParams"><a href="#useSearchParams" class="headerlink" title="useSearchParams"></a>useSearchParams</h4><p>读取或修改当前 URL 的参数部分</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useSearchParams&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> [searchParams, setSearchParams] = <span class="title function_">useSearchParams</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleSumbit</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="comment">// 序列化字段</span></span><br><span class="line">    <span class="keyword">const</span> params = <span class="title function_">serializeFormQuery</span>(e.<span class="property">target</span>);</span><br><span class="line">    <span class="title function_">setSearchParams</span>(params);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useSubmit"><a href="#useSubmit" class="headerlink" title="useSubmit  "></a>useSubmit <em id="useSubmit"></em> <!--markdownlint-disable-line--></h4><p>Form 表单提交的命令版本</p>
<ul>
<li>submit(data, options?) 手动提交方法<ul>
<li>options 支持 form 表单的大多数属性</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useSubmit, <span class="title class_">Form</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SearchFiled</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> submit = <span class="title function_">useSubmit</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次表单改动时提交 </span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">      submit(null, &#123;method: &#x27;post&#x27;, action: &#x27;/change&#x27;&#125;);</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="React-Router-API"><a href="#React-Router-API" class="headerlink" title="React Router API"></a>React Router API</h3><h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><p>格式化数据</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;json&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loader</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">fetchData</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">json</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h4><p>路由重定向</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;redirect&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loader</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>();</span><br><span class="line">  <span class="keyword">if</span>(res.<span class="property">status</span> == <span class="number">401</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="redirectDocument"><a href="#redirectDocument" class="headerlink" title="redirectDocument"></a>redirectDocument</h4><p>触发一个文档级别的重定向, 而不是基于客户端导航, 通常用于从一个应用跳转到另一个应用</p>
<h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p>导航跳转替换当前的历史记录栈</p>
<h4 id="createRoutesFromElements"><a href="#createRoutesFromElements" class="headerlink" title="createRoutesFromElements"></a>createRoutesFromElements</h4><p>使用 JSX 元素创建路由, 简写形式是 <code>createRoutesFromChildren</code></p>
<h4 id="createSearchParams"><a href="#createSearchParams" class="headerlink" title="createSearchParams"></a>createSearchParams</h4><p><code>new URLSearchParams(init)</code> 的包装写法</p>
<h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>延迟 <a href="#Route.loader">loader</a> 的返回值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defer&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">loader</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">defer</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="generatePath"><a href="#generatePath" class="headerlink" title="generatePath"></a>generatePath</h4><p>根据动态路由参数生成 url</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;generatePath&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">generatePath</span>(<span class="string">&#x27;/users/:id/:name&#x27;</span>, &#123;<span class="attr">id</span>: <span class="number">42</span>, <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>&#125;); <span class="comment">// /users/42/zhangsan</span></span><br></pre></td></tr></table></figure>

<h4 id="isRouteErrorResponse"><a href="#isRouteErrorResponse" class="headerlink" title="isRouteErrorResponse"></a>isRouteErrorResponse</h4><p>判断是否是由 <a href="#useRouteError">useRouteError</a> 捕获的路由错误</p>
<h4 id="matchPath"><a href="#matchPath" class="headerlink" title="matchPath"></a>matchPath</h4><p>将路由路径模式与 URL 路径进行匹配并返回有关的匹配信息, 否则返回 null</p>
<h4 id="matchRoutes"><a href="#matchRoutes" class="headerlink" title="matchRoutes"></a>matchRoutes</h4><p>执行一个路由匹配算法从给定的 routes 集合中找到匹配的路由并返回</p>
<h4 id="renderMatches"><a href="#renderMatches" class="headerlink" title="renderMatches"></a>renderMatches</h4><p>渲染 matchRoutes 匹配结果中的 React 元素</p>
<h4 id="resolvePath"><a href="#resolvePath" class="headerlink" title="resolvePath"></a>resolvePath</h4><p>根据给定的 to 解析为具有绝对路径的真实 path 对象</p>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><ul>
<li><p>dispatch 只能处理同步的 action</p>
</li>
<li><p>createStore  创建一个 Redux 存储实例</p>
</li>
<li><p>combineReducers 将多个 reducer 函数合并成为一个更大的 reducer</p>
</li>
<li><p>applyMiddleware 将多个中间件组合成一个 store 增强器</p>
</li>
<li><p>compose 将多个 store 增强器合并成一个单一的 store 增强器</p>
</li>
</ul>
<h3 id="reduxjs-toolkit-RTK"><a href="#reduxjs-toolkit-RTK" class="headerlink" title="@reduxjs/toolkit(RTK)"></a>@reduxjs/toolkit(RTK)</h3><p>消除手写 Redux 逻辑中的样板代码, 防止常见错误, 并提供简化标准的 Redux 任务的 API</p>
<ul>
<li><a href="#RTK-Query">@reduxjs/toolkit/query</a> 独立可选的入口, 允许定义端点(REST, GraphQL或任何异步函数)并生成 reducer 和中间件来完整管理数据获取, 加载状态更新和结果缓存, 还可以自动生成 React Hooks, 可用于组件获取数据</li>
</ul>
<h4 id="configureStore"><a href="#configureStore" class="headerlink" title="configureStore"></a>configureStore</h4><p>通过单个函数调用设置一个完善的 Redux Store, 包括合并 reducer, 添加 thunk 中间件以及设置 Redux Devtools 集成, 与 createStore 相比更容易配置</p>
<ul>
<li>reducer<ul>
<li>如果是一个函数, configureStore 直接使用其作为根 reducer</li>
<li>如果是一个 slice reducers 的对象, configureStore 将使用 combineReducers 合并此对象并自动创建根 reducer</li>
</ul>
</li>
<li>middleware 函数, 接收 <code>getDefaultMiddleware</code> 函数作为参数, 并返回一个中间件数组, 如果未提供, configureStore 将调用 <code>getDefaultMiddleware</code> 设置中间件数组</li>
<li>devTools 是否设置 Redux Devtools, 默认 true</li>
<li>preloadedState 初始化状态</li>
<li>enhancers 增强器函数, 和 middleware 参数作用类似</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;configureStore&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>slice reducers 自动传递给 combineReducers</li>
<li>自动添加了 <code>redux-thunk</code> 中间件</li>
<li>添加了 Devtools 中间件来捕获更多意外的变更</li>
<li>自动设置了 Redux Devtools Extension</li>
<li>中间件和 Devtools 增强器被组合在一起添加到了 store 中</li>
</ul>
<h4 id="createAction"><a href="#createAction" class="headerlink" title="createAction  "></a>createAction <em id="createAction"></em> <!--markdownlint-disable-line--></h4><p>用于创建 action 的辅助函数</p>
<ul>
<li><p>type 字符串, 标识 action</p>
</li>
<li><p>prepareAction() 可选, 函数, 接收任意个参数作为 action 的 payload 的值</p>
</li>
<li><p>actionCreator.match 函数可以区分 action 是否是同一类型, TypeScript 中可以识别 action 中 payload 的类型</p>
</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createAction&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actionCreator = <span class="title function_">createAction</span>(<span class="keyword">type</span>, prepareAction?);</span><br><span class="line"></span><br><span class="line"><span class="comment">// action 类型常量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params">amount: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>,</span><br><span class="line">    <span class="attr">payload</span>: amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> action = <span class="title function_">increment</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// &#123;type: &#x27;INCREMENT&#x27;, payload: 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// action 创建函数</span></span><br><span class="line"><span class="keyword">const</span> increment = <span class="title function_">createAction</span>(<span class="string">&#x27;INCREMENT&#x27;</span>, <span class="function">(<span class="params">text: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;INCREMENT&quot;</span>,</span><br><span class="line">    <span class="attr">payload</span>: &#123;</span><br><span class="line">      <span class="attr">text</span>: text,</span><br><span class="line">      <span class="attr">age</span>: age,</span><br><span class="line">      <span class="attr">id</span>: <span class="title function_">nanoid</span>(),</span><br><span class="line">      <span class="attr">createAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> action = <span class="title function_">increment</span>(<span class="string">&#x27;hello createAction&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// &#123;type: &quot;INCREMENT&quot;, payload: &#123;text: &quot;hello createAction&quot;, age: 18, id, createAt&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> increment = createAction&lt;<span class="built_in">number</span>&gt;(<span class="string">&#x27;INCREMENT&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">someFn</span>(<span class="params">action: Action</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(increment.<span class="title function_">match</span>(action))&#123;</span><br><span class="line">    <span class="comment">// action.payload can be used as `number` here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="createReducer"><a href="#createReducer" class="headerlink" title="createReducer  "></a>createReducer <em id="createReducer"></em> <!--markdownlint-disable-line--></h4><p>一个简化创建 reducer 函数的工具, 内部使用 Immer 通过在 reducer 中编写可变代码, 大大简化了不可变的更新逻辑, 并支持将特定的操作类型直接映射到 case reducer 函数</p>
<ul>
<li>initialState 初始化状态, 可以是一个返回 state 的函数</li>
<li>builderCallback 回调函数接收一个 <code>builder</code> 对象通过 addCase 方法添加 reducer <em id="builderCallback"></em> <!--markdownlint-disable-line--><ul>
<li>addCase() 接收两个参数, 调用必须在 <code>addMatcher</code> 和 <code>addDefaultCase</code> 之前<ul>
<li>actionCreatorOrType 指定 action.type</li>
<li>reducer</li>
</ul>
</li>
<li>addMatcher() 匹配传入的 action, 调用必须在 <code>addCase</code> 之后和 <code>addDefaultCase</code> 之前<ul>
<li>matcher() 匹配函数, 匹配传入的所有可能的 action.type, 并按定义的顺序调用</li>
<li>reducer</li>
</ul>
</li>
<li>addDefaultCase() 添加默认的 reducer<ul>
<li>reducer</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>返回值</p>
<ul>
<li>具有 <code>getInitialState</code> 函数的 reducer 函数, 调用 <code>getInitialState</code> 返回初始状态, 通常用于测试或者配合 React <a href="#useReducer">useReducer</a> Hook</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createReducer&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">createReducer</span>(initialState, builderCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通 reducer</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">coutenReducer</span>(<span class="params">state = initialState, action</span>)&#123;</span><br><span class="line">  <span class="keyword">switch</span>(aciton.<span class="property">type</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ADD&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">value</span>: action.<span class="property">payload</span>&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">value</span>: action.<span class="property">payload</span>&#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createReducer</span></span><br><span class="line"><span class="keyword">const</span> counterReducer = <span class="title function_">createReducer</span>(initialState, <span class="function"><span class="params">builder</span> =&gt;</span> &#123;</span><br><span class="line">  builder.<span class="title function_">addCase</span>(<span class="string">&#x27;ADD&#x27;</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">value</span>++; <span class="comment">// immer 创建的 state 副本, 直接修改</span></span><br><span class="line">  &#125;).<span class="title function_">addCase</span>(<span class="string">&#x27;DELETE&#x27;</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">value</span>--;</span><br><span class="line">  &#125;).<span class="title function_">addCase</span>(<span class="string">&#x27;ADD_BY_AMOUNT&#x27;</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">value</span> += action.<span class="property">payload</span>;</span><br><span class="line">  &#125;).<span class="title function_">addMatcher</span>(<span class="function">(<span class="params">action</span>) =&gt;</span> <span class="title function_">isMatchedAction</span>(action.<span class="property">type</span>), <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;).<span class="title function_">addDefaultCase</span>(<span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="createSlice"><a href="#createSlice" class="headerlink" title="createSlice  "></a>createSlice <em id="createSlice"></em> <!--markdownlint-disable-line--></h4><p>支持使用 Immer 库编写 reducer, 接受一个初始状态, 对象或者 reducer 函数, 并自动创建一个与 reducer 和 状态对应的 <a href="#createAction">actionCreator</a>, 在内部调用 <code>createAction</code> 和 <code>createReducer</code></p>
<ul>
<li>name  标识 state, 将作为生成的 <a href="#createAction">actionCreator</a> 的前缀</li>
<li>initialState 初始化状态</li>
<li>reducers reducer 配置<ul>
<li>如果需要自定义 case Reducer, 每个 reducer 将是一个具有 prepare 函数 和 reducer 函数的对象<ul>
<li>prepare()</li>
<li>reducer</li>
</ul>
</li>
<li>如果是一个函数, 将接收一个 create 对象, 具有三个方法<ul>
<li>create.reducer 标准的 reducer</li>
<li>create.prepareReducer 自定义 actionCreator 的 payload</li>
<li>create.asyncThunk 创建异步的函数代替 actionCreator<ul>
<li>pending</li>
<li>fulfilled</li>
<li>rejected</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>extraReducers 函数, 处理自己创建的 <a href="#createAction">actionCreator</a> 之外的情况, 如处理异步请求的状态, 同 <a href="#builderCallback">builderCallback</a></li>
<li>reducerPath 标识 slice 的位置, 默认 name</li>
<li>selectors 接收 state 作为第一个参数和剩余的参数并返回指定结果</li>
</ul>
<p>返回值, 包含上面的部分属性</p>
<ul>
<li>reducer</li>
<li>actions</li>
<li>caseReducers</li>
<li>getInitialState()</li>
<li>selectSlice 关联自动创建的一个 selector</li>
<li>getSelectors()</li>
<li>injectInfo() 注入 slice</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createSlice, configureStore&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;<span class="attr">value</span>: <span class="number">0</span>&#125;,</span><br><span class="line">  <span class="comment">// reducers 为一个对象</span></span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      state.<span class="property">value</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">state, action</span>)&#123;</span><br><span class="line">      state.<span class="property">value</span>--;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// case reducer, prepareAction</span></span><br><span class="line">    <span class="attr">incrementByAmout</span>: &#123;</span><br><span class="line">      <span class="title function_">reducer</span>(<span class="params">state, action</span>)&#123;</span><br><span class="line">        state.<span class="property">value</span> += action.<span class="property">payload</span>.<span class="property">value</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">prepare</span>(<span class="params">text: string</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">payload</span>: &#123;<span class="attr">text</span>: text, <span class="attr">value</span>: <span class="number">100</span>&#125;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// reducers 为一个函数, 接收一个 create 对象 </span></span><br><span class="line">  <span class="comment">// reducer, prepareReducer, asyncThunk</span></span><br><span class="line">  <span class="title function_">reducers</span>(<span class="params">create</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">increment</span>: create.<span class="title function_">reducer</span>(state, action) =&gt; &#123;</span><br><span class="line">        state.<span class="property">value</span>++;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">decrement</span>: create.<span class="title function_">reducer</span>(state, action) =&gt; &#123;</span><br><span class="line">        state.<span class="property">value</span>--;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">incrementByAmount</span>: create.<span class="title function_">prepareReducer</span>(<span class="function">(<span class="params">text: string</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">payload</span>: &#123;<span class="attr">text</span>: text, <span class="attr">value</span>: <span class="number">100</span>&#125;&#125;</span><br><span class="line">      &#125;, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">        state.<span class="property">value</span> += action.<span class="property">payload</span>.<span class="property">value</span>;</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="attr">fetchTodo</span>: create.<span class="title function_">asyncThunk</span>(<span class="keyword">async</span> (<span class="attr">id</span>: string, thunkApi) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(thunkApi);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">await</span> res.<span class="title function_">json</span>()) <span class="keyword">as</span> <span class="title class_">Item</span></span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        <span class="attr">pending</span>: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">          state.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">rejected</span>: <span class="function"><span class="params">state</span> =&gt;</span>&#123;</span><br><span class="line">          state.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fulfilled</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">          state.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">          state.<span class="property">todos</span>.<span class="title function_">push</span>(action.<span class="property">payload</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">extraReducers</span>(<span class="params">builder</span>)&#123;</span><br><span class="line">    builder.<span class="title function_">addCase</span>(<span class="string">&#x27;INCREMENT&#x27;</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">value</span>++;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">  <span class="attr">reducer</span>: &#123;</span><br><span class="line">    <span class="attr">counter</span>: counterSlice.<span class="property">reducer</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">store.<span class="title function_">dispatch</span>(counterSlice.<span class="property">actions</span>.<span class="title function_">increment</span>());</span><br><span class="line">sotre.<span class="title function_">dispatch</span>(counterSlice.<span class="property">actions</span>.<span class="title function_">decrement</span>());</span><br><span class="line">store.<span class="title function_">dispatch</span>(counterSlice.<span class="property">actions</span>.<span class="title function_">incrementByAmount</span>(&#123;<span class="attr">value</span>: <span class="number">10</span>&#125;));</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;counter/increment&#x27;</span>&#125;)</span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;counter/decrement&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>两种获取 selector 的方式</p>
<ul>
<li>selectors</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123; <span class="attr">value</span>: <span class="number">0</span> &#125; satisfies <span class="title class_">CounterState</span> <span class="keyword">as</span> <span class="title class_">CounterState</span>,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">selectors</span>: &#123;</span><br><span class="line">    <span class="attr">selectValue</span>: <span class="function">(<span class="params">sliceState</span>) =&gt;</span> sliceState.<span class="property">value</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counterSlice.<span class="title function_">selectSlice</span>(&#123; <span class="attr">counter</span>: &#123; <span class="attr">value</span>: <span class="number">2</span> &#125; &#125;)) <span class="comment">// &#123; value: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; selectValue &#125; = counterSlice.<span class="property">selectors</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectValue</span>(&#123; <span class="attr">counter</span>: &#123; <span class="attr">value</span>: <span class="number">2</span> &#125; &#125;)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>getSelectors()</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; selectValue &#125; = counterSlice.<span class="title function_">getSelectors</span>(</span><br><span class="line">  <span class="function">(<span class="params">rootState: RootState</span>) =&gt;</span> rootState.<span class="property">aCounter</span>,</span><br><span class="line">)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectValue</span>(&#123; <span class="attr">aCounter</span>: &#123; <span class="attr">value</span>: <span class="number">2</span> &#125; &#125;)) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;selectValue&#125; = counterSlice.<span class="title function_">getSelectors</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectValue</span>(&#123;<span class="attr">value</span>: <span class="number">2</span>&#125;)) <span class="comment">//  2</span></span><br></pre></td></tr></table></figure>

<p>dispatch 提交</p>
<ul>
<li>dispatch 提交 action 时, 如果参数是一个 action 对象形式, 则会忽略 case reducer 中配置的 prepare 方法</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">incrementByAmount</span>:&#123;</span><br><span class="line">      <span class="title function_">reducer</span>(<span class="params">state, action</span>)&#123;</span><br><span class="line">        state.<span class="property">count</span> += action.<span class="property">payload</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">prepare</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">payload</span>: val + <span class="number">2</span>&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// action 对象方式提交会忽略 case redcuer 的 prepare 方法</span></span><br><span class="line"><span class="title function_">dipatch</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;counter/incrementByAmount&#x27;</span>, <span class="attr">payload</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="combineSlices"><a href="#combineSlices" class="headerlink" title="combineSlices"></a>combineSlices</h4><p>合并多个 slice 为一个 reducer, 并允许初始化后更多的 reducer 注入</p>
<p>返回值</p>
<ul>
<li>withLazyLoadedSlices() 向 state 添加声明的 slice</li>
<li>inject(slice, options) 添加 slice<ul>
<li>options.overrideExisting 布尔值, 标识是否替换已存在的 slice</li>
</ul>
</li>
<li>selector() 将 reducer 包装在代理中以确保在当前状态未定义的情况下都能恢复到其初始状态</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;combineSlices&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lazeSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123;<span class="attr">value</span>: <span class="number">0</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="title function_">combineSlices</span>(staticSlice, userSlice);</span><br><span class="line"><span class="keyword">const</span> injectReducer = rootReducer.<span class="title function_">inject</span>(lazySlice);</span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"><span class="keyword">const</span> injectSlice = lazySlice.<span class="title function_">injectInfo</span>(rootReducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">selectCounterValue</span> = (<span class="params">rootState</span>) =&gt; rootState.<span class="property">counter</span>?.<span class="property">value</span> <span class="comment">// number | undefined</span></span><br><span class="line"><span class="keyword">const</span> wrappedSelectCounterValue = injectReducer.<span class="title function_">selector</span>(<span class="function">(<span class="params">rootState</span>) =&gt;</span> rooState.<span class="property">counter</span>.<span class="property">value</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title function_">selectCounterValue</span>(&#123;&#125;), <span class="comment">// undefined</span></span><br><span class="line">  <span class="title function_">selectCounterValue</span>(&#123;<span class="attr">counter</span>: &#123;<span class="attr">value</span>: <span class="number">2</span>&#125;&#125;), <span class="comment">// 2</span></span><br><span class="line">  <span class="title function_">wrappedSelectCounterValue</span>(&#123;&#125;), <span class="comment">// 0</span></span><br><span class="line">  <span class="title function_">wrappedSelectCounterValue</span>(&#123;<span class="attr">counter</span>: &#123;<span class="attr">value</span>: <span class="number">2</span>&#125;&#125;), <span class="comment">// 2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="createAsyncThunk"><a href="#createAsyncThunk" class="headerlink" title="createAsyncThunk"></a>createAsyncThunk</h4><p>接收一个 <a href="#createAction">actionCreator</a>和一个回调函数并返回一个 Promise, 同时会创建三个 actionCreator 分别对应 pending, fulfilled, rejected 的状态, 不会生成 reducer</p>
<ul>
<li>type actionCreator, 如 <code>users/requestStatus</code> 将被创建为<ul>
<li>pending: <code>users/requestStatus/pending</code></li>
<li>fulfilled: <code>users/requestStatus/fulfilled</code></li>
<li>rejected: <code>users/requestStatus/rejected</code></li>
</ul>
</li>
<li>payloadCreator 函数, 将返回一个 promise, 接收两个参数<ul>
<li>arg 包含了 thunk actionCreator 被 dispatch 时传入的参数, <code>dispatch(fetchUsers(&#123;status: &#39;active&#39;&#125;))</code></li>
<li>thunkApi 包含了 thunk 函数的所有参数<ul>
<li>dispatch()  Redux 的 dispatch 方法</li>
<li>getState()  Redux 的 getState 方法</li>
<li>extra 传递给 thunk 中间件的参数</li>
<li>requestId 自动生成的标识当前请求的唯一 id</li>
<li>signal 信号, AbortController.signal</li>
<li>rejectWithValue(value, [meta]) 修改当前 promise 的状态为 rejected</li>
<li>fulfilledWithValue(value, [meta])  修改当前 promise 的状态为 fulfilled</li>
</ul>
</li>
</ul>
</li>
<li>options<ul>
<li>condition(arg,{getState, extra}): boolean | Promise&lt;boolean&gt; 用来跳过执行 payloadCreator 和 所有的 dispatch</li>
<li>dispatchConditionRejection 布尔值, 如果 condition() 返回 false 所有的 action 都不会 dispatch, 如果想要当 thunk 结束 action 的状态标记为 rejected, 则设置为 true</li>
<li>idGenerator(arg): string 默认的 requestId 由 nanoid() 生成, 自定义生成 id 逻辑</li>
<li>serializeError(error: unknown) =&gt; any 替换内部的 <code>miniSerializeError</code> 方法</li>
<li>getPendingMeta({arg, requestId}, {getState, extra}): any 创建对象和 <code>pendingAction.meta</code> 合并</li>
</ul>
</li>
</ul>
<p>返回值</p>
<ul>
<li>thunk 函数, 带有 3 个状态<ul>
<li>pending</li>
<li>fulfilled</li>
<li>rejected</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createAsyncThunk, createSlice&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title function_">createAsyncThunk</span>(type, payloadCreator, options?);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetchUserById = <span class="title function_">createAsyncThunk</span>(<span class="string">&#x27;users/fetchUserById&#x27;</span>, <span class="title function_">async</span>(<span class="attr">userId</span>: number, &#123;requestId, getState, rejectWithValue&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(userId);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">rejectWithValue</span>(err.<span class="property">response</span>.<span class="property">data</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="title function_">condition</span>(<span class="params">userId, &#123;getState, extra&#125;</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;users&#125; = <span class="title function_">getState</span>();</span><br><span class="line">    <span class="keyword">const</span> fetchStatus = users.<span class="property">requests</span>[userId];</span><br><span class="line">    <span class="keyword">if</span>(fetchStatus === <span class="string">&#x27;fulfilled&#x27;</span> || fetchStatus === <span class="string">&#x27;loading&#x27;</span>)&#123;</span><br><span class="line">      <span class="comment">// Already fetched or in progress, don&#x27;t need to re-fetch</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> usersSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">  <span class="attr">initialState</span>: &#123; &#125;,</span><br><span class="line">  <span class="attr">reducers</span>:&#123;&#125;,</span><br><span class="line">  <span class="title function_">extraReducers</span>(<span class="params">builder</span>)&#123;</span><br><span class="line">    builder.<span class="title function_">addCase</span>(fetchUserById.<span class="property">pending</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">status</span> = <span class="string">&#x27;loading&#x27;</span>;</span><br><span class="line">    &#125;).<span class="title function_">addCase</span>(fetchUserById.<span class="property">fulfilled</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">      state.<span class="property">user</span> = action.<span class="property">payload</span>;</span><br><span class="line">    &#125;).<span class="title function_">addCase</span>(fetchUserById.<span class="property">rejected</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">status</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">dispatch</span>(<span class="title function_">fetchUserById</span>(<span class="number">123</span>));</span><br></pre></td></tr></table></figure>

<h4 id="createEntityAdapter"><a href="#createEntityAdapter" class="headerlink" title="createEntityAdapter"></a>createEntityAdapter</h4><p>生成一组预构建的 reducer 和 seletors, 用于对包含特定类型数据对象实例的规范化状态结构执行 CRUD 操作, 这些 reducer 函数可以作为 case reducer 传递给 <a href="#createReducer">createReducer</a> 和 <a href="#createSlice">createSlice</a>, 也可以作为 <code>createReducer</code> 和 <code>createSlice</code> 的辅助函数</p>
<ul>
<li><p>selectId 可选, 函数, 接收一个 entity 实例并返回一个唯一 id, 如果未提供则默认为 entity =&gt; entity.id</p>
</li>
<li><p>sortComparer 可选, 函数, 接收两个 entity 实例, 返回一个标准的 <code>Array.sort()</code> 排序之后的结果 (1, 0, -1) 以指示它们的排序相对排序, 如果未提供将不会排序, 也不会保证排序</p>
</li>
<li><p>addOne/addMany 向 state 添加 items</p>
</li>
<li><p>setOne/setMany 添加新 items 或替换现有 items</p>
</li>
<li><p>setAll 替换所有 items</p>
</li>
<li><p>removeOne/removeMany 根据 ID 删除 items</p>
</li>
<li><p>removeAll 移除所有 items</p>
</li>
<li><p>updateOne/updateMany 通过提供部分值更新现有 items</p>
</li>
<li><p>upsertOne/upsertMany 添加新 items 或更新现有 items</p>
</li>
<li><p>getInitialState() 如果传入对象参数, 将被合并到 initialState 中并返回</p>
</li>
<li><p>getSelectors() 生成一组标准的 selector 函数</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createSlice, createAsyncThunk, createEntityAdapter&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todosAdapter = <span class="title function_">createEntityAdapter</span>(&#123;</span><br><span class="line">  <span class="attr">selectId</span>: <span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span>,</span><br><span class="line">  <span class="attr">sortComparer</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">id</span> &lt; b.<span class="property">id</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> initialState = todosAdapter.<span class="title function_">getInitialState</span>(&#123;<span class="attr">loading</span>: <span class="string">&#x27;idle&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Thunk 函数</span></span><br><span class="line"><span class="keyword">const</span> fetchTodos = <span class="title function_">createAsyncThunk</span>(<span class="string">&quot;todos/fetchTodos&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> client.<span class="title function_">get</span>(<span class="string">&quot;/fakeApi/todos&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> response.<span class="property">todos</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> saveNewTodo = <span class="title function_">createAsyncThunk</span>(<span class="string">&quot;todos/saveNewTodo&quot;</span>,</span><br><span class="line">  <span class="keyword">async</span> (text) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> initialTodo = &#123; text &#125;;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> client.<span class="title function_">post</span>(<span class="string">&quot;/fakeApi/todos&quot;</span>, &#123; <span class="attr">todo</span>: initialTodo &#125;);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">todo</span>;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todosSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;todos&#x27;</span>,</span><br><span class="line">  initialState,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">todoDeleted</span>: todosAdapter.<span class="property">removeOne</span>, <span class="comment">// 根据 id 删除 todo</span></span><br><span class="line">    <span class="title function_">completeTodosCleard</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> completeIds = <span class="title class_">Object</span>.<span class="title function_">values</span>(state.<span class="property">entities</span>)</span><br><span class="line">        .<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">complete</span>)</span><br><span class="line">        .<span class="title function_">map</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">id</span>);</span><br><span class="line">      <span class="comment">// 删除所有已完成的 todo</span></span><br><span class="line">      todosAdapter.<span class="title function_">removeMany</span>(state, completedIds);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">extraReducers</span>(<span class="params">builder</span>)&#123;</span><br><span class="line">    builder.<span class="title function_">addCase</span>(fetchTodos.<span class="property">pending</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">status</span> = <span class="string">&#x27;loading&#x27;</span>;</span><br><span class="line">    &#125;).<span class="title function_">addCase</span>(fetchTodos.<span class="property">fulfilled</span>, <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      state.<span class="property">status</span> = <span class="string">&#x27;idle&#x27;</span>;</span><br><span class="line">    &#125;).<span class="title function_">addCase</span>(saveNewTodo.<span class="property">fulfilled</span>, todosAdapter.<span class="property">addOne</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="createSelector"><a href="#createSelector" class="headerlink" title="createSelector  "></a>createSelector <em id="createSelector"></em> <!--markdownlint-disable-line--></h4><p>函数组件每次重新渲染都会重新执行 selector, createSelector 用于创建带有<strong>记忆化</strong>的 selector, 当给定的 inputSelector 没有发生变化时返回已缓存的 selector</p>
<ul>
<li>inputSelectors 创建记忆化 selector 的依赖, 可以是一个函数, 也可以是多个函数组成的数组, 返回值依次作为 resultFn 的参数传入<ul>
<li>selectorFn 接收 state 作为第一个参数和剩余的参数并返回指定结果</li>
</ul>
</li>
<li>resultFn 在 inputSelectors 之后调用并依次接收来自 inputSelectors 函数的返回值作为参数并返回结果</li>
</ul>
<p>返回值, 带有记忆化的函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createSelector&#125; <span class="keyword">from</span> <span class="string">&#x27;reselect&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useSelector&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">selectTodos</span> = state =&gt; state.<span class="property">todos</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">selectTodosStatus</span> = (<span class="params">state, completed</span>) =&gt; completed;</span><br><span class="line"><span class="keyword">const</span> memoizedSelectTodoCount = <span class="title function_">createSelector</span>([selectTodos, selectTodosStatus], <span class="function">(<span class="params">todos, completed</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> todos.<span class="title function_">filter</span>(<span class="function"><span class="params">todo</span> =&gt;</span> todo.<span class="property">completed</span> === completed).<span class="property">length</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CompletedTodosCount</span>(<span class="params">&#123;completed&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> matchingCount = <span class="title function_">useSelector</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> <span class="title function_">memoizedSelectTodoCount</span>(state, complete));</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;matchingCount&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Number of done todos<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">CompletedTodosCount</span> <span class="attr">completed</span>=<span class="string">&#123;true&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="reduxjs-toolkit-query"><a href="#reduxjs-toolkit-query" class="headerlink" title="@reduxjs/toolkit/query  "></a>@reduxjs/toolkit/query <em id="RTK-Query"></em> <!--markdownlint-disable-line--></h4><p>独立可选的入口, 允许定义端点(REST, GraphQL或任何异步函数)并生成 reducer 和中间件来完整管理数据获取, 加载状态更新和结果缓存, 还可以自动生成 React Hooks, 可用于组件获取数据</p>
<h3 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h3><h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><ul>
<li>store</li>
<li>serverState</li>
<li>context</li>
<li>stabilityCheck</li>
<li>children</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Provider</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createRoot&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)).<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;/*  */&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="shallowEqual"><a href="#shallowEqual" class="headerlink" title="shallowEqual"></a>shallowEqual</h4><h4 id="useSelector"><a href="#useSelector" class="headerlink" title="useSelector"></a>useSelector</h4><p>使用 selector 函数从 Redux store 中提取数据用于当前组件</p>
<p>使用 <a href="#createSelector">createSelector</a> 创建记忆化的 selector</p>
<ul>
<li>selector</li>
<li>equalityFn</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useSelector, shallowEqual&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectedData = <span class="title function_">useSelector</span>(selectorReturningObject, shallowEqual);</span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"><span class="keyword">const</span> selectedData = <span class="title function_">useSelector</span>(selectorReturningObject, &#123;<span class="attr">equalityFn</span>: shallowEqual&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TodoListItem</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> todo = <span class="title function_">useSelector</span>(<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">todos</span>[props.<span class="property">id</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="useDispatch"><a href="#useDispatch" class="headerlink" title="useDispatch"></a>useDispatch</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useCallback, memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useDispatch&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CounterComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();</span><br><span class="line">  <span class="keyword">const</span> incrementCounter = <span class="title function_">useCallbac</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;increment-counter&#x27;</span>&#125;);</span><br><span class="line">  &#125;,[dispatch]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>CounterComponent<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyIncrement</span> <span class="attr">onIncrement</span>=<span class="string">&#123;incrementCounter&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyIncrement</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">&#123;onIncrement&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onIncrement&#125;</span>&gt;</span>increment counter<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="useStore"><a href="#useStore" class="headerlink" title="useStore"></a>useStore</h4><p>大多数情况使用 <code>useSelector</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useStore&#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;store.getState().todos.length&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ES</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>jsx</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-List</title>
    <url>/2022/11/3f42dc25499d/</url>
    <content><![CDATA[<h3 id="Lists-命令"><a href="#Lists-命令" class="headerlink" title="Lists 命令"></a>Lists 命令</h3><blockquote>
<p>Redis 3.2 之后, List 数据类型底层使用 quickList 代替双向链表和压缩列表</p>
</blockquote>
<p>List 是一个有序重复的双向链表, 按照添加的顺序排序, 可以添加一个元素到列表的头部(左边)、尾部(右边), 一个列表最多可以包含 2^32-1(40 多亿) 个元素.</p>
<p>List 类型的底层数据结构是由<strong>双向链表</strong>或<strong>压缩列表</strong>实现的</p>
<ul>
<li>如果列表元素的个数小于 512 个,列表每个元素值都小于 64B 时, Redis 使用<strong>压缩列表</strong>作为底层数据结构</li>
<li>如果列表元素不满足上面的条件, Redis 使用<strong>双向链表</strong>作为底层数据结构</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置底层数据结构存储数量限制</span></span><br><span class="line"><span class="string">hash-max-listpack-entries</span> <span class="number">512</span></span><br><span class="line"><span class="string">hash-max-listpack-value</span> <span class="number">64</span></span><br></pre></td></tr></table></figure>

<h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>LPUSH 和 LPUSHX 命令将多个元素<strong>逆序</strong>插入到列表头部</p>
<ul>
<li>LPUSH key element [element …] 批量添加多个元素到列表头部并返回列表的长度, 列表为空或者不存在新建</li>
<li>LPUSHX key element [element …] 批量添加多个元素到<strong>已存在</strong>的列表头部并返回列表的长度, 列表为空或者不存在返回 0</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH list:zhang name1 name2 name3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LPUSHX list:zhang name1 name4 name5 name6</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list:zhang name1 name4 name5 name6</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line"></span><br><span class="line"><span class="comment"># LPUSH 和 LPUSHX 命令将多个元素**逆序**插入到列表头部</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list:zhang 0 11</span><br><span class="line"> 1) <span class="string">&quot;name6&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;name5&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;name4&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;name1&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;name6&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;name5&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;name4&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;name1&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;name3&quot;</span></span><br><span class="line">10) <span class="string">&quot;name2&quot;</span></span><br><span class="line">11) <span class="string">&quot;name1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LPUSHX 对空列表或不存在的列表不进行操作</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSHX list:zhang:1 name1 name2 name3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;list:zhang&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;name&quot;</span></span><br><span class="line">4) <span class="string">&quot;hash:zhang&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>RPUSH 和 RPUSHX 命令将多个元素<strong>顺序</strong>追加到列表尾部</p>
<ul>
<li>RPUSH key element [element …] 批量追加多个元素到列表尾部并返回列表的长度, 列表为空或者不存在新建</li>
<li>RPUSHX key element [element …] 批量追加多个元素到<strong>已存在</strong>的列表尾部并返回列表的长度, 列表为空或者不存在返回 0</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH list:zhang name1 name2 name3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; RPUSHX list:zhang name1 name4 name5 name6</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; RPUSH list:zhang name1 name4 name5 name6</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line"></span><br><span class="line"><span class="comment"># RPUSH 和 RPUSHX 命令将多个元素**顺序**追加到列表尾部</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list:zhang 0 11</span><br><span class="line"> 1) <span class="string">&quot;name1&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;name2&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;name3&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;name1&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;name4&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;name5&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;name6&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;name1&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;name4&quot;</span></span><br><span class="line">10) <span class="string">&quot;name5&quot;</span></span><br><span class="line">11) <span class="string">&quot;name6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RPUSHX 对空列表或不存在的列表不进行操作</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSHX list:zhang:1 name1 name2 name3</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;list:zhang&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;name&quot;</span></span><br><span class="line">4) <span class="string">&quot;hash:zhang&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="指定位置添加"><a href="#指定位置添加" class="headerlink" title="指定位置添加"></a>指定位置添加</h5><ul>
<li><p>LSET key index element 设置列表指定索引的值, 操作成功返回 ok, 列表为空或者不存在或者索引参数超出范围返回错误信息</p>
</li>
<li><p>LINSERT key BEFORE|AFTER pivot element 在列表的指定元素第 1 次出现的前或后添加元素, 列表为空或者不存在不执行任何操作, 否则未找到指定元素返回 -1, 元素添加成功返回列表的长度</p>
<ul>
<li>BEFORE | AFTER 添加的位置</li>
<li>pivot 查找的基准元素</li>
<li>element 插入的元素</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 list 中第 1 次出现 a 的前面添加 hello</span></span><br><span class="line">127.0.0.1:6379&gt; LINSERT list BEFORE a hello</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1 <span class="comment"># 遍历 list</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) <span class="string">&quot;d&quot;</span></span><br><span class="line">4) <span class="string">&quot;c&quot;</span></span><br><span class="line">5) <span class="string">&quot;b&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><h5 id="修剪列表"><a href="#修剪列表" class="headerlink" title="修剪列表"></a>修剪列表</h5><ul>
<li>LTRIM key start stop 对列表不包含在 start 到 stop 区间的元素进行删除, 执行成功返回 ok<ul>
<li>start, end 只支持整数, 其他类型会报错</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH mylist hello world gg yy hehe haha</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist - +</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist -inf +inf</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist [1 [4</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist 1 4.5</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; LTRIM mylist 1 4</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;hehe&quot;</span></span><br><span class="line">2) <span class="string">&quot;yy&quot;</span></span><br><span class="line">3) <span class="string">&quot;gg&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="批量移除相同元素"><a href="#批量移除相同元素" class="headerlink" title="批量移除相同元素"></a>批量移除相同元素</h5><ul>
<li>LREM key count element 移除列表指定数量的元素并返回移除元素的数量, 列表为空或者不存在返回 0<ul>
<li>count &gt; 0 从列表头部开始向尾部搜索, 移除与 element 相等的元素, 数量为 count</li>
<li>count &lt; 0 从列表尾部开始向头部搜索, 移除与 element 相等的元素, 数量为 count 的绝对值</li>
<li>count = 0 移除列表中与 element 相等的所有的元素</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *  <span class="comment"># 获取当前数据库的 key</span></span><br><span class="line">1) <span class="string">&quot;sex&quot;</span></span><br><span class="line">2) <span class="string">&quot;addr&quot;</span></span><br><span class="line">3) <span class="string">&quot;name&quot;</span></span><br><span class="line">4) <span class="string">&quot;runoob&quot;</span></span><br><span class="line">5) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LPUSH list a b a d a c d a b d  <span class="comment"># 创建列表 list</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; LREM list 3 a   <span class="comment"># 移除列表中 3 个元素 a</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 7</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;d&quot;</span></span><br><span class="line">4) <span class="string">&quot;c&quot;</span></span><br><span class="line">5) <span class="string">&quot;d&quot;</span></span><br><span class="line">6) <span class="string">&quot;b&quot;</span></span><br><span class="line">7) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="批量移除相邻元素"><a href="#批量移除相邻元素" class="headerlink" title="批量移除相邻元素"></a>批量移除相邻元素</h5><ul>
<li><p>LPOP key [count] 移除并返回列表头部指定数量的元素, count 默认为 1, 列表为空或者不存在返回 &lt;nil&gt;</p>
</li>
<li><p>BLPOP key [key…] timeout 阻塞版的 <code>LPOP</code>, 从多个列表中第 1 个非空列表中的头部移除并返回 1 个元素, 如果列表为空会阻塞列表直到等待超时或发现可弹出元素为止, 如果列表为空或者超时返回 &lt;nil&gt;<br>否则, 返回 1 个含有两个元素的列表, 第 1 个元素是被弹出元素所属的列表, 第 2 个元素是被弹出的元素</p>
</li>
<li><p>RPOP key [count] 移除并返回列表尾部指定数量的元素, count 默认为 1, 列表为空或者不存在返回 &lt;nil&gt;</p>
</li>
<li><p>BRPOP key [key …] timeout 阻塞版的 <code>RPOP</code>, 从多个列表中第 1 个非空列表中的尾部移除并返回 1 个元素, 返回值 <code>BLPOP</code></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 list 尾部添加元素</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list c d e</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># newlist 为空或者不存在, 会删除 list 的尾部的元素</span></span><br><span class="line">127.0.0.1:6379&gt; BRPOP newlist list 0</span><br><span class="line">1) <span class="string">&quot;list&quot;</span></span><br><span class="line">2) <span class="string">&quot;e&quot;</span></span><br><span class="line"><span class="comment"># 向 newlist 尾部添加元素</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH newlist g a b f</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"><span class="comment"># list 和 newlist 都是非空的列表, 会删除返回 list 的头部的元素</span></span><br><span class="line">127.0.0.1:6379&gt; BLPOP list newlist 0</span><br><span class="line">1) <span class="string">&quot;list&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; del list  <span class="comment"># 删除 list</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># list 为空或者不存在, 会删除返回 newlist 的头部的元素</span></span><br><span class="line">127.0.0.1:6379&gt; BLPOP list newlist 0</span><br><span class="line">1) <span class="string">&quot;newlist&quot;</span></span><br><span class="line">2) <span class="string">&quot;g&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>LMPOP numkeys key [key …] LEFT|RIGHT [COUNT count] 从多个列表中第 1 个非空列表中指定位置批量移除指定数量的元素并返回操作成功的 key 和移除的元素, 如果列表都为空或者不存在返回 &lt;nil&gt;, Redis 7.0.0 支持<ul>
<li>numkeys 指定列表名的数量, 值和 key 的数量不一致时返回语法错误</li>
<li>LEFT | RIGHT 移除元素的位置</li>
<li>COUNT count 移除元素的数量, 默认为 1</li>
</ul>
</li>
<li>BLMPOP timeout numkeys key [key …] LEFT|RIGHT [COUNT count] 阻塞版的 <code>LMPOP</code>, 列表为空时会阻塞直到等待超时或发现可弹出元素为止, Redis 7.0.0 支持</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPUSH list a b c d e f  <span class="comment"># 创建列表 list</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; RPUSH newlist 1 2 3 4 5 6 <span class="comment"># 创建列表 newlist</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"><span class="comment"># list 不为空, 从 list 的头部删除返回 3 个 元素</span></span><br><span class="line">127.0.0.1:6379&gt; LMPOP 2 list newlist LEFT COUNT 3</span><br><span class="line">1) <span class="string">&quot;list&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;a&quot;</span></span><br><span class="line">   2) <span class="string">&quot;b&quot;</span></span><br><span class="line">   3) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; del list  <span class="comment"># 删除列表 list</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># list 为空, 从 newlist 的尾部删除返回 3 个元素</span></span><br><span class="line">127.0.0.1:6379&gt; LMPOP 2 list newlist right COUNT 3</span><br><span class="line">1) <span class="string">&quot;newlist&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;6&quot;</span></span><br><span class="line">   2) <span class="string">&quot;5&quot;</span></span><br><span class="line">   3) <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="删除元素添加到其他列表"><a href="#删除元素添加到其他列表" class="headerlink" title="删除元素添加到其他列表"></a>删除元素添加到其他列表</h4><ul>
<li>BLMOVE source destination LEFT|RIGHT LEFT|RIGHT timeout 阻塞版的 <code>LMOVE</code>, 如果列表为空会阻塞直到等待超时或发现可弹出元素为止, 6.2 开始可用代替 <code>BRPOPLPUSH</code><ul>
<li>LEFT|RIGHT 分别表示源列表移除元素的位置, 目标列表添加元素的位置</li>
<li>timeout 超时时间(单位秒)</li>
</ul>
</li>
</ul>
<blockquote>
<p>BRPOPLPUSH source destination timeout 移除列表的最后一个元素添加到另一个列表的头部并返回操作的元素, 如果列表为空会阻塞列表直到等待超时或发现可弹出元素为止, 6.2 开始废弃</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 list 尾部添加元素</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list a b c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># 向 newlist 尾部添加元素</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH newlist 1 2 3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># 从 list 头部移除一个元素添加到 newlist 的尾部</span></span><br><span class="line">127.0.0.1:6379&gt; BLMOVE list newlist LEFT RIGHT 0</span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment"># 遍历 newlist</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE newlist 0 -1</span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;3&quot;</span></span><br><span class="line">4) <span class="string">&quot;a&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阻塞执行等待超时或者有可操作元素</span></span><br><span class="line">127.0.0.1:6379&gt; BRPOPLPUSH list newlist 10</span><br><span class="line">(nil)</span><br><span class="line">(10.05s)</span><br><span class="line"><span class="comment"># 向 list 尾部添加元素</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list a b c d</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"><span class="comment"># 从 list 尾部移除一个元素添加到 newlist 的头部</span></span><br><span class="line">127.0.0.1:6379&gt; BRPOPLPUSH list newlist</span><br><span class="line"><span class="string">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>LMOVE source destination LEFT|RIGHT LEFT|RIGHT 移除源列表中的头部或者尾部的元素添加到目标列表的头部或者尾部并返回移除的元素, 源列表为空或者不存在返回 &lt;nil&gt; 6.2 开始可用代替 <code>RPOPLPUSH</code><ul>
<li>LEFT|RIGHT 分别表示源列表移除元素的位置, 目标列表添加元素的位置</li>
</ul>
</li>
</ul>
<blockquote>
<p>RPOPLPUSH source destination 移除列表的最后一个元素添加到另一个列表的头部并返回操作的元素, 源列表为空或者不存在返回 &lt;nil&gt; 6.2 开始废弃</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 list 尾部添加元素</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list a b c d e f g</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line"><span class="comment"># 从 list 头部移除元素 a 添加到 newlist 的头部</span></span><br><span class="line">127.0.0.1:6379&gt; LMOVE list newlist LEFT LEFT</span><br><span class="line"><span class="string">&quot;a&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE newlist 0 -1 <span class="comment"># 遍历 newlist</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="comment"># 从 list 头部移除元素 b 添加到 newlist 的尾部</span></span><br><span class="line">127.0.0.1:6379&gt; LMOVE list newlist LEFT RIGHT</span><br><span class="line"><span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE newlist 0 -1  <span class="comment"># 遍历 newlist</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 从 list 尾部移除元素 g 添加到 newlist 的头部</span></span><br><span class="line">127.0.0.1:6379&gt; LMOVE list newlist RIGHT LEFT</span><br><span class="line"><span class="string">&quot;g&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE newlist 0 -1  <span class="comment"># 遍历 newlist</span></span><br><span class="line">1) <span class="string">&quot;g&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 从 list 尾部移除元素 f 添加到 newlist 的头部</span></span><br><span class="line">127.0.0.1:6379&gt; LMOVE list newlist RIGHT RIGHT</span><br><span class="line"><span class="string">&quot;f&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE newlist 0 -1  <span class="comment"># 遍历 newlist</span></span><br><span class="line">1) <span class="string">&quot;g&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="查找遍历列表"><a href="#查找遍历列表" class="headerlink" title="查找遍历列表"></a>查找遍历列表</h4><ul>
<li><p>LLEN key 返回列表长度, 0 表示列表为空或者不存在</p>
</li>
<li><p>LRANGE key start stop 遍历列表指定区间的元素, 列表为空或者不存在返回 (empty array)</p>
<ul>
<li>start, end 支持整数, 其他类型会报错</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH mylist hello world gg yy hehe haha</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist - +</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist -inf +inf</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 1 4.5</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist (1 (4</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist [1 [4</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 1 4</span><br><span class="line">1) <span class="string">&quot;hehe&quot;</span></span><br><span class="line">2) <span class="string">&quot;yy&quot;</span></span><br><span class="line">3) <span class="string">&quot;gg&quot;</span></span><br><span class="line">4) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="查找指定索引元素"><a href="#查找指定索引元素" class="headerlink" title="查找指定索引元素"></a>查找指定索引元素</h5><ul>
<li>LINDEX key index 获取列表中指定索引的元素, 如果列表或者索引不存在返回 &lt;nil&gt;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE list:zhang 0 11</span><br><span class="line"> 1) <span class="string">&quot;li10&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;li9&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;li8&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;li7&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;li6&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;li5&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;li4&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;li3&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;li2&quot;</span></span><br><span class="line">10) <span class="string">&quot;li1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list:zhang 11</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; LINDEX list:zhang 5</span><br><span class="line"><span class="string">&quot;li5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list:zhang 8</span><br><span class="line"><span class="string">&quot;li2&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="查找匹配项的下标"><a href="#查找匹配项的下标" class="headerlink" title="查找匹配项的下标"></a>查找匹配项的下标</h5><ul>
<li><p>LPOS key element [RANK rank] [COUNT num-matches] [MAXLEN len] 返回列表中匹配元素的下标, 列表为空或者不存在返回 &lt;nil&gt;</p>
<ul>
<li>RANK 指定匹配项第几次出现的下标, 默认为 1</li>
<li>COUNT 指定匹配项的下标的个数, 默认为 1</li>
<li>MAXLEN 指定命令对列表项进行比较的次数</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建列表 list</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list a b c a b c b d c a b a c d b c a d</span><br><span class="line">(<span class="built_in">integer</span>) 18</span><br><span class="line"><span class="comment"># 查找元素 b 第 1 次出现的下标</span></span><br><span class="line">127.0.0.1:6379&gt; LPOS list b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 查找元素 b 第 3 次出现的下标</span></span><br><span class="line">127.0.0.1:6379&gt; LPOS list b RANK 3</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"><span class="comment"># 查找元素 b 出现 3 次的下标</span></span><br><span class="line">127.0.0.1:6379&gt; LPOS list b COUNT 3</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 4</span><br><span class="line">3) (<span class="built_in">integer</span>) 6</span><br><span class="line"><span class="comment"># 查找元素 b 第 2 次开始出现 3 次的下标</span></span><br><span class="line">127.0.0.1:6379&gt; LPOS list b RANK 2 COUNT 3</span><br><span class="line">1) (<span class="built_in">integer</span>) 4</span><br><span class="line">2) (<span class="built_in">integer</span>) 6</span><br><span class="line">3) (<span class="built_in">integer</span>) 10</span><br><span class="line"><span class="comment"># 查找元素 b 第 3 次开始出现 4 次的下标</span></span><br><span class="line">127.0.0.1:6379&gt; LPOS list b RANK 3 COUNT 4</span><br><span class="line">1) (<span class="built_in">integer</span>) 6</span><br><span class="line">2) (<span class="built_in">integer</span>) 10</span><br><span class="line">3) (<span class="built_in">integer</span>) 14</span><br><span class="line"><span class="comment"># 查找 10 次元素 b 第 2 次开始出现 4 次的下标</span></span><br><span class="line">127.0.0.1:6379&gt; LPOS list b RANK 2 COUNT 4 MAXLEN 10</span><br><span class="line">1) (<span class="built_in">integer</span>) 4</span><br><span class="line">2) (<span class="built_in">integer</span>) 6</span><br><span class="line"><span class="comment"># 查找 15 次元素 b 第 3 次开始出现 2 次的下标</span></span><br><span class="line">127.0.0.1:6379&gt; LPOS list b RANK 3 COUNT 2 MAXLEN 15</span><br><span class="line">1) (<span class="built_in">integer</span>) 6</span><br><span class="line">2) (<span class="built_in">integer</span>) 10</span><br></pre></td></tr></table></figure>

<h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><h5 id="抢红包"><a href="#抢红包" class="headerlink" title="抢红包"></a>抢红包</h5><p>将抢红包的用户信息用 list 存储作为队列的形式保证先进先出的规则</p>
]]></content>
      <categories>
        <category>server</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise</title>
    <url>/2021/06/0bc450a2cb90/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>是异步编程的一种解决方案, 解决 js 异步回调地狱的问题</p>
</blockquote>
<ul>
<li><p>状态唯一</p>
<ul>
<li>pending: 初始状态, 既没有被兑现, 也没有被拒绝</li>
<li>fulfilled: 操作成功完成</li>
<li>rejected: 操作失败</li>
</ul>
</li>
<li><p>状态不受外界影响</p>
</li>
</ul>
<h3 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="手动实现"><a href="#手动实现" class="headerlink" title="手动实现"></a>手动实现</h3><h4 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 状态常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建一个 MyPromise 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="comment">// 储存状态的变量，初始值是 pending</span></span><br><span class="line">  status = <span class="variable constant_">PENDING</span>;</span><br><span class="line">  <span class="comment">// 成功之后的值</span></span><br><span class="line">  value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 失败之后的原因</span></span><br><span class="line">  reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储成功回调函数</span></span><br><span class="line">  onFulfilledCallbacks = [];</span><br><span class="line">  <span class="comment">// 存储失败回调函数</span></span><br><span class="line">  onRejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="comment">// 状态修改为成功</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line">        <span class="comment">// 保存成功之后的值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="comment">// shift操作改变原数组, 循环从队列取出第一个方法执行</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">shift</span>()(value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="comment">// 状态成功为失败</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">        <span class="comment">// 保存失败后的原因</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="comment">// shift操作改变原数组, 循环从队列取出第一个方法执行</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">shift</span>()(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error); <span class="comment">// 失败执行 reject 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> realOnFulfilled =</span><br><span class="line">      <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function">(<span class="params">value</span>) =&gt;</span> value;</span><br><span class="line">    <span class="keyword">const</span> realOnRejected =</span><br><span class="line">      <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function">(<span class="params">reason</span>) =&gt;</span> <span class="keyword">throw</span> <span class="title class_">Error</span>(reason);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">      <span class="title function_">realOnFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="title function_">realOnRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="comment">// 等待状态将成功和失败回调存储起来</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> <span class="title function_">realOnFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>));</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> <span class="title function_">realOnRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">const</span> realOnRejected =</span><br><span class="line">      <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function">(<span class="params">reason</span>) =&gt;</span> <span class="keyword">throw</span> <span class="title class_">Error</span>(reason);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="title function_">realOnRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> <span class="title function_">realOnRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;gg&#x27;</span>), <span class="number">5000</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>, res),</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 5秒后输出: &#x27;res&#x27; gg</span></span><br></pre></td></tr></table></figure>

<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resolve 静态方法</span></span><br><span class="line"><span class="keyword">static</span> resolve (parameter) &#123;</span><br><span class="line">  <span class="comment">// 如果传入 MyPromise 就直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (parameter <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> parameter;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO 如果是一个 thenable 对象, 则通过传入一对解决函数作为参数调用该 thenable 对象的 then 方法后</span></span><br><span class="line">  <span class="comment">// 得到的状态作为返回的 Promise 对象的状态</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(parameter) === <span class="string">&#x27;[object Object]&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> parameter.<span class="property">then</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(parameter.<span class="property">then</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转成常规方式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(parameter);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reject 静态方法, 不管是否是 Promise 都将返回新的 Promise</span></span><br><span class="line"><span class="keyword">static</span> reject (reason) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(reason);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> realOnFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">  <span class="keyword">const</span> realOnRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> <span class="keyword">throw</span> <span class="title class_">Error</span>(reason);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">  <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fulfilledMicrotask</span> = (<span class="params"></span>) =&gt;  &#123;</span><br><span class="line">      <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">      <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">realOnFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">          <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">          <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">rejectedMicrotask</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">      <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">realOnRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">          <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">          <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">      <span class="title function_">fulfilledMicrotask</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="title function_">rejectedMicrotask</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="comment">// 等待</span></span><br><span class="line">      <span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">      <span class="comment">// 等到执行成功失败函数的时候再传递</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(fulfilledMicrotask);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(rejectedMicrotask);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理 MyPromise 实例之间的关系</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断x是不是 MyPromise 实例对象</span></span><br><span class="line">  <span class="keyword">if</span>(x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span></span><br><span class="line">    <span class="comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span></span><br><span class="line">    <span class="comment">// 简化之后</span></span><br><span class="line">    x.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 普通值</span></span><br><span class="line">    <span class="title function_">resolve</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 状态常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建一个 MyPromise 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  <span class="comment">// 储存状态的变量，初始值是 pending</span></span><br><span class="line">  status = <span class="variable constant_">PENDING</span>;</span><br><span class="line">  <span class="comment">// 成功之后的值</span></span><br><span class="line">  value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 失败之后的原因</span></span><br><span class="line">  reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储成功回调函数</span></span><br><span class="line">  onFulfilledCallbacks = [];</span><br><span class="line">  <span class="comment">// 存储失败回调函数</span></span><br><span class="line">  onRejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="comment">// 状态修改为成功</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line">        <span class="comment">// 保存成功之后的值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="comment">// shift操作改变原数组, 循环从队列取出第一个方法执行</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">shift</span>()(value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="comment">// 状态成功为失败</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">        <span class="comment">// 保存失败后的原因</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="comment">// shift操作改变原数组, 循环从队列取出第一个方法执行</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">shift</span>()(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(error); <span class="comment">// 失败执行 reject 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// resolve 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">parameter</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果传入 MyPromise 就直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (parameter <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> parameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转成常规方式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(parameter);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reject 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> realOnFulfilled =</span><br><span class="line">      <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function">(<span class="params">value</span>) =&gt;</span> value;</span><br><span class="line">    <span class="keyword">const</span> realOnRejected =</span><br><span class="line">      <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function">(<span class="params">reason</span>) =&gt;</span> <span class="keyword">throw</span> <span class="title class_">Error</span>(reason);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">fulfilledMicrotask</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">        <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">realOnFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">rejectedMicrotask</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">        <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">realOnRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">            <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 判断状态</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="title function_">fulfilledMicrotask</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="title function_">rejectedMicrotask</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">        <span class="comment">// 等待</span></span><br><span class="line">        <span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">        <span class="comment">// 等到执行成功失败函数的时候再传递</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(fulfilledMicrotask);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(rejectedMicrotask);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">const</span> realOnRejected =</span><br><span class="line">      <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function">(<span class="params">reason</span>) =&gt;</span> <span class="keyword">throw</span> <span class="title class_">Error</span>(reason);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="title function_">realOnRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> <span class="title function_">realOnRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 MyPromise 实例之间的关系</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reject</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断x是不是 MyPromise 实例对象</span></span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span></span><br><span class="line">    <span class="comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span></span><br><span class="line">    <span class="comment">// 简化之后</span></span><br><span class="line">    x.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 普通值</span></span><br><span class="line">    <span class="title function_">resolve</span>(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="官方-API"><a href="#官方-API" class="headerlink" title="官方 API"></a>官方 API</h3><ul>
<li>Promise.resolve() 将给定的值转换为一个 Promise<ul>
<li>如果该值本身是一个 Promise, 将该 Promise 返回</li>
<li>如果该值是一个 thenable 对象, 将调用其 then() 方法及其两个回调函数</li>
<li>否则, 返回的 Promise 将以该值兑现</li>
</ul>
</li>
<li>Promise.reject() 返回一个已拒绝的 Promise 对象, 拒绝原因为给定的参数</li>
<li>Promise.all() 在<strong>所有</strong>传入的 Promise 都被兑现时兑现, 在<strong>任意一个</strong> Promise 被拒绝时拒绝</li>
<li>Promise.allSettled() 在<strong>所有</strong>的 Promise 都被敲定时兑现</li>
<li>Promise.any() 在<strong>任意一个</strong> Promise 被兑现时兑现, 仅在<strong>所有</strong>的 Promise 都被拒绝时才会拒绝</li>
<li>Promise.race() 在<strong>任意一个</strong> Promise 敲定时敲定, 即在<strong>任意一个</strong> Promise 被兑现时兑现, 在<strong>任意一个</strong> Promise 被拒绝时拒绝</li>
</ul>
]]></content>
      <categories>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>js</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-Other-Structs</title>
    <url>/2022/11/4c5a8bb1e1ca/</url>
    <content><![CDATA[<h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p>HyperLogLog 是用来做基数统计的算法, 优点是在输入元素的数量或者体积非常大时, 计算基数所需的空间总是固定的、并且是很小的. 每个 HyperLogLog 键只需要花费 12KB 内存, 就可以计算接近 2^64 个不同元素的基数, 并产生标准误差接近于 0.81% 的近似值, 因为 HyperLogLog 只会根据输入元素来计算基数, 而不会储存输入元素本身</p>
<blockquote>
<p>比如数据集 {1, 3, 5, 7, 5, 7, 8}, 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为 5. 基数估计就是在误差可接受的范围内，快速计算基数</p>
</blockquote>
<ul>
<li><p>PFADD key [element [element …]] 添加元素</p>
</li>
<li><p>PFCOUNT key [key …] 根据 key 计算基数并返回, 0 表示 key 不存在</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD hll foo bar zap</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll zap zap zap</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; PFADD hll foo bar</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT hll</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; PFADD other-hll 1 2 3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT hll other-hll</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li>PFDEBUG subcommand key 内部命令, 一般用于开发和测试 Redis</li>
<li>PFSELFTEST 内部命令, 一般用于开发和测试 Redis</li>
<li>PFMERGE destkey sourcekey [sourcekey …] 将多个 HyperLogLog 值合并为 1 个唯一值, 该值将近似于源 HyperLogLog 结构的观察集的并集的基数, 如果 destkey 不存在则新建, 如果 destkey 已存在则将期作为源集之一, 其基数将包含在计算的 HyperLogLog 的基数中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD hll foo bar zap a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PFADD other-hll a b c foo</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 不存在的 destkey</span></span><br><span class="line">127.0.0.1:6379&gt; PFMERGE res-hll hll other-hll</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT res-hll</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已存在的 destkey</span></span><br><span class="line">127.0.0.1:6379&gt; PFADD ex-hll gg yy hehe haha</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PFMERGE ex-hll hll other-hll</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT ex-hll  <span class="comment"># 将源集也计算在内</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br></pre></td></tr></table></figure>

<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><h5 id="统计网站访问者的-IP-地址"><a href="#统计网站访问者的-IP-地址" class="headerlink" title="统计网站访问者的 IP 地址"></a>统计网站访问者的 IP 地址</h5><h5 id="搜索词"><a href="#搜索词" class="headerlink" title="搜索词"></a>搜索词</h5><h5 id="电子邮件地址"><a href="#电子邮件地址" class="headerlink" title="电子邮件地址"></a>电子邮件地址</h5><h3 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h3><p>Redis 地理空间, 该类型就是元素的 2 维坐标, 在地图上就是经纬度. Redis 基于该类型, 提供了经纬度设置、查询、范围查询、距离查询、经纬度 Hash 等常见操作<br>Geospatial 底层实现原理实现为 Zset 类型, 可以使用 Zset 的方法</p>
<blockquote>
<p>比如微信的朋友圈查找附近的人, 或者游戏中获取附近的游戏玩家</p>
</blockquote>
<h4 id="规定"><a href="#规定" class="headerlink" title="规定"></a>规定</h4><p>地球两极不能添加<br>EPSG:900913 / EPSG:3785 / OSGEO:41001 标准规定</p>
<ul>
<li>有效经度在 -180 度到 180 度</li>
<li>有效维度在 -85.05112878 度到 85.05112878 度</li>
</ul>
<h4 id="添加成员"><a href="#添加成员" class="headerlink" title="添加成员"></a>添加成员</h4><ul>
<li>GEOADD key [NX|XX] [CH] longitude latitude member [longitude latitude member …] 添加地理位置信息(经度、纬度、名称)到指定集合中, 通常只返回添加的新成员的数量<ul>
<li>NX 仅添加新成员, 不再更新已存在的成员</li>
<li>XX 仅更新已经存在的成员, 不再添加新成员</li>
<li>CH 将 <code>GEOADD</code> 返回值统计新成员的添加数量修改为更改的成员总数, 包含更新已存在的数量和新添加的数量</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOADD citys 116.405285 39.904989 beijing 121.472644 31.231706 shanghai</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; GEOADD citys 113.280637 23.125178 guangzhou 114.05571 22.52245 shenzhen</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; GEOADD citys 106.504962 29.533155 chongqing 112.34882 16.831039 sansha</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; GEOADD citys 113.665412 34.757975 zhengzhou 103.823557 36.058039 lanzhou</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; GEOADD citys 108.948024 34.263161 xian 115.892151 28.676493 nanchang</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅更新成员信息并返回更新的数量</span></span><br><span class="line">127.0.0.1:6379&gt; GEOADD citys XX CH 113.88311 22.55371 shenzhen</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 zcard 获取集合数量</span></span><br><span class="line">127.0.0.1:6379&gt; ZCARD citys</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line"><span class="comment"># 使用 Zset 的按分值和字典统计成员数量</span></span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT citys - +</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT citys -inf +inf</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT citys 0 +inf</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE citys 0 -1</span><br><span class="line"> 1) <span class="string">&quot;sansha&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;lanzhou&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;xian&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;guangzhou&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;nanchang&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;zhengzhou&quot;</span></span><br><span class="line">10) <span class="string">&quot;beijing&quot;</span></span><br><span class="line"><span class="comment"># 使用 zset 的 ZRANGE 遍历集合返回经纬度 GEOHASH 的无符号整数</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE citys 0 -1 WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;sansha&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;3974440648358025&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;chongqing&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;4026042117887371&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;shenzhen&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;4046340107214121&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;guangzhou&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;4046533764066819&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">10) <span class="string">&quot;4054803464817068&quot;</span></span><br><span class="line">11) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">12) <span class="string">&quot;4069885370671010&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="经纬度"><a href="#经纬度" class="headerlink" title="经纬度"></a>经纬度</h4><h5 id="获取经纬度"><a href="#获取经纬度" class="headerlink" title="获取经纬度"></a>获取经纬度</h5><ul>
<li>GEOPOS key member [member …] 返回指定成员的经纬度信息, 如果集合为空或者不存在或者指定成员不存在则返回 &lt;nil&gt;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOPOS city1 beijing shanghai</span><br><span class="line">1) (nil)</span><br><span class="line">2) (nil)</span><br><span class="line">127.0.0.1:6379&gt; GEOPOS citys beijing hello</span><br><span class="line">1) 1) <span class="string">&quot;116.40528291463851929&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.9049884229125027&quot;</span></span><br><span class="line">2) (nil)</span><br><span class="line">127.0.0.1:6379&gt; GEOPOS citys beijing shanghai</span><br><span class="line">1) 1) <span class="string">&quot;116.40528291463851929&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.9049884229125027&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;121.47264629602432251&quot;</span></span><br><span class="line">   2) <span class="string">&quot;31.23170490709807012&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="获取经纬度-hash"><a href="#获取经纬度-hash" class="headerlink" title="获取经纬度 hash"></a>获取经纬度 hash</h5><ul>
<li>GEOHASH key member [member …] 返回指定成员的经纬度信息的 hash 编码后的字符串表示, 如果集合为空或者不存在或者指定成员不存在则返回 &lt;nil&gt;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOHASH citys hello world</span><br><span class="line">1) (nil)</span><br><span class="line">2) (nil)</span><br><span class="line">127.0.0.1:6379&gt; GEOHASH citys beijing shanghai sansha</span><br><span class="line">1) <span class="string">&quot;wx4g0b7xrt0&quot;</span></span><br><span class="line">2) <span class="string">&quot;wtw3sjt9vg0&quot;</span></span><br><span class="line">3) <span class="string">&quot;w6zzsxczvm0&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取指定成员间距离"><a href="#获取指定成员间距离" class="headerlink" title="获取指定成员间距离"></a>获取指定成员间距离</h4><ul>
<li>GEODIST key member1 member2 [M|KM|FT|MI] 返回集合指定成员之间的距离, 默认距离单位 M, 如果集合为空或者不存在或者指定成员不存在则返回 &lt;nil&gt;<ul>
<li>M 米</li>
<li>KM 公里</li>
<li>FT 英里</li>
<li>MI 英尺</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEODIST citys1 beijing shanghai KM</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; GEODIST citys beijing hello KM</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; GEODIST citys beijing shanghai KM</span><br><span class="line"><span class="string">&quot;1067.5980&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST citys beijing shanghai</span><br><span class="line"><span class="string">&quot;1067597.9668&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST citys beijing shanghai FT</span><br><span class="line"><span class="string">&quot;3502618.0013&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST citys beijing shanghai MI</span><br><span class="line"><span class="string">&quot;663.3763&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEODIST citys beijing sansha KM</span><br><span class="line"><span class="string">&quot;2596.1770&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="范围搜索"><a href="#范围搜索" class="headerlink" title="范围搜索"></a>范围搜索</h4><ul>
<li><p>GEOSEARCH key &lt;FROMMEMBER member|FROMLONLAT longitude latitude&gt; &lt;BYRADIUS radius &lt;M|KM|FT|MI&gt;|BYBOX width height &lt;M|KM|FT|MI&gt;&gt; [ASC|DESC] [COUNT count [ANY]] [WITHCOORD] [WITHDIST] [WITHHASH] 返回集合中符合属于给定形状区域的边界内的成员的信息, 默认返回所有的匹配项且没有排序, 如果集合为空或者不存在返回 (empty array), Redis 6.2.0 支持</p>
<ul>
<li>FROMMEMBER 使用给定的已存在的成员进行搜索, 如果指定成员不属于非空集合则报错 ERR could not decode requested zset member</li>
<li>FROMLONLAT 使用给定的 longitude 和 latitude 搜索, 如果指定的经纬度超出范围则报错 ERR invalid longitude,latitude pair</li>
<li>BYRADIUS 行为类似于 <code>GEORADIUS</code>, 根据给定半径的圆形区域内搜索</li>
<li>BYBOX 根据给定的 width 和 height 在轴对齐的矩形区域内搜索</li>
<li>ASC 相对于中心点, 从近到远对返回的匹配项进行排序</li>
<li>DESC 相对于中心点, 从远到近对返回的匹配项进行排序</li>
<li>COUNT 限制匹配项的数量</li>
<li>ANY 找到足够的匹配项就立刻返回, 有可能匹配项不是最接近指定点的位置, 但是服务器生成这些结果所投入的精力要少的多<br>未指定此参数时, 搜索命令将执行与指定匹配区域匹配项数量成正比的操作, 并对其进行排序, 因此, 即使返回少量结果, 使用非常小的 count 查询非常大的区域也可能会很慢.</li>
<li>WITHCOORD 返回匹配项的经纬度</li>
<li>WITHDIST 返回匹配项距离指定中心点的距离, 距离单位和指定圆形区域搜索或者矩形区域搜索的单位相同</li>
<li>WITHHASH 返回匹配项 <code>GEOHASH</code> 编码的无符号整数</li>
</ul>
</li>
</ul>
<blockquote>
<p>GEORADIUS 6.2.0 开始废弃, 使用 <code>GEOSEARCH BYRADIUS</code> 代替<br>GEORADIUS_RO 6.2.0 开始废弃, 使用 <code>GEOSEARCH BYRADIUS</code> 代替<br>GEORADIUSBYMEMBER 6.2.0 开始废弃, 使用 <code>GEOSEARCH FROMMEMBER member BYRADIUS radius</code> 代替<br>GEORADIUSBYMEMBER_RO 6.2.0 开始废弃, 使用 <code>GEOSEARCH FROMMEMBER member BYRADIUS radius</code> 代替</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集合为空或者不存在返回 empty array</span></span><br><span class="line">127.0.0.1:6379&gt; GEOSEARCH citys1 FROMMEMBER zhengzhou BYRADIUS 500 KM</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># 指定成员不属于非空集合报错</span></span><br><span class="line">127.0.0.1:6379&gt; GEOSEARCH citys FROMMEMBER wuhan BYRADIUS 500 KM</span><br><span class="line">(error) ERR could not decode requested zset member</span><br><span class="line"><span class="comment"># 经纬度超出范围限制报错</span></span><br><span class="line">127.0.0.1:6379&gt; GEOSEARCH citys FROMLONLAT -220.10 26.31 BYRADIUS 500 KM</span><br><span class="line">(error) ERR invalid longitude,latitude pair -220.100000,26.310000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以指定成员位置为中心点在半径 700KM 的圆形区域内搜索符合条件的成员</span></span><br><span class="line"><span class="comment"># 返回匹配项的经纬度和与中心点的距离的的信息</span></span><br><span class="line"><span class="comment"># 并按相对于中心点, 从远到近对返回的匹配项进行排序</span></span><br><span class="line">127.0.0.1:6379&gt; GEOSEARCH citys FROMMEMBER nanchang BYRADIUS 700 KM DESC WITHCOORD WITHDIST</span><br><span class="line">1) 1) <span class="string">&quot;guangzhou&quot;</span></span><br><span class="line">   2) <span class="string">&quot;670.3933&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;113.28063815832138062&quot;</span></span><br><span class="line">      2) <span class="string">&quot;23.12517743834835215&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">   2) <span class="string">&quot;608.1426&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;121.47264629602432251&quot;</span></span><br><span class="line">      2) <span class="string">&quot;31.23170490709807012&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;nanchang&quot;</span></span><br><span class="line">   2) <span class="string">&quot;0.0000&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;115.89214950799942017&quot;</span></span><br><span class="line">      2) <span class="string">&quot;28.67649306190701708&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以指定经纬度为中心点(wuhan)在 宽 1500KM, 高 1500KM的轴对齐的矩形区域内搜索符合条件的成员</span></span><br><span class="line"><span class="comment"># 返回匹配项的经纬度和与中心点的距离的信息和对 GEOHASH 编码的无符号整数</span></span><br><span class="line"><span class="comment"># 并按相对于中心点, 从近到远对返回的匹配项进行排序后最多返回 3 条</span></span><br><span class="line">127.0.0.1:6379&gt; GEOSEARCH citys FROMLONLAT 114.298572 30.584355 BYBOX 1500 1500 KM ASC COUNT 3 WITHCOORD WITHDIST WITHHASH</span><br><span class="line">1) 1) <span class="string">&quot;nanchang&quot;</span></span><br><span class="line">   2) <span class="string">&quot;262.2278&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4051506205099900</span><br><span class="line">   4) 1) <span class="string">&quot;115.89214950799942017&quot;</span></span><br><span class="line">      2) <span class="string">&quot;28.67649306190701708&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;zhengzhou&quot;</span></span><br><span class="line">   2) <span class="string">&quot;467.9826&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4064942392187921</span><br><span class="line">   4) 1) <span class="string">&quot;113.66541177034378052&quot;</span></span><br><span class="line">      2) <span class="string">&quot;34.75797603259534441&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) <span class="string">&quot;647.7152&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 4040115616141630</span><br><span class="line">   4) 1) <span class="string">&quot;108.94802302122116089&quot;</span></span><br><span class="line">      2) <span class="string">&quot;34.2631604414749944&quot;</span></span><br><span class="line"><span class="comment"># COUNT 限制匹配项的数量, 第 4 条不返回</span></span><br><span class="line"><span class="comment"># 4) 1) &quot;shanghai&quot;</span></span><br><span class="line"><span class="comment">#    2) &quot;688.2826&quot;</span></span><br><span class="line"><span class="comment">#    3) (integer) 4054803464817068</span></span><br><span class="line"><span class="comment">#    4) 1) &quot;121.47264629602432251&quot;</span></span><br><span class="line"><span class="comment">#       2) &quot;31.23170490709807012&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="范围搜索存储"><a href="#范围搜索存储" class="headerlink" title="范围搜索存储"></a>范围搜索存储</h4><ul>
<li>GEOSEARCHSTORE destination source &lt;FROMMEMBER member|FROMLONLAT longitude latitude&gt; &lt;BYRADIUS radius &lt;M|KM|FT|MI&gt;|BYBOX width height &lt;M|KM|FT|MI&gt;&gt; [ASC|DESC] [COUNT count [ANY]] [STOREDIST] 命令同 <code>GEOSEARCH</code>, 区别是将结果存储到指定排序集合并返回指定集合的数量, 默认存储匹配项的名称和匹配项 <code>GEOHASH</code> 的无符号整数, 如果指定集合为空或者不存在则新建, 如果指定集合已存在则覆盖指定集合, Redis 6.2.0 支持<ul>
<li>部分参数同 <code>GEOSEARCH</code></li>
<li>STOREDIST 返回匹配项距离中心点的距离</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储匹配项的 GEOHASH 的无符号整数到指定排序集合中, 返回指定集合的数量</span></span><br><span class="line">127.0.0.1:6379&gt; GEOSEARCHSTORE destst citys FROMLONLAT 114.298572 30.584355 BYBOX 1500 1500 KM</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE dest 0 -1 WITHSCORES</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE destst 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">2) <span class="string">&quot;4040115616141630&quot;</span></span><br><span class="line">3) <span class="string">&quot;nanchang&quot;</span></span><br><span class="line">4) <span class="string">&quot;4051506205099900&quot;</span></span><br><span class="line">5) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">6) <span class="string">&quot;4054803464817068&quot;</span></span><br><span class="line">7) <span class="string">&quot;zhengzhou&quot;</span></span><br><span class="line">8) <span class="string">&quot;4064942392187921&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照匹配项距离中心点的距离排序后存储到指定集合中, 返回指定集合的数量</span></span><br><span class="line">127.0.0.1:6379&gt; GEOSEARCHSTORE destst citys FROMLONLAT 114.298572 30.584355 BYBOX 1500 1500 KM ASC STOREDIST</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE destst 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;nanchang&quot;</span></span><br><span class="line">2) <span class="string">&quot;262.22782004072326&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhengzhou&quot;</span></span><br><span class="line">4) <span class="string">&quot;467.98262044388139&quot;</span></span><br><span class="line">5) <span class="string">&quot;xian&quot;</span></span><br><span class="line">6) <span class="string">&quot;647.71515052090376&quot;</span></span><br><span class="line">7) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">8) <span class="string">&quot;688.28260742289308&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEOSEARCHSTORE destst citys FROMLONLAT 114.298572 30.584355 BYBOX 1500 1500 KM DESC STOREDIST</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE destst 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;nanchang&quot;</span></span><br><span class="line">2) <span class="string">&quot;262.22782004072326&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhengzhou&quot;</span></span><br><span class="line">4) <span class="string">&quot;467.98262044388139&quot;</span></span><br><span class="line">5) <span class="string">&quot;xian&quot;</span></span><br><span class="line">6) <span class="string">&quot;647.71515052090376&quot;</span></span><br><span class="line">7) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">8) <span class="string">&quot;688.28260742289308&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>Redis Bitmaps 是字符串数据类型的一种扩展, 可以将字符串视为位向量, 对 1 个或者多个字符串进行逐位操作.<br>可以把 Bitmaps 想象成一个以位为单位的数组, 数组中的每个单元只能存储 0 或 1, 数组的下标在 Bitmaps 中叫做偏移量, 单个 bitmaps 的最大长度是 512MB,即 2^32 个比特位.</p>
<blockquote>
<p>集合成员对应于整数 0-N 的情况的有效集合表示<br>对象权限, 其中每一位表示一个特定的权限, 类似于文件系统存储权限的方式</p>
</blockquote>
<h4 id="位存取"><a href="#位存取" class="headerlink" title="位存取"></a>位存取</h4><ul>
<li><p>SETBIT key offset value 设置指定偏移量的值 0 或 1, 当 key 的指定偏移量的值从 1 修改为 0 时返回 1, 其他情况返回 0</p>
<ul>
<li>offset 下标</li>
<li>value 值</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当指定偏移量的值从 1 修改为 0 则返回 1, 其他情况返回 0</span></span><br><span class="line">127.0.0.1:6379&gt; SETBIT user 0 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT user 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT user 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT user 1 0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<ul>
<li>GETBIT key offset 获取指定便宜连的值, 如果 key 不存在或者偏移量不存在返回 0</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取指定偏移量的值</span></span><br><span class="line">127.0.0.1:6379&gt; GETBIT user 6</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; GETBIT user 0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; GETBIT user 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>

<h4 id="位统计"><a href="#位统计" class="headerlink" title="位统计"></a>位统计</h4><ul>
<li>BITCOUNT key [start end [BYTE|BIT]] 统计 key 中状态为 1 的下标数量, 默认以 BYTE 为单位, 如果 key 不存在或者<ul>
<li>BYTE 以字节(8bit)为单位, 默认</li>
<li>BIT 以 bit 为单位</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计状态为 1 的下标数量</span></span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT user 0 0</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT user 0 0 BYTE</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT user 0 0 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>

<ul>
<li>BITPOS key bit [start [end [BYTE|BIT]]] 返回 key 中指定区间内的第 1 个符合指定值的偏移量<ul>
<li>BYTE|BIT 参数同 <code>BITCOUNT</code></li>
<li>当 bit 为 1, 如果 key 不存在或者全为 0 值则返回 -1</li>
<li>当 bit 为 0, 如果 key 不存在或者全为 0 值则返回 0</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BITPOS user1 1</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; BITPOS user1 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; BITPOS user 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 以字节为单位查找第 1 个值为 0 的偏移量</span></span><br><span class="line">127.0.0.1:6379&gt; BITPOS user 0 1 -1 BYTE</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line"><span class="comment"># 以bit为单位查找第 1 个值为 0 的偏移量</span></span><br><span class="line">127.0.0.1:6379&gt; BITPOS user 0 1 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure>

<h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><ul>
<li><p>BITOP operation destkey key [key …] 在多个 key 之间按照 操作符 逐位操作, 将结果追加存储到指定 key 中, key 为空或者不存在返回 0</p>
<ul>
<li><p>operation 操作符</p>
<ul>
<li>AND 与</li>
<li>OR 或</li>
<li>XOR 异或</li>
<li>NOT 非, 此参数只能传入 1 个 key, 多个 key 报错 ERR BITOP NOT must be called with a single source key.</li>
</ul>
</li>
<li><p>destst 结果集存储的名称</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BITOP AND destst key1 key2 ....keyN</span><br><span class="line">127.0.0.1:6379&gt; SETBIT key1 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT key1 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT key1 2 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT key2 0 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT key2 1 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT key2 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># BITCOUNT 统计指定区间内的值为 1 的下标数量</span></span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT key1 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT key2 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; BITOP AND dest key1 key2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT dest 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; BITOP OR dest key1 key2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT dest 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; BITOP XOR dest key1 key2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT dest 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; BITOP NOT dest key1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT dest 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; BITOP NOT dest key2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT dest 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br></pre></td></tr></table></figure>

<h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><h5 id="记录用户是否在线"><a href="#记录用户是否在线" class="headerlink" title="记录用户是否在线"></a>记录用户是否在线</h5><p>记录用户是否在线时, 将用户 uid 作为偏移量, 如果已登录设置为 1, 退出设置为 0</p>
<blockquote>
<p>SETBIT login_stat {uid} 1|0</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 SETBIT 以每个 id 作为偏移量记录一个状态</span></span><br><span class="line">127.0.0.1:6379&gt; SETBIT login_stat 101 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT login_stat 102 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT login_stat 103 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT login_stat 104 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT login_stat 105 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT login_stat 106 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT login_stat 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># 登录状态修改为 1</span></span><br><span class="line">127.0.0.1:6379&gt; SETBIT login_stat 103 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT login_stat 106 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT login_stat 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line"><span class="comment"># 退出状态修改为 0</span></span><br><span class="line">127.0.0.1:6379&gt; SETBIT login_stat 105 0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT login_stat 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure>

<h5 id="用户每个月签到情况"><a href="#用户每个月签到情况" class="headerlink" title="用户每个月签到情况"></a>用户每个月签到情况</h5><p>统计签到时, 每个用户每天的签到用 1 个 bit 位表示, 将用户 id 和月份组合作为 key, 日期作为偏移量, 签到记作 1, 未签到记作 0</p>
<p>key 的格式: sign:{uid}:{yyyyMM}<br>offset 的格式: {dd}</p>
<blockquote>
<p>SETBIT sign:{uid}:{yyyyMM} {dd} 1|0</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 记录指定用户每天的签到情况</span></span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign:101:202211 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign:101:202211 2 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 获取指定用户在某天是否签到</span></span><br><span class="line">127.0.0.1:6379&gt; GETBIT sign:101:202211 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 记录指定用户每天的签到情况</span></span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign:102:202211 1 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT sign:102:202211 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 获取指定用户在某天是否签到</span></span><br><span class="line">127.0.0.1:6379&gt; GETBIT sign:102:202211 2</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 统计某个用户某个月的签到情况</span></span><br><span class="line">127.0.0.1:6379&gt; BITCOUNT sign:102:202211 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 30</span><br></pre></td></tr></table></figure>

<h5 id="统计连续-7-天签到"><a href="#统计连续-7-天签到" class="headerlink" title="统计连续 7 天签到"></a>统计连续 7 天签到</h5><p>统计连续签到时, 将日期作为 key, 总共有 7 个 BitMaps, 用户 uid 作为偏移量, 签到记作 1, 未签到记作 0<br>用 <code>BITOP</code> 对 7 个 BitMaps 做 <code>AND</code> 运算, 结果中包含连续签到的位</p>
<p>key 的格式: bitmap:{dd}<br>offset 的格式: {uid}</p>
<blockquote>
<p>SETBIT bitmap:{dd} {uid} 1|0</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 记录每天每个用户的签到情况</span></span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap:01 101 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap:01 102 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap:01 103 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap:02 101 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap:02 102 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap:02 103 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap:03 101 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap:03 102 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; SETBIT bitmap:03 103 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># BITOP AND 位运算</span></span><br><span class="line">127.0.0.1:6379&gt; BITOP AND dest bitmap:01 bitmap:02 bitmap:03</span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line"><span class="comment"># 获取第一个值为 1 的偏移量</span></span><br><span class="line">127.0.0.1:6379&gt; BITPOS dest 1 0 -1 BIT</span><br><span class="line">(<span class="built_in">integer</span>) 101</span><br></pre></td></tr></table></figure>

<h3 id="Bitfields"><a href="#Bitfields" class="headerlink" title="Bitfields"></a>Bitfields</h3><p>Redis Bitfields 是一种可以自定义设置、递增和获取任意位长度的整数值, 这些值使用二进制编码的 Redis 字符串存储, 位字段支持原子读取、写入和增量操作, 使其成为管理计数器和类似数值的好选择.</p>
<ul>
<li>BITFIELD key &lt;GET encoding offset | [OVERFLOW &lt;WRAP | SAT | FAIL&gt;] &lt;SET encoding offset value | INCRBY encoding offset increment&gt; [GET encoding offset | [OVERFLOW &lt;WRAP | SAT | FAIL&gt;] &lt;SET encoding offset value | INCRBY encoding offset increment&gt; …]&gt; 自定义存储位数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1</span><br><span class="line">1) (<span class="built_in">integer</span>) 2</span><br><span class="line">2) (<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1</span><br><span class="line">1) (<span class="built_in">integer</span>) 3</span><br><span class="line">2) (<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1</span><br><span class="line">1) (<span class="built_in">integer</span>) 0</span><br><span class="line">2) (<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; BITFIELD mykey OVERFLOW FAIL incrby u2 102 1</span><br><span class="line">1) (nil)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>server</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-Set-Zset</title>
    <url>/2022/11/3bfcb546cd4a/</url>
    <content><![CDATA[<h3 id="Sets-命令"><a href="#Sets-命令" class="headerlink" title="Sets 命令"></a>Sets 命令</h3><p>Set 是无序不重复的集合, 集合成员是唯一的, 集合对象的编码可以是 intset 或者 hashtable, 集合是通过哈希表实现的, 最大的成员数为 2^32-1(40 多亿)个成员.</p>
<p>Set: 键名: key, 键类型: set, 键值: string</p>
<p>Set 类型的底层数据结构是由<strong>哈希表</strong>或<strong>整数集合</strong>实现的</p>
<ul>
<li>如果集合中的元素都是整数且元素个数小于 512 个, Redis 使用<strong>整数集合</strong>作为底层数据结构</li>
<li>如果集合中的元素不满足上面条件, Redis 使用<strong>哈希表</strong>作为底层数据结构</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置底层数据结构存储数量限制</span></span><br><span class="line"><span class="string">set-max-intset-entries</span> <span class="number">512</span></span><br></pre></td></tr></table></figure>

<h4 id="成员操作"><a href="#成员操作" class="headerlink" title="成员操作"></a>成员操作</h4><ul>
<li><p>SADD key member [member …] 向集合中添加多个成员并返回添加成功的数量, 0 表示有重复成员</p>
</li>
<li><p>SCARD key 获取集合成员的数量, 集合为空或者不存在返回 0</p>
</li>
<li><p>SMEMBERS key 获取集合中所有的成员, 集合为空或者不存在返回 (empty array)</p>
</li>
</ul>
<h5 id="是否包含成员"><a href="#是否包含成员" class="headerlink" title="是否包含成员"></a>是否包含成员</h5><ul>
<li>SISMEMBER key member 判断 member 是不是集合的成员, 1 是, 0 不是或者集合为空或者不存在</li>
<li>SMISMEMBER key member [member …] 批量判断多个 member 是不是集合的成员, 1 是, 0 不是或者集合为空或者不存在, Redis 6.2.0 支持</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *  <span class="comment"># 查看当前数据库中的 key</span></span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># 空集合判断是否包含成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMISMEMBER myset hello hehe</span><br><span class="line">1) (<span class="built_in">integer</span>) 0</span><br><span class="line">2) (<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 向 myset 添加成员</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset hello world hehe haha gg</span><br><span class="line">(<span class="built_in">integer</span>)</span><br><span class="line"><span class="comment"># 判断 myset 是否包含成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMISMEMBER myset hello yy hehe</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 0</span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="批量移除成员"><a href="#批量移除成员" class="headerlink" title="批量移除成员"></a>批量移除成员</h5><ul>
<li>SREM key member [member …] 批量移除集合中的成员并返回移除成功的数量, 集合为空或者不存在或者不包含移除成员返回 0</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *  <span class="comment"># 查看当前数据库所有的 key</span></span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># 向集合添加成员</span></span><br><span class="line">127.0.0.1:6379&gt; SADD <span class="built_in">set</span> hello world gg</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># 查看集合的所有成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">1) <span class="string">&quot;gg&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 移除不存在的集合的成员</span></span><br><span class="line">127.0.0.1:6379&gt; SREM myset a b</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 移除集合不存在的成员</span></span><br><span class="line">127.0.0.1:6379&gt; SREM <span class="built_in">set</span> a b</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 移除集合的成员</span></span><br><span class="line">127.0.0.1:6379&gt; SREM <span class="built_in">set</span> hello a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 查看集合的所有成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS <span class="built_in">set</span></span><br><span class="line">1) <span class="string">&quot;gg&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment"># 移除集合的成员</span></span><br><span class="line">127.0.0.1:6379&gt; SREM <span class="built_in">set</span> world gg</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 查看集合为空的所有成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS key</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure>

<h5 id="移除指定成员并添加到其他集合"><a href="#移除指定成员并添加到其他集合" class="headerlink" title="移除指定成员并添加到其他集合"></a>移除指定成员并添加到其他集合</h5><ul>
<li>SMOVE source destination member 将源集合中的指定成员移除并添加到目标集合中<ul>
<li>返回值 <ul>
<li>1 表示源集合指定成员移除成功(目标集合中可能包含该成员也可能不包含)</li>
<li>0 表示源集合为空或者源集合不包含指定成员</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHALL    <span class="comment"># 清空所有数据库</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># myset 为空集, 返回 0</span></span><br><span class="line">127.0.0.1:6379&gt; SMOVE myset destset hello</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向 myset 添加成员 hello, world</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset hello world</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 移除 myset 包含的成员 hello 并添加到 destset 中, destset 为空, 返回 1</span></span><br><span class="line">127.0.0.1:6379&gt; SMOVE myset destset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 查看 myset 成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment"># 查看 destset 成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS destset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 移除 myset 不包含的成员 hehe, 返回 0</span></span><br><span class="line">127.0.0.1:6379&gt; SMOVE myset destset hehe</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 查看 myset 成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment"># 查看 destset 成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS destset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; FLUSHALL    <span class="comment"># 清空所有数据库</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 向 myset 添加成员 hello, world</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset hello world</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 向 destset 添加成员 hello, gg</span></span><br><span class="line">127.0.0.1:6379&gt; SADD destset hello gg</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 移除 myset 包含的成员 hello 并添加到 destset 中, destset 包含 hello, 返回 1</span></span><br><span class="line">127.0.0.1:6379&gt; SMOVE myset destset hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS destset</span><br><span class="line">1) <span class="string">&quot;gg&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="随机获取成员"><a href="#随机获取成员" class="headerlink" title="随机获取成员"></a>随机获取成员</h4><ul>
<li>SPOP key [count] 移除指定集合随机的多个成员并返回移除的成员, 改变原集合, 不带 count 如果集合为空或者不存在返回 &lt;nil&gt;, 否则返回 (empty array), count 不能为负数<ul>
<li>count 指定随机移除的数量, 默认为 1<ul>
<li>count &gt;= 1 时, 空集合返回 (empty array)</li>
<li>count = 0 时, 任何集合都返回 (empty array)</li>
<li>count &lt; 0 时, 返回错误, count must be positive</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHALL    <span class="comment"># 清空所有数据库</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># myset 为空集合, 返回 nil</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset</span><br><span class="line">(nil)</span><br><span class="line"><span class="comment"># myset 为空集合, count &gt;= 0 返回 empty array</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset 2</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># 向 myset 添加成员 hello, world, hehe, haha, gg, yy</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset hello world hehe haha gg yy</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"><span class="comment"># count = 0, 任意集合都返回 empty array</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset 0</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># count = 0, 任意集合都返回 empty array</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP newset 0</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># count &lt; 0, 返回错误</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset -1</span><br><span class="line">(error) ERR value is out of range, must be positive</span><br><span class="line"><span class="comment"># 移除 myset 随机的 1 个成员</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment"># 移除 myset 随机的 3 个成员</span></span><br><span class="line">127.0.0.1:6379&gt; SPOP myset 3</span><br><span class="line">1) <span class="string">&quot;haha&quot;</span></span><br><span class="line">2) <span class="string">&quot;yy&quot;</span></span><br><span class="line">3) <span class="string">&quot;gg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset  <span class="comment"># 查看 myset 成员</span></span><br><span class="line">1) <span class="string">&quot;hehe&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SRANDMEMBER key [count] 返回指定集合随机的多个成员, 不改变原集合, 不带 count 如果集合为空或者不存在返回 &lt;nil&gt;, 否则返回 (empty array), count 为负数将会取绝对值<ul>
<li>count 指定随机返回的数量, 默认为 1<ul>
<li>count &gt;= 1 时, 空集合返回 (empty array)</li>
<li>count = 0 时, 任意集合都返回 (empty array)</li>
<li>count &lt; 0 时, 空集合返回 (empty array), 非空集合返回 count 的绝对值数量</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *    <span class="comment"># 查看当前数据库中的 key</span></span><br><span class="line">1) <span class="string">&quot;myset&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset  <span class="comment"># 查看 myset 成员</span></span><br><span class="line">1) <span class="string">&quot;haha&quot;</span></span><br><span class="line">2) <span class="string">&quot;yy&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">4) <span class="string">&quot;hehe&quot;</span></span><br><span class="line">5) <span class="string">&quot;hello&quot;</span></span><br><span class="line">6) <span class="string">&quot;gg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># newset 为空集合返回 nil</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER newset</span><br><span class="line">(nil)</span><br><span class="line"><span class="comment"># newset 为空集合, count = 0, 返回 empty array</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER newset 0</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># newset 为空集合, count = 1, 返回 empty array</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER newset 1</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># newset 为空集合, count = -1, 返回 empty array</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER newset -1</span><br><span class="line">(empty array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机返回 myset 集合的 1 个成员</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># myset 不为空集合, count = 0, 返回 empty array</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 0</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># myset 不为空集合, count = 2, 随机返回 2 个成员</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class="line">1) <span class="string">&quot;gg&quot;</span></span><br><span class="line">2) <span class="string">&quot;yy&quot;</span></span><br><span class="line"><span class="comment"># myset 不为空集合, count = -2, 随机返回 count 的绝对值个成员</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset -2</span><br><span class="line">1) <span class="string">&quot;haha&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SCARD myset <span class="comment"># 查看 myset 成员数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure>

<h4 id="遍历无序集合"><a href="#遍历无序集合" class="headerlink" title="遍历无序集合"></a>遍历无序集合</h4><ul>
<li>SSCAN key cursor [MATCH pattern] [COUNT count] 迭代集合中的成员, 返回下一次游标开始的位置和结果, 游标 0 表示迭代已结束<ul>
<li>cursor 游标</li>
<li>pattern 匹配的模式</li>
<li>count 控制从数据集返回的成员数量, 默认为 10</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHALL  <span class="comment"># 清空所有数据库</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 迭代空集合</span></span><br><span class="line">127.0.0.1:6379&gt; SSCAN myset 0 MATCH a COUNT 10</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) (empty array)</span><br><span class="line"><span class="comment"># 向 myset 添加成员</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset a b c d aa ab ac ad ba bb bc bd ca cb cc <span class="built_in">cd</span> da db dc <span class="built_in">dd</span></span><br><span class="line">(<span class="built_in">integer</span>) 20</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代 myset, 匹配模式 a*</span></span><br><span class="line">127.0.0.1:6379&gt; SSCAN myset 0 MATCH a* COUNT 20</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;ad&quot;</span></span><br><span class="line">   2) <span class="string">&quot;a&quot;</span></span><br><span class="line">   3) <span class="string">&quot;ac&quot;</span></span><br><span class="line">   4) <span class="string">&quot;aa&quot;</span></span><br><span class="line">   5) <span class="string">&quot;ab&quot;</span></span><br><span class="line"><span class="comment"># 迭代 myset, 匹配模式 *c, 游标位置</span></span><br><span class="line">127.0.0.1:6379&gt; SSCAN myset 0 MATCH *c COUNT 8</span><br><span class="line">1) <span class="string">&quot;10&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;dc&quot;</span></span><br><span class="line">   2) <span class="string">&quot;cc&quot;</span></span><br><span class="line">   3) <span class="string">&quot;ac&quot;</span></span><br><span class="line">   4) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="comment"># 从第 1 次返回的游标位置开始继续迭代 myset</span></span><br><span class="line">127.0.0.1:6379&gt; SSCAN myset 10 MATCH *c COUNT 8</span><br><span class="line">1) <span class="string">&quot;11&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;bc&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取无序集合差异"><a href="#获取无序集合差异" class="headerlink" title="获取无序集合差异"></a>获取无序集合差异</h4><ul>
<li>SDIFF key [key …] 比较第一个集合和其他集合之间的差异并返回差异的结果, 第一个集合为空或者第一个集合的所有成员在出现在其他集合中返回(empty array)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *  <span class="comment"># 查看当前数据库中的 key</span></span><br><span class="line">1) <span class="string">&quot;myset&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset  <span class="comment"># 查看集合 myset 的成员</span></span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 比较集合的差异, newset 和 newset2 为空, 返回 myset 的所有成员</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF myset newset newset2</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向集合 newset 添加成员 hello, gg</span></span><br><span class="line">127.0.0.1:6379&gt; SADD newset hello gg</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 比较集合的差异, newset2 为空, 返回其他集合不包含的成员 world</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF myset newset newset2</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment"># 向集合 newset2 添加成员 hehe</span></span><br><span class="line">127.0.0.1:6379&gt; SADD newset2 hehe</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 比较集合的差异, 返回其他集合不包含的成员 world</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF myset newset newset2</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment"># 向集合 newset2 添加成员 world</span></span><br><span class="line">127.0.0.1:6379&gt; SADD newset2 world</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 比较集合的差异, myset 的成员包含在 newset 和 newset2 集合中, 返回 empty array</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF myset newset newset2</span><br><span class="line">(empty array)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; DEL myset  <span class="comment"># 删除集合 myset</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; KEYS *  <span class="comment"># 查看当前数据库中的 key</span></span><br><span class="line">1) <span class="string">&quot;newset2&quot;</span></span><br><span class="line">2) <span class="string">&quot;newset&quot;</span></span><br><span class="line"><span class="comment"># 比较集合的差异, myset 集合为空, newset 和 newset2 集合有成员, 返回 empty array</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFF myset newset newset2</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure>

<ul>
<li>SDIFFSTORE destination key [key …] 比较第一个集合和其他集合之间的差异把差异结果存储到指定集合并返回指定集合的数量, 如果指定集合不存在则新建, 如果指定集合存在则覆盖指定集合, 0 表示未找到结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *  <span class="comment"># 查看当前数据库中的 key</span></span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># 向 myset 中添加 hello, world</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset hello world</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 向 newset 中添加 world, gg</span></span><br><span class="line">127.0.0.1:6379&gt; SADD newset world gg</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 向 destset 中添加 hehe, haha</span></span><br><span class="line">127.0.0.1:6379&gt; SADD destset hehe haha</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; KEYS *   <span class="comment"># 查看当前数据库中的 key</span></span><br><span class="line">1) <span class="string">&quot;destset&quot;</span></span><br><span class="line">2) <span class="string">&quot;myset&quot;</span></span><br><span class="line">3) <span class="string">&quot;newset&quot;</span></span><br><span class="line"><span class="comment"># 比较 myset 和 newset 的差异, 将差异结果覆盖存储到 destset 中</span></span><br><span class="line">127.0.0.1:6379&gt; SDIFFSTORE destset myset newset</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 查看 destset 集合的成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS destset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取无序集合交集"><a href="#获取无序集合交集" class="headerlink" title="获取无序集合交集"></a>获取无序集合交集</h4><ul>
<li>SINTER key [key …] 返回所有给定集合之间的交集, key 不存在被当作空集合, 当给定集合中有一个空集合时返回结果也为空集合(empty array)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *  <span class="comment"># 查看当前数据库中的 key</span></span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># 向 myset 中添加成员 hello, world</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset hello world</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 获取 myset 和 newset 的交集, newset 集合为空集, 返回空集</span></span><br><span class="line">127.0.0.1:6379&gt; SINTER myset newset</span><br><span class="line">(empty array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向 newset 中添加成员 hehe, hello</span></span><br><span class="line">127.0.0.1:6379&gt; SADD newset hehe hello</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 获取 myset 和 newset 的交集, 返回相同的成员 hello</span></span><br><span class="line">127.0.0.1:6379&gt; SINTER myset newset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向 newset2 中添加成员 world, gg</span></span><br><span class="line">127.0.0.1:6379&gt; SADD newset2 world gg</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 获取 myset, newset, newset2 的交集, 没有找到相同的成员返回空集</span></span><br><span class="line">127.0.0.1:6379&gt; SINTER myset newset newset2</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure>

<ul>
<li>SINTERSTORE destination key [key …] 将所有给定集合之间的交集存储到指定的集合中并返回指定集合的数量, 如果指定集合不存在则新建, 如果指定集合已存在则覆盖指定集合, 0 表示未找到结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *    <span class="comment"># 查看当前数据库中的 key</span></span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># 向 myset 中添加成员 hello, world</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset hello world</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 向 newset 中添加成员 hello, hehe</span></span><br><span class="line">127.0.0.1:6379&gt; SADD newset hello hehe</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 向 destset 中添加成员 gg, yy</span></span><br><span class="line">127.0.0.1:6379&gt; SADD destset gg yy</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 获取 myset, newset 的交集覆盖存储到 destset 中</span></span><br><span class="line">127.0.0.1:6379&gt; SINTERSTORE destset myset newset</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS destset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SINTERCARD numkeys key [key …] [LIMIT limit] 返回给定多个集合的交集的数量, 0 表示未找到结果, Redis 7.0.0 支持<ul>
<li>numkeys 指定集合的数量, 值和 key 的数量不一致时返回语法错误 syntax error</li>
<li>limit 指定返回结果的偏移量, 默认为 0, limit &lt; 0 时, 报错不能为负数</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *    <span class="comment"># 查看当前数据库中的 key</span></span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># 语法错误</span></span><br><span class="line">127.0.0.1:6379&gt; SINTERCARD 1 myset newset</span><br><span class="line">(error) ERR syntax error</span><br><span class="line"><span class="comment"># 返回交集的数量</span></span><br><span class="line">127.0.0.1:6379&gt; SINTERCARD 2 myset newset</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向 myset 添加成员</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset hello world hehe haha gg yy</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"><span class="comment"># 向 newset 添加成员</span></span><br><span class="line">127.0.0.1:6379&gt; SADD newset hello hehe haha yy</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"><span class="comment"># 返回交集的数量(hello, hehe, haha, yy)</span></span><br><span class="line">127.0.0.1:6379&gt; SINTERCARD 2 myset newset</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"> <span class="comment"># 作用同上一条命令</span></span><br><span class="line">127.0.0.1:6379&gt; SINTERCARD 2 myset newset LIMIT 0</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"><span class="comment"># 指定返回结果的偏移量</span></span><br><span class="line">127.0.0.1:6379&gt; SINTERCARD 2 myset newset LIMIT 1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 指定返回结果的偏移量</span></span><br><span class="line">127.0.0.1:6379&gt; SINTERCARD 2 myset newset LIMIT 3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># 偏移量不能为负数</span></span><br><span class="line">127.0.0.1:6379&gt; SINTERCARD 2 myset newset LIMIT -1</span><br><span class="line">(error) ERR LIMIT can<span class="string">&#x27;t be negative</span></span><br></pre></td></tr></table></figure>

<h4 id="获取无序集合并集"><a href="#获取无序集合并集" class="headerlink" title="获取无序集合并集"></a>获取无序集合并集</h4><ul>
<li>SUNION key [key …] 返回所有给定集合的并集并移除相同的成员只保留一个, 不存在的 key 被当作空集合, 集合都为空返回 (empty array)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHALL    <span class="comment"># 清空所有数据库</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 返回空集合的并集</span></span><br><span class="line">127.0.0.1:6379&gt; SUNION myset newset</span><br><span class="line">(empty array)</span><br><span class="line"><span class="comment"># 向 myset 添加 hello, world</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset hello world</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 返回 myset, newset 的并集</span></span><br><span class="line">127.0.0.1:6379&gt; SUNION myset newset</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 向 newset 添加成员 hello, hehe</span></span><br><span class="line">127.0.0.1:6379&gt; SADD newset hello hehe</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 返回 myset, newset 的并集, 只保留相同一个成员 hello</span></span><br><span class="line">127.0.0.1:6379&gt; SUNION myset newset</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;hehe&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SUNIONSTORE destination key [key …] 将所有给定集合之间的并集存储到指定的集合中并返回指定集合的数量, 如果指定集合不存在则新建, 如果指定集合已存在则覆盖指定集合, 0 表示未找到结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FLUSHALL  <span class="comment"># 清空所有数据库</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># myset, newset 都为空集合, 返回 0</span></span><br><span class="line">127.0.0.1:6379&gt; SUNIONSTORE destset myset newset</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"><span class="comment"># 向 myset 添加成员 hello, world</span></span><br><span class="line">127.0.0.1:6379&gt; SADD myset hello world</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 获取 myset, newset 的并集新建存储到 destset 中</span></span><br><span class="line">127.0.0.1:6379&gt; SUNIONSTORE destset myset newset</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 查看 destset 成员</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS destset</span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 向 newset 添加成员 hello, haha</span></span><br><span class="line">127.0.0.1:6379&gt; SADD newset hello hehe haha</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment"># 获取 myset, newset 的并集覆盖存储到 destset 中</span></span><br><span class="line">127.0.0.1:6379&gt; SUNIONSTORE destset myset newset</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS destset  <span class="comment"># 查看 destset 成员</span></span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">2) <span class="string">&quot;hehe&quot;</span></span><br><span class="line">3) <span class="string">&quot;haha&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul>
<li>用户标签</li>
<li>生成随机数字抽奖</li>
<li>社交需求</li>
</ul>
<h3 id="Sorted-sets-命令"><a href="#Sorted-sets-命令" class="headerlink" title="Sorted sets 命令"></a>Sorted sets 命令</h3><blockquote>
<p>Redis 7.0 开始, 压缩列表数据结构由 listpack 数据结构实现</p>
</blockquote>
<blockquote>
<p>大部分 Set 的 API 将首字母 s 换成 z 就可以使用, 这里只列出部分不一致的 API</p>
</blockquote>
<p>Sorted sets 和 set 一样也是 string 类型元素的集合, 且不允许重复的成员, 不同的是每个元素都会关联一个 double 类型的分值, Redis 正是通过分值来为集合中的成员进行从小到大的排序, 有序集合的成员是唯一的,但分值(score)却可以重复, 集合是通过哈希表实现的, 最大的成员数为 2^32-1(40 多亿)个成员.</p>
<p>Zset: 键名: key, 键类型: zset, 键值: string {value =&gt; score}</p>
<p>Zset 类型的底层数据结构是由<strong>压缩列表</strong>或<strong>跳表</strong>实现的</p>
<ul>
<li>如果有序集合的元素个数小于 128 个并且每个元素的值小于 64B 时, Redis 使用<strong>压缩列表</strong>作为底层数据结构</li>
<li>如果有序集合的元素不满足上面条件, Redis 使用<strong>跳表</strong>作为底层数据结构</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置底层数据结构存储数量限制</span></span><br><span class="line"><span class="string">zset-max-listpack-entries</span> <span class="number">128</span></span><br><span class="line"><span class="string">zset-max-listpack-value</span> <span class="number">64</span></span><br></pre></td></tr></table></figure>

<h4 id="特殊标识符"><a href="#特殊标识符" class="headerlink" title="特殊标识符"></a>特殊标识符</h4><ul>
<li>- 负</li>
<li>+ 正</li>
<li>inf 无穷大</li>
<li>(val 不包含 val</li>
<li>[val 包含 val</li>
</ul>
<h4 id="添加成员"><a href="#添加成员" class="headerlink" title="添加成员"></a>添加成员</h4><ul>
<li><p>ZADD key [NX|XX] [GT|LT] [CH] [INCR] score member [score member …] 添加更新成员, 通常只返回添加的新成员的数量</p>
<ul>
<li>NX 仅添加新成员, 不再更新已存在的成员</li>
<li>XX 仅更新已经存在的成员, 不再添加新成员</li>
<li>GT 仅当新分值大于当前分值才更新已存在的成员, 此标志不阻止添加新成员</li>
<li>LT 仅当新分值小于当前分值才更新已存在的成员, 此标志不阻止添加新成员</li>
<li>CH 将 <code>ZADD</code> 返回值统计新成员的添加数量修改为更改的成员总数, 包含更新已存在的数量和新添加的数量</li>
<li>INCR 此选项作用类似 <code>ZINCRBY</code>, 只能指定一个成员分值对加上指定的增量(可以为负数), 如果成员不存在从 0 开始计算, 并返回当前成员的最终分值, 多个成员分值对会报错</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myz 1 zhangsan 2 lisi  <span class="comment"># 添加成员</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myz</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">4) <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XX  仅更新已存在的成员，不再添加新成员</span></span><br><span class="line"><span class="comment"># 仅更新 zhangsan, 忽略添加新成员 1 wangwu 3.5 zhaoliu</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD myz XX 1.5 zhangsan 1 wangwu 3.5 zhaoliu</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myz</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">2) <span class="string">&quot;2&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">4) <span class="string">&quot;1.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NX  仅添加新成员, 不再更新已存在的成员</span></span><br><span class="line"><span class="comment"># 仅添加新成员 1 wangwu 3.5 zhaoliu, 忽略更新 lisi</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD myz NX 2.5 lisi 1 wangwu 3.5 zhaoliu</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myz</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line">2) <span class="string">&quot;3.5&quot;</span></span><br><span class="line">3) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">4) <span class="string">&quot;2&quot;</span></span><br><span class="line">5) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">6) <span class="string">&quot;1.5&quot;</span></span><br><span class="line">7) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">8) <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LT  仅当新分值小于当前分值才更新已存在的成员, 不阻止添加新成员</span></span><br><span class="line"><span class="comment"># 0.5 &lt; 2 满足条件, 有新成员 4 sunqi 可添加</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD myz LT 0.5 lisi 4 sunqi</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myz</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;sunqi&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;4&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;3.5&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;1.5&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;1&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">10) <span class="string">&quot;0.5&quot;</span></span><br><span class="line"><span class="comment"># 1 &gt; 0.5, 8 &gt; 4 不满足条件, 没有新成员可添加</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD myz LT 1 lisi 8 sunqi</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myz</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;sunqi&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;4&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;3.5&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;1.5&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;1&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">10) <span class="string">&quot;0.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GT 仅当新分值大于当前分值才更新已存在的成员, 不阻止添加新成员</span></span><br><span class="line"><span class="comment"># 1 &lt; 1.5 不满足条件, 有新成员 2 qianba 可添加</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD myz GT 1 zhangsan 2 qianba</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myz</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;sunqi&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;4&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;3.5&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;qianba&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;2&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;1.5&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">10) <span class="string">&quot;1&quot;</span></span><br><span class="line">11) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">12) <span class="string">&quot;0.5&quot;</span></span><br><span class="line"><span class="comment"># 3 &gt; 1.5 满足条件, 2 = 2 不满足条件, 没有新成员可添加</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD myz GT 3 zhangsan 2 qianba</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ZCARD myz</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;sunqi&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;4&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;3.5&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;3&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;qianba&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;2&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">10) <span class="string">&quot;1&quot;</span></span><br><span class="line">11) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">12) <span class="string">&quot;0.5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CH 统计集合所有受影响的成员的数量, 包含更新已存在的数量和新添加的数量</span></span><br><span class="line"><span class="comment"># zhangsan 和 qianba 已存在, hello 为新添加成员,</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD myz CH 1 zhangsan 5 qianba 1 hello</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># INCR 同时只能指定一个成员分值对加上指定的增量(可以为负数), 如果成员不存在从 0 开始计算</span></span><br><span class="line"><span class="comment"># 多个会报错 (error) ERR INCR option supports a single increment-element pair</span></span><br><span class="line">127.0.0.1:6379&gt; ZADD myz INCR 10 zhangsan</span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;10&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="指定成员的分值增量"><a href="#指定成员的分值增量" class="headerlink" title="指定成员的分值增量"></a>指定成员的分值增量</h4><ul>
<li>ZINCRBY key increment member 对指定成员的分值加上增量并返回修改后的分值, 如果指定成员不存在则添加新成员, 等同于 <code>ZADD key increment member</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 zhangsan 的分值 + 2</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY myz 2 zhangsan</span><br><span class="line"><span class="string">&quot;3.5&quot;</span></span><br><span class="line"><span class="comment"># zhangsan1 不存在, 新添加</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY myz 2 zhangsan1</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="comment"># 修改 zhaoliu 的分值减去 - 2</span></span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY myz -2 zhaoliu</span><br><span class="line"><span class="string">&quot;1.5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;3.5&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;2.5&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;zhangsan1&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;2&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;1.5&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">10) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="移除成员"><a href="#移除成员" class="headerlink" title="移除成员"></a>移除成员</h4><h5 id="分值最大或最小"><a href="#分值最大或最小" class="headerlink" title="分值最大或最小"></a>分值最大或最小</h5><ul>
<li><p>ZPOPMAX key [count] 移除指定集合的指定数量的最高分值成员并返回移除的成员和分值, count 默认为 1, 如果集合为空或者不存在返回 (empty array), Redis `5.0.0 支持</p>
<ul>
<li>count &lt; 0 时, 报错 ERR value is out of range, must be positive</li>
<li>count = 0 时, 不做任何操作, 返回 empty array</li>
<li>count &gt; 1 时, 指定移除数量</li>
</ul>
</li>
<li><p>BZPOPMAX key [key …] timeout 阻塞版 <code>ZPOPMAX</code>, 从多个集合中第 1 个非空集合中移除并返回 1 个最高分值成员, 如果集合为空会阻塞集合直到等待超时或发现可移除成员为止, 如果集合为空或者超时返回 &lt;nil&gt;, 否则, 返回 1 个含有 3 个元素的列表, 第 1 个为被移除成员所属的集合, 第 2 个为被移除的成员, 第 3 个为移除成员的分值, Redis 5.0.0 支持</p>
</li>
<li><p>ZPOPMIN key [count] 移除指定集合的指定数量的最低分值成员并返回移除的成员和分值, count 默认为 1, 如果集合为空或者不存在返回 (empty array), Redis 5.0.0 支持</p>
<ul>
<li>参数同 <code>ZPOPMAX</code></li>
</ul>
</li>
<li><p>BZPOPMIN key [key …] timeout 阻塞版 <code>ZPOPMIN</code>, 从多个集合中第 1 个非空集合中移除并返回 1 个最低分值成员, 如果集合为空会阻塞集合直到等待超时或发现可移除成员为止, 如果集合为空或者超时返回 &lt;nil&gt;, 否则, 返回 1 个含有 3 个元素的列表, 第 1 个为被移除成员所属的集合, 第 2 个为被移除的成员, 第 3 个为移除成员的分值, Redis 5.0.0 支持</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZPOPMAX myz -1</span><br><span class="line">(error) ERR value is out of range, must be positive</span><br><span class="line">127.0.0.1:6379&gt; ZADD myz 1 a 2 b 3 c 3 d 2 e 1 f</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZPOPMAX myzz</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; ZPOPMAX myz 0</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; ZPOPMAX myz</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZPOPMAX myz 3 <span class="comment"># 移除 3 个最高分值成员</span></span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br><span class="line">5) <span class="string">&quot;e&quot;</span></span><br><span class="line">6) <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ZPOPMIN myz 0</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; ZPOPMIN myz</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZPOPMIN myz 3</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;f&quot;</span></span><br><span class="line">4) <span class="string">&quot;1&quot;</span></span><br><span class="line">5) <span class="string">&quot;b&quot;</span></span><br><span class="line">6) <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阻塞移除多个集合中第 1 个非空集合的最高值成员</span></span><br><span class="line">127.0.0.1:6379&gt; BZPOPMAX myz1 myz 0</span><br><span class="line">1) <span class="string">&quot;myz&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阻塞移除多个集合中第 1 个非空集合的最低值成员</span></span><br><span class="line">127.0.0.1:6379&gt; BZPOPMIN myz1 myz 0</span><br><span class="line">1) <span class="string">&quot;myz&quot;</span></span><br><span class="line">2) <span class="string">&quot;a&quot;</span></span><br><span class="line">3) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="指定区间"><a href="#指定区间" class="headerlink" title="指定区间"></a>指定区间</h5><ul>
<li>ZREMRANGEBYLEX key min max 移除指定字典区间的所有成员并返回成功移除的数量, min 和 max 需要使用 <code>(</code> 或 <code>[</code> 前导符, 0 表示集合为空或者未找到结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYLEX myz a f</span><br><span class="line">(error) ERR min or max not valid string range item</span><br><span class="line">127.0.0.1:6379&gt; ZADD myz 0 a 0 b 0 c 0 d 0 e 0 alpha 0 zip</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line"><span class="comment"># 匹配范围含尾不含头, 删除 b c d e zip</span></span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYLEX myz (alpha [zip</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;alpha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配范围含头不含尾, 删除 alpha b c d e</span></span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYLEX myz [alpha (zip</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;zip&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ZREMRANGEBYSCORE key min max 移除指定分值区间的所有成员并返回成功移除的数量, 0 表示集合为空或者未找到结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYSCORE myz1 100 500</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ZADD myz 1 a 2 b 3 c 4 d 5 e 6 f 2 beta 3 cipher 4 delete</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line"><span class="comment"># 匹配范围含头含尾</span></span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYSCORE myz 2 5</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;f&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配范围不含头不含尾</span></span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYSCORE myz (2 (5</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; zrange myz 0 -1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;beta&quot;</span></span><br><span class="line">4) <span class="string">&quot;e&quot;</span></span><br><span class="line">5) <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ZREMRANGEBYRANK key start stop 移除指定排名区间的所有成员并返回成功移除的数量, 0 表示集合为空或者未找到结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYRANK myz1 1 4</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ZADD myz 1 a 2 b 3 c 4 d 5 e 6 f 2 beta 3 cipher 4 delete</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line"><span class="comment"># 移除范围下标从 1 到 4, b beta c cipher</span></span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYRANK myz 1 4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;d&quot;</span></span><br><span class="line">3) <span class="string">&quot;delete&quot;</span></span><br><span class="line">4) <span class="string">&quot;e&quot;</span></span><br><span class="line">5) <span class="string">&quot;f&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除范围下标从 1 到 5, b beta c cipher d</span></span><br><span class="line">127.0.0.1:6379&gt; ZREMRANGEBYRANK myz 1 5</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;delete&quot;</span></span><br><span class="line">3) <span class="string">&quot;e&quot;</span></span><br><span class="line">4) <span class="string">&quot;f&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="批量移除相同成员"><a href="#批量移除相同成员" class="headerlink" title="批量移除相同成员"></a>批量移除相同成员</h5><ul>
<li>ZREM key member [member …] 批量移除指定的成员并返回成功移除的数量, 如果指定成员不存在则被忽略, 0 表示集合为空或者成员不存在</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myz 1 hello 2 world 3 gg 2 yy 1 hehe 4 haha</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZREM myz YY GG</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; ZREM myz gg GG</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<h5 id="批量移除相邻成员"><a href="#批量移除相邻成员" class="headerlink" title="批量移除相邻成员"></a>批量移除相邻成员</h5><ul>
<li>ZMPOP numkeys key [key …] MIN|MAX [COUNT count] 从多个集合中第 1 个非空集合中移除指定数量的最高或最低分值的成员并返回移除的成员和分值及成员所属的集合名称, count 默认为 1, 集合为空或者不存在返回 &lt;nil&gt;, Redis 7.0.0 支持<ul>
<li>COUNT count 移除成员的数量, 默认为 1</li>
</ul>
</li>
<li>BZMPOP timeout numkeys key [key …] MIN|MAX [COUNT count] 阻塞版 <code>ZMPOP</code>, 如果集合为空会阻塞集合直到等待超时或发现可移除成员为止, 如果集合为空或者超时返回 &lt;nil&gt;, Redis 7.0.0 支持</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果集合都为空, 阻塞指定时间后返回 nil</span></span><br><span class="line">127.0.0.1:6379&gt; BZMPOP 5 2 myzz myz MAX COUNt 2</span><br><span class="line">(nil)</span><br><span class="line">(5.09s)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ZADD myz 1 a 2 b 3 c 3 d 3 e 2 f 2 g 1 h 4 i</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line"><span class="comment"># 移除多个集合中第 1 个非空集合的 1 个最大值成员</span></span><br><span class="line">127.0.0.1:6379&gt; ZMPOP 2 myzz myz MAX</span><br><span class="line">1) <span class="string">&quot;myz&quot;</span></span><br><span class="line">2) 1) 1) <span class="string">&quot;i&quot;</span></span><br><span class="line">      2) <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="comment"># 移除多个集合中第 1 个非空集合的 2 个最大值成员</span></span><br><span class="line">127.0.0.1:6379&gt; ZMPOP 2 myzz myz MAX COUNT 2</span><br><span class="line">1) <span class="string">&quot;myz&quot;</span></span><br><span class="line">2) 1) 1) <span class="string">&quot;i&quot;</span></span><br><span class="line">      2) <span class="string">&quot;4&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;e&quot;</span></span><br><span class="line">      2) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="comment"># 移除多个集合中第 1 个非空集合的 3 个最小值成员</span></span><br><span class="line">127.0.0.1:6379&gt; ZMPOP 2 myzz myz MIN COUNT 3</span><br><span class="line">1) <span class="string">&quot;myz&quot;</span></span><br><span class="line">2) 1) 1) <span class="string">&quot;a&quot;</span></span><br><span class="line">      2) <span class="string">&quot;1&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;h&quot;</span></span><br><span class="line">      2) <span class="string">&quot;1&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;b&quot;</span></span><br><span class="line">      2) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="comment"># 阻塞移除多个集合中第 1 个非空集合的 4 个最大值成员</span></span><br><span class="line">127.0.0.1:6379&gt; BZMPOP 5 2 myzz myz MAX COUNt 4</span><br><span class="line">1) <span class="string">&quot;myz&quot;</span></span><br><span class="line">2) 1) 1) <span class="string">&quot;i&quot;</span></span><br><span class="line">      2) <span class="string">&quot;4&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;e&quot;</span></span><br><span class="line">      2) <span class="string">&quot;3&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;d&quot;</span></span><br><span class="line">      2) <span class="string">&quot;3&quot;</span></span><br><span class="line">   4) 1) <span class="string">&quot;c&quot;</span></span><br><span class="line">      2) <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取成员数量"><a href="#获取成员数量" class="headerlink" title="获取成员数量"></a>获取成员数量</h4><ul>
<li>ZCARD key 返回指定集合的成员数量, 集合为空或者不存在返回 0</li>
</ul>
<h5 id="指定分值区间"><a href="#指定分值区间" class="headerlink" title="指定分值区间"></a>指定分值区间</h5><ul>
<li>ZCOUNT key min max 统计指定分值区间的成员数量, 0 表示未找到结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line">2) <span class="string">&quot;3.5&quot;</span></span><br><span class="line">3) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">4) <span class="string">&quot;2.5&quot;</span></span><br><span class="line">5) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">6) <span class="string">&quot;1.5&quot;</span></span><br><span class="line">7) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">8) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="comment"># 获取分值 负无穷大 到 正无穷大 之间的数量</span></span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myz -inf +inf</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line"><span class="comment"># 获取分值在 0 到 2 之间的数量</span></span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myz 0 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 获取分值在 1.5 到 3 之间的数量</span></span><br><span class="line">127.0.0.1:6379&gt; ZCOUNT myz 1.5 3</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure>

<h5 id="指定字典区间"><a href="#指定字典区间" class="headerlink" title="指定字典区间"></a>指定字典区间</h5><ul>
<li>ZLEXCOUNT key min max 计算指定字典区间内成员数量, 0 表示未找到结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myz 1 a 2 b 3 c 4 d 5 e 6 f</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myz - +</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myz (b [f <span class="comment"># 不包含 b</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myz [b [f <span class="comment"># 包含 b</span></span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myz [d [f</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myz [a [c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZLEXCOUNT myz [a [b</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>

<h4 id="随机获取指定数量成员"><a href="#随机获取指定数量成员" class="headerlink" title="随机获取指定数量成员"></a>随机获取指定数量成员</h4><ul>
<li>ZRANDMEMBER key [count [WITHSCORES]] 返回指定集合随机的多个成员, 不改变原集合, 如果集合为空或者不存在返回 &lt;nil&gt;, 否则返回 (empty array), Redis 6.2.0 支持<ul>
<li>count 指定随机返回的数量, 默认为 1<ul>
<li>count &gt;= 1 时, 空集合返回 (empty array)</li>
<li>count = 0 时, 任意集合都返回 (empty array)</li>
<li>count &lt; 0 时, 空集合返回 (empty array), 非空集合返回 count 的绝对值数量</li>
</ul>
</li>
<li>WITHSCORES 返回结果的分值</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANDMEMBER myz1</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; ZRANDMEMBER myz1 -1</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; ZADD myz 1 hello 2 world 3 gg 2 yy 4 hehe 5 haha</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZRANDMEMBER myz</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANDMEMBER myz 0</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; ZRANDMEMBER myz 3 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;hehe&quot;</span></span><br><span class="line">2) <span class="string">&quot;4&quot;</span></span><br><span class="line">3) <span class="string">&quot;gg&quot;</span></span><br><span class="line">4) <span class="string">&quot;3&quot;</span></span><br><span class="line">5) <span class="string">&quot;yy&quot;</span></span><br><span class="line">6) <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取指定成员排名"><a href="#获取指定成员排名" class="headerlink" title="获取指定成员排名"></a>获取指定成员排名</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;hello&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;1&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;world&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;2&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;yy&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;2&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;gg&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;3&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;hehe&quot;</span></span><br><span class="line">10) <span class="string">&quot;4&quot;</span></span><br><span class="line">11) <span class="string">&quot;haha&quot;</span></span><br><span class="line">12) <span class="string">&quot;5&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ZRANK key member 返回指定成员的按递增顺序的排名, 从 0 开始计算, 如果指定成员不属于指定集合则返回 &lt;nil&gt;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANK myz yy</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANK myz world</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANK myz HAHA</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<ul>
<li>ZREVRANK key member 返回指定成员的按递减顺序的排名, 从 0 开始计算, 如果指定成员不属于指定集合则返回 &lt;nil&gt;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZREVRANK myz yy</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myz HAHA</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANK myz hehe</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<h4 id="获取指定成员分值"><a href="#获取指定成员分值" class="headerlink" title="获取指定成员分值"></a>获取指定成员分值</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;hello&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;1&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;world&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;2&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;yy&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;2&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;gg&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;3&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;hehe&quot;</span></span><br><span class="line">10) <span class="string">&quot;4&quot;</span></span><br><span class="line">11) <span class="string">&quot;haha&quot;</span></span><br><span class="line">12) <span class="string">&quot;5&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ZSCORE key member 获取指定成员的分值, 如果集合为空或者指定成员不属于集合返回 &lt;nil&gt;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZSCORE myz1 hehe</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myz HAHA</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; ZSCORE myz gg</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ZMSCORE key member [member …] 批量获取指定成员的分值, 如果集合为空或者指定成员不属于集合返回 &lt;nil&gt;, Redis 6.2.0 支持</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZMSCORE myz HAHA hehe</span><br><span class="line">1) (nil)</span><br><span class="line">2) <span class="string">&quot;4&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZMSCORE myz1 hehe haha</span><br><span class="line">1) (nil)</span><br><span class="line">2) (nil)</span><br><span class="line">127.0.0.1:6379&gt; ZMSCORE myz hello gg</span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="遍历有序集合"><a href="#遍历有序集合" class="headerlink" title="遍历有序集合"></a>遍历有序集合</h4><ul>
<li><p>ZRANGE key start stop [BYSCORE|BYLEX] [REV] [LIMIT offset count] [WITHSCORES] 遍历有序集合的指定区间, 并返回默认递增顺序的成员</p>
<ul>
<li>start 起始指针, 默认 start 表示数字, 0 表示第一个成员</li>
<li>stop 结束指针, 默认 stop 表示数字, -1 表示最后 1 个成员, -2 表示倒数第 2 个成员</li>
<li>BYSCORE 成员按分值排序, 此模式 start 和 stop 代表分值, start 指针要考量最高分值, stop 指针考量最低分值, start 必须大于等于 stop 才能返回内容</li>
<li>BYLEX 成员按字典排序, 此模式 start 和 stop 代表字典, 行为类似于 <code>ZRANGEBYLEX</code>, 返回 start 和 stop 字典闭合区间的成员, start 和 stop 需要使用 <code>(</code> 或 <code>[</code> 前导符</li>
<li>REV 反向排序结果</li>
<li>LIMIT 指定返回结果的偏移量, 需要结合 <code>BYSCORE</code> <code>BYLEX</code> 使用</li>
<li>WITHSCORES 返回结果的分值</li>
</ul>
</li>
</ul>
<blockquote>
<p>ZRANGEBYSCORE 6.2.0 开始废弃, 使用 <code>ZRANGE BYSCORE</code> 代替<br>ZRANGEBYLEX 6.2.0 开始废弃, 使用 <code>ZRANGE BYLEX</code> 代替</p>
</blockquote>
<blockquote>
<p>ZREVRANGE 6.2.0 开始废弃, 使用 <code>ZRANGE REV</code> 代替<br>ZREVRANGEBYSCORE 6.2.0 开始废弃, 使用 <code>ZRANGE BYSCORE REV</code> 代替<br>ZREVRANGEBYLEX 6.2.0 开始废弃, 使用 <code>ZRANGE BYLEX REV</code> 代替</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myz 10 a 9 b 13 c 7 d 11 e 6 f</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"><span class="comment"># 匹配范围  8 &lt; score &lt; 13</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz (8 (13 BYSCORE WITHSCORES</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;9&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">4) <span class="string">&quot;10&quot;</span></span><br><span class="line">5) <span class="string">&quot;e&quot;</span></span><br><span class="line">6) <span class="string">&quot;11&quot;</span></span><br><span class="line"><span class="comment"># 反向排序结果</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 -1 REV WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;c&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;13&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;e&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;11&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;a&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;10&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;b&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;9&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;d&quot;</span></span><br><span class="line">10) <span class="string">&quot;7&quot;</span></span><br><span class="line">11) <span class="string">&quot;f&quot;</span></span><br><span class="line">12) <span class="string">&quot;6&quot;</span></span><br><span class="line"><span class="comment"># 匹配范围 0 到 正无穷大, 偏移 1 最多取 3 条</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myz 0 +inf BYSCORE LIMIT 1 3 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;d&quot;</span></span><br><span class="line">2) <span class="string">&quot;7&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;9&quot;</span></span><br><span class="line">5) <span class="string">&quot;a&quot;</span></span><br><span class="line">6) <span class="string">&quot;10&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>ZRANGESTORE dst src min max [BYSCORE|BYLEX] [REV] [LIMIT offset count] 命令行为和 <code>ZRANGE</code> 相似, 区别是把结果集存储到指定的集合 <code>dst</code> 中</p>
<ul>
<li>dst 存储结果集的指定集合</li>
<li>src 被操作的集合</li>
</ul>
</li>
<li><p>ZSCAN key cursor [MATCH pattern] [COUNT count] 迭代集合中的成员(包括成员和分值), 返回下一次游标开始的位置和结果, 游标 0 表示迭代已结束</p>
<ul>
<li>cursor 游标</li>
<li>pattern 匹配的模式</li>
<li>count 控制从数据集返回的成员数量, 默认为 10</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZSCAN myz1 0</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) (empty array)</span><br><span class="line">127.0.0.1:6379&gt; ZADD myz 1 a 2 b 3 c 4 d 5 e 6 f</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZSCAN myz 0 MATCH *e*</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;e&quot;</span></span><br><span class="line">   2) <span class="string">&quot;5&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取有序集合差异"><a href="#获取有序集合差异" class="headerlink" title="获取有序集合差异"></a>获取有序集合差异</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myz 1 a 2 b 3 c 4 d</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZADD myzz 5 e 6 b 7 c 8 f</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>ZDIFF numkeys key [key …] [WITHSCORES] 比较第一个集合和其他集合之间的差异并返回差异的结果, 第一个集合为空或者第一个集合的所有成员在出现在其他集合中返回(empty array), Redis 6.2.0 支持</p>
<ul>
<li>部分参数同 <code>ZDIFFSTORE</code></li>
</ul>
</li>
<li><p>ZDIFFSTORE destination numkeys key [key …] 比较第一个集合和其他集合之间的差异把差异结果存储到指定的集合中并返回指定集合的数量, 如果指定集合不存在则新建, 如果指定集合存在则覆盖指定集合, 0 表示未找到结果, Redis 6.2.0 支持</p>
<ul>
<li>numkeys 指定集合的数量, 值和 key 的数量不一致时返回语法错误 syntax error</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZDIFF 2 myz myzz WITHSCORES</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;d&quot;</span></span><br><span class="line">4) <span class="string">&quot;4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取差异并存储到指定集合</span></span><br><span class="line">127.0.0.1:6379&gt; ZDIFFSTORE destst 2 myz myzz</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE destst 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;d&quot;</span></span><br><span class="line">4) <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取有序集合交集"><a href="#获取有序集合交集" class="headerlink" title="获取有序集合交集"></a>获取有序集合交集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myz  1 a 2 b 3 c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; ZADD myzz 4 b 5 c 6 d</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>

<ul>
<li><p>ZINTER numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX] [WITHSCORES] 返回多个有序集合的交集, key 不存在被当作空集合, 当给定集合中有一个空集合时返回结果也为空集合(empty array), Redis 6.2.0 支持</p>
<ul>
<li>部分参数同 <code>ZINTERSTORE</code></li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取交集相同成员分值乘以权重后的求和</span></span><br><span class="line">127.0.0.1:6379&gt; ZINTER 2 myz myzz WEIGHTS 2 3 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;16&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;21&quot;</span></span><br><span class="line"><span class="comment"># 获取交集相同成员分值乘以权重后的最大值</span></span><br><span class="line">127.0.0.1:6379&gt; ZINTER 2 myz myzz WEIGHTS 2 3 AGGREGATE MAX WITHSCORES</span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;12&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;15&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>ZINTERCARD numkeys key [key …] [LIMIT limit] 返回多个有序集合的交集的数量, 0 表示未找到结果, Redis 7.0.0 支持</p>
</li>
<li><p>ZINTERSTORE destination numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX] 计算多个有序集合的交集将结果存储到指定集合并返回保存到指定集合的成员数量, 0 表示未找到结果</p>
<ul>
<li>destination 指定存储结果集的集合名字</li>
<li>numkeys 指定集合的数量, 值和 key 的数量不一致时返回语法错误 syntax error</li>
<li>WEIGHTS 指定每个排序集合的权重, 每个集合中的成员的分值都会乘以这个权重, 默认为 1, 如果指定此项, 则值的数量必须和 numkeys 一致, 否则报语法错误</li>
<li>AGGREATE 指定结果集聚合的条件, 默认 SUM<ul>
<li>SUM 结果集中保留相同成员和所有相同成员分值的求和</li>
<li>MIN 结果集中保留最小分值</li>
<li>MAX 结果集中保留最大分值</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果存在权重, 权重数量必须和 numkeys 保持一致</span></span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE destst 2 myz myzz WEIGHTS 1</span><br><span class="line">(error) ERR syntax error</span><br><span class="line"><span class="comment"># myz 和 myzz 权重都为 1</span></span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE destst 2 myz myzz WEIGHTS 1 1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 结果集计算, b: myz:2 + myzz:4 = 6, c: myz:3 + myzz:5 = 8</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE destst 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;8&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 myz 集合成员分值权重为 1, myzz 集合成员分值权重为 2</span></span><br><span class="line"><span class="comment"># myz 权重为 1, myzz 权重为 2</span></span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE destst 2 myz myzz WEIGHTS 1 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 结果集计算, b: myz:2 + myzz:4 * 2 = 10, c: myz:3 + myzz:5 * 2 = 13</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE destst 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;13&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 myz 集合成员分值权重为 3, myzz 集合成员分值权重为 2</span></span><br><span class="line"><span class="comment"># myz 权重为 3, myzz 权重为 2</span></span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE destst 2 myz myzz WEIGHTS 3 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 结果集计算, b: myz:2 * 3 + myzz:4 * 2 = 14, c: myz:3 * 3 + myzz:5 * 2 = 19</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE destst 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;19&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;14&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 myz 集合成员分值权重为 3, myzz 集合成员分值权重为 2, 结果集保存最小值</span></span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE destst 2 myz myzz WEIGHTS 3 2 AGGREGATE MIN</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 结果集计算, b: myz:2 * 3 = 6, myz:3 * 3 = 9</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE destst 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;9&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 myz 集合成员分值权重为 3, myzz 集合成员分值权重为 2, 结果集保存最大值</span></span><br><span class="line">127.0.0.1:6379&gt; ZINTERSTORE destst 2 myz myzz WEIGHTS 3 2 AGGREGATE MAX</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 结果集计算, b: myzz:4 * 2 = 8, myzz:5 * 2 = 10</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE destst 0 -1 WITHSCORES</span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">2) <span class="string">&quot;10&quot;</span></span><br><span class="line">3) <span class="string">&quot;b&quot;</span></span><br><span class="line">4) <span class="string">&quot;8&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取有序集合并集"><a href="#获取有序集合并集" class="headerlink" title="获取有序集合并集"></a>获取有序集合并集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD myz 1 a 2 b 3 c 4 d</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZADD myz1 5 e 6 b 7 c 8 f</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure>

<ul>
<li><p>ZUNION numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX] [WITHSCORES] 返回多个有序集合的并集并移除相同的成员只保留一个, 不存在的 key 被当作空集合, 集合都为空返回 (empty array), Redis 6.2.0 支持</p>
<ul>
<li>部分参数同 <code>ZUNIONSTORE</code></li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取并集其他成员分值乘以权重和相同成员分值乘以权重后的求和</span></span><br><span class="line">127.0.0.1:6379&gt; ZUNION 2 myz myz1 WEIGHTS 2 3 WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;a&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;2&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;d&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;8&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;e&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;15&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;b&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;22&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;f&quot;</span></span><br><span class="line">10) <span class="string">&quot;24&quot;</span></span><br><span class="line">11) <span class="string">&quot;c&quot;</span></span><br><span class="line">12) <span class="string">&quot;27&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ZUNIONSTORE destination numkeys key [key …] [WEIGHTS weight [weight …]] [AGGREGATE SUM|MIN|MAX] 计算多个有序集合的并集将结果存储到指定集合并返回保存到指定集合的成员数量, 如果指定集合不存在则新建, 如果指定集合已存在则覆盖指定集合, 0 表示未找到结果<ul>
<li>参数同 <code>ZINTERSTORE</code></li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取并集其他成员分值乘以权重和相同成员分值乘以权重后的最小值保存</span></span><br><span class="line">127.0.0.1:6379&gt; ZUNIONSTORE destst 2 myz myz1 WEIGHTS 3 4 AGGREGATE MIN</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE destst 0 -1 WITHSCORES</span><br><span class="line"> 1) <span class="string">&quot;a&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;3&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;b&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;6&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;c&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;9&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;d&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;12&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;e&quot;</span></span><br><span class="line">10) <span class="string">&quot;20&quot;</span></span><br><span class="line">11) <span class="string">&quot;f&quot;</span></span><br><span class="line">12) <span class="string">&quot;32&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用 "></a>应用 <!-- markdownlint-disable-line --></h4><ul>
<li>排行榜</li>
<li>用户点赞</li>
</ul>
]]></content>
      <categories>
        <category>server</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-String-Hash</title>
    <url>/2022/11/80b3dfc88923/</url>
    <content><![CDATA[<h3 id="Strings-命令"><a href="#Strings-命令" class="headerlink" title="Strings 命令"></a>Strings 命令</h3><p>字符串是基础的 key-value 类型, 存储字节序列, 包括文本、序列化对象和二进制数组, 一个 key 对应一个 value, value 可以是字符串、整数或浮点数, value 最多可以是 <strong>512MB</strong>.</p>
<p>String 类型的底层的数据结构实现主要是 int 和 SDS(Simple Dynamic String)</p>
<blockquote>
<p>因为 C 语言的字符串并不记录自身长度, 所以获取长度的复杂度为 O(n), SDS 结构里用 len 属性记录字符串长度, 所有复杂度为 O(1)</p>
</blockquote>
<h4 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h4><ul>
<li><p>SET key value [NX|XX] [GET] [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|KEEPTTL]</p>
<p>为 key 设置字符串的值, 执行成功返回 ok, 每次更新 key 的值时会自动清除过期时间</p>
<ul>
<li>NX 仅当 key 不存在时设置</li>
<li>XX 仅当 key 存在时设置</li>
<li>EX 过期时间, 单位秒</li>
<li>PX 过期时间, 单位毫秒</li>
<li>EXAT 过期时间戳, 单位秒</li>
<li>PXAT 过期时间戳, 单位毫秒</li>
<li>KEEPTTL 保留 key 关联的生存时间</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE age 100</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; TTL age</span><br><span class="line">(<span class="built_in">integer</span>) 98</span><br><span class="line">127.0.0.1:6379&gt; SET age 20</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; TTL age</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 KEEPTTL 保留 key 关联的生存时间</span></span><br><span class="line">127.0.0.1:6379&gt; SET age 18 EX 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; TTL age</span><br><span class="line">(<span class="built_in">integer</span>) 98</span><br><span class="line">127.0.0.1:6379&gt; SET age 20 KEEPTTL</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET age</span><br><span class="line"><span class="string">&quot;20&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; TTL age</span><br><span class="line">(<span class="built_in">integer</span>) 79</span><br></pre></td></tr></table></figure>

<ul>
<li>SETNX key value 当 key 不存在时设置指定 key 的值, 返回值 1 成功, 0 失败</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SETNX age 18</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SETNX age 18</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>APPEND key value 在指定 key 末尾(如果为字符串)追加内容, key 不存在同 <code>SET</code> 并返回追加内容的长度</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; APPEND age 1</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; GET age</span><br><span class="line"><span class="string">&quot;181&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; APPEND addr beijing</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;addr&quot;</span></span><br><span class="line">4) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; APPEND a hello</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; APPEND b gg</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure>

<h5 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h5><ul>
<li>SETEX key seconds value 设置 key 的值并设置过期时间(单位秒), 返回 ok</li>
<li>PSETEX key milliseconds value 设置 key 的值的值并设置过期时间(单位毫秒), 返回 ok</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETEX addr 20 beijing</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PSETEX addr 20000 beijing</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h5 id="批量设置值"><a href="#批量设置值" class="headerlink" title="批量设置值"></a>批量设置值</h5><ul>
<li>MSET key value [key value …] 批量设置 key 的值</li>
<li>MSETNX key value [key value …] 批量设置 key 的值且当所有的 key 不存在时, 返回值 1 成功, 0 失败</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">3) <span class="string">&quot;hash:zhang&quot;</span></span><br><span class="line"><span class="comment"># 当且仅当所有 key 都不存在时设置成功返回 1</span></span><br><span class="line">127.0.0.1:6379&gt; MSETNX name zhangsan age 18 addr beijing</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>

<ul>
<li><p>SETRANGE key offset value</p>
<p>覆盖指定 key 的从指定偏移量开始的字符串的一部分, 返回修改后字符串长度, key 不存在则新建</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SETRANG name 1 xyz</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line">127.0.0.1:6379&gt; GET name</span><br><span class="line"><span class="string">&quot;axyz1234&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h4><ul>
<li>GET key 获取一个 key 的值, 不存在返回 &lt;nil&gt;</li>
<li>GETSET key value 设置指定 key 的值并返回原来的值, key 不存在返回 &lt;nil&gt;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GETSET age 18</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>GETEX key [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|PERSIST]</p>
<p>获取指定 key 的值并设置过期时间, key 不存在返回 &lt;nil&gt;</p>
<ul>
<li>PERSIST 移除 key 关联的生存时间</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GETEX addr EX 50</span><br><span class="line"><span class="string">&quot;beijing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; TTL addr</span><br><span class="line">(<span class="built_in">integer</span>) 46</span><br><span class="line">127.0.0.1:6379&gt; PTTL addr</span><br><span class="line">(<span class="built_in">integer</span>) 42757</span><br><span class="line">127.0.0.1:6379&gt; PERSIST addr <span class="comment"># 移除过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; TTL addr</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br></pre></td></tr></table></figure>

<ul>
<li>GETDEL key 获取指定 key 的值并删除, key 不存在返回 &lt;nil&gt;</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GETDEL age</span><br><span class="line"><span class="string">&quot;18&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>STRLEN key 返回指定 key 的值的长度, key 不存在返回 0</li>
</ul>
<h5 id="批量获取值"><a href="#批量获取值" class="headerlink" title="批量获取值"></a>批量获取值</h5><ul>
<li><p>MGET key [key …] 批量获取 key 的值, key 不存在返回 &lt;nil&gt;</p>
</li>
<li><p>GETRANGE key start end 返回指定 key 的指定范围的子串部分, key 不存在返回 <code>&quot;&quot;</code></p>
<ul>
<li>start, end 只支持整数, 其他类型会报错</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GETRANGE name -inf +inf</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE name - +</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE name (1 (4</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE name [1 [4</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; GETRANGE name 1 4</span><br><span class="line"><span class="string">&quot;uole&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SUBSTR key start end 返回指定 key 的指定范围的子串部分, key 不存在返回 <code>&quot;&quot;</code><ul>
<li>start, end 只支持整数, 其他类型会报错</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSTR name -inf +inf</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">127.0.0.1:6379&gt; SUBSTR name (1 (4</span><br><span class="line">(error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br></pre></td></tr></table></figure>

<h4 id="数值操作"><a href="#数值操作" class="headerlink" title="数值操作"></a>数值操作</h4><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h5><ul>
<li>INCR key 将 key 中存储的数字值增加 1 并返回修改后的值, 非数字值或值为浮点数报错, key 不存在从 0 开始计算</li>
<li>INCRBY key increment 将 key 中存储的数字值加上给定的增量值(increment), 返回值同 <code>INCR</code></li>
<li>INCRBYFLOAT key increment 将 key 中存储的数字值加上给定的浮点增量值(increment), 返回值同 <code>INCR</code></li>
</ul>
<h5 id="减少"><a href="#减少" class="headerlink" title="减少"></a>减少</h5><ul>
<li>DECR key 将 key 中存储的数字值减 1 并返回修改后的值, 非数字值或者值为浮点数会报错, key 不存在从 0 开始计算</li>
<li>DECRBY key decrement 将 key 中存储的数字值减去给定的增量值(decrement), 返回值同 <code>DECR</code></li>
</ul>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul>
<li>共享 session</li>
<li>分布式锁</li>
<li>计数器</li>
<li>限流</li>
</ul>
<h3 id="Hashes-命令"><a href="#Hashes-命令" class="headerlink" title="Hashes 命令"></a>Hashes 命令</h3><blockquote>
<p>Redis 7.0 之后, 压缩列表数据结构由 listpack 数据结构实现</p>
</blockquote>
<p>hash 是一个 string 类型的 field(字段) 和 value(值)的映射表, hash 适合用于存储对象, 每个 hash 可以存储 2^32-1(40 多亿)键值对</p>
<p>Hashes: 键名: key, 键类型: hash, 键值: string {field =&gt; value}</p>
<p>Hash 类型的底层数据结构是由<strong>压缩列表</strong>或<strong>哈希表</strong>实现的</p>
<ul>
<li>如果哈希类型元素的个数小于 512 个, 每个元素值都小于 64B 时, Redis 使用<strong>压缩列表</strong>作为底层数据结构</li>
<li>如果哈希类型元素不满足上面的条件, Redis 使用<strong>哈希表</strong>作为底层数据结构</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置底层数据结构存储数量限制</span></span><br><span class="line"><span class="string">hash-max-listpack-entries</span> <span class="number">512</span></span><br><span class="line"><span class="string">hash-max-listpack-value</span> <span class="number">64</span></span><br></pre></td></tr></table></figure>

<h4 id="哈希存取"><a href="#哈希存取" class="headerlink" title="哈希存取"></a>哈希存取</h4><ul>
<li>HSETNX key field value 将键值对存入到哈希表中且当指定 field 不存在时, 1 成功, 0 失败(字段已存在)</li>
<li>HSET key field value [field value …] 同时将多个键值对存入到哈希表中并返回新添加的数量, 如果 field 已存在则修改 field 的值</li>
<li>HMSET key field value [field value …] 批量向哈希表中存入多个键值对, 如果 field 存在则修改 field 的值, 执行成功返回 ok</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 成功添加一个 field 并修改已存在的 field</span></span><br><span class="line">127.0.0.1:6379&gt; HSET runoob name <span class="string">&quot;new-redis&quot;</span> age 19 addr <span class="string">&quot;beijing&quot;</span> sex <span class="string">&quot;男&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; HMSET runoob name redis newname <span class="string">&quot;new-redis&quot;</span> age 18 addr <span class="string">&quot;beijing&quot;</span> sex <span class="string">&quot;男&quot;</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<ul>
<li>HGET key field 获取哈希表指定 field 的值, field 或者 哈希表不存在返回 &lt;nil&gt;</li>
<li>HMGET key field [field …] 批量获取哈希表中指定 field 的值, 哈希表或者指定字段不存在返回 &lt;nil&gt;</li>
<li>HGETALL key 获取哈希表中所有的字段和值, 未找到或者哈希表不存在返回 (empty array)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGET xiaoming name</span><br><span class="line"><span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HMGET xiaoming name age addr</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL xiaoming</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;1&quot;</span></span><br><span class="line">5) <span class="string">&quot;addr&quot;</span></span><br><span class="line">6) <span class="string">&quot;beijing&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="哈希删除字段"><a href="#哈希删除字段" class="headerlink" title="哈希删除字段"></a>哈希删除字段</h4><ul>
<li><p>HEXISTS key field 查看哈希表中是否存在 field, 1 表示存在, 0 表示不存在或者哈希表不存在</p>
</li>
<li><p>HDEL key field [field …] 批量删除多个 field 并返回删除字段成功的数量, 0 表示 field 未找到或者哈希表不存在</p>
</li>
</ul>
<h4 id="获取哈希键、值、长度"><a href="#获取哈希键、值、长度" class="headerlink" title="获取哈希键、值、长度"></a>获取哈希键、值、长度</h4><ul>
<li>HLEN key 获取哈希表中字段的数量, 0 表示哈希表为空或者不存在</li>
<li>HSTRLEN key field 返回哈希表中指定 field 的值的字符串长度, 哈希表或者指定字段不存在返回 0</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HLEN xiaoming</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; HSTRLEN xiaoming name</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br></pre></td></tr></table></figure>

<ul>
<li>HKEYS key 获取哈希表中所有的字段, 哈希表为空或者不存在返回 (empty array)</li>
<li>HVALS key 获取哈希表中所有的值, 哈希表为空或者不存在返回 (empty array)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HKEYS xiaoming</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;addr&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HVALS xiaoming</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;1&quot;</span></span><br><span class="line">3) <span class="string">&quot;beijing&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="哈希字段数值操作"><a href="#哈希字段数值操作" class="headerlink" title="哈希字段数值操作"></a>哈希字段数值操作</h4><ul>
<li>HINCRBY key field increment 为哈希表中指定的 field 的数字值加上给定的增量值(increment)并返回修改后的值, 非数字值报错, 哈希表不存在新建, 字段不存在从 0 开始计算</li>
<li>HINCRBYFLOAT key field increment 为哈希表中指定的 field 的数字值加上给定的浮点数增量值(increment)并返回修改后的值, 非数字值报错, 哈希表不存在新建, 字段不存在从 0 开始计算</li>
</ul>
<h4 id="迭代哈希"><a href="#迭代哈希" class="headerlink" title="迭代哈希"></a>迭代哈希</h4><ul>
<li>HSCAN key cursor [MATCH pattern] [COUNT count] 使用模式(pattern)匹配迭代哈希表中的键值对<ul>
<li>cursor 游标</li>
<li>pattern 匹配的模式</li>
<li>count 指定从数据集里返回多少元素, 默认为 10</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSCAN runoob 0 MATCH *name COUNT 100</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">   2) <span class="string">&quot;redis&quot;</span></span><br><span class="line">   3) <span class="string">&quot;newname&quot;</span></span><br><span class="line">   4) <span class="string">&quot;new-redis&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="随机获取哈希字段"><a href="#随机获取哈希字段" class="headerlink" title="随机获取哈希字段"></a>随机获取哈希字段</h4><ul>
<li>HRANDFIELD key [count [WITHVALUES]] 从哈希表中获取一个或多个随机字段, 哈希表为空返回 &lt;nil&gt;<ul>
<li>count 指定返回随机的字段的数量, 默认为 1</li>
<li>WITHVALUES 指定返回随机的字段和值</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HRANDFIELD runoob</span><br><span class="line"><span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HRANDFIELD runoob 3</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;addr&quot;</span></span><br><span class="line">3) <span class="string">&quot;sex&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HRANDFIELD runoob 3 WITHVALUES</span><br><span class="line">1) <span class="string">&quot;newname&quot;</span></span><br><span class="line">2) <span class="string">&quot;new-redis&quot;</span></span><br><span class="line">3) <span class="string">&quot;addr&quot;</span></span><br><span class="line">4) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">5) <span class="string">&quot;sex&quot;</span></span><br><span class="line">6) <span class="string">&quot;\xe7\x94\xb7&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HRANDFIELD newrunoob</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><h5 id="存储用户的基本信息"><a href="#存储用户的基本信息" class="headerlink" title="存储用户的基本信息"></a>存储用户的基本信息</h5><p>以用户 uid 作为 key, 用户的基本信息组成的 field =&gt; value 作为值, 使用 hash 存储</p>
<p>key 的格式: {uid}<br>value 的格式: {age =&gt; 18}, {addr =&gt; beijing}</p>
]]></content>
      <categories>
        <category>server</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream</title>
    <url>/2023/04/628a49166594/</url>
    <content><![CDATA[<h2 id="可读流"><a href="#可读流" class="headerlink" title="可读流"></a>可读流</h2><h3 id="ReadableStream"><a href="#ReadableStream" class="headerlink" title="ReadableStream"></a>ReadableStream</h3><p>创建并从给定的 Handler 返回一个可读流对象</p>
<h4 id="RS-构造方法"><a href="#RS-构造方法" class="headerlink" title="RS 构造方法"></a>RS 构造方法</h4><p>创建并从给定的处理程序返回一个可读的流对象</p>
<h5 id="可读流配置项"><a href="#可读流配置项" class="headerlink" title="可读流配置项"></a>可读流配置项</h5><p><code>underlyingSource</code> 可选的定义可读流的行为方式的配置项</p>
<ul>
<li>start(controller) 由开发人员定义, 当流对象被创建时立刻调用, 执行其他任何必须的设置流功能, 如果过程是异步的则返回一个 Promise<ul>
<li>controller 根据 <code>type=&#39;bytes&#39;</code> 属性传递的 <code>ReadableStreamDefaultController</code> 或 <code>ReadableByteStreamController</code> 控制器实例</li>
</ul>
</li>
<li>pull(controller) 由开发人员定义, 当流的内部队列不满时, 会重复调用这个方法, 直到队列补满</li>
<li>cancel(reason) 由开发人员定义, 当该流被取消时调用</li>
<li>type 控制正在处理的可读类型的流, 默认 <code>ReadableStreamDefaultController</code>, <code>type=&#39;bytes&#39;</code> 表示 <code>ReadableByteStreamController</code></li>
<li>autoAllocateChunkSize 开启流自动分配缓冲区, 使用正整数设置</li>
</ul>
<span id="more"></span>

<h5 id="可读流队列策略配置项"><a href="#可读流队列策略配置项" class="headerlink" title="可读流队列策略配置项"></a>可读流队列策略配置项</h5><p><code>queuingStrategy</code> 可选的为流定义排队策略的配置项</p>
<ul>
<li>highWaterMark 非负整数, 定义应用在背压之前可以包含在内部队列中的块的总数</li>
<li>size(chunk) 表示每个分块使用的大小(以字节为单位)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> queuingStrategy = <span class="keyword">new</span> <span class="title class_">CountQueuingStrategy</span>(&#123; <span class="attr">highWaterMark</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> rs = <span class="keyword">new</span> <span class="title class_">ReadableStream</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 当创建实例时执行, 用于设置流功能, 可以返回一个 Promise</span></span><br><span class="line">    <span class="title function_">start</span>(<span class="params">controller</span>) &#123;</span><br><span class="line">      interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> string = <span class="title function_">randomChars</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the string to the stream</span></span><br><span class="line">        controller.<span class="title function_">enqueue</span>(string);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// show it on the screen</span></span><br><span class="line">        <span class="keyword">let</span> listItem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        listItem.<span class="property">textContent</span> = string;</span><br><span class="line">        list1.<span class="title function_">appendChild</span>(listItem);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">        <span class="title function_">fetchStream</span>();</span><br><span class="line">        controller.<span class="title function_">close</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// // 当流的内部队列不满时, 会重复调用这个方法, 直到队列补满, 如果返回一个 promise, 此方法将不会再被调用</span></span><br><span class="line">    <span class="comment">// pull(controller) &#123;</span></span><br><span class="line">    <span class="comment">//   // We don&#x27;t really need a pull in this example</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// // 应用程序调用此方法将该流取消, 可以返回一个 Promise</span></span><br><span class="line">    <span class="comment">// cancel() &#123;</span></span><br><span class="line">    <span class="comment">//   // This is called if the reader cancels,</span></span><br><span class="line">    <span class="comment">//   // so we should stop generating strings</span></span><br><span class="line">    <span class="comment">//   clearInterval(interval);</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// type: &#x27;&#x27;, // 表示该流的类型</span></span><br><span class="line">    <span class="comment">// autoAllocateChunkSize: &#x27;&#x27;, // 开启流自动分配缓冲区</span></span><br><span class="line">  &#125;,</span><br><span class="line">  queuingStrategy</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="RS-实例属性"><a href="#RS-实例属性" class="headerlink" title="RS 实例属性"></a>RS 实例属性</h4><ul>
<li>locked 只读属性, 返回该可读流是否被锁定到一个 reader</li>
</ul>
<h4 id="RS-实例方法"><a href="#RS-实例方法" class="headerlink" title="RS 实例方法"></a>RS 实例方法</h4><h5 id="RS-cancel-reason"><a href="#RS-cancel-reason" class="headerlink" title="RS.cancel(reason)"></a>RS.cancel(reason)</h5><p>取消读取流, 可以传入 reason 参数表示取消原因, 该参数将回传给调用方</p>
<h5 id="RS-getReader-mode"><a href="#RS-getReader-mode" class="headerlink" title="RS.getReader(mode)"></a>RS.getReader(mode)</h5><p>将流锁定到该实例, 一旦流被锁定, 其他 reader 不能读取直到释放</p>
<ul>
<li>默认返回一个 <code>ReadableStreamDefaultReader</code> 实例</li>
<li><code>&#123; mode: &#39;byob&#39; &#125;</code> 返回一个 <code>ReadableStreamBYOBReader</code> 实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 ReadableStreamDefaultReader 实例</span></span><br><span class="line"><span class="keyword">const</span> reader = rs.<span class="title function_">getReader</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 ReadableStreamBYOBReader 实例</span></span><br><span class="line"><span class="keyword">const</span> reader = rs.<span class="title function_">getReader</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;byob&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<h5 id="RS-pipeThrough-transformStream-options"><a href="#RS-pipeThrough-transformStream-options" class="headerlink" title="RS.pipeThrough(transformStream, options)"></a>RS.pipeThrough(transformStream, options)</h5><p>提供当前流管道输出到一个 transform 流或 writable/readable 流对的链式方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;png-logo.png&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="property">body</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">body</span>) =&gt;</span> body.<span class="title function_">pipeThrough</span>(<span class="keyword">new</span> <span class="title class_">PNGTransformStream</span>()))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">rs</span>) =&gt;</span> rs.<span class="title function_">pipeTo</span>(<span class="keyword">new</span> <span class="title class_">FinalDestinationStream</span>()));</span><br></pre></td></tr></table></figure>

<h5 id="RS-pipeTo-destination-options"><a href="#RS-pipeTo-destination-options" class="headerlink" title="RS.pipeTo(destination, options)"></a>RS.pipeTo(destination, options)</h5><p>将当前 <code>ReadableStream</code> 管道输出到给定的 <code>WritableStream</code>, 并返回一个 Promise</p>
<h5 id="RS-tee"><a href="#RS-tee" class="headerlink" title="RS.tee()"></a>RS.tee()</h5><p>返回包含两个 <code>ReadableStream</code> 实例分支的数组, 每个元素接收了相同的传输数据</p>
<h3 id="默认读取流"><a href="#默认读取流" class="headerlink" title="默认读取流"></a>默认读取流</h3><blockquote>
<p>通常不需要手动创建, 可以使用 <code>ReadableStream.getReader()</code> 方法获取</p>
</blockquote>
<p><code>ReadableStreamDefaultReader</code> 表示一个用于读取来自网络提供的流数据(例如 fetch 请求)的<strong>默认读取器</strong></p>
<p><code>ReadableStreamDefaultReader</code> 可以用于读取底层为任意类型源的 <code>ReadableStream</code>(与 ReadableStreamBYOBReader 不同, 后者仅可以与底层为字节源的可读流一起使用)</p>
<h4 id="RSDR-构造方法"><a href="#RSDR-构造方法" class="headerlink" title="RSDR 构造方法"></a>RSDR 构造方法</h4><p>构造方法创建并返回一个 <code>ReadableStreamDefaultReader</code> 实例, 通常不需要手动创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数 stream 为将被读取的 ReadableStream;</span></span><br><span class="line"><span class="keyword">const</span> rsdr = <span class="keyword">new</span> <span class="title class_">ReadableStreamDefaultReader</span>(stream);</span><br></pre></td></tr></table></figure>

<h4 id="RSDR-实例属性"><a href="#RSDR-实例属性" class="headerlink" title="RSDR 实例属性"></a>RSDR 实例属性</h4><ul>
<li>closed 只读属性, 返回一个 Promise, 在流关闭时兑现</li>
</ul>
<h4 id="RSDR-实例方法"><a href="#RSDR-实例方法" class="headerlink" title="RSDR 实例方法"></a>RSDR 实例方法</h4><h5 id="RSDR-cancel-reason"><a href="#RSDR-cancel-reason" class="headerlink" title="RSDR.cancel(reason)"></a>RSDR.cancel(reason)</h5><p>返回一个 Promise, 当流被取消时兑现, 调用此方法取消流可传入 reason 参数表示取消原因</p>
<h5 id="RSDR-read"><a href="#RSDR-read" class="headerlink" title="RSDR.read()"></a>RSDR.read()</h5><p>返回一个 Promise, 提供对流内部队列中下一个分块的访问权限 {value: theChunk, done: false} 表示可用, {value: undefined, done: true} 表示流已关闭</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rsdr = rs.<span class="title function_">getReader</span>();</span><br><span class="line">rsdr.<span class="title function_">read</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">&#123; done, value &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (done) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rsdr complete...&#x27;</span>);</span><br><span class="line">    <span class="comment">// 取消流</span></span><br><span class="line">    rsdr.<span class="title function_">cancel</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放读取流的锁</span></span><br><span class="line">rsdr.<span class="title function_">releaseLock</span>();</span><br></pre></td></tr></table></figure>

<h5 id="RSDR-releaseLock"><a href="#RSDR-releaseLock" class="headerlink" title="RSDR.releaseLock()"></a>RSDR.releaseLock()</h5><p>释放读取这个流的锁</p>
<h3 id="字节读取流"><a href="#字节读取流" class="headerlink" title="字节读取流"></a>字节读取流</h3><blockquote>
<p>通常不需要手动创建，使用 <code>ReadableStream.getReader(&#123; mode: &#39;byob&#39; &#125;)</code> 方法获取</p>
</blockquote>
<p><code>ReadableStreamBYOBReader</code> 表示一个支持从底层字节源进行零拷贝读取的读取器, 用于从底层源进行高效复制, 其中数据以匿名字节序列的形式传递</p>
<h4 id="RSBYOBR-构造方法"><a href="#RSBYOBR-构造方法" class="headerlink" title="RSBYOBR 构造方法"></a>RSBYOBR 构造方法</h4><p>构造方法创建并返回一个 <code>ReadableStreamBYOBReader</code> 实例, 通常不需要手动创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数 stream 为将被读取的 ReadableStream</span></span><br><span class="line"><span class="keyword">const</span> rsbyobr = <span class="keyword">new</span> <span class="title class_">ReadableStreamBYOBReader</span>(stream);</span><br></pre></td></tr></table></figure>

<h4 id="RSBYOBR-实例属性"><a href="#RSBYOBR-实例属性" class="headerlink" title="RSBYOBR 实例属性"></a>RSBYOBR 实例属性</h4><ul>
<li>closed 只读属性, 返回一个 Promise, 在流关闭时兑现</li>
</ul>
<h4 id="RSBYOBR-实例方法"><a href="#RSBYOBR-实例方法" class="headerlink" title="RSBYOBR 实例方法"></a>RSBYOBR 实例方法</h4><h5 id="RSBYOBR-cancel-reason"><a href="#RSBYOBR-cancel-reason" class="headerlink" title="RSBYOBR.cancel(reason)"></a>RSBYOBR.cancel(reason)</h5><p>返回一个 Promise, 当流被取消时兑现, 调用此方法取消流可传入 reason 参数表示取消原因</p>
<h5 id="RSBYOBR-read-view"><a href="#RSBYOBR-read-view" class="headerlink" title="RSBYOBR.read(view)"></a>RSBYOBR.read(view)</h5><p>传递一个必须写入数据的视图, 并返回一个 Promise 解析为流中的下一个块的视图或者表示流已关闭或出错的指示的视图</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rsbyobr = rs.<span class="title function_">getReader</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;byob&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">4000</span>));</span><br><span class="line">rsbyobr.<span class="title function_">read</span>(buffer).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">&#123; done, value &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (done) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rsbyobr complete...&#x27;</span>);</span><br><span class="line">    <span class="comment">// 取消流</span></span><br><span class="line">    rsbyobr.<span class="title function_">cancel</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放读取流的锁</span></span><br><span class="line">rsbyobr.<span class="title function_">releaseLock</span>();</span><br></pre></td></tr></table></figure>

<h5 id="RSBYOBR-releaseLock"><a href="#RSBYOBR-releaseLock" class="headerlink" title="RSBYOBR.releaseLock()"></a>RSBYOBR.releaseLock()</h5><p>释放读取这个流的锁</p>
<h3 id="默认读取流控制器"><a href="#默认读取流控制器" class="headerlink" title="默认读取流控制器"></a>默认读取流控制器</h3><blockquote>
<p><strong>无构造函数</strong>, <code>ReadableStreamDefaultController</code> 实例会在构造 <code>ReadableStream</code> 时被自动创建</p>
</blockquote>
<p><code>ReadableStreamDefaultController</code> 接口是一个控制器, 允许控制 <code>ReadableStream</code> 的状态和内部队列, 默认控制器用于不是字节流的流</p>
<h4 id="RSDC-实例属性"><a href="#RSDC-实例属性" class="headerlink" title="RSDC 实例属性"></a>RSDC 实例属性</h4><ul>
<li>desiredSize 只读属性, 返回填充满流的内部队列所需要的大小</li>
</ul>
<h4 id="RSDC-实例方法"><a href="#RSDC-实例方法" class="headerlink" title="RSDC 实例方法"></a>RSDC 实例方法</h4><h5 id="RSDC-close"><a href="#RSDC-close" class="headerlink" title="RSDC.close()"></a>RSDC.close()</h5><p>关闭关联的流</p>
<h5 id="RSDC-enqueue-chunk"><a href="#RSDC-enqueue-chunk" class="headerlink" title="RSDC.enqueue(chunk)"></a>RSDC.enqueue(chunk)</h5><p>将给定的块加入关联的流</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按下按钮时, 关闭流并运行另一个函数从流中读取数据</span></span><br><span class="line"><span class="keyword">let</span> interval;</span><br><span class="line"><span class="keyword">const</span> rs = <span class="keyword">new</span> <span class="title class_">ReadableStream</span>(&#123;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params">controller</span>) &#123;</span><br><span class="line">    interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> string = <span class="title function_">randomChars</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add the string to the stream</span></span><br><span class="line">      controller.<span class="title function_">enqueue</span>(string);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// show it on the screen</span></span><br><span class="line">      <span class="keyword">let</span> listItem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">      listItem.<span class="property">textContent</span> = string;</span><br><span class="line">      list1.<span class="title function_">appendChild</span>(listItem);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">      <span class="title function_">fetchStream</span>();</span><br><span class="line">      controller.<span class="title function_">close</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">pull</span>(<span class="params">controller</span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">cancel</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="RSDC-error-message"><a href="#RSDC-error-message" class="headerlink" title="RSDC.error(message)"></a>RSDC.error(message)</h5><p>导致未来任何与关联流的交互都会出错</p>
<h3 id="字节读取流控制器"><a href="#字节读取流控制器" class="headerlink" title="字节读取流控制器"></a>字节读取流控制器</h3><blockquote>
<p><strong>无构造函数</strong>, 当构造 <code>ReadableStream</code> 时, <code>type=&quot;bytes&quot;</code> 将自动创建 <code>ReadableByteStreamController</code> 实例</p>
</blockquote>
<p><code>ReadableByteStreamController</code> 接口是一个控制器, 允许控制具有底层字节源的状态和内部队列, 并在流的内部队列为空时实现从底层源到消费者的高效零拷贝数据传输</p>
<h4 id="RBSC-实例属性"><a href="#RBSC-实例属性" class="headerlink" title="RBSC 实例属性"></a>RBSC 实例属性</h4><ul>
<li>byobRequest 返回当前的 <code>BYOB</code> 拉取请求, 如果没有未处理的请求则返回 null</li>
<li>desiredSize 返回填充流内部队列所需的大小</li>
</ul>
<h4 id="RBSC-实例方法"><a href="#RBSC-实例方法" class="headerlink" title="RBSC 实例方法"></a>RBSC 实例方法</h4><h5 id="RBSC-close"><a href="#RBSC-close" class="headerlink" title="RBSC.close()"></a>RBSC.close()</h5><p>关闭关联的流</p>
<h5 id="RBSC-enqueue-chunk"><a href="#RBSC-enqueue-chunk" class="headerlink" title="RBSC.enqueue(chunk)"></a>RBSC.enqueue(chunk)</h5><p>将给定的块加入关联的流</p>
<h5 id="RBSC-error-message"><a href="#RBSC-error-message" class="headerlink" title="RBSC.error(message)"></a>RBSC.error(message)</h5><p>导致未来任何与关联流的交互都会出错</p>
<h2 id="可写流"><a href="#可写流" class="headerlink" title="可写流"></a>可写流</h2><h3 id="WritableStream"><a href="#WritableStream" class="headerlink" title="WritableStream"></a>WritableStream</h3><p>将流数据写入目的地(称为 sink) 提供了一个标准的抽象</p>
<h4 id="WS-构造方法"><a href="#WS-构造方法" class="headerlink" title="WS 构造方法"></a>WS 构造方法</h4><p>创建一个新的 <code>WritableStream</code> 实例</p>
<h5 id="可写流配置项"><a href="#可写流配置项" class="headerlink" title="可写流配置项"></a>可写流配置项</h5><p><code>underlyingSource</code> 可选的定义可读流的行为方式的配置项</p>
<ul>
<li>start(controller) 由开发人员定义, 当流对象被创建时立刻调用, 执行其他任何必须的设置流功能, 如果过程是异步的则返回一个 Promise<ul>
<li>controller 传递的 <code>WritableStreamDefaultController</code> 控制器实例</li>
</ul>
</li>
<li>write(chunk, controller) 由开发人员定义, 当新数据块准备好写入底层接收器时将被调用<ul>
<li>chunk 指定的数据块</li>
</ul>
</li>
<li>close(controller) 由开发人员定义, 如果应用发出信号表明它已完成块写入流, 则将调用此方法</li>
<li>abort(reason) 由开发人员定义, 如果应用发出信号表示它希望突然关闭流并将其置于错误状态, 则将调用此方法</li>
</ul>
<h5 id="可写流队列策略配置项"><a href="#可写流队列策略配置项" class="headerlink" title="可写流队列策略配置项"></a>可写流队列策略配置项</h5><p><code>queuingStrategy</code> 可选的为流定义排队策略的配置项</p>
<ul>
<li>highWaterMark 非负整数, 定义应用在背压之前可以包含在内部队列中的块的总数</li>
<li>size(chunk) 表示每个分块使用的大小(以字节为单位)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> queuingStrategy = <span class="keyword">new</span> <span class="title class_">CountQueuingStrategy</span>(&#123; <span class="attr">highWaterMark</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WritableStream</span>(&#123;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params">controller</span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">write</span>(<span class="params">chunk, controller</span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">close</span>(<span class="params">controller</span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">abort</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error &#x27;</span>, reason);</span><br><span class="line">  &#125;,</span><br><span class="line">  queuingStrategy,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="WS-实例属性"><a href="#WS-实例属性" class="headerlink" title="WS 实例属性"></a>WS 实例属性</h4><ul>
<li>locked 只读属性, 返回可写流是否已锁定一个 writer</li>
</ul>
<h4 id="WS-实例方法"><a href="#WS-实例方法" class="headerlink" title="WS 实例方法"></a>WS 实例方法</h4><h5 id="WS-close"><a href="#WS-close" class="headerlink" title="WS.close()"></a>WS.close()</h5><p>关闭关联的流</p>
<h5 id="WS-abort-reason"><a href="#WS-abort-reason" class="headerlink" title="WS.abort(reason)"></a>WS.abort(reason)</h5><p>中止流, 表示不再向流中写入数据(立刻返回一个错误状态) 并丢球所有已入队的数据</p>
<h5 id="WS-getWriter"><a href="#WS-getWriter" class="headerlink" title="WS.getWriter()"></a>WS.getWriter()</h5><p>返回一个新的 <code>WritableStreamDefaultWriter</code> 实例并且将流锁定到该实例, 一旦流被锁定, 其他 writer 不能写入直到释放</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> decoder = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>(<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> queuingStrategy = <span class="keyword">new</span> <span class="title class_">CountQueuingStrategy</span>(&#123; <span class="attr">highWaterMark</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> writer = <span class="keyword">new</span> <span class="title class_">WritableStream</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 当创建实例时执行, 用于设置流功能, 可以返回一个 Promise</span></span><br><span class="line">    <span class="title function_">start</span>(<span class="params">controller</span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">// 当一个新的 chunk 准备好写入 sink 时调用此方法, 可以返回一个 Promise 来表示写入操作的成功或者失败</span></span><br><span class="line">    <span class="title function_">write</span>(<span class="params">chunk, controller</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer);</span><br><span class="line">        view[<span class="number">0</span>] = chunk;</span><br><span class="line">        <span class="keyword">var</span> decoded = decoder.<span class="title function_">decode</span>(view, &#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        <span class="keyword">var</span> listItem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        listItem.<span class="property">textContent</span> = <span class="string">&#x27;Chunk decoded: &#x27;</span> + decoded;</span><br><span class="line">        list.<span class="title function_">appendChild</span>(listItem);</span><br><span class="line">        result += decoded;</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当应用程序完成所有 chunk 的写入时执行此方法, 可以返回一个 Promise 表示操作成功或失败</span></span><br><span class="line">    <span class="title function_">close</span>(<span class="params">controller</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> listItem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">      listItem.<span class="property">textContent</span> = <span class="string">&#x27;[MESSAGE RECEIVED] &#x27;</span> + result;</span><br><span class="line">      list.<span class="title function_">appendChild</span>(listItem);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 立即关闭流并且丢弃所有入队数据时执行此方法, 可以返回一个 Promise 表示操作成功或失败</span></span><br><span class="line">    <span class="title function_">abort</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Sink error:&#x27;</span>, err);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  queuingStrategy</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="默认写入流"><a href="#默认写入流" class="headerlink" title="默认写入流"></a>默认写入流</h3><blockquote>
<p>通常不需要手动创建, 可以使用 <code>WritableStream.getWriter()</code> 方法获取</p>
</blockquote>
<p><code>WritableStreamDefaultWriter</code> 一旦创建就会锁定 Writer, 以确保没有其他流可以写入底层接收器</p>
<h4 id="WSDW-构造方法"><a href="#WSDW-构造方法" class="headerlink" title="WSDW 构造方法"></a>WSDW 构造方法</h4><p>构造方法创建并返回一个 <code>WritableStreamDefaultWriter</code> 实例, 通常不需要手动创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数 stream 为将被写入的 WritableStream</span></span><br><span class="line"><span class="keyword">const</span> wsdw = <span class="keyword">new</span> <span class="title class_">WritableStreamDefaultWriter</span>(stream);</span><br></pre></td></tr></table></figure>

<h4 id="WSDW-实例属性"><a href="#WSDW-实例属性" class="headerlink" title="WSDW 实例属性"></a>WSDW 实例属性</h4><ul>
<li>closed 只读属性, 返回一个 Promise, 在流关闭时兑现</li>
<li>desiredSize 只读属性, 返回填充满流的内部队列所需要的大小</li>
<li>ready 只读属性, 返回一个 Promise, 当流填充内部队列的所需大小从非正数变为正数时兑现</li>
</ul>
<h4 id="WSDW-实例方法"><a href="#WSDW-实例方法" class="headerlink" title="WSDW 实例方法"></a>WSDW 实例方法</h4><h5 id="WSDW-abort-reason"><a href="#WSDW-abort-reason" class="headerlink" title="WSDW.abort(reason)"></a>WSDW.abort(reason)</h5><p>中止流, 返回一个 Promise, 表示生产者不能再向流写入数据(会立刻返回一个错误状态), 并丢弃所有已入队了数据</p>
<h5 id="WSDW-close"><a href="#WSDW-close" class="headerlink" title="WSDW.close()"></a>WSDW.close()</h5><p>关闭关联的可写流, 返回一个 Promise, 如果所有剩余的分块在关闭之前成功写入, 则使用 undefined 兑现, 如果遇到问题则拒绝并返回相关错误</p>
<h5 id="WSDW-releaseLock"><a href="#WSDW-releaseLock" class="headerlink" title="WSDW.releaseLock()"></a>WSDW.releaseLock()</h5><p>释放可写流的锁</p>
<h5 id="WSDW-write-chunk"><a href="#WSDW-write-chunk" class="headerlink" title="WSDW.write(chunk)"></a>WSDW.write(chunk)</h5><p>将传递的数据写入 WritableStream 和它的底层 sink, 返回一个 Promise, 成功写入后使用 undefined 兑现, 如果遇到问题则拒绝并返回相关错误</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> wsdw = ws.<span class="title function_">getWriter</span>();</span><br><span class="line"><span class="keyword">const</span> encoder = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>();</span><br><span class="line"><span class="keyword">const</span> encoded = encoder.<span class="title function_">encode</span>(<span class="string">&#x27;hello world&#x27;</span>, &#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">encoded.<span class="title function_">forEach</span>(<span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">  wsdw.<span class="property">ready</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> wsdw.<span class="title function_">write</span>(chunk))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;chunk written is to sink.&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;chunk error &#x27;</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Call ready again to ensure that all chunks are written</span></span><br><span class="line"><span class="comment">// before closing the writer.</span></span><br><span class="line">wsdw.<span class="property">ready</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    wsdw.<span class="title function_">close</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;All chunks written&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Stream error &#x27;</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="默认写入流控制器"><a href="#默认写入流控制器" class="headerlink" title="默认写入流控制器"></a>默认写入流控制器</h3><blockquote>
<p><strong>无构造函数</strong>, <code>WritableStreamDefaultController</code> 实例会在构造 <code>WritableStream</code> 时被自动创建</p>
</blockquote>
<p><code>WritableStreamDefaultController</code> 接口是一个控制器, 允许控制 <code>WritableStream</code> 状态的控制器, 当构造 <code>WritableStream</code> 时, 会为底层的 sink 提供一个相应的<code>WritableStreamDefaultController</code>实例进行操作</p>
<h4 id="WSDC-实例属性"><a href="#WSDC-实例属性" class="headerlink" title="WSDC 实例属性"></a>WSDC 实例属性</h4><ul>
<li>signal 返回与 <code>AbortSignal</code> 关联的控制器</li>
</ul>
<h4 id="WSDC-实例方法"><a href="#WSDC-实例方法" class="headerlink" title="WSDC 实例方法"></a>WSDC 实例方法</h4><h5 id="WSDC-error-message-导致未来任何与关联流的交互都会出错"><a href="#WSDC-error-message-导致未来任何与关联流的交互都会出错" class="headerlink" title="WSDC.error(message) 导致未来任何与关联流的交互都会出错"></a>WSDC.error(message) 导致未来任何与关联流的交互都会出错</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WritableStream</span>(&#123;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params">controller</span>) &#123;</span><br><span class="line">    controller.<span class="title function_">error</span>(<span class="string">&#x27;Stream is broken&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">write</span>(<span class="params">chunk, controller</span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">close</span>(<span class="params">controller</span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">abort</span>(<span class="params">err</span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h3 id="TransformStream"><a href="#TransformStream" class="headerlink" title="TransformStream"></a>TransformStream</h3><p><code>TransformStream</code> 接口表示链式管道传输转换流概念的具体实现, 可以传给 <code>ReadableStream.pipeThrough()</code> 方法将流数据从一种格式转换成另一种, 例如, 可以用于解码(编码)视频帧, 解压数据或者将流从 XML 转换成 JSON</p>
<h4 id="TS-构造方法"><a href="#TS-构造方法" class="headerlink" title="TS 构造方法"></a>TS 构造方法</h4><p>创建并返回一个转换流对象, 可以选择为流指定一个转换对象和排队策略</p>
<h5 id="转换流配置项"><a href="#转换流配置项" class="headerlink" title="转换流配置项"></a>转换流配置项</h5><p>transformer 可选的表示转换流的对象, 如果未提供, 则生成的流将是一个恒等交换流, 它将所有写入可写端的分块转发到可读端, 不会有任何该表</p>
<ul>
<li>start(controller) 当 <code>TransformStream</code> 创建时被调用, 通常用于使用 <code>TransformStreamDefaultController.enqueue()</code> 对分块进行排队</li>
<li>transform(chunk, controller) 当一个写入可写端的分块准备好转换时调用, 并执行转换流的工作, 如果没有提供则使用恒等交换</li>
<li>flush(controller) 当所有写入可写端的分块成功转换后被调用, 并且可写端将会关闭</li>
</ul>
<h5 id="写入流队列策略配置项"><a href="#写入流队列策略配置项" class="headerlink" title="写入流队列策略配置项"></a>写入流队列策略配置项</h5><p><code>writableStrategy</code> 可选的定义写入流队列策略的配置项</p>
<ul>
<li>highWaterMark 非负整数, 定义应用在背压之前可以包含在内部队列中的块的总数</li>
<li>size(chunk) 表示每个分块使用的大小(以字节为单位)</li>
</ul>
<h5 id="读取流队列策略配置项"><a href="#读取流队列策略配置项" class="headerlink" title="读取流队列策略配置项"></a>读取流队列策略配置项</h5><p><code>readableStrategy</code> 可选的定义读取流队列策略的配置项</p>
<ul>
<li>highWaterMark 非负整数, 定义应用在背压之前可以包含在内部队列中的块的总数</li>
<li>size(chunk) 表示每个分块使用的大小(以字节为单位)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> writableStrategy = <span class="keyword">new</span> <span class="title class_">CountQueuingStrategy</span>(&#123; <span class="attr">highWaterMark</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> readableStrategy = <span class="keyword">new</span> <span class="title class_">CountQueuingStrategy</span>(&#123; <span class="attr">highWaterMark</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> ts = <span class="keyword">new</span> <span class="title class_">TransformStream</span>(&#123;</span><br><span class="line">  <span class="comment">// 当创建实例时执行, 通常用于使用 enqueue 对分块进行排队</span></span><br><span class="line">  <span class="title function_">start</span>(<span class="params">controller</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 当一个写入可写端的分块准备好转换时调用，并且执行转换流的工作</span></span><br><span class="line">  <span class="comment">// 如果不提供此方法则使用恒等变换并且分块将在没有更改的情况下排队</span></span><br><span class="line">  <span class="title function_">transform</span>(<span class="params">chunk, controller</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 当所有写入可写端的分块成功转换后被调用, 并且可写端将会关闭</span></span><br><span class="line">  <span class="title function_">flush</span>(<span class="params">controller</span>) &#123;&#125;,</span><br><span class="line">  writableStrategy,</span><br><span class="line">  readableStrategy,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="TS-实例属性"><a href="#TS-实例属性" class="headerlink" title="TS 实例属性"></a>TS 实例属性</h4><ul>
<li>readable 只读属性, 转换流的 readable 端</li>
<li>writable 只读属性, 转换流的 writable 端</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> writableStrategy = <span class="keyword">new</span> <span class="title class_">ByteLengthQueuingStrategy</span>(&#123;</span><br><span class="line">  <span class="attr">highWaterMark</span>: <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">const</span> ts = <span class="keyword">new</span> <span class="title class_">TransformStream</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_">transform</span>(<span class="params">chunk, controller</span>) &#123;</span><br><span class="line">      controller.<span class="title function_">enqueue</span>(chunk.<span class="title function_">toUpperCase</span>());</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  writableStrategy</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WritableStream</span>(&#123;</span><br><span class="line">  <span class="title function_">write</span>(<span class="params">chunk, controller</span>) &#123;</span><br><span class="line">    el.<span class="title function_">append</span>(chunk);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;./lorem-ipsum.txt&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span></span><br><span class="line">  response.<span class="property">body</span>.<span class="title function_">pipeThrough</span>(ts).<span class="title function_">pipeTo</span>(ws)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="默认转换流控制器"><a href="#默认转换流控制器" class="headerlink" title="默认转换流控制器"></a>默认转换流控制器</h3><blockquote>
<p><strong>无构造函数</strong>, <code>TransformStreamDefaultController</code> 实例会在构造 <code>TransformStream</code> 时被自动创建</p>
</blockquote>
<p><code>TransformStreamDefaultController</code> 接口提供操作关联的 <code>ReadableStream</code> 和 <code>WritableStream</code> 的方法</p>
<h4 id="TSDC-实例属性"><a href="#TSDC-实例属性" class="headerlink" title="TSDC 实例属性"></a>TSDC 实例属性</h4><ul>
<li>desiredSize 只读属性, 返回填充满内部队列的可读端所需要的大小</li>
</ul>
<h4 id="TSDC-实例方法"><a href="#TSDC-实例方法" class="headerlink" title="TSDC 实例方法"></a>TSDC 实例方法</h4><h5 id="TSDC-enqueue-chunk"><a href="#TSDC-enqueue-chunk" class="headerlink" title="TSDC.enqueue(chunk)"></a>TSDC.enqueue(chunk)</h5><p>将给定的 chunk 加入流的可读端</p>
<h5 id="TSDC-error-reason"><a href="#TSDC-error-reason" class="headerlink" title="TSDC.error(reason)"></a>TSDC.error(reason)</h5><p>导致转换流的可读端和可写端都会出错</p>
<h5 id="TSDC-terminate"><a href="#TSDC-terminate" class="headerlink" title="TSDC.terminate()"></a>TSDC.terminate()</h5><p>关闭流的可读端并且流的可写端出错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ts = <span class="keyword">new</span> <span class="title class_">TransformStream</span>(&#123;</span><br><span class="line">  <span class="title function_">transform</span>(<span class="params">chunk, controller</span>) &#123;</span><br><span class="line">    controller.<span class="title function_">enqueue</span>(<span class="keyword">new</span> <span class="title class_">TextEncoder</span>().<span class="title function_">encode</span>(chunk));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">flush</span>(<span class="params">controller</span>) &#123;</span><br><span class="line">    controller.<span class="title function_">terminate</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="TextEncoder"><a href="#TextEncoder" class="headerlink" title="TextEncoder"></a>TextEncoder</h2><p>接受码位流作为输入并提供 UTF-8 字节流作为输出</p>
<h3 id="TE-构造函数"><a href="#TE-构造函数" class="headerlink" title="TE 构造函数"></a>TE 构造函数</h3><p>创建并返回一个新的 <code>TextEncoder</code> 实例, 该实例将生成具有 <code>UTF-8</code> 编码的字节流</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> te = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>();</span><br></pre></td></tr></table></figure>

<h3 id="TE-实例属性"><a href="#TE-实例属性" class="headerlink" title="TE 实例属性"></a>TE 实例属性</h3><ul>
<li>encoding 只读属性, 总是返回 utf-8</li>
</ul>
<h3 id="TE-实例方法"><a href="#TE-实例方法" class="headerlink" title="TE 实例方法"></a>TE 实例方法</h3><h4 id="TE-encode-string"><a href="#TE-encode-string" class="headerlink" title="TE.encode(string)"></a>TE.encode(string)</h4><p>接受一个字符串输入并返回一个 <code>UTF-8</code> 编码的文本的 <code>Uint8Array</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> te = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>();</span><br><span class="line"><span class="keyword">const</span> u8arr = te.<span class="title function_">encode</span>(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// Uint8Array [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]</span></span><br></pre></td></tr></table></figure>

<h4 id="TE-encodeInto-string-Uint8Array"><a href="#TE-encodeInto-string-Uint8Array" class="headerlink" title="TE.encodeInto(string, Uint8Array)"></a>TE.encodeInto(string, Uint8Array)</h4><p>接受一个字符串和一个目标(Uint8Array 用于存放 UTF-8 编码的文本), 并且返回一个只是编码进度的对象, 此方法性能会比 encode() 更高</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> te = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>();</span><br><span class="line"><span class="keyword">const</span> uint8Arr = <span class="keyword">new</span> <span class="title class_">Unit8Array</span>(<span class="number">8</span>);</span><br><span class="line">te.<span class="title function_">encodeInto</span>(<span class="string">&#x27;hello world&#x27;</span>, uint8Arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uint8Arr.<span class="title function_">join</span>());</span><br></pre></td></tr></table></figure>

<h2 id="TextDecoder"><a href="#TextDecoder" class="headerlink" title="TextDecoder"></a>TextDecoder</h2><p><code>TextDecoder</code> 接口表示一个文本解码器, 一个解码器只支持一种特定文本编码, 解码器将字节流作为输入并提供码位流作为输出</p>
<h3 id="TD-构造函数"><a href="#TD-构造函数" class="headerlink" title="TD 构造函数"></a>TD 构造函数</h3><p>根据参数指定的编码创建并返回一个新的 <code>TextDecoder</code> 实例</p>
<ul>
<li>label 可选的一个字符串, 默认 <code>utf-8</code>, 可以为任意有效的编码</li>
<li>options 可选的配置项<ul>
<li>fatal 布尔值, 表示在解码无效数据时, <code>decode()</code> 方法是否必须抛出 <code>TypeError</code>, 默认 false</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> td1 = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>(<span class="string">&#x27;iso-8859-2&#x27;</span>);</span><br><span class="line"><span class="comment">// Allow TypeError exception to be thrown</span></span><br><span class="line"><span class="keyword">const</span> td2 = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>(<span class="string">&#x27;csiso2022kr&#x27;</span>, &#123; <span class="attr">fatal</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="TD-实例属性"><a href="#TD-实例属性" class="headerlink" title="TD 实例属性"></a>TD 实例属性</h3><ul>
<li>encoding 只读属性, 表示将使用的编码格式</li>
<li>fatal 只读属性, 表示错误模式是否致命</li>
<li>ignoreBOM 只读属性, 表示是否忽略字节顺序标记(BOM)</li>
</ul>
<h3 id="TD-实例方法"><a href="#TD-实例方法" class="headerlink" title="TD 实例方法"></a>TD 实例方法</h3><h4 id="TD-decode-buffer-stream-false"><a href="#TD-decode-buffer-stream-false" class="headerlink" title="TD.decode(buffer, {stream: false})"></a>TD.decode(buffer, {stream: false})</h4><p>返回一个使用指定编码格式解码的字符串</p>
<ul>
<li>buffer 可选的一个 ArrayBuffer, TypedArray 或包含要解码的编码文本的 DataView 对象</li>
<li>options 可选的配置项<ul>
<li>stream 默认 false 不使用分块方式, true 表示以分块方式处理数据,后续调用 decode 将跟随附加数据</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> te = <span class="keyword">new</span> <span class="title class_">TextEncoder</span>();</span><br><span class="line"><span class="keyword">const</span> array = te.<span class="title function_">encode</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="comment">// Unit8Array(6) [228,189,160,229,165,189]</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;encode-value&#x27;</span>).<span class="property">textContent</span> = array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> td = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>();</span><br><span class="line"><span class="keyword">const</span> str = td.<span class="title function_">decode</span>(array);</span><br><span class="line"><span class="comment">// 你好</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;decode-value&#x27;</span>).<span class="property">textContent</span> = str;</span><br></pre></td></tr></table></figure>

<h2 id="TextEncoderStream"><a href="#TextEncoderStream" class="headerlink" title="TextEncoderStream"></a>TextEncoderStream</h2><p>将一个字符串流转换为 <code>UTF-8</code> 编码的字节, 与 <code>TextEncoder</code> 的流形式等价</p>
<h3 id="TES-构造函数"><a href="#TES-构造函数" class="headerlink" title="TES 构造函数"></a>TES 构造函数</h3><p>创建并返回一个新的 <code>TextEncoderStream</code> 实例, 该对象使用 <code>UTF-8</code> 编码将字符串流转换为字节</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> body = textStream.<span class="title function_">pipeThrough</span>(<span class="keyword">new</span> <span class="title class_">TextEncoderStream</span>());</span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;./dest&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  body,</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain;chagrset=UTF-8&#x27;</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="TES-实例属性"><a href="#TES-实例属性" class="headerlink" title="TES 实例属性"></a>TES 实例属性</h3><ul>
<li>encoding 只读属性, 总是返回 utf-8</li>
<li>readable 只读属性, 返回此对象控制的 <code>ReadableStream</code> 实例</li>
<li>writable 只读属性, 返回此对象控制的 <code>WritableStream</code> 实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tes = <span class="keyword">new</span> <span class="title class_">TextEncoderStream</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tes.<span class="property">readable</span>); <span class="comment">// a ReadableStream</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tes.<span class="property">writable</span>); <span class="comment">// a WritableStream</span></span><br></pre></td></tr></table></figure>

<h2 id="TextDecoderStream"><a href="#TextDecoderStream" class="headerlink" title="TextDecoderStream"></a>TextDecoderStream</h2><p>将二进制编码的文本流转换字符串流, 与 <code>TextDecoder</code> 的流形式等价</p>
<h3 id="TDS-构造函数"><a href="#TDS-构造函数" class="headerlink" title="TDS 构造函数"></a>TDS 构造函数</h3><ul>
<li>label 可选的一个字符串, 默认 <code>utf-8</code>, 可以为任意有效的编码</li>
<li>options 可选的配置项<ul>
<li>fatal 布尔值, 表示在错误的模式, 如果为 true, decoder 则在遇到错误时抛出一个 DOMException, 默认为 false</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> stream = response.<span class="property">body</span>.<span class="title function_">pipeThrough</span>(<span class="keyword">new</span> <span class="title class_">TextDecoderStream</span>());</span><br></pre></td></tr></table></figure>

<h3 id="TDS-实例属性"><a href="#TDS-实例属性" class="headerlink" title="TDS 实例属性"></a>TDS 实例属性</h3><ul>
<li>encoding 只读属性, 表示将使用的编码格式</li>
<li>fatal 只读属性, 表示错误是否致命</li>
<li>ignoreBOM 只读属性, 表示是否忽略字节顺序标记</li>
<li>readable 只读属性, 返回此对象控制的 <code>ReadableStream</code> 实例</li>
<li>writable 只读属性, 返回此对象控制的 <code>WritableStream</code> 实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tds = <span class="keyword">new</span> <span class="title class_">TextDecoderStream</span>(<span class="string">&#x27;utf-8&#x27;</span>, &#123; <span class="attr">fatal</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tds.<span class="property">readable</span>); <span class="comment">// a ReadableStream</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tds.<span class="property">writable</span>); <span class="comment">// a WritableStream</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebAPI</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2022/11/819f95816ecc/</url>
    <content><![CDATA[<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>Remote Dictionary Server 即远程字典服务, 是一个开源的使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API, Redis 能读的速度是 11 万次/s，写的速度是 8.1 万次/s<br>Redis 通常被称为数据结构服务器, 因为它的核心数据类型包括字符串、列表、字典（或哈希）、集合和排序集合等大多编程语言都支持的数据类型. 高版本版的 Redis 还添加了计算基数、地理定位和流处理等高级功能</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img data-src="/images/redis-1.jpg" alt="redis-1"></p>
<span id="more"></span>

<h3 id="工具命令"><a href="#工具命令" class="headerlink" title="工具命令"></a>工具命令</h3><ul>
<li>redis-benchmark 压测工具<ul>
<li>-h 主机名</li>
<li>-p 端口号</li>
<li>-s socket 连接(覆盖 host 和 port)</li>
<li>-a 认证密码</li>
<li>--user 用户名</li>
<li>-c 客户端并发连接数(default 50)</li>
<li>-n 请求数(default 100000)</li>
<li>-d 测试数据的大小(default 3)</li>
<li>--dbnum 连接的数据库编号(default 0)</li>
<li>-k 是否保持连接</li>
<li>-r SET/GET/INCR 使用随机 key, SADD 使用随机值</li>
<li>-p 通过管道传输</li>
<li>-q 退出, 仅显示 query/sec 值</li>
<li>--csv 以 CSV 格式输出</li>
<li>-l 循环永远运行测试</li>
<li>-t 仅运行以逗号分割的命令列表</li>
<li>-I Idle 模式, 仅打开 N 个 idle 连接并等待</li>
<li>-x 从 STDIN 读取最后一个参数</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt;redis-benchmark -h localhost -p 6379 -c 100 -n 100000 -d 10 -t <span class="built_in">set</span>,get,hset,hget,lpush,rpush,sadd</span><br></pre></td></tr></table></figure>

<ul>
<li><p>redis-check-aof 检查 aof 备份文件</p>
</li>
<li><p>redis-check-rdb 检查 rdb 备份文件</p>
</li>
<li><p>redis-cli –user &lt;username&gt; –pass &lt;password&gt; 使用用户名密码连接 redis</p>
<ul>
<li>-r 指定运行命令的次数</li>
<li>-i 设置不同命令调用之间的延迟(以秒为单位)</li>
<li>-x 从标准输入中读取最后一个参数</li>
<li>--bigkeys 查找大键</li>
<li>--stat 监控当前 redis 的使用情况</li>
<li>--eval &lt;file&gt; 使用 EVAL 命令解析 lua 脚本</li>
<li>--function-rdb &lt;filename&gt; 从现有服务器中提取函数(不包含 key)</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载 lua 脚本注册的 redis 函数</span></span><br><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># redis-cli -x FUNCTION LOAD &lt; ./mylib.lua</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># cat mylib.lua | redis-cli -x FUNCTION LOAD REPLACE</span></span><br></pre></td></tr></table></figure>

<h4 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h4><ul>
<li><code>/usr/lib/systemd/system/</code> 目录中创建 <code>redis.service</code> 文件, 使用 <code>yum install</code> 安装 Redis 自动创建此文件</li>
<li>使用命令 <code>ln -s /usr/lib/systemd/system/redis.service /etc/systemd/system/redis.service</code> 创建到系统服务目录的软链接</li>
<li>编辑 <code>redis.service</code> 文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]   # 控制单元定义</span><br><span class="line">Description=redis-service # 当前配置文件的描述信息</span><br><span class="line">After=network.target # 表示当前服务在哪个服务后面启动，一般定义为网络服务启动之后</span><br><span class="line"></span><br><span class="line">[Service]   # 服务定义</span><br><span class="line">Type=forking   # 定义启动类型</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /root/workspace/redis6379.conf # 定义启动进程时执行的命令</span><br><span class="line">#ExecReload=   # 定义重启服务时执行的命令</span><br><span class="line">#ExecStop=  # 定义关闭进程时执行的命令</span><br><span class="line">PrivateTmp=true   # 是否分配独立空间</span><br><span class="line"></span><br><span class="line">[Install]   # 安装定义</span><br><span class="line">WantedBy=multi-user.target # 表示服务所在 target, target 表示一组服务</span><br></pre></td></tr></table></figure>

<ul>
<li>使用命令 <code>systemctl daemon-reload</code> 重启系统服务管理守护进程</li>
<li>使用命令 <code>systemctl start redis.service</code> 启动 Redis 服务</li>
<li>使用命令 <code>systemctl enable redis.service</code> 允许 Redis 服务开机启动</li>
</ul>
<h3 id="CONFIG-命令"><a href="#CONFIG-命令" class="headerlink" title="CONFIG 命令"></a>CONFIG 命令</h3><ul>
<li>CONFIG GET parameter [parameter…] 获取指定配置项的值</li>
<li>CONFIG HELP 显示 CONFIG 命令的帮助信息</li>
<li>CONFIG RESETSTAT 重置 INFO 返回的统计信息, ok 成功</li>
<li>CONFIG REWRITE 将内存中的配置项重写到配置文件中</li>
<li>CONFIG SET parameter value [parameter value …] 设置配置项</li>
</ul>
<h3 id="Keys-命令"><a href="#Keys-命令" class="headerlink" title="Keys 命令"></a>Keys 命令</h3><ul>
<li><p>INFO [section [section …]] 返回服务的相关信息, 没有参数返回所有</p>
<ul>
<li><p>server 返回 redis 服务的通用信息</p>
</li>
<li><p>clients 返回客户端链接的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Clients</span></span><br><span class="line">connected_clients:1</span><br><span class="line">cluster_connections:0</span><br><span class="line">maxclients:10000</span><br><span class="line">client_recent_max_input_buffer:20480</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">tracking_clients:0</span><br><span class="line">clients_in_timeout_table:0</span><br></pre></td></tr></table></figure></li>
<li><p>memory 返回内存的信息</p>
</li>
<li><p>persistence 返回持久化的信息 RDB 和 AOF</p>
</li>
<li><p>stats 返回统计信息</p>
</li>
<li><p>replication 返回副本的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:5b0d7d50614d939be22b4bedb80450d13bfd64a0</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure></li>
<li><p>cpu 返回 cpu 的信息</p>
</li>
<li><p>commandstats 返回命令统计信息</p>
</li>
<li><p>latencystats 返回命令延迟百分比统计信息</p>
</li>
<li><p>cluster 返回集群信息</p>
</li>
<li><p>modules 返回模块信息</p>
</li>
<li><p>keyspace 返回数据库相关统计信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Keyspace</span></span><br><span class="line">db0:keys=3,expires=0,avg_ttl=0</span><br></pre></td></tr></table></figure></li>
<li><p>errorstats 返回错误统计信息</p>
</li>
<li><p>all 返回所有信息(除了 modules)</p>
</li>
<li><p>default 返回默认配置信息</p>
</li>
<li><p>everything 返回所有信息(包含 all 和 modules)</p>
</li>
</ul>
</li>
<li><p>help command 显示命令的帮助信息</p>
<ul>
<li>@[string] 显示当前数据类型的帮助信息</li>
</ul>
</li>
<li><p>ECHO message 打印信息</p>
</li>
<li><p>SAVE 保存数据到本地磁盘</p>
</li>
<li><p>WAIT numreplicas timeout 阻止当前客户端, 直到所有先前的写入命令成功传输并至少由指定数量的副本确认, 如果达到了以毫秒为单位指定的超时, 则即使尚未达到指定的副本数量, 该命令也会返回</p>
</li>
<li><p>ROLE 返回当前实例的角色是 master、slave、sentinel, 和当前实例上下文副本的信息</p>
</li>
<li><p>PING [message] 测试连接是否正常, 通常返回 PONG, 如果传入了 message 则会输出 message</p>
</li>
<li><p>QUIT 关闭退出当前连接</p>
</li>
<li><p>SHUTDOWN [NOSAVE|SAVE] [NOW] [FORCE] [ABORT] 同步保存数据到硬盘上并关闭服务</p>
</li>
<li><p>MONITOR 启动监听模式输出服务器执行的每条命令</p>
</li>
<li><p>clear 清空屏幕</p>
</li>
</ul>
<h4 id="操作-key"><a href="#操作-key" class="headerlink" title="操作 key"></a>操作 key</h4><ul>
<li><p>TYPE key 返回指定 key 的类型, none 表示 key 不存在</p>
</li>
<li><p>EXISTS key [key …] 检查指定 key 是否存在, 1 存在, 0 不存在</p>
</li>
<li><p>KEYS pattern 查找给定模式(pattern)的 key, 返回列表, 未找到返回 (empty array), <code>KEYS *</code> 返回所有 key</p>
</li>
<li><p>DEL key [key…] 阻塞删除 key 并返回成功删除 key 的数量</p>
</li>
<li><p>UNLINK key [key …] 非阻塞从键空间中取消指定 key 的链接(在其他线程中执行实际的内存回收), 并返回成功取消 key 的数量, 如果 key 不存在则忽略</p>
</li>
<li><p>RENAME key newKey 修改 key 的名称, 如果指定 key 不存在返回 错误, 如果 newkey 已存在则覆盖</p>
</li>
<li><p>RENAMENX key newkey 修改 key 的名称, 如果指定 key 不存在返回 错误, 如果 newkey 已存在不执行任何操作返回 0, 否则返回 1</p>
</li>
<li><p>MOVE key db 将当前数据库中的 key 移动到指定的数据库(db)中</p>
</li>
<li><p>DUMP key 序列化指定 key, 并返回被序列化的值, 不存在返回 &lt;nil&gt;</p>
</li>
<li><p>TOUCH key [key …] 更改指定 key 的最后一次访问时间并返回修改成功的数量, 如果 key 不存在则忽略</p>
</li>
<li><p>SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern …]] [ASC|DESC] [ALPHA] [STORE destination]</p>
<p>对 list、set、zset 集合中的元素进行排序, 默认是按照数字或者元素的双精度浮点数去比较</p>
</li>
<li><p>SCAN cursor [MATCH pattern] [COUNT count] [TYPE type] 查找给定模式(pattern)的 key, 返回列表和上次遍历时的游标</p>
<ul>
<li>COUNT 控制匹配结果的数量, 默认为 10</li>
<li>TYPE 过滤匹配结果中的类型, 可取值 string, list, set 等 redis 支持的数据类型</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;name&quot;</span></span><br><span class="line">3) <span class="string">&quot;bit:zhang&quot;</span></span><br><span class="line">4) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SCAN 0 COUNT 10</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;age&quot;</span></span><br><span class="line">   2) <span class="string">&quot;bit:zhang&quot;</span></span><br><span class="line">   3) <span class="string">&quot;name&quot;</span></span><br><span class="line">   4) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SCAN 0 MATCH *n*</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;bit:zhang&quot;</span></span><br><span class="line">   2) <span class="string">&quot;name&quot;</span></span><br><span class="line">   3) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SCAN 0 MATCH *n* COUNT 2</span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;bit:zhang&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SCAN 0 MATCH *n* TYPE list</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) (empty array)</span><br><span class="line">127.0.0.1:6379&gt; SCAN 0 MATCH *n* TYPE string</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;bit:zhang&quot;</span></span><br><span class="line">   2) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SCAN 0 MATCH *n* TYPE <span class="built_in">hash</span></span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xiaoming&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h4><ul>
<li>REPLICAOF host port 将当前服务器设置为指定主机端口上服务器的副本, 通常返回 ok, 5.0.0 开始代替 <code>SLAVEOF</code><ul>
<li>如果当前服务器已经是某个服务器的副本, 则取消对旧服务器的连接同步, 并开始对新服务器同步, 丢弃旧有数据集</li>
<li>NO ONE 如果当前服务器已经是副本, 此参数将当前服务器变为 master, 并停止与主服务器的连接同步</li>
</ul>
</li>
</ul>
<h4 id="设置-key-的过期时间"><a href="#设置-key-的过期时间" class="headerlink" title="设置 key 的过期时间"></a>设置 key 的过期时间</h4><ul>
<li>EXPIRE key seconds [NX|XX|GT|LT] 为指定 key 设置过期时间(单位秒), 1 设置成功, 0 指定 key 不存在或者提供的参数跳过了操作</li>
<li>EXPIREAT key unix-time-seconds [NX|XX|GT|LT] 为指定 key 设置过期使用 unix 时间戳, 1 设置成功, 0 指定 key 不存在或者提供的参数跳过了操作</li>
<li>PEXPIRE key milliseconds [NX|XX|GT|LT] 为指定 key 设置过期时间(单位毫秒), 1 设置成功, 0 指定 key 不存在或者提供的参数跳过了操作</li>
<li>PEXPIREAT key unix-time-milliseconds [NX|XX|GT|LT] 为指定 key 设置过期时间使用 unix 时间戳, 1 设置成功, 0 指定 key 不存在或者提供的参数跳过了操作</li>
<li>EXPIRETIME key 返回指定 key 将过期的绝对 Unix 时间戳(以秒为单位), -1 表示 key 存在但没有过期时间, -2 表示 key 不存在, 7.0.0 支持</li>
<li>PEXPIRETIME key 返回指定 key 将过期的绝对 Unix 时间戳(以毫秒为单位), -1 表示 key 存在但没有过期时间, -2 表示 key 不存在, 7.0.0 支持<ul>
<li>NX 以上命令该参数作用相同, 仅当指定 key 没有过期时间时</li>
<li>XX 以上命令该参数作用相同, 仅当指定 key 存在过期时间时</li>
<li>GT 以上命令该参数作用相同, 仅当新的过期时间大于当前的过期时间</li>
<li>LT 以上命令该参数作用相同, 仅当新的过期时间小于当前的过期时间</li>
</ul>
</li>
</ul>
<h4 id="获取-key-的过期时间"><a href="#获取-key-的过期时间" class="headerlink" title="获取 key 的过期时间"></a>获取 key 的过期时间</h4><ul>
<li>TTL key 返回指定 key 以<strong>秒</strong>为单位剩余的生存时间</li>
<li>PTTL key 返回指定 key 以<strong>毫秒</strong>为单位剩余的生存时间<ul>
<li>-2 key 不存在</li>
<li>-1 key 存在但没有设置剩余生存时间</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; TTL age</span><br><span class="line">(<span class="built_in">integer</span>) -1</span><br><span class="line">127.0.0.1:6379&gt; EXPIRE age 30</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; TTL age</span><br><span class="line">(<span class="built_in">integer</span>) 23</span><br><span class="line">127.0.0.1:6379&gt; PTTL age</span><br><span class="line">(<span class="built_in">integer</span>) 23000</span><br></pre></td></tr></table></figure>

<ul>
<li>PERSIST key 移除指定 key 的过期时间, key 将永久保持, 1 成功, 0 key 不存在或者未设置过期时间</li>
</ul>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><ul>
<li><p>RANDOMKEY 从当前数据库随机返回一个 key, 如果当前数据库为空则返回 &lt;nil&gt;</p>
</li>
<li><p>SWAPDB index1 index2 切换两个数据库</p>
</li>
<li><p>SELECT index 更改当前连接的选定的数据库</p>
</li>
<li><p>DBSIZE 返回当前数据库中 key 的数量</p>
</li>
<li><p>FLUSHALL [ASYNC|SYNC] 清除所有数据库中的 key, 执行成功返回 ok</p>
</li>
<li><p>FLUSHDB [ASYNC|SYNC] 清除当前数据库中的 key, 执行成功返回 ok</p>
</li>
</ul>
<h4 id="安全认证"><a href="#安全认证" class="headerlink" title="安全认证"></a>安全认证</h4><ul>
<li>AUTH [username] password 对当前连接的认证, 或者切换用户</li>
</ul>
<h3 id="配置文件配置项"><a href="#配置文件配置项" class="headerlink" title="配置文件配置项"></a>配置文件配置项</h3><ul>
<li><p>include /path/to/*.conf # 导入其他 redis 配置文件</p>
</li>
<li><p>protected-mode yes # 保护模式, 默认开启</p>
</li>
<li><p>tcp-backlog 511 # tcp 连接数</p>
</li>
<li><p>timeout 0 # 关闭客户端连接的延迟, 0 表示禁用, 单位秒</p>
</li>
<li><p>tcp-keepalive 300 # 保持长连接的时间, 单位秒</p>
</li>
</ul>
<h4 id="TLS-SSL"><a href="#TLS-SSL" class="headerlink" title="TLS/SSL"></a>TLS/SSL</h4><p>安全连接配置项, 默认未开启</p>
<ul>
<li>tls-port 6379 # 安全连接端口</li>
<li>tls-cert-file redis.cert # 安全连接证书</li>
<li>tls-key-file redis.key # 安全连接 key</li>
<li>tls-key-file-pass secret # key 文件加密摘要</li>
<li>tls-client-cert-file client.crt # 客户端安全连接证书</li>
<li>tls-client-key-file client.key # 客户端安全连接 key</li>
<li>tls-client-key-file-pass secret # 客户端安全连接 key 文件加密摘要</li>
<li>tls-ca-cert-file ca.crt # CA 证书</li>
<li>tls-ca-cert-dir /etc/ssl/certs # CA 证书目录</li>
<li>tls-auth-clients no # no 不需要也不接受客户端证书连接, optional 证书不必需, 如果提供证书则必须验证有效</li>
<li>tls-session-caching no # 默认启用 TLS 会话缓存, no 表示禁用缓存</li>
<li>tls-session-cache-size 5000 # TLS 缓存大小, 默认 20480</li>
<li>tls-session-cache-timeout 60 # TLS 缓存有效期, 默认 300 秒</li>
</ul>
<h4 id="通用设置"><a href="#通用设置" class="headerlink" title="通用设置"></a>通用设置</h4><ul>
<li><p>loglevel notice # 设置日志级别, 默认 notice</p>
<ul>
<li>debug (a lot of information, useful for development/testing)</li>
<li>verbose (many rarely useful info, but not a mess like the debug level)</li>
<li>notice (moderately verbose, what you want in production probably)</li>
<li>warning (only very important / critical messages are logged)</li>
</ul>
</li>
<li><p>syslog-enabled no # 是否允许指向 系统 日志</p>
</li>
<li><p>syslog-ident redis # 日志标识符</p>
</li>
<li><p>databases 16 # 默认数据库数量</p>
</li>
<li><p>always-show-logo no # 是否总是显示 logo</p>
</li>
<li><p>set-proc-title yes # 设置进程标题</p>
</li>
</ul>
<h4 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h4><ul>
<li>maxmemory-policy noeviction # 内存管理策略<ul>
<li>volatile-lru 使用 LRU 算法移除 key, 只对设置了过期时间的 key</li>
<li>allkeys-lru 在所有集合 key 中, 使用 LRU 算法移除 key</li>
<li>volatile-lfu 使用 LFU 算法移除 key, 只对设置了过期时间的 key</li>
<li>allkeys-lfu 在所有集合 key 中, 使用 LFU 算法移除 key</li>
<li>volatile-random 在过期集合 key 中, 移除随机的 key, 只对设置了过期时间的 key</li>
<li>allkeys-random 在所有集合 key 中, 移除随机的 key</li>
<li>volatile-ttl 移除那些 TTL 值最小的 key, 即那些最近要过期的 key</li>
<li>noeviction 不进行移除, 针对写操作, 只是返回错误信息</li>
</ul>
</li>
<li>maxmemory-samples 5 # 设置 Redis 移除 key 时的样本数量, 10 接近 LRU 算法但非常消耗内存, 3 最快却不是精确的</li>
</ul>
<h4 id="SNAPSHOTTING"><a href="#SNAPSHOTTING" class="headerlink" title="SNAPSHOTTING"></a>SNAPSHOTTING</h4><ul>
<li>save 3600 1 300 100 60 10000 # 快照执行机制, 3600 秒后如果超过 1 次更改, 300 秒后超过 100 次更改, 60 秒后超过 10000 次更改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]</span><br></pre></td></tr></table></figure>

<ul>
<li>stop-writes-on-bgsave-error yes # 是否开启停止在保存快照发生错误的时的写操作</li>
<li>rdbcompression yes # 开启 rdb 文件压缩</li>
<li>rdbchecksum yes # 开启 rdb 文件的校验检查</li>
</ul>
<h4 id="SECURITY"><a href="#SECURITY" class="headerlink" title="SECURITY"></a>SECURITY</h4><ul>
<li>acllog-max-len 128 # ACL 日志在内存中时的最大条目数</li>
<li>aclfile /etc/redis/users.acl # 默认 ACL 配置文件</li>
<li>io-threads 4 # I/O 线程</li>
</ul>
<h3 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h3><p>Redis 发布/订阅(pub/sub)是一种消息通信模式: 发送者(pub)发送消息, 订阅者(sub)接收消息<br>它采用事件作为基本的通信机制，提供大规模系统所要求的松散耦合的交互模式: 订阅者(如客户端)以事件订阅的方式表达出它有兴趣接收的一个事件或一类事件;发布者(如服务器)可将订阅者感兴趣的事件随时通知相关订阅者<br>订阅者对一个或多个频道感兴趣,只需接收感兴趣的消息,不需要知道什么样的发布者发布的. 这种发布者和订阅者的解耦合可以带来更大的扩展性和更加动态的网络拓扑</p>
<ul>
<li>发布者: 无需独占链接, 可以在 publish 发布消息的同时, 使用同一个链接进行其他操作</li>
<li>订阅者: 需要独占链接, 在 subscribe 期间, 以阻塞的方式等待消息</li>
</ul>
<h4 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h4><ul>
<li>PUBLISH channel message 给指定的频道发送消息并返回接收到消息的订阅者数量, 0 表示没有订阅者</li>
<li>SPUBLISH shardchannel message 给指定的碎片频道发送消息并返回接收到消息的订阅者数量, 0 表示没有订阅者, 7.0.0 支持</li>
</ul>
<h4 id="普通订阅"><a href="#普通订阅" class="headerlink" title="普通订阅"></a>普通订阅</h4><ul>
<li>SUBSCRIBE channel [channel …] 订阅指定频道立即进入阻塞状态等待接收消息</li>
<li>UNSUBSCRIBE [channel [channel …]] 根据给定频道取消客户端订阅, 如果未指定则取消所有频道订阅</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE first second</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;first&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;second&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE first third</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;first&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;third&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">127.0.0.1:6379&gt; PUBSUB CHANNELS</span><br><span class="line">1) <span class="string">&quot;third&quot;</span></span><br><span class="line">2) <span class="string">&quot;first&quot;</span></span><br><span class="line">3) <span class="string">&quot;second&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH first <span class="string">&#x27;hello first&#x27;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE first second</span><br><span class="line">...</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;first&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello first&quot;</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE first third</span><br><span class="line">...</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;first&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello first&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH second <span class="string">&#x27;hello second&#x27;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE first second</span><br><span class="line">...</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;second&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello second&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH third <span class="string">&#x27;hello third&#x27;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE first third</span><br><span class="line">...</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;third&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello third&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="模式订阅"><a href="#模式订阅" class="headerlink" title="模式订阅"></a>模式订阅</h4><ul>
<li>PSUBSCRIBE pattern [pattern …] 根据给定模式订阅频道立即进入阻塞状态等待接收消息<ul>
<li>pattern 可以使用正则表达式匹配多个频道</li>
</ul>
</li>
<li>PUNSUBSCRIBE [pattern [pattern …]] 根据给定模式取消客户端订阅, 如果未指定则取消所有模式订阅</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE __key*__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;psubscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;__key*__:*&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE __key*__:*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;psubscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;__key*__:*&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">127.0.0.1:6379&gt; PUBSUB NUMPAT</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH __key@__:foo <span class="string">&#x27;hello key at foo&#x27;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE __key*__:*</span><br><span class="line">...</span><br><span class="line">1) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line">2) <span class="string">&quot;__key*__:*&quot;</span></span><br><span class="line">3) <span class="string">&quot;__key@__:foo&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello key at foo&quot;</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE __key*__:*</span><br><span class="line">...</span><br><span class="line">1) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line">2) <span class="string">&quot;__key*__:*&quot;</span></span><br><span class="line">3) <span class="string">&quot;__key@__:foo&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello key at foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">127.0.0.1:6379&gt; PUBLISH __key@__:bar <span class="string">&#x27;hello key at bar&#x27;</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE __key*__:*</span><br><span class="line">...</span><br><span class="line">1) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line">2) <span class="string">&quot;__key*__:*&quot;</span></span><br><span class="line">3) <span class="string">&quot;__key@__:bar&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello key at bar&quot;</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE __key*__:*</span><br><span class="line">...</span><br><span class="line">1) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line">2) <span class="string">&quot;__key*__:*&quot;</span></span><br><span class="line">3) <span class="string">&quot;__key@__:bar&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello key at bar&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="碎片频道订阅"><a href="#碎片频道订阅" class="headerlink" title="碎片频道订阅"></a>碎片频道订阅</h4><ul>
<li>SSUBSCRIBE shardchannel [shardchannel …] 订阅指定的碎片频道, 7.0.0 支持</li>
<li>SUNSUBSCRIBE [shardchannel [shardchannel …]] 根据给定碎片频道取消客户端订阅, 如果未指定则取消所有碎片频道订阅, 7.0.0 支持</li>
</ul>
<h4 id="统计订阅信息"><a href="#统计订阅信息" class="headerlink" title="统计订阅信息"></a>统计订阅信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBSUB HELP</span><br><span class="line"> 1) PUBSUB &lt;subcommand&gt; [&lt;arg&gt; [value] [opt] ...]. Subcommands are:</span><br><span class="line"> 2) CHANNELS [&lt;pattern&gt;]</span><br><span class="line"> 3)     Return the currently active channels matching a &lt;pattern&gt; (default: <span class="string">&#x27;*&#x27;</span>).</span><br><span class="line"> 4) NUMPAT</span><br><span class="line"> 5)     Return number of subscriptions to patterns.</span><br><span class="line"> 6) NUMSUB [&lt;channel&gt; ...]</span><br><span class="line"> 7)     Return the number of subscribers <span class="keyword">for</span> the specified channels, excluding</span><br><span class="line"> 8)     pattern subscriptions(default: no channels).</span><br><span class="line"> 9) SHARDCHANNELS [&lt;pattern&gt;]</span><br><span class="line">10)     Return the currently active shard level channels matching a &lt;pattern&gt; (default: <span class="string">&#x27;*&#x27;</span>).</span><br><span class="line">11) SHARDNUMSUB [&lt;shardchannel&gt; ...]</span><br><span class="line">12)     Return the number of subscribers <span class="keyword">for</span> the specified shard level channel(s)</span><br><span class="line">13) HELP</span><br><span class="line">14)     Prints this <span class="built_in">help</span>.</span><br></pre></td></tr></table></figure>

<ul>
<li>PUBSUB CHANNELS [pattern] 返回当前活跃频道列表(不包含使用模式订阅的频道)</li>
<li>PUBSUB NUMSUB [channel [channel …]] 返回订阅者的数量(不包含使用模式订阅的频道)<ul>
<li>如果不指定 channel 将返回 (empty array)</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBSUB CHANNELS</span><br><span class="line">1) <span class="string">&quot;conn&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; PUBSUB NUMSUB hello conn</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) (<span class="built_in">integer</span>) 1</span><br><span class="line">3) <span class="string">&quot;conn&quot;</span></span><br><span class="line">4) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<ul>
<li>PUBSUB NUMPAT 返回订阅者通过模式订阅的频道的数量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBSUB NUMPAT</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; PUBSUB NUMPAT</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<ul>
<li>PUBSUB SHARDCHANNELS [pattern] 返回当前活动的碎片频道, 未找到返回 empty array, 7.0.0 支持</li>
<li>PUBSUB SHARDNUMSUB [shardchannel [shardchannel …]] 返回指定的碎片频道的订阅者数量, 未找到返回 empty arryay, 7.0.0 支持</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBSUB SHARDNUMSUB conn</span><br><span class="line">1) <span class="string">&quot;conn&quot;</span></span><br><span class="line">2) (<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>

<h3 id="Redis-Pipelining"><a href="#Redis-Pipelining" class="headerlink" title="Redis Pipelining"></a>Redis Pipelining</h3><blockquote>
<p>当客户端使用流水线发送命令时, 服务器将被迫使用内存对回复进行排队. 因此, 如果需要使用流水线发送大量命令时最好尽量等分分批发送命令</p>
</blockquote>
<p>Redis 流水线是一种通过一次发出多个命令而无需等待每个命令的响应来提高性能的技术, 大多数 Redis 客户端都支持流水线.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 netcat 命令测试</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># (printf &quot;PING\r\nPING\r\nPING\r\n&quot;; sleep 1) | nc localhost 6379</span></span><br><span class="line">+PONG</span><br><span class="line">+PONG</span><br><span class="line">+PONG</span><br><span class="line">^C</span><br></pre></td></tr></table></figure>

<h3 id="Redis-编程"><a href="#Redis-编程" class="headerlink" title="Redis 编程"></a>Redis 编程</h3><h4 id="Redis-函数"><a href="#Redis-函数" class="headerlink" title="Redis 函数"></a>Redis 函数</h4><blockquote>
<p>Redis 7.0 以上支持</p>
</blockquote>
<p>Redis 函数是临时脚本的进化步骤, 函数提供与脚本相同的核心功能但却是数据库的一流软件工件</p>
<p>Redis 将函数作为数据库的一个组成部分进行管理, 并通过数据持久化和复制确保它们的可用性. 由于函数是数据库的一部分, 因此在使用前声明, 因此应用程序不需要在运行时加载它们, 也不必冒事务中止的风险. 使用函数的应用程序仅依赖于它们的 API, 而不依赖于数据库中的嵌入式脚本逻辑</p>
<p>Redis 函数可以将 Lua 的所有可用功能用于临时脚本, 唯一例外的是 Redis Lua 脚本调试器</p>
<p>Redis 函数还通过启用代码共享来简化开发, 每个函数都属于一个库, 任何给定的库都可以包含多个函数, 库的内容是不可变的, 并且不允许对其功能进行选择性更新. 取而代之的是, 库作为一个整体进行更新, 在一个操作中将它们的所有功能一起更新. 这允许从同一库中的其他函数调用函数, 或者通过使用库内部方法中的公共代码在函数之间共享代码, 这些函数也可以采用语言本机参数</p>
<p>Redis 函数也被持久化到 AOF 文件中, 并从主服务器复制到副本服务器, 因此它们与数据一样可以持久化</p>
<p>Redis 函数的执行是原子的, 函数的执行在其整个时间内阻止所有服务器活动, 类似于事务的语义, 已执行函数的阻塞语义始终适用于所有连接的客户端, 因为运行一个函数会阻塞 Redis 服务器</p>
<ul>
<li>函数都属于一个库, 任何给定的库都可以包含多个函数</li>
<li>库的内容是不可变的, 并且不允许选择性地更新其函数, 只能将库作为一个整体进行更新</li>
</ul>
<h5 id="函数命令"><a href="#函数命令" class="headerlink" title="函数命令"></a>函数命令</h5><ul>
<li>FUNCTION help 显示 FUNCTION 的帮助信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FUNCTION <span class="built_in">help</span></span><br><span class="line"> 1) FUNCTION &lt;subcommand&gt; [&lt;arg&gt; [value] [opt] ...]. Subcommands are:</span><br><span class="line"> 2) LOAD [REPLACE] &lt;FUNCTION CODE&gt;</span><br><span class="line"> 3)     Create a new library with the given library name and code.</span><br><span class="line"> 4) DELETE &lt;LIBRARY NAME&gt;</span><br><span class="line"> 5)     Delete the given library.</span><br><span class="line"> 6) LIST [LIBRARYNAME PATTERN] [WITHCODE]</span><br><span class="line"> 7)     Return general information on all the libraries:</span><br><span class="line"> 8)     * Library name</span><br><span class="line"> 9)     * The engine used to run the Library</span><br><span class="line">10)     * Library description</span><br><span class="line">11)     * Functions list</span><br><span class="line">12)     * Library code (<span class="keyword">if</span> WITHCODE is given)</span><br><span class="line">13)     It also possible to get only <span class="keyword">function</span> that matches a pattern using LIBRARYNAME argument.</span><br><span class="line">14) STATS</span><br><span class="line">15)     Return information about the current <span class="keyword">function</span> running:</span><br><span class="line">16)     * Function name</span><br><span class="line">17)     * Command used to run the <span class="keyword">function</span></span><br><span class="line">18)     * Duration <span class="keyword">in</span> MS that the <span class="keyword">function</span> is running</span><br><span class="line">19)     If no <span class="keyword">function</span> is running, <span class="built_in">return</span> nil</span><br><span class="line">20)     In addition, returns a list of available engines.</span><br><span class="line">21) KILL</span><br><span class="line">22)     Kill the current running <span class="keyword">function</span>.</span><br><span class="line">23) FLUSH [ASYNC|SYNC]</span><br><span class="line">24)     Delete all the libraries.</span><br><span class="line">25)     When called without the optional mode argument, the behavior is determined by the</span><br><span class="line">26)     lazyfree-lazy-user-flush configuration directive. Valid modes are:</span><br><span class="line">27)     * ASYNC: Asynchronously flush the libraries.</span><br><span class="line">28)     * SYNC: Synchronously flush the libraries.</span><br><span class="line">29) DUMP</span><br><span class="line">30)     Return a serialized payload representing the current libraries, can be restored using FUNCTION RESTORE <span class="built_in">command</span></span><br><span class="line">31) RESTORE &lt;PAYLOAD&gt; [FLUSH|APPEND|REPLACE]</span><br><span class="line">32)     Restore the libraries represented by the given payload, it is possible to give a restore policy to</span><br><span class="line">33)     control how to handle existing libraries (default APPEND):</span><br><span class="line">34)     * FLUSH: delete all existing libraries.</span><br><span class="line">35)     * APPEND: appends the restored libraries to the existing libraries. On collision, abort.</span><br><span class="line">36)     * REPLACE: appends the restored libraries to the existing libraries, On collision, replace the old</span><br><span class="line">37)       libraries with the new libraries (notice that even on this option there is a chance of failure</span><br><span class="line">38)       <span class="keyword">in</span> <span class="keyword">case</span> of <span class="built_in">functions</span> name collision with another library).</span><br><span class="line">39) HELP</span><br><span class="line">40)     Prints this <span class="built_in">help</span>.</span><br></pre></td></tr></table></figure>

<ul>
<li>FUNCTION DELETE 删除指定的库</li>
<li>FUNCTION LIST 查看所有库和函数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; FUNCTION LIST</span><br><span class="line">1) 1) <span class="string">&quot;library_name&quot;</span></span><br><span class="line">   2) <span class="string">&quot;mylib&quot;</span></span><br><span class="line">   3) <span class="string">&quot;engine&quot;</span></span><br><span class="line">   4) <span class="string">&quot;LUA&quot;</span></span><br><span class="line">   5) <span class="string">&quot;functions&quot;</span></span><br><span class="line">   6) 1) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">         2) <span class="string">&quot;knockknock&quot;</span></span><br><span class="line">         3) <span class="string">&quot;description&quot;</span></span><br><span class="line">         4) (nil)</span><br><span class="line">         5) <span class="string">&quot;flags&quot;</span></span><br><span class="line">         6) (empty array)</span><br></pre></td></tr></table></figure>

<ul>
<li>FCALL function numkeys [key [key …]] [arg [arg …]] 调用注册的函数</li>
<li>FCALL_RO function numkeys [key [key …]] [arg [arg …]] 调用注册的只读函数</li>
</ul>
<h5 id="加载库和函数"><a href="#加载库和函数" class="headerlink" title="加载库和函数"></a>加载库和函数</h5><p>每个 Redis 函数都属于一个加载到 Redis 的库, 使用命令 <code>FUNCTION LOAD</code> 将库加载到数据库, 库必须以 shebang 语句开头 <code>#!&lt;engine name&gt; name=&lt;library name&gt;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加载一个空库</span></span><br><span class="line">127.0.0.1:6379&gt; FUNCTION LOAD <span class="string">&quot;#!lua name=mylib\n&quot;</span></span><br><span class="line">(error) ERR No <span class="built_in">functions</span> registered</span><br></pre></td></tr></table></figure>

<h5 id="函数注册调用"><a href="#函数注册调用" class="headerlink" title="函数注册调用"></a>函数注册调用</h5><ul>
<li>redis.register_function(name, callback, flags, description) 注册函数 <em id="redis.register_function"></em> <!-- markdownlint-disable-line --><ul>
<li>name 注册的函数名</li>
<li>callback 注册的函数</li>
<li>flags<ul>
<li>no-writes 标识脚本只能读取但不能写入</li>
<li>allow-oom 标识允许脚本在服务器内存不足(OOM)时执行</li>
<li>allow-stable</li>
<li>no-cluster 标识脚本在 Redis 集群模式下返回错误, 防止对集群中的节点执行脚本</li>
<li>allow-cross-slot-keys 允许脚本从多个 slot 访问密钥</li>
</ul>
</li>
<li>description 函数描述</li>
</ul>
</li>
</ul>
<h6 id="Redis-命令行注册调用"><a href="#Redis-命令行注册调用" class="headerlink" title="Redis 命令行注册调用"></a>Redis 命令行注册调用</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line">127.0.0.1:6379&gt; FUNCTION LOAD <span class="string">&quot;#!lua name=mylib\nredis.register_function&#123;function_name=&#x27;noop&#x27;, callback=function() end, flags=&#123; &#x27;no-writes&#x27; &#125;, description=&#x27;Does nothing&#x27;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 方式2</span></span><br><span class="line">127.0.0.1:6379&gt; FUNCTION LOAD <span class="string">&quot;#!lua name=mylib\nredis.register_function(&#x27;knockknock&#x27;, function() return &#x27;Who\\&#x27;s there?&#x27; end)&quot;</span></span><br><span class="line"><span class="string">&quot;mylib&quot;</span></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">127.0.0.1:6379&gt; FCALL knockknock 0</span><br><span class="line"><span class="string">&quot;Who&#x27;s there?&quot;</span></span><br></pre></td></tr></table></figure>

<h6 id="Lua-脚本注册调用"><a href="#Lua-脚本注册调用" class="headerlink" title="Lua 脚本注册调用"></a>Lua 脚本注册调用</h6><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">#!lua name=mylib</span><br><span class="line"><span class="comment">--方式1</span></span><br><span class="line"><span class="comment">--[[redis.register_function&#123;</span></span><br><span class="line"><span class="comment">  function_name=&#x27;knockknock&#x27;,</span></span><br><span class="line"><span class="comment">  callback=function() return &#x27;Who\&#x27;s there?&#x27; end,</span></span><br><span class="line"><span class="comment">  flags=&#123; &#125;,</span></span><br><span class="line"><span class="comment">  description=&#x27;Does nothing&#x27;</span></span><br><span class="line"><span class="comment">&#125;]]</span><span class="comment">--</span></span><br><span class="line"><span class="comment">--方式2</span></span><br><span class="line"><span class="comment">--[[redis.register_function(</span></span><br><span class="line"><span class="comment">   &#x27;knockknock&#x27;,</span></span><br><span class="line"><span class="comment">   function() return &#x27;Who\&#x27;s there?&#x27; end</span></span><br><span class="line"><span class="comment">)]]</span><span class="comment">--</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">knockknock</span><span class="params">()</span></span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;Who\&#x27;s there?&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">my_hset</span><span class="params">(keys, args)</span></span></span><br><span class="line">   <span class="keyword">local</span> key = keys[<span class="number">1</span>]</span><br><span class="line">   <span class="comment">-- 调用 redis 命令 TIME 获取当前时间戳</span></span><br><span class="line">   <span class="keyword">local</span> <span class="built_in">time</span> = redis.call(<span class="string">&#x27;TIME&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">   <span class="keyword">return</span> redis.call(<span class="string">&#x27;HSET&#x27;</span>,key, <span class="string">&#x27;_last_modified_&#x27;</span>, <span class="built_in">time</span>, <span class="built_in">unpack</span>(args))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">my_hgetall</span><span class="params">(keys, args)</span></span></span><br><span class="line">   <span class="comment">-- 使用 resp3 协议进行请求应答</span></span><br><span class="line">   redis.setresp(<span class="number">3</span>)</span><br><span class="line">   <span class="keyword">local</span> key = keys[<span class="number">1</span>]</span><br><span class="line">   <span class="keyword">local</span> res = redis.call(<span class="string">&#x27;HGETALL&#x27;</span>, key)</span><br><span class="line">   res[<span class="string">&#x27;map&#x27;</span>][<span class="string">&#x27;_last_modified_&#x27;</span>] = <span class="literal">nil</span></span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">redis.register_function(<span class="string">&#x27;knockknock&#x27;</span>, knockknock)</span><br><span class="line">redis.register_function(<span class="string">&#x27;my_hset&#x27;</span>, my_hset)</span><br><span class="line">redis.register_function(<span class="string">&#x27;my_hgetall&#x27;</span>, my_hgetall)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注册 FCALL_RO 执行的函数</span></span><br><span class="line">redis.register_function&#123;</span><br><span class="line">   function_name=<span class="string">&#x27;my_hgetall_ro&#x27;</span>,</span><br><span class="line">   callback=my_hgetall,</span><br><span class="line">   flags=&#123;<span class="string">&#x27;no-writes&#x27;</span>&#125;</span><br><span class="line">   description=<span class="string">&#x27;read-only hash getall command&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># cat mylib.lua | redis-cli -x FUNCTION LOAD REPLACE</span></span><br><span class="line"><span class="string">&quot;mylib&quot;</span></span><br><span class="line"><span class="comment"># 调用注册函数</span></span><br><span class="line">127.0.0.1:6379&gt; FCALL my_hset 1 <span class="built_in">hash</span>:zhang name <span class="string">&quot;zhangsan&quot;</span> age 18 addr <span class="string">&quot;beijing&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;hash:zhang&quot;</span></span><br><span class="line">2) <span class="string">&quot;bit:zhang&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">4) <span class="string">&quot;name&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; FCALL my_hgetall 1 <span class="built_in">hash</span>:zhang</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;18&quot;</span></span><br><span class="line">3) <span class="string">&quot;addr&quot;</span></span><br><span class="line">4) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">5) <span class="string">&quot;name&quot;</span></span><br><span class="line">6) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FCALL 调用只读函数 my_hgetall_ro</span></span><br><span class="line">127.0.0.1:6379&gt; FCALL my_hgetall_ro 1 <span class="built_in">hash</span>:zhang</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;18&quot;</span></span><br><span class="line">3) <span class="string">&quot;addr&quot;</span></span><br><span class="line">4) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">5) <span class="string">&quot;name&quot;</span></span><br><span class="line">6) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FCALL_RO 调用普通函数 my_hgetall</span></span><br><span class="line">127.0.0.1:6379&gt; FCALL_RO my_hgetall 1 <span class="built_in">hash</span>:zhang</span><br><span class="line">(error) ERR Can not execute a script with write flag using *_ro <span class="built_in">command</span>.</span><br><span class="line"><span class="comment"># FCALL_RO 调用只读函数 my_hgetall_ro</span></span><br><span class="line">127.0.0.1:6379&gt; FCALL_RO my_hgetall_ro 1 <span class="built_in">hash</span>:zhang</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">2) <span class="string">&quot;18&quot;</span></span><br><span class="line">3) <span class="string">&quot;addr&quot;</span></span><br><span class="line">4) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">5) <span class="string">&quot;name&quot;</span></span><br><span class="line">6) <span class="string">&quot;zhangsan&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Lua-脚本"><a href="#Lua-脚本" class="headerlink" title="Lua 脚本"></a>Lua 脚本</h4><p>Redis 允许在服务器上上传和执行 Lua 脚本, 脚本可以采用编程控制结构并在执行时使用大部分命令来访问数据库, 因为脚本在服务器中执行, 所以从脚本中读取和写入数据非常高效.</p>
<p>Redis 保证脚本的原子执行, 在执行脚本时, 所有服务器活动在其整个运行期间都被阻止.</p>
<p>Lua 允许在 Redis 中运行部分应用程序逻辑, 这样的脚本可以跨多个键执行条件更新, 可能以原子方式组合几种不同的数据类型</p>
<p>Lua 脚本由嵌入式执行引擎在 Redis 中执行, 尽管服务器执行它们, 但 EVAL 脚本被视为客户端应用程序的一部分, 这就是它们没有命名、版本化或持久化的原因. 因此, 如果所有脚本丢失, 应用程序可能需要随时重新加载</p>
<h5 id="脚本命令"><a href="#脚本命令" class="headerlink" title="脚本命令"></a>脚本命令</h5><blockquote>
<p><strong>脚本参数化</strong> 为了确保在独立部署和集群部署中正确执行脚本, 脚本访问的所有键名都必须作为输入键参数显式提供</p>
</blockquote>
<ul>
<li>EVAL script numkeys key [key …] arg [arg …] 执行 Lua 脚本<ul>
<li>script 要执行的脚本语句</li>
<li>numkeys 指定后续的参数有几个 key</li>
<li>key 要操作的键的数量, 在 Lua 脚本中通过 <code>KEYS[1]</code>, <code>KEYS[2]</code> 获取</li>
<li>arg 参数, 在 Lua 脚本中通过 <code>ARGV[1]</code>, <code>ARGV[2]</code> 获取</li>
</ul>
</li>
<li>EVAL_RO script numkeys [key [key …]] [arg [arg …]] 只读版本的 EVAL 命令, Redis 7.0 支持</li>
<li>EVALSHA sha1 numkeys key [key …] arg [arg …] 使用缓存 Lua 脚本的 sha 执行脚本(SCRIPT LOAD 命令缓存脚本)</li>
<li>EVALSHA_RO sha1 numkeys [key [key …]] [arg [arg …]] 只读版本的 EVALSHA 命令, Redis 7.0 支持</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return 10&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return ARGV[1]&quot;</span> 0 100</span><br><span class="line"><span class="string">&quot;100&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return &#123;ARGV[1], ARGV[2]&#125;&quot;</span> 0 100 101</span><br><span class="line">1) <span class="string">&quot;100&quot;</span></span><br><span class="line">2) <span class="string">&quot;101&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return &#123;KEYS[1], KEYS[2], ARGV[1], ARGV[2], ARGV[3]&#125;&quot;</span> 2 name age v1 v2</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;v1&quot;</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return &#123;1, 2, &#123; 3, &#x27;hello world&#x27; &#125; &#125;&quot;</span> 0</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 2</span><br><span class="line">3) 1) (<span class="built_in">integer</span>) 3</span><br><span class="line">   2) <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<p>每次执行脚本都需要重新加载一遍脚本代码, 浪费资源</p>
<p><em id="redis.call"></em> <!-- markdownlint-disable-line--></p>
<ul>
<li>redis.call(command [, arg…]) 执行 redis 命令并返回结果, 如果遇到错误时直接返回给客户端</li>
<li>redis.pcall(command [, arg…]) 执行 redis 命令并返回结果, 如果遇到错误时将返回给脚本的执行上下文</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET name</span><br><span class="line"><span class="string">&quot;hello world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return redis.call(&#x27;SET&#x27;, KEYS[1], ARGV[1])&quot;</span> 1 name <span class="string">&quot;hello redis&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET name</span><br><span class="line"><span class="string">&quot;hello redis&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="脚本缓存"><a href="#脚本缓存" class="headerlink" title="脚本缓存"></a><strong>脚本缓存</strong></h5><p>存储在服务器的脚本专用缓存中, 缓存内容由脚本的 SHA1 摘要作为缓存中的唯一标识</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT <span class="built_in">help</span> <span class="comment"># 脚本帮助命令</span></span><br><span class="line"> 1) SCRIPT &lt;subcommand&gt; [&lt;arg&gt; [value] [opt] ...]. Subcommands are:</span><br><span class="line"> 2) DEBUG (YES|SYNC|NO)</span><br><span class="line"> 3)     Set the debug mode <span class="keyword">for</span> subsequent scripts executed.</span><br><span class="line"> 4) EXISTS &lt;sha1&gt; [&lt;sha1&gt; ...]</span><br><span class="line"> 5)     Return information about the existence of the scripts <span class="keyword">in</span> the script cache.</span><br><span class="line"> 6) FLUSH [ASYNC|SYNC]</span><br><span class="line"> 7)     Flush the Lua scripts cache. Very dangerous on replicas.</span><br><span class="line"> 8)     When called without the optional mode argument, the behavior is determined by the</span><br><span class="line"> 9)     lazyfree-lazy-user-flush configuration directive. Valid modes are:</span><br><span class="line">10)     * ASYNC: Asynchronously flush the scripts cache.</span><br><span class="line">11)     * SYNC: Synchronously flush the scripts cache.</span><br><span class="line">12) KILL</span><br><span class="line">13)     Kill the currently executing Lua script.</span><br><span class="line">14) LOAD &lt;script&gt;</span><br><span class="line">15)     Load a script into the scripts cache without executing it.</span><br><span class="line">16) HELP</span><br><span class="line">17)     Prints this <span class="built_in">help</span>.</span><br></pre></td></tr></table></figure>

<ul>
<li>SCRIPT FLUSH 从脚本缓存中移除所有脚本, 返回 ok</li>
<li>SCRIPT KILL 杀死系统当前正在运行的 Lua 脚本(又名慢脚本)</li>
<li>SCRIPT DEBUG 设置脚本内执行时的模式</li>
<li>SCRIPT LOAD &lt;script&gt; 将脚本加载到服务器缓存中, 并不立即执行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 Lua 缓存脚本</span></span><br><span class="line">127.0.0.1:6379&gt; SCRIPT LOAD <span class="string">&quot;return redis.call(&#x27;GET&#x27;, KEYS[1])&quot;</span></span><br><span class="line"><span class="string">&quot;d3c21d0c2b9ca22f82737626a27bcaf5d288f99f&quot;</span></span><br><span class="line"><span class="comment"># 使用 EVALSHA 执行缓存脚本</span></span><br><span class="line">127.0.0.1:6379&gt; EVALSHA d3c21d0c2b9ca22f82737626a27bcaf5d288f99f 1 name</span><br><span class="line"><span class="string">&quot;hello redis&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SCRIPT EXISTS &lt;script&gt; [script …] 查看缓存中是否存在 sha 对应的脚本, 1 表示存在, 0 表示不存在</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SCRIPT EXISTS d3c21d0c2b9ca22f82737626a27bcaf5d288f99f</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SCRIPT EXISTS d3c21d0c2b9ca22f82737626a27bcaf5d288f99g</span><br><span class="line">1) (<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>

<h5 id="脚本复制"><a href="#脚本复制" class="headerlink" title="脚本复制"></a>脚本复制</h5><p>一般在集群部署环境下, Redis 确保脚本执行的所有写操作也被发送到副本以保持一致性, 脚本复制有两种概念</p>
<ul>
<li>逐字复制: master 将脚本的源代码发送到 slave, 然后 slave 执行脚本并写入效果.<ul>
<li>在短脚本生成许多命令的情况下, 可以节省资源, 但意味着 slave 会重做 master 完成的相同工作而浪费资源</li>
</ul>
</li>
<li>效果复制: 仅复制脚本的数据修改命令, slave 然后执行命令而不执行任何脚本, 从 redis 5.0 开始为默认模式</li>
</ul>
<p>脚本效果复制 —— 复制命令</p>
<p>在这种模式下，在执行 Lua 脚本的同时, Redis 会收集 Lua 脚本引擎执行的所有实际修改数据集的命令, 当脚本执行完成时, 脚本生成的命令序列被包装到一个 <strong>事务</strong> 中并发送到副本和 AOF</p>
<h5 id="Lua-API"><a href="#Lua-API" class="headerlink" title="Lua API"></a>Lua API</h5><ul>
<li>使用未声明为本地的变量和函数会引起 Redis 的报错</li>
<li>沙盒执行上下文不支持使用导入的 Lua 模块</li>
</ul>
<h6 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h6><ul>
<li>KEYS 获取脚本声明的键参数</li>
<li>ARGV 获取脚本声明的键参数剩余的参数</li>
<li>redis 单例实例, 使脚本能够与运行它的 Redis 服务器进行交互</li>
</ul>
<h6 id="Redis-实例-API"><a href="#Redis-实例-API" class="headerlink" title="Redis 实例 API"></a>Redis 实例 API</h6><ul>
<li><a href="#redis.call">redis.call(command [, arg…])</a></li>
<li><a href="#redis.call">redis.pcall(command [, arg…])</a></li>
<li>redis.error_reply(x) 辅助函数, 返回一个错误信息</li>
<li>redis.status_reply(x) 辅助函数, 可以修改 Redis 命令的默认返回值 OK</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回错误信息</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return redis.error_reply(&#x27;ERR This is a special error&#x27;)&quot;</span> 0</span><br><span class="line">(error) ERR This is a special error</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认返回值</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return &#123; ok = &#x27;TICK&#x27; &#125;&quot;</span> 0</span><br><span class="line"><span class="string">&quot;TICK&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return redis.status_reply(&#x27;TOCK&#x27;)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;TOCK&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>redis.sha1hex(x) 返回单个字符串参数的 SHA1 十六进制摘要信息</li>
<li>redis.log(level, message) 写入 Redis 服务器日志<ul>
<li>redis.LOG_DEBUG 日志级别</li>
<li>redis.LOG_VERBOSE 日志级别</li>
<li>redis.LOG_NOTICE 日志级别</li>
<li>redis.LOG_WARNING 日志级别</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return redis.sha1hex(&#x27;&#x27;)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;da39a3ee5e6b40d3255bfef95601890afd80709&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return redis.log(redis.LOG_WARNING, &#x27;Something is terribly wrong&#x27;)&quot;</span> 0</span><br></pre></td></tr></table></figure>

<ul>
<li>redis.setresp(x) 设置执行脚本和服务器之间的请求应答协议, 默认值 2. Redis 6.0 支持</li>
<li>redis.breakpoint() 在使用 Redis Lua 调试器时触发断点</li>
<li>redis.debug(x) 在 Redis Lua 调试器控制台中打印其参数</li>
<li>redis.acl_check_cmd(command [,arg…]) 用于检查运行脚本的当前用户是否具有使用给定参数执行给定命令的 ACL 权限, 返回值布尔类型. Redis 7.0 支持</li>
<li><a href="#redis.register_function">redis.register_function(name, callback, flags, description)</a> Redis 7.0 支持</li>
<li>redis.REDIS_VERSION 以字符串形式返回当前 Redis 服务器版本, 格式 MM.mm.PP. Redis 7.0 支持</li>
<li>redis.REDIS_VERSION_NUM 以数字形式返回当前 Redis 服务器版本, 格式为十进制值. Redis 7.0 支持</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return redis.REDIS_VERSION&quot;</span> 0</span><br><span class="line"><span class="string">&quot;7.0.5&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return redis.REDIS_VERSION_NUM&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 458757</span><br></pre></td></tr></table></figure>

<h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><h5 id="RESP2"><a href="#RESP2" class="headerlink" title="RESP2"></a>RESP2</h5><ul>
<li>RESP2 -&gt; Lua<ul>
<li>RESP2 整数 -&gt; Lua 数</li>
<li>RESP2 批量字符串 -&gt; Lua 字符串</li>
<li>RESP2 数组 -&gt; Lua 表(可能嵌套额其他 Redis 数据类型)</li>
<li>RESP2 状态 -&gt; 包含状态字符串的单个 ok 字段的 Lua 表</li>
<li>RESP2 错误 -&gt; 包含错误字符串的单个 err 字段的 Lua 表</li>
<li>RESP 空批量|空多批量 -&gt; Lua false 布尔类型</li>
</ul>
</li>
<li>Lua -&gt; RESP2<ul>
<li>Lua 数字 -&gt; RESP2 整数(数字转为整数, 舍去小数部分)</li>
<li>Lua 字符串 -&gt; RESP 批量字符串</li>
<li>Lua 表(索引, 非关联数组) -&gt; RESP2 数组(在表中遇到第一个 nil 时截断)</li>
<li>带有单个 ok 字段的 Lua 表 -&gt; RESP2 状态</li>
<li>带有单个 err 字段的 Lua 表 -&gt; RESP2 错误</li>
<li>Lua false 布尔类型 -&gt; RESP2 空批量</li>
<li>Lua true 布尔类型 -&gt; RESP2 整数 1</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return &#123;1, 2, &#123;3, &#x27;hello world&#x27;&#125;, &#x27;bar&#x27;&#125;&quot;</span> 0</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 2</span><br><span class="line">3) 1) (<span class="built_in">integer</span>) 3</span><br><span class="line">   2) <span class="string">&quot;hello world&quot;</span></span><br><span class="line">4) <span class="string">&quot;bar&quot;</span></span><br><span class="line"><span class="comment"># 忽略表中的 键、数值的小数部分，nil 处截断</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return &#123;1, 2, 3.33, somekey = &#x27;somevalue&#x27;, &#x27;foo&#x27;, nil, &#x27;bar&#x27;&#125;&quot;</span> 0</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 2</span><br><span class="line">3) (<span class="built_in">integer</span>) 3</span><br><span class="line">4) <span class="string">&quot;foo&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="RESP3"><a href="#RESP3" class="headerlink" title="RESP3"></a>RESP3</h5><blockquote>
<p>一旦 Redis 的回复采用 RESP3 协议, 所有 RESP2 到 Lua 的转换规则都适用, 并添加以下内容</p>
</blockquote>
<ul>
<li>RESP3 -&gt; Lua<ul>
<li>RESP3 map -&gt; 带有单个映射字段的 Lua 表, 其中包含表示映射字段和值的 Lua 表</li>
<li>RESP3 set -&gt; 具有单个集合字段的 Lua 表</li>
<li>RESP3 null -&gt; Lua nil</li>
<li>RESP3 true -&gt; Lua true 布尔类型</li>
<li>RESP3 false -&gt; Lua false 布尔类型</li>
<li>RESP3 浮点数 -&gt; 带有一个浮点数字段的 Lua 表</li>
<li>RESP3 大数字 -&gt; 带有单个大数字字段的 Lua 表. Redis 7.0 支持</li>
<li>RESP3 逐句逐字字符串 -&gt; Lua 表, 其中包含单个 verbatim_string 字段的 Lua 表, 其中包含两个字段 string 和 format,分别表示 verbatim string 和它的格式. Redis 7.0 支持</li>
</ul>
</li>
<li>Lua -&gt; RESP3<ul>
<li>Lua Boolean -&gt; RESP3 Boolean</li>
<li>将单个映射字段设置为关联 Lua 表的 Lua 表 -&gt; RESP3 map</li>
<li>将单个集合字段设置为关联 Lua 表的 Lua 表 -&gt; RESP3 set, 值可以为任何值, 都会被丢弃</li>
<li>带有单个浮点数字段的 Lua 表到关联的 Lua 表 -&gt; RESP3 浮点数</li>
<li>Lua nil -&gt; RESP3 null</li>
</ul>
</li>
</ul>
<h4 id="外部库"><a href="#外部库" class="headerlink" title="外部库"></a>外部库</h4><h5 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h5><ul>
<li>struct.pack(x) 返回一个结构编码的字符串, 接收一个结构格式字符串作为第一个参数, 后面是要编码的值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;bb&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x01\x02&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;BB&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x01\x02&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;B&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x01&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;xB&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x00\x01&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;xBx&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x00\x01\x00&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;xBxx&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x00\x01\x00\x00&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;xBxxH&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x00\x01\x00\x00\x02\x00&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;BxxH&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x02\x00&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;Bxxh&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x02\x00&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;BxxB&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x02&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.pack(&#x27;Bxxl&#x27;, 1, 2)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x01\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>struct.unpack(x) 返回结构的解码值, 接收一个结构格式字符串作为第一个参数, 然后是编码结构的字符串</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return &#123;struct.unpack(&#x27;BxxH&#x27;, ARGV[1])&#125;&quot;</span> 0 <span class="string">&quot;\x01\x00\x00\x02\x00&quot;</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 2</span><br><span class="line">3) (<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return &#123;struct.unpack(&#x27;BB&#x27;, ARGV[1])&#125;&quot;</span> 0 <span class="string">&quot;\x01\x02&quot;</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) (<span class="built_in">integer</span>) 2</span><br><span class="line">3) (<span class="built_in">integer</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>struct.size(x) 返回结构的大小(以字节为单位), 接收结构格式字符串作为唯一参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.size(&#x27;b&#x27;)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.size(&#x27;B&#x27;)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.size(&#x27;h&#x27;)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.size(&#x27;H&#x27;)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.size(&#x27;l&#x27;)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return struct.size(&#x27;L&#x27;)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br></pre></td></tr></table></figure>

<h6 id="结构格式"><a href="#结构格式" class="headerlink" title="结构格式"></a>结构格式</h6><ul>
<li>&gt; 大端</li>
<li>&lt; 小端</li>
<li>![num] 结盟</li>
<li>x 填充</li>
<li>b/B 有/无符号字节</li>
<li>h/H 有/无符号短</li>
<li>l/L 有/无符号长</li>
<li>T 大小</li>
<li>i/In 大小为 n 的有/无符号整数(默认为 int 的大小)</li>
<li>cn n 个字符的序列, 打包时, n ==0 表示整个字符串, 解包时, n == 0 表示使用先前读取的数字作为字符串的长度</li>
<li>s 零终止字符串</li>
<li>f float</li>
<li>d double</li>
<li>(space) 忽略</li>
</ul>
<h5 id="cjson"><a href="#cjson" class="headerlink" title="cjson"></a>cjson</h5><p>cjson 库提供了来自 Lua 的快速 JSON 编码和解码</p>
<ul>
<li>cjson.encode(x) 返回作为其参数提供的 Lua 数据类型的 JSON 编码字符串</li>
<li>cjson.decode(x) 从作为其参数提供的 JSON 编码字符串返回 Lua 数据类型</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return cjson.encode(&#123; 1, 2, &#x27;foo&#x27;, &#x27;bar&#x27; &#125;)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;[1,2,\&quot;foo\&quot;,\&quot;bar\&quot;]&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return cjson.encode(&#123; 1, 2, 3.33, &#x27;foo&#x27;, &#x27;bar&#x27; &#125;)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;[1,2,3.33,\&quot;foo\&quot;,\&quot;bar\&quot;]&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return cjson.encode(&#123; [&#x27;foo&#x27;] = &#x27;bar&#x27; &#125;)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;&#123;\&quot;foo\&quot;:\&quot;bar\&quot;&#125;&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return cjson.encode(&#123; [&#x27;foo&#x27;] = &#x27;bar&#x27;, [&#x27;fov&#x27;] = &#x27;baz&#x27; &#125;)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;&#123;\&quot;fov\&quot;:\&quot;baz\&quot;,\&quot;foo\&quot;:\&quot;bar\&quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return cjson.decode(ARGV[1])[4]&quot;</span> 0 <span class="string">&quot;[1,2,3.33,\&quot;foo\&quot;,\&quot;bar\&quot;]&quot;</span></span><br><span class="line"><span class="string">&quot;foo&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return cjson.decode(ARGV[1])[&#x27;fov&#x27;]&quot;</span> 0 <span class="string">&quot;&#123;\&quot;fov\&quot;:\&quot;baz\&quot;,\&quot;foo\&quot;:\&quot;bar\&quot;&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;baz&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="cmsgpack"><a href="#cmsgpack" class="headerlink" title="cmsgpack"></a>cmsgpack</h5><p>cmsgpack 库提供了来自 Lua 的快速 MessagePack 编码和解码</p>
<ul>
<li>cmsgpack.pack(x) 返回作为参数给出的 Lua 数据类型的压缩字符串编码</li>
<li>cmsgpack.unpack(x) 返回解码其输入字符串参数的解压缩值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return cmsgpack.pack(&#123;&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;, &#x27;hello&#x27;&#125;)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;\x94\xa3foo\xa3bar\xa3baz\xa5hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return cmsgpack.unpack(ARGV[1])&quot;</span> 0 <span class="string">&quot;\x94\xa3foo\xa3bar\xa3baz\xa5hello&quot;</span></span><br><span class="line">1) <span class="string">&quot;foo&quot;</span></span><br><span class="line">2) <span class="string">&quot;bar&quot;</span></span><br><span class="line">3) <span class="string">&quot;baz&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="bit"><a href="#bit" class="headerlink" title="bit"></a>bit</h5><p>bit 提供对数字的按位运算</p>
<ul>
<li>bit.tobit(x)` 将数字格式化为位运算的数值范围并返回</li>
<li>bit.tohex(x [, n]) 将第一个参数转换为十六进制并返回, 第二个参数的绝对值控制返回值的数量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.tobit(1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.tohex(422342)&quot;</span> 0</span><br><span class="line"><span class="string">&quot;000671cd&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>bit.bnot(x) 返回其参数的按位非运算</li>
<li>bit.bor(x1 [, x2…]) 返回其所有参数的按位或运算</li>
<li>bit.band(x1 [, x2…]) 返回其所有参数的按位与运算</li>
<li>bit.bxor(x1 [, x2…]) 返回其所有参数的按位异或运算</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0000 1100 12</span></span><br><span class="line"><span class="comment">#         !</span></span><br><span class="line"><span class="comment"># 1111 0011 -13</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.bnot(12)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) -13</span><br><span class="line"><span class="comment"># 0010 0000 32</span></span><br><span class="line"><span class="comment">#         !</span></span><br><span class="line"><span class="comment"># 1101 1111 -33</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.bnot(32)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) -33</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.bor(1,2,4,8,16,32,64)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 127</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0100 1010 74</span></span><br><span class="line"><span class="comment"># 0000 1100 12</span></span><br><span class="line"><span class="comment">#         &amp;</span></span><br><span class="line"><span class="comment"># 0000 1000 8</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.band(12, 74)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0100 1010 74</span></span><br><span class="line"><span class="comment"># 0000 1100 12</span></span><br><span class="line"><span class="comment">#         ^</span></span><br><span class="line"><span class="comment"># 0100 0110 70</span></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.bxor(12, 74)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 70</span><br></pre></td></tr></table></figure>

<ul>
<li>bit.lshift(x, n) 返回第一个参数按位左移 n 位的结果</li>
<li>bit.rshift(x, n) 返回第一个参数按位右移 n 位的结果</li>
<li>bit.arshift(x, n) 返回第一个参数按位<strong>算术右移</strong> n 位的结果, 不改变符号位的移位操作</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.lshift(1, 3)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.lshift(2, 1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.lshift(3, 2)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.rshift(1, 1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.rshift(2, 1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.rshift(3, 1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.arshift(10, 1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.arshift(128, 1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 64</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.rshift(-12, 1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 2147483642</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.arshift(-12, 1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) -6</span><br></pre></td></tr></table></figure>

<ul>
<li>bit.rol(x, n) 按第二个参数给定的位数返回其第一个参数的按位左旋转</li>
<li>bit.ror(x, n) 按第二个参数给定的位数返回其第一个参数的按位右旋转</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.rol(12, 1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 24</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.rol(12, 2)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 48</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.rol(12, 6)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 768</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.ror(12, 1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.ror(12, 4)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) -1073741824</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.ror(12, 6)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 805306368</span><br></pre></td></tr></table></figure>

<ul>
<li>bit.bswap(x) 交换其参数的字节并返回它, 可用于将小端 32 位数字转换位大端 32 位数字, 反之亦然</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.bswap(1)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 16777216</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.bswap(2)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 33554432</span><br><span class="line">127.0.0.1:6379&gt; EVAL <span class="string">&quot;return bit.bswap(12)&quot;</span> 0</span><br><span class="line">(<span class="built_in">integer</span>) 201326592</span><br></pre></td></tr></table></figure>

<h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>ACL(access control list)访问控制列表的简称, 是为了控制某些 Redis 客户端在访问 Redis 服务器时, 能够执行的命令和能够获取的 key, 提高操作安全性, 避免对数据造成损坏</p>
<ul>
<li>ACL HELP 显示 ACL 的帮助信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ACL HELP</span><br><span class="line"> 1) ACL &lt;subcommand&gt; [&lt;arg&gt; [value] [opt] ...]. Subcommands are:</span><br><span class="line"> 2) CAT [&lt;category&gt;]</span><br><span class="line"> 3)     List all commands that belong to &lt;category&gt;, or all <span class="built_in">command</span> categories</span><br><span class="line"> 4)     when no category is specified.</span><br><span class="line"> 5) DELUSER &lt;username&gt; [&lt;username&gt; ...]</span><br><span class="line"> 6)     Delete a list of <span class="built_in">users</span>.</span><br><span class="line"> 7) DRYRUN &lt;username&gt; &lt;<span class="built_in">command</span>&gt; [&lt;arg&gt; ...]</span><br><span class="line"> 8)     Returns whether the user can execute the given <span class="built_in">command</span> without executing the <span class="built_in">command</span>.</span><br><span class="line"> 9) GETUSER &lt;username&gt;</span><br><span class="line">10)     Get the user\<span class="string">&#x27;s details.</span></span><br><span class="line"><span class="string">11) GENPASS [&lt;bits&gt;]</span></span><br><span class="line"><span class="string">12)     Generate a secure 256-bit user password. The optional `bits` argument can</span></span><br><span class="line"><span class="string">13)     be used to specify a different size.</span></span><br><span class="line"><span class="string">14) LIST</span></span><br><span class="line"><span class="string">15)     Show users details in config file format.</span></span><br><span class="line"><span class="string">16) LOAD</span></span><br><span class="line"><span class="string">17)     Reload users from the ACL file.</span></span><br><span class="line"><span class="string">18) LOG [&lt;count&gt; | RESET]</span></span><br><span class="line"><span class="string">19)     Show the ACL log entries.</span></span><br><span class="line"><span class="string">20) SAVE</span></span><br><span class="line"><span class="string">21)     Save the current config to the ACL file.</span></span><br><span class="line"><span class="string">22) SETUSER &lt;username&gt; &lt;attribute&gt; [&lt;attribute&gt; ...]</span></span><br><span class="line"><span class="string">23)     Create or modify a user with the specified attributes.</span></span><br><span class="line"><span class="string">24) USERS</span></span><br><span class="line"><span class="string">25)     List all the registered usernames.</span></span><br><span class="line"><span class="string">26) WHOAMI</span></span><br><span class="line"><span class="string">27)     Return the current connection username.</span></span><br><span class="line"><span class="string">28) HELP</span></span><br><span class="line"><span class="string">29)     Prints this help.</span></span><br></pre></td></tr></table></figure>

<h4 id="规则分类"><a href="#规则分类" class="headerlink" title="规则分类"></a>规则分类</h4><table>
<thead>
<tr>
<th align="center">参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">on</td>
<td>启用用户, 默认为 off</td>
</tr>
<tr>
<td align="center">off</td>
<td>禁用用户</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">+&lt;command&gt;</td>
<td>将命令添加到用户可以调用的命令列表中</td>
</tr>
<tr>
<td align="center">-&lt;command&gt;</td>
<td>将命令从用户可以调用的命令列表中移除</td>
</tr>
<tr>
<td align="center">+&lt;command&gt;|subcmd</td>
<td>允许使用已禁用命令的特定子命令</td>
</tr>
<tr>
<td align="center">+@&lt;category&gt;</td>
<td>允许用户调用 category 类别中的所有命令, 可以使用 <code>ACL CAT</code> 命令查看所有类别</td>
</tr>
<tr>
<td align="center">-@&lt;category&gt;</td>
<td>禁止用户调用 category 类别中的所有命令</td>
</tr>
<tr>
<td align="center">allcommands</td>
<td>+@all 的别名</td>
</tr>
<tr>
<td align="center">nocommands</td>
<td>-@all 的别名</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">~&lt;pattern&gt;</td>
<td>允许用户可以访问的 key(正则匹配), 例如: ~foo:* 只允许访问 foo:* 的 key</td>
</tr>
<tr>
<td align="center">%R~&lt;pattern&gt;</td>
<td>添加指定的只读 key(正则匹配), 例如: %R~app:* 只允许读 app:* 的 key, 7.0 支持</td>
</tr>
<tr>
<td align="center">%W~&lt;pattern&gt;</td>
<td>添加指定的只写 key(正则匹配), 例如: %W~app:* 只允许写 app:* 的 key, 7.0 支持</td>
</tr>
<tr>
<td align="center">%RW~&lt;pattern&gt;</td>
<td>添加指定的可读可写的 key(正则匹配), 例如: %RW~app:* 只允许读写 app:* 的 key, 7.0 支持</td>
</tr>
<tr>
<td align="center">allkeys</td>
<td>~* 的别名</td>
</tr>
<tr>
<td align="center">resetkeys</td>
<td>移除所有的 key 匹配模式</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">&amp;&lt;pattern&gt;</td>
<td>允许用户可使用的 Pub/Sub 通道(正则匹配)</td>
</tr>
<tr>
<td align="center">allchannels</td>
<td>&amp;* 的别名</td>
</tr>
<tr>
<td align="center">resetchannels</td>
<td>移除所有的通道匹配模式</td>
</tr>
<tr>
<td align="center"></td>
<td></td>
</tr>
<tr>
<td align="center">&gt;&lt;password&gt;</td>
<td>为用户添加明文密码, 服务器自动转换成 hash 存储, 例如: &gt;123456</td>
</tr>
<tr>
<td align="center">&lt;&lt;password&gt;</td>
<td>从有效密码列表中删除密码</td>
</tr>
<tr>
<td align="center">#&lt;hash&gt;</td>
<td>为用户添加 hash 密码, 例如: #cab3…c4f2</td>
</tr>
<tr>
<td align="center">!&lt;hash&gt;</td>
<td>从有效密码列表中删除密码</td>
</tr>
<tr>
<td align="center">nopass</td>
<td>删除所有与用户关联的密码</td>
</tr>
<tr>
<td align="center">resetpass</td>
<td>刷新密码列表并删除 nopass 状态</td>
</tr>
</tbody></table>
<ul>
<li>ACL CAT 显示 Redis 的所有分类</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ACL CAT</span><br><span class="line"> 1) <span class="string">&quot;keyspace&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;read&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;write&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;set&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;sortedset&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;list&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;hash&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;string&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;bitmap&quot;</span></span><br><span class="line">10) <span class="string">&quot;hyperloglog&quot;</span></span><br><span class="line">11) <span class="string">&quot;geo&quot;</span></span><br><span class="line">12) <span class="string">&quot;stream&quot;</span></span><br><span class="line">13) <span class="string">&quot;pubsub&quot;</span></span><br><span class="line">14) <span class="string">&quot;admin&quot;</span></span><br><span class="line">15) <span class="string">&quot;fast&quot;</span></span><br><span class="line">16) <span class="string">&quot;slow&quot;</span></span><br><span class="line">17) <span class="string">&quot;blocking&quot;</span></span><br><span class="line">18) <span class="string">&quot;dangerous&quot;</span></span><br><span class="line">19) <span class="string">&quot;connection&quot;</span></span><br><span class="line">20) <span class="string">&quot;transaction&quot;</span></span><br><span class="line">21) <span class="string">&quot;scripting&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ACL USERS 列出所有已配置用户名</li>
<li>ACL WHOAMI 返回当前连接服务器的用户名, 默认 default</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ACL WHOAMI</span><br><span class="line"><span class="string">&quot;default&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>ACL SAVE 将 ACLs 配置项从内存保存到 ACL 文件中</p>
</li>
<li><p>ACL DELUSER [username…] 删除指定的 ACL 用户, default 用户不能被删除</p>
</li>
<li><p>ACL SETUSER 设置用户访问权限</p>
</li>
<li><p>ACL GETUSER username 获取指定用户的权限</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 lisi 账号, 明文密码 123456, 添加所有分类的命令</span></span><br><span class="line">127.0.0.1:6379&gt; ACL SETUSER lisi &gt;123456 off +@all</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ACL GETUSER lisi</span><br><span class="line"> 1) <span class="string">&quot;flags&quot;</span></span><br><span class="line"> 2) 1) <span class="string">&quot;off&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;passwords&quot;</span></span><br><span class="line"> 4) 1) <span class="string">&quot;8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;commands&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;+@all&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;keys&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;channels&quot;</span></span><br><span class="line">10) <span class="string">&quot;&quot;</span></span><br><span class="line">11) <span class="string">&quot;selectors&quot;</span></span><br><span class="line">12) (empty array)</span><br><span class="line"><span class="comment"># 添加禁用账号 zhangsan</span></span><br><span class="line"><span class="comment"># 只包含 string, hash, list, set分类下的命令</span></span><br><span class="line"><span class="comment"># 只能操作以 zhang 开头匹配模式的 key 和通道</span></span><br><span class="line">127.0.0.1:6379&gt; ACL SETUSER zhangsan off +@string +@<span class="built_in">hash</span> +@list +@<span class="built_in">set</span> ~zhang:* &amp;zhang:*</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ACL GETUSER zhangsan</span><br><span class="line"> 1) <span class="string">&quot;flags&quot;</span></span><br><span class="line"> 2) 1) <span class="string">&quot;off&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;passwords&quot;</span></span><br><span class="line"> 4) 1) <span class="string">&quot;8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;commands&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;-@all +@list +@string +@hash +@set&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;keys&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;~zhang:*&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;channels&quot;</span></span><br><span class="line">10) <span class="string">&quot;&amp;zhang:*&quot;</span></span><br><span class="line">11) <span class="string">&quot;selectors&quot;</span></span><br><span class="line">12) (empty array)</span><br><span class="line"><span class="comment"># 删除用户的密码</span></span><br><span class="line">127.0.0.1:6379&gt; ACL SETUSER zhangsan !8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<ul>
<li>ACL LIST 显示 Redis 服务器当前活动的 ACL 规则</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ACL LIST</span><br><span class="line">1) <span class="string">&quot;user default on nopass ~* &amp;* +@all&quot;</span></span><br><span class="line">2) <span class="string">&quot;user zhangsan off ~zhang:* resetchannels &amp;zhang:* -@all +@list +@string +@hash +@set&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ACL DRYRUN username command [arg [arg …]] 模拟指定用户对给定命令的执行, 此命令可以用来测试用户的权限而无需启用用户, 7.0.0 支持</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ACL DRYRUN zhangsan ZADD zs 1 hello 2 world 3 zs</span><br><span class="line"><span class="string">&quot;This user has no permissions to run the &#x27;zadd&#x27; command&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ACL DRYRUN zhangsan SADD s1 hello world gg s1</span><br><span class="line"><span class="string">&quot;This user has no permissions to access the &#x27;s1&#x27; key&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ACL DRYRUN zhangsan SET name zhangsan</span><br><span class="line"><span class="string">&quot;This user has no permissions to access the &#x27;name&#x27; key&quot;</span></span><br><span class="line"><span class="comment"># 只能操作以 zhang 开头匹配模式的 key</span></span><br><span class="line">127.0.0.1:6379&gt; ACL DRYRUN zhangsan SADD zhang:<span class="built_in">set</span> hello world s1</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>=== Redis 单条命令是保证原子性的, 但是 Redis 事务不保证原子性 ===<br>=== Redis 事务没有隔离级别的概念 ===<br>所有的命令在事务中, 并没有被执行而是加入队列, 只有发起执行命令的时候才会执行! EXEC</p>
<p>Redis 事务允许在一个步骤中执行一组命令, 事务中的所有命令都是串行化的, 并按顺序执行. 在 Redis 事务执行过程中, 另一个客户端发送的请求将永远不会被处理. 这保证了命令作为一个单独的操作执行<br>Redis 事务执行的三个重要保证:</p>
<ul>
<li>批量操作在发送 EXEC 命令前被放入队列缓存</li>
<li>收到 EXEC 命令后进入事务执行, 事务中任意命令执行失败, 其余的命令依然被执行</li>
<li>事务执行过程, 其他客户端提交的命令请求不会插入到事务执行命令序列中</li>
</ul>
<p>事务开始到执行的三个阶段</p>
<ul>
<li>开启事务(multi): 使用 <code>MULTI</code> 命令标记从非事务状态切换到事务状态</li>
<li>命令入队: 命令不会被立即执行, 而是被放入一个事务队列</li>
<li>执行事务(exec)或丢弃(discard)</li>
</ul>
<h4 id="事务命令"><a href="#事务命令" class="headerlink" title="事务命令"></a>事务命令</h4><ul>
<li><p>MULTI 标记一个事务块的开启, 通常返回 ok</p>
</li>
<li><p>EXEC 执行事务, 通常返回 ok</p>
<ul>
<li>必须在 <code>MULTI</code> 命令之后才能调用, 否则报错 ERR EXEC without MULTI</li>
<li>如果 <code>WATCH</code> 观察的 key 在当前的事务执行时已被修改, 则返回 &lt;nil&gt;</li>
</ul>
</li>
<li><p>DISCARD 丢弃事务, 通常返回 ok</p>
<ul>
<li>必须在 <code>MULTI</code> 命令之后才能调用, 否则报错 ERR DISCARD without MULTI</li>
</ul>
</li>
<li><p>WATCH key [key …] 监视一个或多个 key, 如果在事务执行之前观察的 key 被修改, 则事务将被打断, 通常返回 ok</p>
<ul>
<li>如果在 <code>MULTI</code> 命令后调用, 则会报错 ERR WATCH inside MULTI is not allowed</li>
</ul>
</li>
<li><p>UNWATCH 取消所有观察的 key, 通常返回 ok, 如果调用了 <code>EXEC</code> 或 <code>DISCARD</code> 命令, 通常不再需要调用此命令</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GET money</span><br><span class="line"><span class="string">&quot;250&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; WATCH money <span class="comment"># 观察 money</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 修改 money 加上增量 1000 命令入事务队列</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; INCRBY money 1000</span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line"><span class="comment"># 另一个客户端连接修改 money 加上增量 50</span></span><br><span class="line">127.0.0.1:6379&gt; INCRBY money 50</span><br><span class="line">(<span class="built_in">integer</span>) 300</span><br><span class="line"><span class="comment">###################################</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC <span class="comment"># 执行事务</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; GET money</span><br><span class="line"><span class="string">&quot;300&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="编译时错误"><a href="#编译时错误" class="headerlink" title="编译时错误"></a>编译时错误</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SET key1 hello</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 此处的错误在命令加入事务队列时发现, 直接报告, 导致整个事务的执行失败</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR key1 10</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;incr&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; GET key2 key2 <span class="comment"># 命令入队列</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; GET key2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC  <span class="comment"># 执行事务</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; GET key2</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<h4 id="运行时错误"><a href="#运行时错误" class="headerlink" title="运行时错误"></a>运行时错误</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI <span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; SET key1 hello  <span class="comment"># 命令入队列</span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="comment"># 此处的错误在命令运行时才能发现, 但不影响下面的命令的执行</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; INCR key1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; SET key2 key2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; GET key2  <span class="comment"># 命令执行成功</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; EXEC  <span class="comment"># 执行事务</span></span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an <span class="built_in">integer</span> or out of range</span><br><span class="line">3) OK</span><br><span class="line">4) <span class="string">&quot;key2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GET key2</span><br><span class="line"><span class="string">&quot;key2&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="不支持回滚"><a href="#不支持回滚" class="headerlink" title="不支持回滚"></a>不支持回滚</h4><ul>
<li>Redis 命令只会因为错误的语法而失败(并且这些问题不能在入队时发现), 或是命令用在了错误类型的键上: 从实用性的角度来说, 失败的命令是由编程错误造成的, 而这些错误应该在开发环境中被发现, 不应该出现在生产环境中</li>
<li>因为不需要对回滚进行支持, 所有 Redis 的内部可以保持简单且快速</li>
</ul>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>Redis 是基于内存的数据库, 遇到断电就会丢失数据, 持久化就是将内存中的数据保存到磁盘中便于以后使用, Redis 提供了 RDB 和 AOF 两种持久化方式, 默认使用 RDB 方式持久化数据<br>Redis 在持久化的过程中, 会先将数据写入到一个临时的文件中, 待持久化过程结束后, 才会用这个临时文件替换赏赐持久化生成的文件</p>
<p><img data-src="/images/redis-4.png" alt="redis-4"></p>
<h4 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h4><ul>
<li><p>通过 <code>FLUSHALL</code>/<code>FLUSHDB</code> 命令主动触发</p>
</li>
<li><p>通过 <code>SAVE</code>/<code>BGSAVE</code> 命令主动触发</p>
</li>
<li><p>通过配置文件定期触发持久化操作</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis 7.0 写法</span></span><br><span class="line"><span class="comment"># 3600秒至少有 1 次修改, 300秒至少有 100 次修改, 60秒至少有 10000 次修改</span></span><br><span class="line">save 3600 1 300 100 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># save &quot;&quot; 禁用 RDB, 但仍然可以使用 SAVE 和 BGSAVE 命令生成 RDB 文件</span></span><br></pre></td></tr></table></figure>

<h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><p>RDB(Redis Database), 在指定的时间间隔以指定的次数将内存中的数据集以快照的方式写入一个二进制文件中, 然后保存到磁盘中, 也就是 snapshot 快照, 默认生成的文件为 dump.rdb<br>Redis 会单独 fork 一个子进程进行持久化, 而主进程不会进行任何 I/O 操作, 这样就保证了 Redis 极高的性能, 如果需要进行大规模数据的恢复,且对于数据恢复的完整性不是非常敏感, 此方式比 AOF 方式更加的高效</p>
<ul>
<li><p><code>dbfilename dump.rdb</code> 默认文件名</p>
</li>
<li><p><code>dir ./</code> 默认存储目录</p>
</li>
<li><p><code>redis-check-rdb</code> 检查 RDB 文件</p>
</li>
</ul>
<h5 id="RDB-优点"><a href="#RDB-优点" class="headerlink" title="RDB 优点"></a>RDB 优点</h5><ul>
<li>每隔一段时间完全备份一次</li>
<li>容灾简单, 可远程传输</li>
<li>RDB 最大限度地提高了 Redis 的性能</li>
<li>文件较大时重启和恢复速度要快</li>
</ul>
<h5 id="RDB-缺点"><a href="#RDB-缺点" class="headerlink" title="RDB 缺点"></a>RDB 缺点</h5><ul>
<li>如果备份时间间隔过长, RDB 会丢失较多的数据, 无法处理实时备份</li>
<li>RDB 需要经常 fork() 以便使用子进程在磁盘上持久化, 增加 CPU 的负担</li>
</ul>
<h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>===如果 appendonly.aof 文件有错误, Redis 服务将会启动失败===</p>
<ul>
<li>redis-check-aof 检查 AOF 文件, --fix 参数修复文件的错误, 通常会丢弃文件中无法识别的命令</li>
</ul>
<p>AOF(Append Only File), 将执行过的写命令全部记录下来, 在数据恢复时按照从前往后的顺序再将指令都执行一遍</p>
<ul>
<li><code>appendonly yes</code> 启动 AOF 模式, 默认为 no</li>
<li><code>appendfilename appendonly.aof</code> 默认文件名</li>
<li><code>appenddirname appendonlydir</code> 默认存储目录</li>
<li><code>appendfsync everysec</code> 持久化策略, 每秒钟执行一次, 可以修改为 <code>always</code> 和 <code>no</code><ul>
<li><code>always</code> 每次将新命令附加到 AOF 时, 速度慢, 但是最安全</li>
<li><code>no</code> 将写入策略权交给操作系统, 速度快, 但是不安全</li>
</ul>
</li>
<li><code>no-appendfsync-on-rewrite no</code> AOF 重写期间是否同步, 默认 no</li>
</ul>
<blockquote>
<p>Redis 7.0 支持使用新的 AOF 持久化方式, 包含三个文件, 当触发重写机制时, 自动创建新的基础文件和增量文件</p>
</blockquote>
<ul>
<li>以 appendfilename 为前缀命名的基础文件 <code>appendfilename.*.base.rdb</code>, 基础文件可以是 RDB 或 AOF</li>
<li>以 appendfilename 为前缀命名的增量文件 <code>appendfilename.*.incr.aof</code>, 包含在上一个文件之后应用于数据集的其他命令</li>
<li>以 appendfilename 为前缀命名的清单文件 <code>appendfilename.aof.manifest</code>, 用于追踪文件及其创建和应用的顺序</li>
</ul>
<h5 id="重写机制"><a href="#重写机制" class="headerlink" title="重写机制"></a>重写机制</h5><ul>
<li><code>auto-aof-rewrite-percentage 100</code> AOF 重写的基准值, 当达到 100% 时重写</li>
<li><code>auto-aof-rewrite-min-size 64mb</code> 当文件大小达到 64mb 的 100% 时重写</li>
</ul>
<p><code>BGREWRITEAOF</code> 命令将会在后台开启 AOF 文件重写进程, 创建一个当前 AOF 文件的更小的优化版本, 如果重写失败不会丢失任何数据, 旧的 AOF 文件也不会受到影响</p>
<h5 id="AOF-优点"><a href="#AOF-优点" class="headerlink" title="AOF 优点"></a>AOF 优点</h5><ul>
<li>AOF 更耐用, 可以在几秒钟内完成备份</li>
<li>当数据过大时, Redis 可以在后台自动重写 AOF, 节省空间</li>
<li>AOF 实时性更好, 丢失数据更少, 并且支持配置写入策略</li>
</ul>
<h5 id="AOF-缺点"><a href="#AOF-缺点" class="headerlink" title="AOF 缺点"></a>AOF 缺点</h5><ul>
<li>对于相同的数据集合, AOF 文件通常会比 RDB 文件大</li>
<li>在特定的 fsync 策略下, AOF 会比 RDB 略慢</li>
<li>AOF 恢复速度比 RDB 慢</li>
</ul>
<h4 id="RDB-和-AOF-组合"><a href="#RDB-和-AOF-组合" class="headerlink" title="RDB 和 AOF 组合"></a>RDB 和 AOF 组合</h4><ul>
<li><p><code>aof-use-rdb-preamble yes</code> 是否开始混合模式, 默认 yes</p>
</li>
<li><p>RDB 做全量持久化</p>
</li>
<li><p>AOF 做增量持久化<br>如果同时开始 RDB 和 AOF 持久化时, Redis 重启时只会加载 AOF 文件, 不会加载 RDB 文件</p>
</li>
</ul>
<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>将一台 Redis 服务器的数据,复制到其他的 Redis 服务器. 前者称为主节点(Master/Leader),后者称为从节点(Slave/Follower), 数据的复制是单向的！只能由主节点复制到从节点(主节点以写为主、从节点以读为主)—— 读写分离.<br>===每台 Redis 服务器都是主节点===<br>一个主节点可以有 0 个或者多个从节点, 但每个从节点只能有一个主节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INFO replication <span class="comment"># 当前副本的信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:e49c9c650c72cd6e3f369365808da6de6efd3825</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>

<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul>
<li>数据冗余: 主从复制实现了数据的热备份, 是持久化之外的一种数据冗余的方式</li>
<li>故障恢复: 当主节点故障时, 从节点可以暂时替代主节点提供服务, 是一种服务冗余的方式</li>
<li>负载均衡: 在主从复制的基础上, 配合读写分离, 由主节点进行写操作, 从节点进行读操作, 分担节点的负载; 尤其是在多读少写的场景下, 通过多个从节点分担负载, 提高并发量</li>
<li>高可用(集群)基石: 主从复制还是哨兵和集群能够实施的基础</li>
</ul>
<h4 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h4><blockquote>
<p>Redis 2.8 以上使用 PSYNC 命令完成同步</p>
</blockquote>
<ol>
<li>从节点向主节点发送 <code>PSYNC</code> 命令, 如果从节点是首次连接主节点时会触发一次全量复制</li>
<li>接到 <code>PSYNC</code> 命令的主节点会调用 <code>BGSAVE</code> 命令启动一个新线程创建 RDB 文件, 并使用缓冲区记录接下来执行的所有写命令</li>
<li>当 RDB 文件生成完毕后, 主节点向所有从节点发送 RDB 文件, 并在发送期间继续记录被执行的写命令</li>
<li>从节点接收到 RDB 文件后丢弃所有旧数据并载入这个文件</li>
<li>主节点将缓冲区记录的所有写命令发送给从节点执行</li>
<li>如果从节点断开连接后重连, 主节点仅将部分缺失的数据同步给从节点</li>
</ol>
<ul>
<li>全量复制: 从节点接收到数据库文件后, 将其全部加载到内存中</li>
<li>增量复制: 主节点将新的所有收集到的修改命令依次传给从节点, 完成同步</li>
</ul>
<h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>===每台 Redis 服务器都是主节点===, 只用配置从服务器即可</p>
<p><strong>运行时有效</strong>, 只在<code>本次服务器运行时有效</code>, 重启服务器后将会丢失配置信息</p>
<ul>
<li>方式一: <strong>启动</strong> Redis 服务器时使用指定参数 <code>redis-server --port 6380 --replicaof 127.0.0.1 6379</code></li>
<li>方式二: <strong>连接</strong> Redis 服务器使用内置命令 <code>REPLICAOF host port</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置关联主服务器</span></span><br><span class="line">127.0.0.1:6380&gt; REPLICAOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; REPLICAOF 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 查看主服务器配置信息</span></span><br><span class="line">127.0.0.1:6379&gt; INFO replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=153689,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=153557,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:749aaed3f58b97f7c01d3732a6f6c55be205c4b2</span><br><span class="line">master_replid2:451a270c3954af29f43878dd9bfeac579d011972</span><br><span class="line">master_repl_offset:153689</span><br><span class="line">second_repl_offset:133525</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:133525</span><br><span class="line">repl_backlog_histlen:20165</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主节点写入数据</span></span><br><span class="line">127.0.0.1:6379&gt; SET name helloworld</span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 从节点读取数据</span></span><br><span class="line">127.0.0.1:6380&gt; GET name</span><br><span class="line"><span class="string">&quot;helloworld&quot;</span></span><br><span class="line">127.0.0.1:6380&gt; SET age 18 <span class="comment"># 从机写入数据报错</span></span><br><span class="line">(error) READONLY You can\<span class="string">&#x27;t write against a read only replica.</span></span><br><span class="line"><span class="string"># 从节点读取数据</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; GET name</span></span><br><span class="line"><span class="string">&quot;helloworld&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6381&gt; SET age 18 # 从机写入数据报错</span></span><br><span class="line"><span class="string">(error) READONLY You can\&#x27;</span>t write against a <span class="built_in">read</span> only replica.</span><br></pre></td></tr></table></figure>

<p>提升从服务器角色</p>
<ul>
<li><code>REPLICAOF NO ONE</code> 将从服务器更改为主服务器</li>
</ul>
<h4 id="配置文件模式"><a href="#配置文件模式" class="headerlink" title="配置文件模式"></a>配置文件模式</h4><p><strong>永久有效</strong>, 但是缺少可扩展性, 每次修改主从节点配置都需要重启 Redis 服务</p>
<p>redis.conf 基础配置，<a href="#redisclusterconfigure">集群配置</a> <em id="redisbaseconfigure"></em> <!-- markdownlint-disable-line--></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入 redis 默认配置文件</span></span><br><span class="line"><span class="string">include</span> <span class="string">/root/redis-cluster/redis.conf</span></span><br><span class="line"><span class="comment"># 修改绑定 ip, 此处演示全为本机</span></span><br><span class="line"><span class="string">bind</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment"># 修改 redis 端口号, 本机演示需要修改, 多机器时可以不用</span></span><br><span class="line"><span class="string">port</span> <span class="number">6379</span></span><br><span class="line"><span class="comment"># 关闭保护模式, 默认 yes</span></span><br><span class="line"><span class="string">protected-mode</span> <span class="literal">no</span></span><br><span class="line"><span class="comment"># 开启后台运行, 默认 no</span></span><br><span class="line"><span class="string">daemonize</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment"># 修改 redis 进程文件名</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">/var/run/redis_6379.pid</span></span><br><span class="line"></span><br><span class="line"><span class="string">loglevel</span> <span class="string">notice</span></span><br><span class="line"><span class="comment"># 修改日志文件名, 默认为空</span></span><br><span class="line"><span class="comment"># 守护进程模式将指定 /dev/null</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">&quot;/temp/log/6379.log&quot;</span></span><br><span class="line"><span class="comment"># 修改持久化文件名, 默认为 dump.rdb</span></span><br><span class="line"><span class="string">dbfilename</span> <span class="string">dump6379.rdb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在未开启持久化模式下删除复制中使用的 RDB 文件, 默认 no</span></span><br><span class="line"><span class="comment"># rdb-del-sync-files no</span></span><br><span class="line"></span><br><span class="line"><span class="string">dir</span> <span class="string">&quot;&quot;</span> <span class="comment"># 持久化文件存放目录</span></span><br><span class="line"><span class="comment"># 配置主服务器 ip 和 port</span></span><br><span class="line"><span class="comment"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 副本和主服务器同步时的认证密码, 如果主服务器开启验证</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line"><span class="comment"># 副本和主服务器同步时的认证用户</span></span><br><span class="line"><span class="comment"># 如果主服务器使用 requirepass 配置项, 则必须配置此项</span></span><br><span class="line"><span class="comment"># masteruser &lt;username&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从节点只读模式, 默认 yes</span></span><br><span class="line"><span class="comment"># replica-read-only yes</span></span><br><span class="line"><span class="comment"># 不使用向磁盘写 rdb 文件通信的方式直接通过新建进程 socket 同步 rdb 文件, 默认 yes</span></span><br><span class="line"><span class="comment"># repl-diskless-sync yes</span></span><br><span class="line"><span class="comment"># 同步延迟, 默认 5 sec</span></span><br><span class="line"><span class="comment"># repl-diskless-sync-delay 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主服务器发送 PING 指令到副本的平均时间间隔, 默认 10 sec</span></span><br><span class="line"><span class="comment"># repl-ping-replica-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 副本的超时时间, 默认 60 sec</span></span><br><span class="line"><span class="comment"># 确保此项值大于 repl-ping-replica-period 的值, 否则</span></span><br><span class="line"><span class="comment"># 每当主服务器和副本之间的流量较低时，都会检测到超时</span></span><br><span class="line"><span class="comment"># repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果设置为 yes, Redis 将使用更小的 tcp 包和更少的带宽同步数据</span></span><br><span class="line"><span class="comment"># 主从同步延迟取决于Linux 内核的配置默认 40 毫秒一次</span></span><br><span class="line"><span class="comment"># 是否关闭主从节点同步的无延迟, 默认 no</span></span><br><span class="line"><span class="comment"># repl-disable-tcp-nodelay no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 哨兵模式下被选为主服务器的优先级, 值越小优先级越高, 默认 100</span></span><br><span class="line"><span class="comment"># replica-priority 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况哨兵模式下所有副本被包含在报告中</span></span><br><span class="line"><span class="comment"># 设置为 no 表示报告中不包含副本</span></span><br><span class="line"><span class="comment"># 但不影响被选举为 master 的优先级</span></span><br><span class="line"><span class="comment"># replica-announced yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 副本用于监听 master 连接副本的 ip 和 端口</span></span><br><span class="line"><span class="comment"># 可以被 master 自动检测到</span></span><br><span class="line"><span class="comment"># replica-announce-ip 5.5.5.5</span></span><br><span class="line"><span class="comment"># replica-announce-port 1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持存储最多的 key 的数量, 默认 1000000</span></span><br><span class="line"><span class="comment"># tracking-table-max-keys 1000000</span></span><br><span class="line"><span class="comment"># 支持同时最多连接的客户端数量, 默认 10000</span></span><br><span class="line"><span class="comment"># maxclients 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大内容</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 副本忽略最大内存限制</span></span><br><span class="line"><span class="comment"># replica-ignore-maxmemory yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 Redis 6.0 开始作为新 ACL 系统之上的一个兼容配置</span></span><br><span class="line"><span class="comment"># 该选项将只是为默认用户设置密码</span></span><br><span class="line"><span class="comment"># 客户端仍需要使用 AUTH [username] password 进行身份认证</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主服务器关机时副本的最大等待时间, 默认 10 sec</span></span><br><span class="line"><span class="comment"># shutdown-timeout 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 高级配置</span></span><br><span class="line"><span class="comment"># 哈希类型元素的个数小于 512 个, 每个元素值都小于 64B 时</span></span><br><span class="line"><span class="comment"># 使用 压缩列表 作为底层数据结构</span></span><br><span class="line"><span class="comment"># 否则使用 哈希表 作为底层数据结构</span></span><br><span class="line"><span class="comment"># hash-max-listpack-entries 512</span></span><br><span class="line"><span class="comment"># hash-max-listpack-value 64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -2: max size: 8kb</span></span><br><span class="line"><span class="comment"># list-max-listpack-size -2</span></span><br><span class="line"><span class="comment"># 0 表示禁用所有的列表压缩</span></span><br><span class="line"><span class="comment"># list-compress-depth 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合元素都是整数且元素个数小于 512 个使用 整数集合 作为底层数据结构</span></span><br><span class="line"><span class="comment"># 否则使用 哈希表 作为底层数据结构</span></span><br><span class="line"><span class="comment"># set-max-intset-entries 512</span></span><br><span class="line"><span class="comment"># set-max-listpack-entries 128</span></span><br><span class="line"><span class="comment"># set-max-listpack-value 64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有序集合的元素个数小于 128 个并且每个元素的值小于 64B 时</span></span><br><span class="line"><span class="comment"># 使用 压缩列表 作为底层数据结构</span></span><br><span class="line"><span class="comment"># 否则使用 跳表 作为数据结构</span></span><br><span class="line"><span class="comment"># zset-max-listpack-entries 128</span></span><br><span class="line"><span class="comment"># zset-max-listpack-value 64</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HyperLogLog</span></span><br><span class="line"><span class="comment"># hll-sparse-max-bytes 3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Streams</span></span><br><span class="line"><span class="comment"># stream-node-max-bytes 4096</span></span><br><span class="line"><span class="comment"># stream-node-max-entries 100</span></span><br></pre></td></tr></table></figure>

<ul>
<li>requirepass 认证</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种方式: 连接 redis 后使用内置命令 AUTH 命令认证</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; ACL WHOAMI</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; AUTH 1006611</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ACL WHOAMI</span><br><span class="line"><span class="string">&quot;default&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式: 连接 redis 时使用参数认证</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># redis-cli --user default --pass 1006611</span></span><br><span class="line">Warning: Using a password with <span class="string">&#x27;-a&#x27;</span> or <span class="string">&#x27;-u&#x27;</span> option on the <span class="built_in">command</span> line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; ACL WHOAMI</span><br><span class="line"><span class="string">&quot;default&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">1) <span class="string">&quot;hash:zhang&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>哨兵模式是一种特殊的模式, Redis 提供了启动哨兵的工具命令, 哨兵是一个独立的进程运行</p>
<ul>
<li><p>哨兵节点通过发送 <code>PING</code> 命令, 监控所有的主(从)节点的反馈运行状态</p>
</li>
<li><p>当哨兵节点监控到 master 掉线并且其它多个哨兵节点确认 master 掉线后, 开始选取 leader 启动故障转移操作执行切换 master, 然后通过发布订阅模式通知其他的从节点, 修改配置文件并关联新的主节点</p>
</li>
<li><p>当 master 重连之后, 哨兵节点自动将 master 节点修改为 slave 模式</p>
</li>
<li><p>不能水平扩容, 不能动态的增、删节点</p>
</li>
<li><p>高可用特性会受到主节点的内存的限制</p>
</li>
</ul>
<h4 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h4><ul>
<li>监控: 定期检查主节点和从节点的健康状态, 包括发送 <code>PING</code> 命令、检查返回结果和检测通信故障</li>
<li>自动故障转移: 当一个主节点不能正常工作时, Sentinel 会开始一次自动故障迁移操作, 它会将失效主节点的其中一个从节点升级为新的主节点, 并让失败的主节点的其他从节点改为复制新的主节点. 当客户端试图连接失效的主节点时, 集群也会向客户端返回新的主节点的地址, 使得集群可以使用新主节点代替失效节点</li>
<li>高可用性切换: 选举新的主节点后, 哨兵节点会自动将从节点切换为新的主节点, 并通知其它从节点更新复制目标</li>
<li>配置提供者: 当客户端连接到哨兵节点时, 哨兵节点可以根据 Redis 集群的配置信息, 将其重定向到正确的主节点</li>
</ul>
<h4 id="选举算法"><a href="#选举算法" class="headerlink" title="选举算法"></a>选举算法</h4><p>首先, 领头 sentinel 根据从节点的信号反馈将从节点列表中失联的节点剔除, 按照从节点的优先级(replica-priority)进行排序并选择优先级最高的从节点, 如果有多个具有相同最高优先级的从节点, 那么, 领头 sentinel 将多个具有相同最高优先级的从节点按照复制偏移量(复制积压缓冲区中存储的写操作的字节占用累加, 主从节点进行 <code>PSYNC</code> 使用)进行排序并选择其中偏移量最大(偏移量最大保存的数据最新)的从节点, 如果有多个优先级最高, 复制偏移量最大的从节点, 那么 领头 sentinel 将按照从节点的运行 ID 进行排序并选择其中 ID 最小的从节点</p>
<p>replica-priority &gt; replica-offset &gt; run-ID</p>
<h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><ul>
<li>方式一: 使用命令指定参数 <code>redis-server /path/to/sentinel.conf --sentinel</code> 开启哨兵模式</li>
<li>方式二: 使用命令 <code>redis-sentinel /path/to/sentinel.conf</code> 开启哨兵模式</li>
</ul>
<p>sentinel.conf 配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">protected-mode</span> <span class="literal">no</span> <span class="comment"># 保护模式, 默认不开启</span></span><br><span class="line"><span class="string">port</span> <span class="number">26379</span> <span class="comment"># 服务端口号</span></span><br><span class="line"><span class="string">daemonize</span> <span class="literal">no</span> <span class="comment"># 是否后台运行模式</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">/var/run/redis-sentinel-26379.pid</span> <span class="comment"># 进程文件</span></span><br><span class="line"><span class="comment"># sentinel announce-ip &lt;ip&gt; # 监听指定地址和端口的实例</span></span><br><span class="line"><span class="comment"># sentinel announce-port &lt;port&gt;</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">&quot;&quot;</span> <span class="comment"># 日志文件</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/tmp</span> <span class="comment"># 工作目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监测服务器配置, 数字表示确认主服务器宕机的票数</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">mymaster</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379 </span><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过本地地址监听外部网络中的 redis</span></span><br><span class="line"><span class="comment"># sentinel announce-ip &lt;ip&gt;</span></span><br><span class="line"><span class="comment"># sentinel announce-port &lt;port&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证配置</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可触达的超时时间, 默认 30 sec</span></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">down-after-milliseconds</span> <span class="string">mymaster</span> <span class="number">30000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能同 redis.conf 中的配置项</span></span><br><span class="line"><span class="comment"># requirepass &lt;password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置其他 sentinel 认证的用户, 如果没有配置 sentinel-user</span></span><br><span class="line"><span class="comment"># 将使用 default 用户 和 sentinel-pass 进行认证</span></span><br><span class="line"><span class="comment"># sentinel sentinel-user &lt;username&gt;</span></span><br><span class="line"><span class="comment"># sentinel sentinel-pass &lt;password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当主服务器宕机时支持最大同时重配服务器的数量, 默认 1</span></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numreplicas&gt;</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">parallel-syncs</span> <span class="string">mymaster</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当服务器宕机后等待再次重启的时间, 默认 3 min</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">failover-timeout</span> <span class="string">mymaster</span> <span class="number">180000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器唤起脚本文件</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">notification-script</span> <span class="string">mymaster</span> <span class="string">/var/redis/notify.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拒绝脚本配置, 默认 yes</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">deny-scripts-reconfig</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/images/redis-2.png" alt="redis-2"><br><img data-src="/images/redis-3.png" alt="redis-3"></p>
<h4 id="一主三从哨兵配置"><a href="#一主三从哨兵配置" class="headerlink" title="一主三从哨兵配置"></a>一主三从哨兵配置</h4><ul>
<li>3 个哨兵配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sentinel26379.conf</span></span><br><span class="line"><span class="string">port</span> <span class="number">26379</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">/var/run/redis-sentinel-26379.pid</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">&quot;/tmp/log/redis_26379.log&quot;</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/tmp</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">myredis</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379 </span><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel36379.conf</span></span><br><span class="line"><span class="string">port</span> <span class="number">36379</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">/var/run/redis-sentinel-36379.pid</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">&quot;/tmp/log/redis_36379.log&quot;</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/tmp</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">myredis</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379 </span><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel46379.conf</span></span><br><span class="line"><span class="string">port</span> <span class="number">46379</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">/var/run/redis-sentinel-46379.pid</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">&quot;/tmp/log/redis_46379.log&quot;</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/tmp</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">myredis</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379 </span><span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>3 台 redis 服务器配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis6379.conf</span></span><br><span class="line"><span class="string">bind</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="string">port</span> <span class="number">6379</span></span><br><span class="line"><span class="string">daemonize</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">/var/run/redis_6379.pid</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">&quot;/tmp/log/redis_6379.log&quot;</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/tmp</span></span><br><span class="line"><span class="string">dbfilename</span> <span class="string">dump6379.rdb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis6380.conf</span></span><br><span class="line"><span class="string">bind</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="string">port</span> <span class="number">6380</span></span><br><span class="line"><span class="string">daemonize</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">/var/run/redis_6380.pid</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">&quot;/tmp/log/redis_6380.log&quot;</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/tmp</span></span><br><span class="line"><span class="string">dbfilename</span> <span class="string">dump6380.rdb</span></span><br><span class="line"><span class="comment"># 配置主服务器 ip 和 port</span></span><br><span class="line"><span class="string">replicaof</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># redis6381.conf</span></span><br><span class="line"><span class="string">bind</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="string">port</span> <span class="number">6381</span></span><br><span class="line"><span class="string">daemonize</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">/var/run/redis_6381.pid</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">&quot;/tmp/log/redis_6381.log&quot;</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/tmp</span></span><br><span class="line"><span class="string">dbfilename</span> <span class="string">dump6381.rdb</span></span><br><span class="line"><span class="comment"># 配置主服务器 ip 和 port</span></span><br><span class="line"><span class="string">replicaof</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<ul>
<li>根据配置文件启动所有服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># redis-server .config/redis6379.conf # 启动 redis 服务器</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># redis-server .config/redis6380.conf # 启动 redis 服务器</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># redis-server .config/redis6381.conf # 启动 redis 服务器</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># redis-sentinel .config/sentinel26379.conf # 启动哨兵</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># redis-sentinel .config/sentinel36379.conf # 启动哨兵</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># redis-sentinel .config/sentinel46379.conf # 启动哨兵</span></span><br></pre></td></tr></table></figure>

<h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><blockquote>
<p>Redis 3.0 支持</p>
</blockquote>
<p>Redis Cluster 是一种服务器 Sharding(分片) 技术, Sharding 采用 slot 的概念, 一共分成 16384 个 slot, 对于每个进入 Redis 的键值对, 对 key 执行 CRC16(key) mod 16384 操作, 得到的结果就是对应的 slot.</p>
<p>Redis 集群中的每个 node 负责分摊这 16384 个 slot 中的一部分, 当动态增减 node 时, 需要将 16384 个 slot 再分配, slot 中的键值对也要迁移, 这一过程目前还处于半自动状态仍需要人工介入, 如果某个 node 发生故障, 则此 node 负责的 slot 也就失效, 整个集群将不能工作</p>
<p>官方推荐的方案是将 node 配置成主从结构, 即 1:n, 如果主节点失效, Redis Cluster 根据选举算法从 slave 节点中选择一个升级为主节点继续提供服务, 如果失效的主节点恢复正常后则作为新的主节点的从节点</p>
<h4 id="Cluster-Slot"><a href="#Cluster-Slot" class="headerlink" title="Cluster Slot"></a>Cluster Slot</h4><blockquote>
<p>从心跳包的大小、网络带宽、心跳并发、压缩率鞥维度考虑, 16384 个插槽更具有优势且能满足业务需求</p>
</blockquote>
<ul>
<li>正常的心跳数据包携带节点的完整配置, 它能以幂等方式来更新配置. 如果采用 16384 个插槽, 占空间 2KB(16384/8); 如果采用 65536 个插槽,占空间 8KB(65536/8). 8KB 的心跳包看似不大, 比起 16384 个插槽, 头大小增加了 4 倍,ping 消息的消息头太大, 浪费带宽</li>
<li>Redis Cluster 不太可能扩展到超过 1000 个主节点, 太多可能导致网络拥堵</li>
<li>16384 个插槽比较合适, 当集群扩展到 1000 个节点时, 也能确保每个主节点有足够的插槽</li>
</ul>
<h4 id="集群特点"><a href="#集群特点" class="headerlink" title="集群特点"></a>集群特点</h4><ul>
<li>数据自动分片: 集群自动将数据分布到不同的节点上, 实现数据的均衡存储和负载均衡</li>
<li>自动故障转移: 当主节点发生故障时, 集群会自动进行故障检测, 并将从节点升级为新的主节点, 以保证系统的可用性</li>
<li>内部通信协议: 集集群使用 Gossip 协议进行节点之间的通信和状态更新, 确保集群的一致性和高效性</li>
<li>客户端路由: 客户端可以通过集群提供的路由机制, 自动将请求发送到正确的节点上, 实现透明访问</li>
<li>负载均衡: 在 Redis 集群中, 数据和请求会自动分布到不同的节点上, 实现负载均衡, 这样可以避免单个节点过载, 提高系统的稳定性和性能</li>
<li>扩展性好: 通过使用 Redis 集群, 可以便利地扩展系统的容量和性能, 将数据和请求分布到多个节点上, 提高整体系统的吞吐量和承载能力</li>
<li>高可用性: 通过 Redis 集群, 可以将数据分布到多个节点上, 实现数据的冗余备份和容错能力, 当部分节点不可用时, 集群仍然可以继续提供服务, 保证系统的可用性</li>
</ul>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul>
<li><p>redis-cli --cluster help # 查看集群命令帮助信息</p>
</li>
<li><p>redis-cli --cluster create host1:port1 … hostN:portN # 创建指定 IP 和 Port 的服务器作为集群</p>
<ul>
<li>--cluster-replicas &lt;arg&gt; # 指定集群中主节点和从节点数量的比例, 1 表示 1:1</li>
</ul>
</li>
<li><p>redis-cli --cluster add-node new_host:new_port existing_host:existing_port # 添加集群节点</p>
<ul>
<li>--cluster-slave # 添加集群节点从服务器</li>
<li>--cluster-master-id &lt;arg&gt; # 添加到指定主服务器下</li>
</ul>
</li>
<li><p>redis-cli --cluster reshard &lt;host:port&gt; # 重新分配节点的 hash 插槽</p>
<ul>
<li>--cluster-from &lt;arg&gt; # 已有节点 id, 多个 id 之间使用半角逗号分隔</li>
<li>--cluster-to &lt;arg&gt; # 新节点 id</li>
<li>--cluster-slots &lt;arg&gt; # 新节点的 hash 槽数量</li>
</ul>
</li>
<li><p>redis-cli --cluster rebalance &lt;host:port&gt; # 重新分配节点</p>
<ul>
<li>--cluster-weight &lt;node1=w1…nodeN=wN&gt; # 分配节点权重</li>
<li>--cluster-timeout &lt;arg&gt; # 节点超时时间</li>
<li>--cluster-threshold &lt;arg&gt; # 节点阈值</li>
</ul>
</li>
<li><p>redis-cli --cluster import host:port # 导入指定节点</p>
<ul>
<li>--cluster-from &lt;arg&gt; # 从指定 id</li>
<li>--cluster-from-user &lt;arg&gt; # 指定用户名</li>
<li>--cluster-from-pass &lt;arg&gt; # 指定密码</li>
</ul>
</li>
<li><p>redis-cli --cluster info &lt;host:port&gt; # 查看指定节点信息</p>
</li>
<li><p>redis-cli --cluster check &lt;host:port&gt; # 检查指定节点</p>
</li>
<li><p>redis-cli --cluster del-node host:port node_id # 删除集群节点</p>
</li>
<li><p>redis-cli --cluster call host:port command arg arg … arg # 集群节点执行指定命令</p>
<ul>
<li>--cluster-only-masters 所有主节点</li>
<li>--cluster-only-replicas 所有副本节点</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在所有主节点上执行加载的命令</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># redis-cli --cluster --cluster-only-masters call host:port FUNCTION LOAD ...</span></span><br></pre></td></tr></table></figure></li>
<li><p>redis-cli --cluster set-timeout host:port milliseconds # 设置节点的超时时间</p>
</li>
<li><p>redis-cli --cluster backup host:port backup_directory # 备份节点数据到指定目录</p>
</li>
</ul>
<p>使用 <code>redis-cli -c -p port</code> 命令接入集群节点</p>
<h4 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h4><h5 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件  "></a>编辑配置文件 <em id="bjpzwj"></em> <!-- markdownlint-disable-line --></h5><p>创建 Redis 服务器配置文件, 引入默认配置文件并覆盖配置项, 开启集群模式<br>创建 <code>cluster6379.conf</code>, <code>cluster6380.conf</code>, <code>cluster6381.conf</code>, <code>cluster6382.conf</code>, <code>cluster6383.conf</code>, <code>cluster6384.conf</code> 6 个文件<br>修改其中的 bind, port, pidfile, cluster-enabled, cluster-config-file</p>
<p>集群配置, <a href="#redisbaseconfigure">基础配置</a> <em id="redisclusterconfigure"></em> <!-- markdownlint-disable-line --></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # 引入 redis 默认配置文件</span></span><br><span class="line"><span class="comment"># include /root/redis-cluster/redis.conf</span></span><br><span class="line"></span><br><span class="line"><span class="string">cluster-enabled</span> <span class="literal">yes</span> <span class="comment"># 开启集群模式</span></span><br><span class="line"><span class="comment"># 修改集群节点文件名, 默认在存储在当前目录下</span></span><br><span class="line"><span class="string">cluster-config-file</span> <span class="string">nodes-6379.conf</span></span><br><span class="line"><span class="comment"># 设置节点失联时间, 超过该时间集群自动切换主从节点, 默认 15000 milsec</span></span><br><span class="line"><span class="string">cluster-node-timeout</span> <span class="number">15000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群总线监听 TCP 连接的端口, 默认端口为客户端命令端口+10000(eg: 6379+10000)</span></span><br><span class="line"><span class="comment"># 每个集群节点都需要开放两个端口, 一个(6379)用于客户端的 TCP 连接,</span></span><br><span class="line"><span class="comment"># 另一个(16379)用于节点使用集群总线进行故障监测、配置更新、故障转移等</span></span><br><span class="line"><span class="comment"># cluster-port 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (cluster-node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period</span></span><br><span class="line"><span class="comment"># 例如, 集群节点超时为 30 sec, 并且集群副本有效性因子为 10 sec,</span></span><br><span class="line"><span class="comment"># 并且假设默认的 repl-ping-replica-period 为 10 sec,</span></span><br><span class="line"><span class="comment"># 则如果副本无法与主机进行超过 310 sec的通话, 则副本将不会尝试故障转移</span></span><br><span class="line"><span class="comment"># 集群副本有效性因子, 默认 10 sec</span></span><br><span class="line"><span class="comment"># cluster-replica-validity-factor 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许使用较少的自动集群配置, 默认 yes</span></span><br><span class="line"><span class="comment"># cluster-allow-replica-migration yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认当某一插槽不可用时, 整个集群都挂掉</span></span><br><span class="line"><span class="comment"># no 表示仅该插槽不可用, 默认 yes</span></span><br><span class="line"><span class="comment"># cluster-require-full-coverage yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许集群失效的情况下依然可以从节点中读取数据, 保证了高可用性</span></span><br><span class="line"><span class="comment"># 默认 no, 不允许</span></span><br><span class="line"><span class="comment"># cluster-allow-reads-when-down no</span></span><br><span class="line"><span class="comment"># 允许集群服务器宕机时发布/订阅, 默认 yes</span></span><br><span class="line"><span class="comment"># cluster-allow-pubsubshard-when-down yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群模式使用 hostname 进行节点间通信</span></span><br><span class="line"><span class="comment"># 设置为空字符串表示将删除 hostname 并同步给其他节点</span></span><br><span class="line"><span class="comment"># cluster-announce-hostname &quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定集群模式连接节点的方式是使用 ip、hostname或unknown-endpoint 方式</span></span><br><span class="line"><span class="comment"># 如果设置为 hostname 但未设置 cluster-announce-hostname 将返回 ?</span></span><br><span class="line"><span class="comment"># cluster-preferred-endpoint-type ip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cluster-announce-ip ip # 集群模式下节点的 ip</span></span><br><span class="line"><span class="comment"># cluster-announce-port 6379 # 集群模式下节点的端口</span></span><br><span class="line"><span class="comment"># cluster-announce-tls-port 0 # 集群模式下节点的安全端口</span></span><br><span class="line"><span class="comment"># cluster-announce-bus-port 16379</span></span><br></pre></td></tr></table></figure>

<h5 id="启动-Redis-服务器"><a href="#启动-Redis-服务器" class="headerlink" title="启动 Redis 服务器"></a>启动 Redis 服务器</h5><p>启动所有的 redis 服务器, 使用 <code>ps -ef | grep redis</code> 命令查看 redis 服务器进程<br>redis 进程后中括号中的 cluster 表示 redis 工作在集群模式下, 需要进一步配置 redis 的集群关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-server cluster6379.conf</span></span><br><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-server cluster6380.conf</span></span><br><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-server cluster6381.conf</span></span><br><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-server cluster6382.conf</span></span><br><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-server cluster6383.conf</span></span><br><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-server cluster6384.conf</span></span><br><span class="line">[root@centos7 redis-cluster]<span class="comment"># ps -ef | grep redis</span></span><br><span class="line">root      3731     1  0 05:49 ?        00:00:00 redis-server 127.0.0.1:6379 [cluster]</span><br><span class="line">root      3737     1  0 05:49 ?        00:00:00 redis-server 127.0.0.1:6380 [cluster]</span><br><span class="line">root      3743     1  0 05:49 ?        00:00:00 redis-server 127.0.0.1:6381 [cluster]</span><br><span class="line">root      3749     1  0 05:49 ?        00:00:00 redis-server 127.0.0.1:6382 [cluster]</span><br><span class="line">root      3755     1  0 05:49 ?        00:00:00 redis-server 127.0.0.1:6383 [cluster]</span><br><span class="line">root      3761     1  0 05:49 ?        00:00:00 redis-server 127.0.0.1:6384 [cluster]</span><br></pre></td></tr></table></figure>

<h5 id="创建集群节点"><a href="#创建集群节点" class="headerlink" title="创建集群节点"></a>创建集群节点</h5><p>使用 <code>redis-cli --cluster create --cluster-replicas arg hostN:portN</code> 命令创建集群节点, arg 参数表示集群主从节点的数量比例, 1 表示 1:1<br>创建过程中提示输入 <code>yes</code> 表示接受当前配置信息并写入指定文件中, 最后输出 <code>[OK] All 16384 slots covered.</code> 表示集群创建完成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-cli --cluster create --cluster-replicas 1 \</span></span><br><span class="line">&gt; 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 \</span><br><span class="line">&gt; 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384</span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 127.0.0.1:6383 to 127.0.0.1:6379</span><br><span class="line">Adding replica 127.0.0.1:6384 to 127.0.0.1:6380</span><br><span class="line">Adding replica 127.0.0.1:6382 to 127.0.0.1:6381</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti-affinity</span><br><span class="line">[WARNING] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line">M: 2b144f1d7bdb31000a519492be980c6634576462 127.0.0.1:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: a770892444fbbe4b7d9391b458ac04d6bcba26f0 127.0.0.1:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d 127.0.0.1:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 6c9823906baa11aba873a798cce3a3b3c95465f2 127.0.0.1:6382</span><br><span class="line">   replicates 2b144f1d7bdb31000a519492be980c6634576462</span><br><span class="line">S: 4a56b76a379da615b606a499ae475e986eda3efd 127.0.0.1:6383</span><br><span class="line">   replicates a770892444fbbe4b7d9391b458ac04d6bcba26f0</span><br><span class="line">S: eaf9833aa105e36b22f6330585a972239bab9f50 127.0.0.1:6384</span><br><span class="line">   replicates 76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): <span class="built_in">yes</span></span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to <span class="built_in">join</span></span><br><span class="line">.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6379)</span><br><span class="line">M: 2b144f1d7bdb31000a519492be980c6634576462 127.0.0.1:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 6c9823906baa11aba873a798cce3a3b3c95465f2 127.0.0.1:6382</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 2b144f1d7bdb31000a519492be980c6634576462</span><br><span class="line">M: a770892444fbbe4b7d9391b458ac04d6bcba26f0 127.0.0.1:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: eaf9833aa105e36b22f6330585a972239bab9f50 127.0.0.1:6384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d</span><br><span class="line">S: 4a56b76a379da615b606a499ae475e986eda3efd 127.0.0.1:6383</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates a770892444fbbe4b7d9391b458ac04d6bcba26f0</span><br><span class="line">M: 76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d 127.0.0.1:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<h5 id="连接-Redis-服务器"><a href="#连接-Redis-服务器" class="headerlink" title="连接 Redis 服务器"></a>连接 Redis 服务器</h5><p>使用 <code>redis-cli -c -p port</code> 命令接入集群节点</p>
<ul>
<li>-c 以集群模式接入</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-cli -c -p 6379</span></span><br></pre></td></tr></table></figure>

<h5 id="集群命令"><a href="#集群命令" class="headerlink" title="集群命令"></a>集群命令</h5><ul>
<li>CLUSTER HELP 在 Redis 命令行中查看所有集群操作命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6380&gt; CLUSTER HELP</span><br></pre></td></tr></table></figure>

<ul>
<li>CLUSTER INFO</li>
<li>CLUSTER SLOTS 返回集群中 hash 槽的详细信息, redis 7.0 开始使用 CLUSTER SHARDS 命令代替</li>
<li>CLUSTER REPLICAS &lt;node-id&gt; 列出指定节点的所有副本节点的信息, 功能和 CLUSTER NODES 类似</li>
<li>CLUSTER NODES</li>
<li>CLUSTER REPLICATE &lt;node-id&gt; 配置当前节点为指定主节点的从节点</li>
<li>CLUSTER KEYSLOT &lt;somekey&gt; 计算指定 key 所在的 hash 槽</li>
<li>CLUSTER COUNTKEYSINSLOT &lt;slot&gt; 统计集群中 hash 槽中存储的 key 的数量</li>
<li>CLUSTER FAILOVER 手动启动集群故障转移操作, 此命令只能发送给集群从节点</li>
<li>CLUSTER FLUSHSLOTS 清空当前节点的所有插槽</li>
</ul>
<h5 id="查看节点信息"><a href="#查看节点信息" class="headerlink" title="查看节点信息"></a>查看节点信息</h5><ul>
<li>方式一: 命令行中使用 <code>redis-cli --cluster info host:port</code> 命令查看指定节点的信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-cli --cluster info 127.0.0.1:6380</span></span><br><span class="line">127.0.0.1:6380 (a7708924...) -&gt; 3 keys | 5462 slots | 1 slaves.</span><br><span class="line">127.0.0.1:6382 (6c982390...) -&gt; 0 keys | 5461 slots | 0 slaves.</span><br><span class="line">127.0.0.1:6381 (76cb8ea9...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">[OK] 3 keys <span class="keyword">in</span> 3 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二: 在 Redis 命令行中使用 <code>CLUSTER INFO|SLOTS|NODES</code> 查看节点信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前节点信息</span></span><br><span class="line">127.0.0.1:6380&gt; CLUSTER INFO</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:7</span><br><span class="line">cluster_my_epoch:2</span><br><span class="line">cluster_stats_messages_ping_sent:468</span><br><span class="line">cluster_stats_messages_pong_sent:473</span><br><span class="line">cluster_stats_messages_meet_sent:1</span><br><span class="line">cluster_stats_messages_auth-ack_sent:1</span><br><span class="line">cluster_stats_messages_sent:943</span><br><span class="line">cluster_stats_messages_ping_received:473</span><br><span class="line">cluster_stats_messages_pong_received:469</span><br><span class="line">cluster_stats_messages_fail_received:1</span><br><span class="line">cluster_stats_messages_auth-req_received:1</span><br><span class="line">cluster_stats_messages_received:944</span><br><span class="line">total_cluster_links_buffer_limit_exceeded:0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有插槽信息</span></span><br><span class="line">127.0.0.1:6380&gt; CLUSTER SLOTS</span><br><span class="line">1) 1) (<span class="built_in">integer</span>) 0</span><br><span class="line">   2) (<span class="built_in">integer</span>) 5460</span><br><span class="line">   3) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6382</span><br><span class="line">      3) <span class="string">&quot;6c9823906baa11aba873a798cce3a3b3c95465f2&quot;</span></span><br><span class="line">      4) (empty array)</span><br><span class="line">   4) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6379</span><br><span class="line">      3) <span class="string">&quot;2b144f1d7bdb31000a519492be980c6634576462&quot;</span></span><br><span class="line">      4) (empty array)</span><br><span class="line">2) 1) (<span class="built_in">integer</span>) 5461</span><br><span class="line">   2) (<span class="built_in">integer</span>) 10922</span><br><span class="line">   3) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6380</span><br><span class="line">      3) <span class="string">&quot;a770892444fbbe4b7d9391b458ac04d6bcba26f0&quot;</span></span><br><span class="line">      4) (empty array)</span><br><span class="line">   4) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6383</span><br><span class="line">      3) <span class="string">&quot;4a56b76a379da615b606a499ae475e986eda3efd&quot;</span></span><br><span class="line">      4) (empty array)</span><br><span class="line">3) 1) (<span class="built_in">integer</span>) 10923</span><br><span class="line">   2) (<span class="built_in">integer</span>) 16383</span><br><span class="line">   3) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6381</span><br><span class="line">      3) <span class="string">&quot;76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d&quot;</span></span><br><span class="line">      4) (empty array)</span><br><span class="line">   4) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6384</span><br><span class="line">      3) <span class="string">&quot;eaf9833aa105e36b22f6330585a972239bab9f50&quot;</span></span><br><span class="line">      4) (empty array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有节点信息</span></span><br><span class="line">127.0.0.1:6379&gt; CLUSTER NODES</span><br><span class="line">2b144f1d7bdb31000a519492be980c6634576462 127.0.0.1:6379@16379 myself,slave 6c9823906baa11aba873a798cce3a3b3c95465f2 0 1669529164000 7 connected</span><br><span class="line">eaf9833aa105e36b22f6330585a972239bab9f50 127.0.0.1:6384@16384 slave 76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d 0 1669529164744 3 connected</span><br><span class="line">a770892444fbbe4b7d9391b458ac04d6bcba26f0 127.0.0.1:6380@16380 master - 0 1669529165776 2 connected 5461-10922</span><br><span class="line">6c9823906baa11aba873a798cce3a3b3c95465f2 127.0.0.1:6382@16382 master - 0 1669529166000 7 connected 0-5460</span><br><span class="line">76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d 127.0.0.1:6381@16381 master - 0 1669529166792 3 connected 10923-16383</span><br><span class="line">4a56b76a379da615b606a499ae475e986eda3efd 127.0.0.1:6383@16383 slave a770892444fbbe4b7d9391b458ac04d6bcba26f0 0 1669529165000 2 connected</span><br></pre></td></tr></table></figure>

<h5 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h5><p>设置键时, 根据键散列后的值所在的插槽位置自动切换到插槽所在的节点上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; KEYS *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; SET name zhangsan</span><br><span class="line">-&gt; Redirected to slot [5798] located at 127.0.0.1:6380</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; GET name</span><br><span class="line"><span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群不支持设置多个键, 需要使用分组的方式</span></span><br><span class="line">127.0.0.1:6380&gt; MSET age 18 addr beijing</span><br><span class="line">(error) CROSSSLOT Keys <span class="keyword">in</span> request don<span class="string">&#x27;t hash to the same slot</span></span><br><span class="line"><span class="string">127.0.0.1:6380&gt; MSET age&#123;y&#125; 18 addr&#123;y&#125; beijing</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">127.0.0.1:6380&gt; KEYS *</span></span><br><span class="line"><span class="string">1) &quot;age&#123;y&#125;&quot;</span></span><br><span class="line"><span class="string">2) &quot;addr&#123;y&#125;&quot;</span></span><br><span class="line"><span class="string">3) &quot;name&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6379&gt; GET age&#123;y&#125;</span></span><br><span class="line"><span class="string">-&gt; Redirected to slot [5474] located at 127.0.0.1:6380</span></span><br><span class="line"><span class="string">&quot;18&quot;</span></span><br><span class="line"><span class="string">127.0.0.1:6380&gt; GET addr&#123;y&#125;</span></span><br><span class="line"><span class="string">&quot;beijing&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="测试节点"><a href="#测试节点" class="headerlink" title="测试节点"></a>测试节点</h5><p>使用 <code>kill</code> 命令停止端口号为 6381 的 redis 进程时, 集群切换 6381 的状态为失联, 同时将从节点 6384 升级为主节点, 等到 6381 恢复后变为 6384 的从节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLUSTER NODES</span><br><span class="line">2b144f1d7bdb31000a519492be980c6634576462 127.0.0.1:6379@16379 myself,slave 6c9823906baa11aba873a798cce3a3b3c95465f2 0 1669529208000 7 connected</span><br><span class="line">eaf9833aa105e36b22f6330585a972239bab9f50 127.0.0.1:6384@16384 slave 76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d 0 1669529208000 3 connected</span><br><span class="line">a770892444fbbe4b7d9391b458ac04d6bcba26f0 127.0.0.1:6380@16380 master - 0 1669529207000 2 connected 5461-10922</span><br><span class="line">6c9823906baa11aba873a798cce3a3b3c95465f2 127.0.0.1:6382@16382 master - 0 1669529206000 7 connected 0-5460</span><br><span class="line">76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d 127.0.0.1:6381@16381 master - 1669529208334 1669529202178 3 disconnected 10923-16383</span><br><span class="line">4a56b76a379da615b606a499ae475e986eda3efd 127.0.0.1:6383@16383 slave a770892444fbbe4b7d9391b458ac04d6bcba26f0 0 1669529209355 2 connected</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6381 恢复后变为 6384 的从节点</span></span><br><span class="line">127.0.0.1:6379&gt; CLUSTER NODES</span><br><span class="line">2b144f1d7bdb31000a519492be980c6634576462 127.0.0.1:6379@16379 myself,slave 6c9823906baa11aba873a798cce3a3b3c95465f2 0 1669529245000 7 connected</span><br><span class="line">eaf9833aa105e36b22f6330585a972239bab9f50 127.0.0.1:6384@16384 master - 0 1669529243086 8 connected 10923-16383</span><br><span class="line">a770892444fbbe4b7d9391b458ac04d6bcba26f0 127.0.0.1:6380@16380 master - 0 1669529244194 2 connected 5461-10922</span><br><span class="line">6c9823906baa11aba873a798cce3a3b3c95465f2 127.0.0.1:6382@16382 master - 0 1669529245227 7 connected 0-5460</span><br><span class="line">76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d 127.0.0.1:6381@16381 slave eaf9833aa105e36b22f6330585a972239bab9f50 0 1669529243552 8 connected</span><br><span class="line">4a56b76a379da615b606a499ae475e986eda3efd 127.0.0.1:6383@16383 slave a770892444fbbe4b7d9391b458ac04d6bcba26f0 0 1669529244000 2 connected</span><br></pre></td></tr></table></figure>

<h5 id="查看节点配置文件"><a href="#查看节点配置文件" class="headerlink" title="查看节点配置文件"></a>查看节点配置文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 redis-cluster]<span class="comment"># cat nodes-6381.conf</span></span><br><span class="line">76cb8ea9a5d6ba0fa43d31cfa4c33cea8442e07d 127.0.0.1:6381@16381 myself,slave eaf9833aa105e36b22f6330585a972239bab9f50 0 1669529243521 8 connected</span><br><span class="line">2b144f1d7bdb31000a519492be980c6634576462 127.0.0.1:6379@16379 slave 6c9823906baa11aba873a798cce3a3b3c95465f2 0 1669529243524 7 connected</span><br><span class="line">4a56b76a379da615b606a499ae475e986eda3efd 127.0.0.1:6383@16383 slave a770892444fbbe4b7d9391b458ac04d6bcba26f0 0 1669529243524 2 connected</span><br><span class="line">eaf9833aa105e36b22f6330585a972239bab9f50 127.0.0.1:6384@16384 master - 0 1669529243529 8 connected 10923-16383</span><br><span class="line">6c9823906baa11aba873a798cce3a3b3c95465f2 127.0.0.1:6382@16382 master - 0 1669529243529 7 connected 0-5460</span><br><span class="line">a770892444fbbe4b7d9391b458ac04d6bcba26f0 127.0.0.1:6380@16380 master - 0 1669529243524 2 connected 5461-10922</span><br><span class="line">vars currentEpoch 8 lastVoteEpoch 7</span><br></pre></td></tr></table></figure>

<h5 id="添加新节点"><a href="#添加新节点" class="headerlink" title="添加新节点"></a>添加新节点</h5><p>按照 <a href="#bjpzwj">编辑配置文件</a> 创建并修改 <code>cluster6385.conf</code> 文件<br>启动服务器 <code>redis-server cluster6385.conf</code>, 同时查看服务器是否正常启动</p>
<ul>
<li>使用命令 <code>redis-cli --cluster add-node --cluster-slave 127.0.0.1:6385 127.0.0.1:6379</code> 将 6385 添加为 6379 的从节点</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 6379 节点添加新的从节点</span></span><br><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-cli --cluster add-node --cluster-slave \</span></span><br><span class="line">&gt; 127.0.0.1:6385 127.0.0.1:6379</span><br></pre></td></tr></table></figure>

<ul>
<li>查看节点 6379 的信息, 显示 2 个从节点</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看节点信息</span></span><br><span class="line">[root@centos7 redis-cluster]<span class="comment"># redis-cli --cluster info 127.0.0.1:6379</span></span><br><span class="line">127.0.0.1:6379 (8e20e97a...) -&gt; 0 keys | 5461 slots | 2 slaves.</span><br><span class="line">127.0.0.1:6381 (fba8c2ae...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">127.0.0.1:6380 (57c53adc...) -&gt; 0 keys | 5462 slots | 1 slaves.</span><br><span class="line">[OK] 0 keys <span class="keyword">in</span> 3 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br></pre></td></tr></table></figure>

<h4 id="集群优点"><a href="#集群优点" class="headerlink" title="集群优点"></a>集群优点</h4><ul>
<li>实现扩容</li>
<li>分担压力</li>
<li>无中心配置相对简单</li>
</ul>
<h4 id="集群缺点"><a href="#集群缺点" class="headerlink" title="集群缺点"></a>集群缺点</h4><ul>
<li>多建操作不支持, 例如 <code>MSET</code> 命令设置多个键不支持, 需要使用分组方式 <code>MSET name&#123;user&#125; zhangsan age&#123;user&#125; 20 addr&#123;user&#125; beijing</code></li>
<li>多键的 Redis 事务不支持</li>
<li>Lua 脚本不支持</li>
<li>迁移方案需要整体迁移而不是逐步过渡, 复杂度较大</li>
</ul>
<h3 id="缓存穿透、击穿、雪崩"><a href="#缓存穿透、击穿、雪崩" class="headerlink" title="缓存穿透、击穿、雪崩"></a>缓存穿透、击穿、雪崩</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>缓存穿透是指缓存和数据库中都没有的数据, 在高并发下对不存在的 key 的操作. 由于缓存是不命中时被动写的, 并且出于容错考虑, 如果存储层查不到数据则不写入缓存, 这将导致这个不存在的数据每次请求都要到存储层去查询, 失去的缓存的意义. 在流量大时, 可能引起数据库崩溃. 或者有人利用不存在的 key 频繁攻击应用, 可能会引起应用的崩溃</p>
<h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法 "></a>解决办法 <!-- markdownlint-disable-line --></h5><ul>
<li>接口层增加校验, 如用户鉴权校验、id 做基础校验、 id &lt;= 0 的直接拦截</li>
<li>从缓存取不到的数据, 在数据库中也取不到时,可以将 key-value 写为 key-null, 缓存有效时间设置短点, 这样可以防止攻击用户反复用同一个 key 暴力攻击</li>
<li>布隆过滤器, 类似于一个 hash set, 用于快速判断某个元素是否存在于集合中, 其典型的应用场景就是快速判断一个 key 是否存在于某容器, 不存在就直接返回. 布隆过滤器的关键就在于 hash 算法和容器大小</li>
</ul>
<h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>缓存击穿是指缓存中没有但数据库中有的数据(一般是缓存时间到期), 在高并发下对同一 key 的操作. 如果在缓存中没有获取到数据, 又同时在数据库中获取到数据, 引起数据库压力过大.</p>
<h5 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法 "></a>解决办法 <!-- markdownlint-disable-line --></h5><ul>
<li>设置热点数据永不过期</li>
<li>接口限流与熔断、降级, 重要的接口一定要做好限流策略, 防止用户恶意刷接口, 同时要降级准备, 当接口中的某些服务不可用时, 进行熔断, 失败快速返回机制</li>
<li>加互斥锁</li>
</ul>
<h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>缓存雪崩是指缓存中数据大批量到过期时间, 而查询数据量巨大, 引起数据库压力过大甚至崩溃. 和缓存击穿不同的是, 缓存击穿指并发查询同一条数据, 缓存雪崩是不同数据都过期了, 很多数据都查不到从而查询数据库</p>
<h5 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法 "></a>解决办法 <!-- markdownlint-disable-line --></h5><ul>
<li>缓存数据的过期时间设置随机, 防止同一时间大量数据过期现象发生</li>
<li>如果缓存数据库是分布式部署, 将热点数据均匀分布在不同的缓存数据库中</li>
<li>设置热点数据永不过期</li>
</ul>
<h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h3><p>Redis 慢查询和 Redis 定义慢查询的 <code>阈值</code> 有关</p>
<p><code>slowlog-log-slower-than 10000</code> 单位微秒, 当 Redis 命令的执行时间超过该值时, Redis 将其记录在 Redis 的慢查询日志中<br><code>slowlog-max-len 128</code> 记录的条数超过时会只存储最新的 slowlog-max-len 条</p>
<h4 id="使用复杂度过高的命令"><a href="#使用复杂度过高的命令" class="headerlink" title="使用复杂度过高的命令"></a>使用复杂度过高的命令</h4><p>复杂的命令一般指 O(N)以上的命令, 如 sort、sunion、zunionstore 聚合类的命令, 或是 O(N)类的命令, 对于 O(N)以上的命令, Redis 在操作内存数据时耗时过高, 会耗费更多的 CPU 资源, 导致查询变慢<br>Redis 是单线程处理客户端请求的, 如果遇到处理上面的请求时, 就会导致后面的请求发生排队, 对于客户端来说响应时间就会变长</p>
<p>解决问题的原则</p>
<ul>
<li>尽量不使用 O(N)以上的命令, 某些数据需要排序或者聚合操作时, 可以放在客户端处理</li>
<li>执行 O(N)命令时, 保证 N 尽量的小(推荐 N &lt;= 300), 每次获取尽量少的数据, 让 Redis 可以及时处理返回</li>
</ul>
<h4 id="大-Key-问题"><a href="#大-Key-问题" class="headerlink" title="大 Key 问题"></a>大 Key 问题</h4><p>通常是 key 对应的 value 值过大, 此类问题在 SET/DEL 这类命令中也会出现慢查询<br>SET/DEL 的过程</p>
<ul>
<li>写入数据: 为该数据分配内存空间</li>
<li>删除数据: 释放该数据对应的内存空间</li>
</ul>
<p>当数据值较大时, Redis 分配数据内存和释放内存空间都比较耗时</p>
<p>解决问题的原则</p>
<ul>
<li>尽量避免写入大 Key(不要写入无关的数据, 数据实在过大进行拆分, 通过多 key 存储)</li>
<li>如果 Redis 是 4.0 以上版本, 尽量使用 <code>UNLINK</code>代替 <code>DEL</code>命令, 此命令将删除 key 和内存回收放到其他线程执行, 从而降低对 Redis 的影响</li>
<li>如果 Redis 是 6.0 以上版本, 可以开启 lazy-free, 在执行 DEL 命令时、释放内存也会放到其他线程中执行</li>
</ul>
<p><code>lazyfree-lazy-user-del no</code> 修改 <code>DEL</code> 默认命令的行为使其更接近于 <code>UNLINK</code>命令, 默认不开启</p>
<h4 id="集中过期"><a href="#集中过期" class="headerlink" title="集中过期"></a>集中过期</h4><p>Redis 过期策略</p>
<ul>
<li>被动过期: 只有当访问某个 key 时, 才会检测该 key 是否已经过期, 如果已经过期则从实例删除该 key</li>
<li>主动过期: Redis 内部存在一个定时任务, 默认每间隔 100 毫秒就会从全局的过期哈希表中随机取出 20 个 key, 然后删除其中过期的 key, 如果过期 key 的比例超过了 25%, 则继续重复此过程, 直到过期 key 的比例下降到 25% 以下, 或者这次任务的执行耗时超过了 25 毫秒, 才会退出循环</li>
</ul>
<p>主动过期 key 的定时任务是在 Redis 主线程中执行的, 如果在执行主动过期的过程中, 出现了集中过期, 就需要大量删除过期 key, 如果此时应用程序在访问 Redis 时, 必须等待这个过期任务执行结束, 此时 Redis 就有可能产生慢查询</p>
<p>解决问题的原则</p>
<ul>
<li>避免集中过期, 比如将过期时间随机化, 添加一个随机的值, 分散集中过期 key 的过期时间, 降低 Redis 清理过期 key 的压力</li>
<li>如果 Redis 是 4.0 以上版本, 可以开启 lazy-free, 当删除过期 key 时, 把释放内存的操作放到其他线程中执行, 避免阻塞主线程</li>
</ul>
]]></content>
      <categories>
        <category>server</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Tapable总结</title>
    <url>/2021/07/7319b6133009/</url>
    <content><![CDATA[<p><a href="https://webpack.docschina.org/">webpack</a> 是一个用于现代 JavaScript 应用程序的静态模块打包工具, webpack 处理应用程序时会在内部构建一个依赖图, 此依赖图对应映射到项目所需的每个模块，并生成一个或多个 bundle</p>
<p><a href="https://webpack.docschina.org/api/plugins/">plugin</a> 是 webpack 生态的关键部分, 采用基于事件流的机制, 将各个插件串联起来完成相关的功能, <a href="https://webpack.docschina.org/api/compiler-hooks/">compiler</a> 模块是 <a href="https://webpack.docschina.org/">webpack</a> 的主要引擎, 它扩展(extend)自 <a href="https://github.com/webpack/tapable#tapable">Tapable</a> 类, 用来注册和调用插件.</p>
<blockquote>
<p><a href="https://github.com/webpack/tapable#tapable">Tapable</a> 是一个用于事件发布订阅执行的插件架构, 类似于 Node.js 的 EventEmitter 库.</p>
</blockquote>
<p><img data-src="/images/tapable-1.jpg" alt="tapable-1"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="title class_">SyncHook</span>,</span><br><span class="line">  <span class="title class_">SyncBailHook</span>,</span><br><span class="line">  <span class="title class_">SyncWaterfallHook</span>,</span><br><span class="line">  <span class="title class_">SyncLoopHook</span>,</span><br><span class="line">  <span class="title class_">AsyncParallelHook</span>,</span><br><span class="line">  <span class="title class_">AsyncParallelBailHook</span>,</span><br><span class="line">  <span class="title class_">AsyncSeriesHook</span>,</span><br><span class="line">  <span class="title class_">AsyncSeriesBailHook</span>,</span><br><span class="line">  <span class="title class_">AsyncSeriesWaterfallHook</span>,</span><br><span class="line">  <span class="title class_">AsyncSeriesLoopHook</span>,</span><br><span class="line">  <span class="title class_">HookMap</span>,</span><br><span class="line">  <span class="title class_">MultiHook</span>,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="钩子分类"><a href="#钩子分类" class="headerlink" title="钩子分类"></a>钩子分类</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>所有 Hook 构造函数都接收一个由参数名称为字符串组成的列表作为可选参数</p>
<h4 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h4><h5 id="Basic-Hook-基础"><a href="#Basic-Hook-基础" class="headerlink" title="Basic Hook (基础)"></a>Basic Hook (基础)</h5><p>钩子调用所在行中调用的每个钩子函数</p>
<h5 id="WaterFall-瀑布"><a href="#WaterFall-瀑布" class="headerlink" title="WaterFall (瀑布)"></a>WaterFall (瀑布)</h5><p>与基础钩子不同, 它将一个返回值从每个函数传递到下一个函数</p>
<h5 id="Bail-保证"><a href="#Bail-保证" class="headerlink" title="Bail (保证)"></a>Bail (保证)</h5><p>钩子函数执行中, 只要其中有一个钩子返回 非 <code>undefined</code> 时, 则剩余的钩子函数不再执行</p>
<h5 id="Loop-循环"><a href="#Loop-循环" class="headerlink" title="Loop (循环)"></a>Loop (循环)</h5><p>循环执行钩子, 当循环钩子函数返回 非 <code>undefined</code> 时, 则从第一个钩子重新启动, 直到所有的钩子返回 <code>undefined</code> 时结束</p>
<span id="more"></span>

<h4 id="定义类型"><a href="#定义类型" class="headerlink" title="定义类型"></a>定义类型</h4><h5 id="Sync-同步"><a href="#Sync-同步" class="headerlink" title="Sync 同步"></a>Sync 同步</h5><p>同步钩子只能使用 <code>tap</code> 注册钩子, 使用 <code>call</code> | <code>callAsync</code> 调用钩子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myHooks.<span class="title function_">tap</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">myHooks.<span class="title function_">call</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">myHooks.<span class="title function_">callAsync</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="AsyncSeries-异步串行"><a href="#AsyncSeries-异步串行" class="headerlink" title="AsyncSeries 异步串行"></a>AsyncSeries 异步串行</h5><p>异步串行钩子可以使用 <code>tap</code> | <code>tapAsync</code> | <code>tapPromise</code> 注册钩子, 使用 <code>call</code> | <code>callAsync</code> | <code>promise</code> 调用钩子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myHooks.<span class="title function_">tapAsync</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">callback</span>();</span><br><span class="line">&#125;);</span><br><span class="line">myHooks.<span class="title function_">callAsync</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="AsyncParallel-异步并行"><a href="#AsyncParallel-异步并行" class="headerlink" title="AsyncParallel 异步并行"></a>AsyncParallel 异步并行</h5><p>异步并行钩子可以使用 <code>tap</code> | <code>tapAsync</code> | <code>tapPromise</code> 注册钩子, 使用 <code>call</code> | <code>callAsync</code> | <code>promise</code> 调用钩子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myHooks.<span class="title function_">tapPromise</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">myHooks.<span class="title function_">promise</span>(<span class="string">&#x27;x&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="同步钩子"><a href="#同步钩子" class="headerlink" title="同步钩子"></a>同步钩子</h4><h5 id="SyncHook"><a href="#SyncHook" class="headerlink" title="SyncHook"></a>SyncHook</h5><p>钩子函数依次全部执行, 如果有 hook 回调, 则最后执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SyncHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> syncHook = <span class="keyword">new</span> <span class="title class_">SyncHook</span>([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]);</span><br><span class="line"><span class="comment">// 钩子函数依次全部执行，如果有 hook 回调，则最后执行</span></span><br><span class="line">syncHook.<span class="title function_">tap</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name, age);</span><br><span class="line">&#125;);</span><br><span class="line">syncHook.<span class="title function_">tap</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name, age);</span><br><span class="line">&#125;);</span><br><span class="line">syncHook.<span class="title function_">call</span>(<span class="string">&#x27;call&#x27;</span>, <span class="number">18</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&#x27;syncHook.call callback 此处不执行, call 传入参数个数大于构造函数参数列表长度的会被忽略&#x27;</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line">syncHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="number">19</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;syncHook.callAsync callback&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ node SyncHook.js</span></span><br><span class="line"><span class="comment">x done  call 18</span></span><br><span class="line"><span class="comment">y done  call 18</span></span><br><span class="line"><span class="comment">x done  callAsync 19</span></span><br><span class="line"><span class="comment">y done  callAsync 19</span></span><br><span class="line"><span class="comment">syncHook.callAsync callback</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 模拟 SyncHook 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySyncHook</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">args</span> = args;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">tap</span>(<span class="params">name, task</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">call</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 也可在参数不足时抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (args.<span class="property">length</span> &lt; <span class="variable language_">this</span>.<span class="property">args</span>.<span class="property">length</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;参数不足&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入参数严格对应创建实例传入数组中的规定的参数，执行时多余的参数为 undefined</span></span><br><span class="line">    args = args.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">args</span>.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次执行事件处理函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">task</span>) =&gt;</span> <span class="title function_">task</span>(...args));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="SyncBailHook"><a href="#SyncBailHook" class="headerlink" title="SyncBailHook"></a>SyncBailHook</h5><p>钩子函数依次执行, 如果某个钩子函数的返回值为 非 <code>undefined</code>, 则后面的钩子不再执行, 如果有 hook 回调, 则最后执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SyncBailHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> syncBailHook = <span class="keyword">new</span> <span class="title class_">SyncBailHook</span>([<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 钩子函数依次执行, 如果某个钩子函数的返回值为 非 undefined，则后面的钩子不再执行，如果有 hook 回调，则最后执行</span></span><br><span class="line">syncBailHook.<span class="title function_">tap</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;undefined&#x27;</span>; <span class="comment">// 返回值为非 undefined 不再执行其他 hooks</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 此 hook 不会被执行</span></span><br><span class="line">syncBailHook.<span class="title function_">tap</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name);</span><br><span class="line">&#125;);</span><br><span class="line">syncBailHook.<span class="title function_">call</span>(<span class="string">&#x27;call&#x27;</span>);</span><br><span class="line">syncBailHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;syncBailHook.callAsync callback&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ node SyncBailHook.js</span></span><br><span class="line"><span class="comment">x done  call</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">syncBailHook.callAsync callback</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 模拟 SyncBailHook 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySyncBailHook</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">args</span> = args;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">tap</span>(<span class="params">name, task</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">call</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 传入参数严格对应创建实例传入数组中的规定的参数，执行时多余的参数为 undefined</span></span><br><span class="line">    args = args.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">args</span>.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次执行事件处理函数，如果返回值不为空，则停止向下执行</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">      ret;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      ret = <span class="variable language_">this</span>.<span class="property">tasks</span>[i++](...args);</span><br><span class="line">    &#125; <span class="keyword">while</span> (!ret);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="SyncWaterfallHook"><a href="#SyncWaterfallHook" class="headerlink" title="SyncWaterfallHook"></a>SyncWaterfallHook</h5><p>钩子函数依次全部执行，上一个钩子函数的返回值作为下一个钩子函数的参数，如果有 hook 回调，则最后执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SyncWaterfallHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> syncWaterfallHook = <span class="keyword">new</span> <span class="title class_">SyncWaterfallHook</span>([<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 钩子函数依次全部执行，上一个钩子函数的返回值作为下一个钩子函数的参数，如果有 hook 回调，则最后执行</span></span><br><span class="line">syncWaterfallHook.<span class="title function_">tap</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`from x...<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br><span class="line">syncWaterfallHook.<span class="title function_">tap</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name);</span><br><span class="line">&#125;);</span><br><span class="line">syncWaterfallHook.<span class="title function_">call</span>(<span class="string">&#x27;call&#x27;</span>);</span><br><span class="line">syncWaterfallHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;syncWaterfallHook.callAsync callback&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ node SyncWaterfallHook.js</span></span><br><span class="line"><span class="comment">x done  call</span></span><br><span class="line"><span class="comment">y done  from x...call</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">y done  from x...callAsync</span></span><br><span class="line"><span class="comment">syncWaterfallHook.callAsync callback</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 模拟 SyncWaterfallHook 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySyncWaterfallHook</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">args</span> = args;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">tap</span>(<span class="params">name, task</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">call</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 传入参数严格对应创建实例传入数组中的规定的参数，执行时多余的参数为 undefined</span></span><br><span class="line">    args = args.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">args</span>.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次执行事件处理函数，事件处理函数的返回值作为下一个事件处理函数的参数</span></span><br><span class="line">    <span class="keyword">let</span> [first, ...others] = <span class="variable language_">this</span>.<span class="property">tasks</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reduce</span>(<span class="function">(<span class="params">ret, task</span>) =&gt;</span> <span class="title function_">task</span>(ret), <span class="title function_">first</span>(...args));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="SyncLoopHook"><a href="#SyncLoopHook" class="headerlink" title="SyncLoopHook"></a>SyncLoopHook</h5><p>钩子函数依次全部执行, 当循环钩子中回调函数返回 非 <code>undefined</code> 时, 钩子将从第一个重新启动, 直到所有的钩子返回 <code>undefined</code> 时结束 如果有 hook 回调, 则最后执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">SyncLoopHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> syncLoopHook = <span class="keyword">new</span> <span class="title class_">SyncLoopHook</span>([<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 钩子函数依次全部执行，当循环钩子中回调函数返回非 undefined 时，钩子将从第一个重新启动，直到所有的钩子返回 undefined 时结束 如果有 hook 回调，则最后执行</span></span><br><span class="line">syncLoopHook.<span class="title function_">tap</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> (flag &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name, flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// 执行此处时, 执行下一个 y</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x loop &#x27;</span>, name, flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;undefined&#x27;</span>; <span class="comment">// 执行此处时, 重置并从 x 重新执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">syncLoopHook.<span class="title function_">tap</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">15</span>);</span><br><span class="line">  <span class="keyword">if</span> (flag &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name, flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// 执行此处时, 执行下一个 z</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y loop &#x27;</span>, name, flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;undefined&#x27;</span>; <span class="comment">// 执行此处时, 重置并从 x 重新执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">syncLoopHook.<span class="title function_">tap</span>(<span class="string">&#x27;z&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done &#x27;</span>, name);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// 此处返回固定值 undefined 执行下一个 hook</span></span><br><span class="line">&#125;);</span><br><span class="line">syncLoopHook.<span class="title function_">call</span>(<span class="string">&#x27;call&#x27;</span>);</span><br><span class="line">syncLoopHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;syncLoopHook.callAsync callback&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ node SyncLoopHook.js</span></span><br><span class="line"><span class="comment">x done  call 8</span></span><br><span class="line"><span class="comment">y loop  call 5</span></span><br><span class="line"><span class="comment">x done  call 7</span></span><br><span class="line"><span class="comment">y done  call 14</span></span><br><span class="line"><span class="comment">z done  call</span></span><br><span class="line"><span class="comment">x loop  callAsync 1</span></span><br><span class="line"><span class="comment">x loop  callAsync 3</span></span><br><span class="line"><span class="comment">x loop  callAsync 2</span></span><br><span class="line"><span class="comment">x loop  callAsync 1</span></span><br><span class="line"><span class="comment">x loop  callAsync 1</span></span><br><span class="line"><span class="comment">x loop  callAsync 4</span></span><br><span class="line"><span class="comment">x done  callAsync 8</span></span><br><span class="line"><span class="comment">y loop  callAsync 2</span></span><br><span class="line"><span class="comment">x loop  callAsync 2</span></span><br><span class="line"><span class="comment">x done  callAsync 8</span></span><br><span class="line"><span class="comment">y done  callAsync 13</span></span><br><span class="line"><span class="comment">z done  callAsync</span></span><br><span class="line"><span class="comment">syncLoopHook.callAsync callback</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 模拟 SyncLoopHook 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySyncLoopHook</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">args</span> = args;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">tap</span>(<span class="params">name, task</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">call</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 传入参数严格对应创建实例传入数组中的规定的参数，执行时多余的参数为 undefined</span></span><br><span class="line">    args = args.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">args</span>.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次执行事件处理函数，如果返回值为 true，则继续执行当前事件处理函数</span></span><br><span class="line">    <span class="comment">// 直到返回 undefined，则继续向下执行其他事件处理函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">task</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> ret;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        ret = <span class="variable language_">this</span>.<span class="title function_">task</span>(...args);</span><br><span class="line">      &#125; <span class="keyword">while</span> (ret === <span class="literal">true</span> || !(ret === <span class="literal">undefined</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="异步并行"><a href="#异步并行" class="headerlink" title="异步并行"></a>异步并行</h4><h5 id="AsyncParallelHook"><a href="#AsyncParallelHook" class="headerlink" title="AsyncParallelHook"></a>AsyncParallelHook</h5><p>钩子函数异步并行全部执行, 所有钩子回调执行完后, hook 回调执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">AsyncParallelHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncParallelHook = <span class="keyword">new</span> <span class="title class_">AsyncParallelHook</span>([<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 钩子函数异步并行全部执行，所有钩子回调执行完后，hook 回调执行</span></span><br><span class="line">asyncParallelHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done setTimeout 5s &#x27;</span>, name);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncParallelHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done setTimeout 2s &#x27;</span>, name);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncParallelHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;z&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done setTimeout 3s &#x27;</span>, name);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncParallelHook.<span class="title function_">tapPromise</span>(<span class="string">&#x27;w&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;w done &#x27;</span>, name);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;w done setTimeout 8s&#x27;</span>, name);</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">8000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">asyncParallelHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncParallelHook.callAsync&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 等价</span></span><br><span class="line"><span class="comment">// asyncParallelHook.promise(&#x27;callAsync&#x27;).then((res) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;asyncParallelHook.callAsync&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ node AsyncParallelHook.js</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">y done  callAsync</span></span><br><span class="line"><span class="comment">z done  callAsync</span></span><br><span class="line"><span class="comment">w done  callAsync</span></span><br><span class="line"><span class="comment">y done setTimeout 2s  callAsync</span></span><br><span class="line"><span class="comment">z done setTimeout 3s  callAsync</span></span><br><span class="line"><span class="comment">x done setTimeout 5s  callAsync</span></span><br><span class="line"><span class="comment">w done setTimeout 8s callAsync</span></span><br><span class="line"><span class="comment">asyncParallelHook.callAsync</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 模拟 AsyncParallelHook 类：tapAsync/callAsync</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAsyncParallelHook</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">args</span> = args;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">tabAsync</span>(<span class="params">name, task</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">callAsync</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 先取出最后传入的回调函数</span></span><br><span class="line">    <span class="keyword">let</span> finalCallback = args.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入参数严格对应创建实例传入数组中的规定的参数, 执行时多余的参数为 undefined</span></span><br><span class="line">    args = args.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">args</span>.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个 i 变量和 done 函数, 每次执行检测 i 值和队列长度, 决定是否执行 callAsync 的回调函数</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">done</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (++i === <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="title function_">finalCallback</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次执行事件处理函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">task</span>) =&gt;</span> <span class="title function_">task</span>(...args, done));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="AsyncParallelBailHook"><a href="#AsyncParallelBailHook" class="headerlink" title="AsyncParallelBailHook"></a>AsyncParallelBailHook</h5><p>钩子函数全部异步并行执行, 只要有一个钩子返回了 非 <code>undefined</code> 值时, hook 回调会立即执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">AsyncParallelBailHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncParallelBailHook = <span class="keyword">new</span> <span class="title class_">AsyncParallelBailHook</span>([<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 钩子函数全部异步并行执行, 只要有一个钩子返回了非 undefined 值时, hook 回调会立即执行</span></span><br><span class="line">asyncParallelBailHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done setTimeout 1s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncParallelBailHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done setTimeout 2s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>(<span class="string">&#x27;undefined&#x27;</span>); <span class="comment">// 此处执行后立刻执行 hook 回调</span></span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncParallelBailHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;z&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done setTimeout 3s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncParallelBailHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncParallelBailHook.callAsync&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ node AsyncParallelBailHook.js</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">y done  callAsync</span></span><br><span class="line"><span class="comment">z done  callAsync</span></span><br><span class="line"><span class="comment">x done setTimeout 1s</span></span><br><span class="line"><span class="comment">y done setTimeout 2s</span></span><br><span class="line"><span class="comment">asyncParallelBailHook.callAsync</span></span><br><span class="line"><span class="comment">z done setTimeout 3s</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="异步串行"><a href="#异步串行" class="headerlink" title="异步串行"></a>异步串行</h4><h5 id="AsyncSeriesHook"><a href="#AsyncSeriesHook" class="headerlink" title="AsyncSeriesHook"></a>AsyncSeriesHook</h5><p>钩子函数全部异步串行执行, 执行顺序按照注册顺序执行, 上一个钩子执行结束后下一个执行开始, hook 回调最后执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">AsyncSeriesHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncSeriesHook = <span class="keyword">new</span> <span class="title class_">AsyncSeriesHook</span>([<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 钩子函数全部异步串行执行, 执行顺序按照注册顺序执行, 上一个钩子执行结束后下一个执行开始, hook 回调最后执行</span></span><br><span class="line">asyncSeriesHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done setTimeout 2s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSeriesHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done setTimeout 1s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSeriesHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;z&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done&#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done setTimeout 3s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSeriesHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncSeriesHook.callAsync&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ node AsyncSeriesHook.js</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">x done setTimeout 2s</span></span><br><span class="line"><span class="comment">y done  callAsync</span></span><br><span class="line"><span class="comment">y done setTimeout 1s</span></span><br><span class="line"><span class="comment">z done callAsync</span></span><br><span class="line"><span class="comment">z done setTimeout 3s</span></span><br><span class="line"><span class="comment">asyncSeriesHook.callAsync</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="AsyncSeriesBailHook"><a href="#AsyncSeriesBailHook" class="headerlink" title="AsyncSeriesBailHook"></a>AsyncSeriesBailHook</h5><p>钩子函数全部异步串行执行, 只要有一个钩子返回了 非 <code>undefined</code> 值时, hook 回调立即执行, 其他钩子有可能不再执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">AsyncSeriesBailHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncSeriesBailHook = <span class="keyword">new</span> <span class="title class_">AsyncSeriesBailHook</span>([<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 钩子函数全部异步串行执行, 只要有一个钩子返回了 非 undefined 值时, hook 回调立即执行, 其他钩子有可能不再执行</span></span><br><span class="line">asyncSeriesBailHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done setTimeout 2s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSeriesBailHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done setTimeout 1s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>(<span class="string">&#x27;undefined&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSeriesBailHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;z&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done setTimeout 3s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSeriesBailHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncSeriesBailHook.callAsync&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ node AsyncSeriesBailHook.js</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">x done setTimeout 2s</span></span><br><span class="line"><span class="comment">y done  callAsync</span></span><br><span class="line"><span class="comment">y done setTimeout 1s</span></span><br><span class="line"><span class="comment">asyncSeriesBailHook.callAsync</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="AsyncSeriesWaterfallHook"><a href="#AsyncSeriesWaterfallHook" class="headerlink" title="AsyncSeriesWaterfallHook"></a>AsyncSeriesWaterfallHook</h5><p>钩子函数全部异步串行执行, 上一个钩子的返回的结果作为下一个钩子的参数, hook 回调在所有钩子回调返回后执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">AsyncSeriesWaterfallHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncSeriesWaterfallHook = <span class="keyword">new</span> <span class="title class_">AsyncSeriesWaterfallHook</span>([<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 钩子函数全部异步串行执行, 上一个钩子的返回的结果作为下一个钩子的参数，hook 回调在所有钩子回调返回后执行</span></span><br><span class="line">asyncSeriesWaterfallHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done setTimeout 1s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27; from x... &#x27;</span>); <span class="comment">// 不会阻止 y 的执行</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">asyncSeriesWaterfallHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done setTimeout 2s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27; from y... &#x27;</span>); <span class="comment">// 不会阻止 z 的执行</span></span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSeriesWaterfallHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;z&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done &#x27;</span>, name);</span><br><span class="line">  <span class="title function_">callback</span>(<span class="string">&#x27; from z...&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSeriesWaterfallHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncSeriesWaterfallHook.callAsync&#x27;</span>, args);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ node AsyncSeriesWaterfallHook.js</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">x done setTimeout 1s</span></span><br><span class="line"><span class="comment">y done   from x...</span></span><br><span class="line"><span class="comment">y done setTimeout 2s</span></span><br><span class="line"><span class="comment">z done   from y...</span></span><br><span class="line"><span class="comment">asyncSeriesWaterfallHook.callAsync [ &#x27; from z...&#x27; ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h5 id="AsyncSeriesLoopHook"><a href="#AsyncSeriesLoopHook" class="headerlink" title="AsyncSeriesLoopHook"></a>AsyncSeriesLoopHook</h5><p>钩子函数全部异步串行执行, 当循环钩子中回调函数返回 非 <code>undefined</code> 时, 钩子将从第一个重新启动, 直到所有的钩子返回 <code>undefined</code> 时结束, hook 回调最后执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">AsyncSeriesLoopHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asyncSeriesLoopHook = <span class="keyword">new</span> <span class="title class_">AsyncSeriesLoopHook</span>([<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 钩子函数全部异步串行执行,当循环钩子中回调函数返回非 undefined 时, 钩子将从第一个重新启动, 直到所有的钩子返回 undefined 时结束, hook 回调最后执行</span></span><br><span class="line">asyncSeriesLoopHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done setTimeout 1s&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name, flag);</span><br><span class="line">      <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="literal">undefined</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x loop &#x27;</span>, name, flag);</span><br><span class="line">      <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;undefined&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSeriesLoopHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done setTimeout 2s&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name, flag);</span><br><span class="line">      <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="literal">undefined</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y loop &#x27;</span>, name, flag);</span><br><span class="line">      <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&#x27;undefined&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncSeriesLoopHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;z&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z done setTimeout 3s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">asyncSeriesLoopHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncSeriesLoopHook.callAsync&#x27;</span>, args);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ node AsyncSeriesLoopHook.js</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">x done setTimeout 1s</span></span><br><span class="line"><span class="comment">x loop  callAsync 2</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">x done setTimeout 1s</span></span><br><span class="line"><span class="comment">x done  callAsync 6</span></span><br><span class="line"><span class="comment">y done  callAsync</span></span><br><span class="line"><span class="comment">y done setTimeout 2s</span></span><br><span class="line"><span class="comment">y loop  callAsync 0</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">x done setTimeout 1s</span></span><br><span class="line"><span class="comment">x loop  callAsync 3</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">x done setTimeout 1s</span></span><br><span class="line"><span class="comment">x done  callAsync 8</span></span><br><span class="line"><span class="comment">y done  callAsync</span></span><br><span class="line"><span class="comment">y done setTimeout 2s</span></span><br><span class="line"><span class="comment">y done  callAsync 13</span></span><br><span class="line"><span class="comment">z done  callAsync</span></span><br><span class="line"><span class="comment">z done setTimeout 3s</span></span><br><span class="line"><span class="comment">asyncSeriesLoopHook.callAsync []</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><blockquote>
<p>拦截器使用 intercept 方法注册, 在钩子注册, 调用过程中触发</p>
</blockquote>
<ul>
<li>call: (…args) =&gt; void<br>向拦截器添加调用方法将在调用钩子时触发, 可以访问钩子参数</li>
<li>tap: (tap: Tap) =&gt; void<br>向拦截器添加点击方法将在执行钩子时触发, 可以访问 tap 对象, 无法更改对象</li>
<li>loop: (…args) =&gt; void<br>向拦截器添加循环方法将在每个循环钩子触发时触发</li>
<li>register: (tap: Tap)=&gt; Tap | undefined<br>向拦截器添加一个注册器方法将在每次注册钩子时触发, 并可以修改 tap 对象</li>
<li>Context<br>插件和拦截器可以访问的上下文对象, 该对象可以将任意值传递给后续的插件和拦截器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myHooks.<span class="title function_">intercept</span>(&#123;</span><br><span class="line">  <span class="attr">context</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">tap</span>: <span class="function">(<span class="params">context, tapInfo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context, tapInfo);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例:</span></span><br><span class="line"><span class="keyword">const</span> asyncParallelHook = <span class="keyword">new</span> <span class="title class_">AsyncParallelHook</span>([<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">asyncParallelHook.<span class="title function_">intercept</span>(&#123;</span><br><span class="line">  <span class="attr">call</span>: <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncParallelHook intercept call &#x27;</span>, args);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">tap</span>: <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncParallelHook intercept tap &#x27;</span>, args);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">asyncParallelHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x done setTimeout 2s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncParallelHook.<span class="title function_">tapAsync</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done &#x27;</span>, name);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y done setTimeout 5s&#x27;</span>);</span><br><span class="line">    <span class="title function_">callback</span>();</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">asyncParallelHook.<span class="title function_">callAsync</span>(<span class="string">&#x27;callAsync&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncParallelHook.callAsync&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">asyncParallelHook intercept call  [ &#x27;callAsync&#x27; ]</span></span><br><span class="line"><span class="comment">asyncParallelHook intercept tap  [ &#123; type: &#x27;async&#x27;, fn: [Function], name: &#x27;x&#x27; &#125; ]</span></span><br><span class="line"><span class="comment">x done  callAsync</span></span><br><span class="line"><span class="comment">asyncParallelHook intercept tap  [ &#123; type: &#x27;async&#x27;, fn: [Function], name: &#x27;y&#x27; &#125; ]</span></span><br><span class="line"><span class="comment">y done  callAsync</span></span><br><span class="line"><span class="comment">x done setTimeout 2s</span></span><br><span class="line"><span class="comment">y done setTimeout 5s</span></span><br><span class="line"><span class="comment">asyncParallelHook.callAsync</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><h4 id="HookMap"><a href="#HookMap" class="headerlink" title="HookMap"></a>HookMap</h4><p>将 hook 分组, 方便 hook 组批量调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例:</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">HookMap</span>, <span class="title class_">SyncHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hookMap = <span class="keyword">new</span> <span class="title class_">HookMap</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> <span class="keyword">new</span> <span class="title class_">SyncHook</span>([<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="comment">// 将 hook 分组，方便 hook 组批量调用</span></span><br><span class="line">hookMap.<span class="title function_">for</span>(<span class="string">&#x27;key1&#x27;</span>).<span class="title function_">tap</span>(<span class="string">&#x27;x&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;key1-x &#x27;</span>, name);</span><br><span class="line">&#125;);</span><br><span class="line">hookMap.<span class="title function_">for</span>(<span class="string">&#x27;key1&#x27;</span>).<span class="title function_">tap</span>(<span class="string">&#x27;y&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;key1-y &#x27;</span>, name);</span><br><span class="line">&#125;);</span><br><span class="line">hookMap.<span class="title function_">for</span>(<span class="string">&#x27;key2&#x27;</span>).<span class="title function_">tap</span>(<span class="string">&#x27;z&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;key2-z &#x27;</span>, name);</span><br><span class="line">&#125;);</span><br><span class="line">hookMap.<span class="title function_">get</span>(<span class="string">&#x27;key1&#x27;</span>).<span class="title function_">call</span>(<span class="string">&#x27;call&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">key1-x  call</span></span><br><span class="line"><span class="comment">key1-y  call</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="MultiHook"><a href="#MultiHook" class="headerlink" title="MultiHook"></a>MultiHook</h4><p>向 hook 批量注册钩子函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例:</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">MultiHook</span>, <span class="title class_">SyncHook</span>, <span class="title class_">SyncBailHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multiHook = <span class="keyword">new</span> <span class="title class_">MultiHook</span>([</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">SyncHook</span>([<span class="string">&#x27;name&#x27;</span>]),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">SyncBailHook</span>([<span class="string">&#x27;name&#x27;</span>]),</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 向 hook 批量注册钩子函数</span></span><br><span class="line">multiHook.<span class="title function_">tap</span>(<span class="string">&#x27;plugin&#x27;</span>, <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;multiHook plugin &#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>.<span class="title function_">call</span>(multiHook.<span class="property">hooks</span>, <span class="function">(<span class="params">hooks</span>) =&gt;</span> &#123;</span><br><span class="line">  hooks.<span class="title function_">callAsync</span>(<span class="string">&#x27;multiHook.hooks.call &#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hooks.callAsync &#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">multiHook plugin</span></span><br><span class="line"><span class="comment">hooks.callAsync</span></span><br><span class="line"><span class="comment">multiHook plugin</span></span><br><span class="line"><span class="comment">hooks.callAsync</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>webpack</tag>
        <tag>Tapable</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-migration</title>
    <url>/2021/08/9fc9b29dd769/</url>
    <content><![CDATA[<h3 id="全局-API"><a href="#全局-API" class="headerlink" title="全局 API"></a>全局 API</h3><h4 id="全局-API-应用实例"><a href="#全局-API-应用实例" class="headerlink" title="全局 API 应用实例"></a>全局 API 应用实例</h4><ul>
<li>Vue.config -&gt; app.config</li>
<li>Vue.config.productionTip -&gt; <strong>移除</strong></li>
<li>Vue.config.ignoreElements -&gt; app.config.compilerOptions.isCustomElement</li>
<li>Vue.component -&gt; app.component</li>
<li>Vue.directive -&gt; app.directive</li>
<li>Vue.mixin -&gt; app.mixin</li>
<li>Vue.use -&gt; app.use</li>
<li>Vue.prototype -&gt; app.config.globalProperties</li>
<li>Vue.extend -&gt; <strong>移除</strong></li>
</ul>
<h4 id="全局-API-Treeshaking"><a href="#全局-API-Treeshaking" class="headerlink" title="全局 API Treeshaking"></a>全局 API Treeshaking</h4><ul>
<li>Vue.nextTick() -&gt; nextTick()</li>
<li>Vue.observable -&gt; reactive()</li>
<li>Vue.version -&gt; version</li>
<li>Vue.compile(仅完整构建版本)</li>
<li>Vue.set(仅兼容构建版本)</li>
<li>Vue.delete(仅兼容构建版本)</li>
</ul>
<h3 id="模板指令"><a href="#模板指令" class="headerlink" title="模板指令"></a>模板指令</h3><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>参见 vue3.md 的 v-model 指令部分</p>
<h4 id="key-使用改变"><a href="#key-使用改变" class="headerlink" title="key 使用改变"></a>key 使用改变</h4><p>对于 <code>v-if</code>, <code>v-else-if</code>, <code>v-else</code> 的各分支项 <code>key</code> 将不再是必须的, Vue 会自动生成唯一的 <code>key</code></p>
<h4 id="v-if-和-v-for-优先级"><a href="#v-if-和-v-for-优先级" class="headerlink" title="v-if 和 v-for 优先级"></a>v-if 和 v-for 优先级</h4><blockquote>
<p>两者作用于同一个元素上时，v-if 会拥有比 v-for 更高的优先级</p>
</blockquote>
<h4 id="v-bind-合并行为"><a href="#v-bind-合并行为" class="headerlink" title="v-bind 合并行为"></a>v-bind 合并行为</h4><p><code>v-bind</code> 的绑定顺序会影响渲染结果</p>
<ul>
<li>vue 2.x 独立绑定的 attribute 会覆盖 v-bind 中的 attribute</li>
<li>vue 3.x 根据声明顺序决定如何被合并</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123; id: &#x27;blue&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123; id: &#x27;blue&#x27; &#125;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="v-on-native-移除"><a href="#v-on-native-移除" class="headerlink" title="v-on.native 移除"></a>v-on.native 移除</h4><p><code>v-on</code> 的 <code>.native</code> 修饰符被<strong>移除</strong></p>
<ul>
<li>确保所有组件都是用新增的 <code>emits</code> 选项记录其事件</li>
</ul>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h4><p>函数组件将接收两个参数: <code>props</code> 和 <code>context</code>, context 是一个包含 <code>attrs</code>, <code>slots</code>, <code>emit</code> 属性的上下文对象</p>
<ul>
<li><code>&lt;template&gt;</code> 中的 <code>functional</code> 属性被<strong>移除</strong></li>
<li><code>&#123;functional: true&#125;</code> 选项从通过函数创建的组件中<strong>移除</strong></li>
<li><code>listeners</code> 作为 <code>$attrs</code> 的一部分传递</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DynamicHeading</span> = (<span class="params">props, &#123; attrs, slots, emit, expose &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">`h<span class="subst">$&#123;props.level&#125;</span>`</span>, attrs, slots);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">DynamicHeading</span>.<span class="property">props</span> = [<span class="string">&#x27;level&#x27;</span>];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DynamicHeading</span>;</span><br></pre></td></tr></table></figure>

<h4 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h4><ul>
<li>新增 <code>defineAsyncComponent</code> 助手方法, 用于显式地定义异步组件</li>
<li><code>component</code> 选项重命名为 <code>loader</code></li>
<li><code>Loader</code> 函数本身不再接收 <code>resolve</code> 和 <code>reject</code> 参数，且必须返回一个 Promise</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue 2.x</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">asyncPage</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="string">&#x27;./NextPage.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> asyncPage = &#123;</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./NextPage.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">error</span>: <span class="title class_">ErrorComponent</span>,</span><br><span class="line">  <span class="attr">loading</span>: <span class="title class_">LoadingComponent</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Vue 3.x</span></span><br><span class="line"><span class="comment">// 不带选项的异步组件</span></span><br><span class="line"><span class="keyword">const</span> asyncPage = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./NextPage.vue&#x27;</span>));</span><br><span class="line"><span class="comment">// 带选项的异步组件</span></span><br><span class="line"><span class="keyword">const</span> asyncPageWithOptions = <span class="title function_">defineAsyncComponent</span>(&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./NextPage.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">errorComponent</span>: <span class="title class_">ErrorComponent</span>,</span><br><span class="line">  <span class="attr">loadingComponent</span>: <span class="title class_">LoadingComponent</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="emits-选项"><a href="#emits-选项" class="headerlink" title="emits 选项"></a>emits 选项</h4><p><code>新增</code>项用来定义组件可以向其父组件触发的事件</p>
<h3 id="渲染函数"><a href="#渲染函数" class="headerlink" title="渲染函数"></a>渲染函数</h3><h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><ul>
<li><code>h</code> 函数现在为全局引入，不再作为 <code>render</code> 函数的参数隐式提供</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>更改渲染函数参数, 使其在有状态组件和函数组件的表现更加一致</li>
<li>VNode Prop 格式化</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">staticClass</span>: <span class="string">&#x27;button&#x27;</span>,</span><br><span class="line">  <span class="attr">class</span>: &#123; <span class="string">&#x27;is-outlined&#x27;</span>: isOutlined &#125;,</span><br><span class="line">  <span class="attr">staticStyle</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;#34495E&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">style</span>: &#123; <span class="attr">backgroundColor</span>: buttonColor &#125;,</span><br><span class="line">  <span class="attr">attrs</span>: &#123; <span class="attr">id</span>: <span class="string">&#x27;submit&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">domProps</span>: &#123; <span class="attr">innerHTML</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">on</span>: &#123; <span class="attr">click</span>: submitForm &#125;,</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;submit-button&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.x 语法</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">class</span>: [<span class="string">&#x27;button&#x27;</span>, &#123; <span class="string">&#x27;is-outlined&#x27;</span>: isOutlined &#125;],</span><br><span class="line">  <span class="attr">style</span>: [&#123; <span class="attr">color</span>: <span class="string">&#x27;#34495E&#x27;</span> &#125;, &#123; <span class="attr">backgroundColor</span>: buttonColor &#125;],</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;submit&#x27;</span>,</span><br><span class="line">  <span class="attr">innerHTML</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">onClick</span>: submitForm,</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;submit-button&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注册组件</p>
<ul>
<li>Vue3.x <code>setup()</code> 中 VNode 是上下文无关的, 无法使用字符串 ID 隐式查找已注册的组件, 需要借助 <code>resolveComponent</code> 方法</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue 2.x</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;button @click=&quot;count++&quot;&gt;</span></span><br><span class="line"><span class="string">    Clicked &#123;&#123; count &#125;&#125; times.</span></span><br><span class="line"><span class="string">  &lt;/button&gt;`</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;my-component&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Vue 3.x</span></span><br><span class="line"><span class="keyword">import</span> &#123; h, resolveComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">// resolveComponent,resolveDynamicComponent,resolveDirective,withDirectives</span></span><br><span class="line"><span class="comment">// 全局API只能在 render 或 setup 函数中使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">MyComponent</span> = <span class="title function_">resolveComponent</span>(<span class="string">&#x27;my-component&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title class_">MyComponent</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="插槽统一"><a href="#插槽统一" class="headerlink" title="插槽统一"></a>插槽统一</h4><ul>
<li><code>this.$slots</code> 插槽作为函数公开</li>
<li><code>this.$scopedSlots</code> <strong>移除</strong></li>
</ul>
<h4 id="listeners-移除"><a href="#listeners-移除" class="headerlink" title="$listeners 移除"></a>$listeners <strong>移除</strong></h4><blockquote>
<p><code>$listeners</code> 对象在 Vue3 中被移除, 事件监听器现在是 <code>$attrs</code> 的一部分</p>
</blockquote>
<h4 id="attrs-包含-class-和-style"><a href="#attrs-包含-class-和-style" class="headerlink" title="$attrs 包含 class 和 style"></a>$attrs 包含 class 和 style</h4><p><code>$attrs</code> 现在包含了所有传递给组件的 attribute, 包含 <code>class</code> 和 <code>style</code></p>
<ul>
<li>Vue 2.x 当 <code>inheritAttrs: false</code> 时, <code>class</code> 和 <code>style</code> 不是 <code>$attrs</code> 的一部分, 仍然会被应用到组件的根元素中</li>
</ul>
<h3 id="自定义元素"><a href="#自定义元素" class="headerlink" title="自定义元素"></a>自定义元素</h3><h4 id="与自定义元素的互操作性"><a href="#与自定义元素的互操作性" class="headerlink" title="与自定义元素的互操作性"></a>与自定义元素的互操作性</h4><blockquote>
<p>特殊的 <code>is</code> 属性的使用被严格限制在保留的 <code>&lt;component&gt;</code> 标签中<br>使用 <code>vue:</code> 前缀解决 DOM 内模板解析问题</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue 2.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;blog-post-row&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Vue 3.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;vue:blog-post-row&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="移除的-APIs"><a href="#移除的-APIs" class="headerlink" title="移除的 APIs"></a>移除的 APIs</h3><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><ul>
<li>不再支持使用数字(按键)作为 <code>v-on</code> 修饰符</li>
<li>不再支持 <code>config.keyCodes</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue 2.x --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 键码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Vue 3.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-pn:keyup.page-down</span>=<span class="string">&quot;nextPage&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 同时匹配 q 和 Q --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keypress.q</span>=<span class="string">&quot;quit&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="事件-API"><a href="#事件-API" class="headerlink" title="事件 API"></a>事件 API</h4><p><code>$on</code>, <code>$off</code>, <code>$once</code> 实例方法已被 <strong>移除</strong>, 组件实例不再实现事件触发接口</p>
<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p><code>$filter</code> 过滤被<strong>移除</strong></p>
<h4 id="内联模板-Attribute"><a href="#内联模板-Attribute" class="headerlink" title="内联模板 Attribute"></a>内联模板 Attribute</h4><p>对 <strong>内联模板特性</strong> 的支持被<strong>移除</strong></p>
<ul>
<li>Vue 2.x 使用 <code>inline-template</code> 属性将其内容作为模板使用, 而不是作为分发内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">inline-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>它们被编译为组件自己的模板<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>不是父级所包含的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="children"><a href="#children" class="headerlink" title="$children"></a>$children</h4><p><code>$children</code> 实例属性已被 <strong>移除</strong></p>
<h4 id="propsData"><a href="#propsData" class="headerlink" title="propsData"></a>propsData</h4><ul>
<li>Vue 2.x <code>propsData</code> 选项用于在创建 Vue 实例的过程中传入的 prop, 现在已被 <strong>移除</strong></li>
<li>Vue 3.x 使用 <code>createApp</code> 的第二个参数传入 prop</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue 2.x</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Comp</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Comp</span>(&#123;</span><br><span class="line">  <span class="attr">propsData</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 3.x</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="其他变化"><a href="#其他变化" class="headerlink" title="其他变化"></a>其他变化</h3><h4 id="片段"><a href="#片段" class="headerlink" title="片段"></a>片段</h4><ul>
<li>组件可以包含多个根节点, 需要显示定义 attribute 的位置</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>...<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="attribute-强制行为"><a href="#attribute-强制行为" class="headerlink" title="attribute 强制行为"></a>attribute 强制行为</h4><blockquote>
<p>底层的内部 API 更改, 绝大多数开发人员不会受到影响</p>
</blockquote>
<h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><ul>
<li>指令的钩子函数已经被重命名, 以更好地与组件的生命周期保持一致</li>
<li><code>expression</code> 字符串不再作为 <code>binding</code> 对象的一部分被传入</li>
</ul>
<h5 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h5><table>
<thead>
<tr>
<th align="center">Vue 2.x</th>
<th align="center">Vue 3.x</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center">created</td>
</tr>
<tr>
<td align="center">bind</td>
<td align="center">beforeMount</td>
</tr>
<tr>
<td align="center">inserted</td>
<td align="center">mounted</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">beforeUpdate</td>
</tr>
<tr>
<td align="center">update</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">componentUpdated</td>
<td align="center">updated</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">beforeUnmount</td>
</tr>
<tr>
<td align="center">unbind</td>
<td align="center">unmounted</td>
</tr>
</tbody></table>
<h4 id="Data-选项"><a href="#Data-选项" class="headerlink" title="Data 选项"></a>Data 选项</h4><ul>
<li>组件选项 <code>data</code> 的声明不再接收纯 JavaScript <code>Object</code>, 而是接收一个 <code>function</code></li>
<li>当合并来自 <code>mixin</code> 或 <code>extend</code> 的多个 <code>data</code> 返回值时, 合并操作现在是浅层次的而非深层次的(只合并根级属性)</li>
</ul>
<h4 id="mount-API"><a href="#mount-API" class="headerlink" title="mount API"></a>mount API</h4><blockquote>
<p>挂载元素时, 被渲染的应用作为子元素插入, 不再替换要挂载的目标元素</p>
</blockquote>
<ul>
<li>Vue 2.x 当挂载一个具有 <code>template</code> 的应用时, 被渲染的内容会替换要挂载的目标元素</li>
<li>Vue 3.x 被挂载的应用会作为子元素插入, 从而替换目标元素的 <code>innerHTML</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue 2.x 替换目标元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;rendered&quot;</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;hello world!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div id=&quot;rendered&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  app.$mount(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Vue 3.x 作为子元素插入到目标元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;rendered&quot;</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello world!&#x27;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div id=&quot;rendered&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在-prop-的默认函数中不能再访问-this"><a href="#在-prop-的默认函数中不能再访问-this" class="headerlink" title="在 prop 的默认函数中不能再访问 this"></a>在 prop 的默认函数中不能再访问 this</h4><ul>
<li>组件接收到的原始 prop 作为参数传递给默认函数</li>
<li><code>inject</code> API 在默认函数中使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">theme</span>: &#123;</span><br><span class="line">      <span class="title function_">default</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="comment">// `props` 是传递给组件的原始值。</span></span><br><span class="line">        <span class="comment">// 在任何类型/默认强制转换之前</span></span><br><span class="line">        <span class="comment">// 也可以使用 `inject` 来访问注入的 property</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">inject</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;default-theme&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="Transition-class"><a href="#Transition-class" class="headerlink" title="Transition class"></a>Transition class</h4><p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>, 过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code></p>
<ul>
<li>v-enter-from</li>
<li>v-enter-active</li>
<li>v-enter-to</li>
<li>v-leave-from</li>
<li>v-leave-active</li>
<li>v-leave-to</li>
</ul>
<h4 id="Transition-作为根节点"><a href="#Transition-作为根节点" class="headerlink" title="Transition 作为根节点"></a>Transition 作为根节点</h4><p>当使用 <code>&lt;Transition&gt;</code> 作为根节点的组件从外部被切换时将不再触发过渡效果</p>
<h4 id="TransitionGroup-根元素"><a href="#TransitionGroup-根元素" class="headerlink" title="TransitionGroup 根元素"></a>TransitionGroup 根元素</h4><p><code>&lt;TransitionGroup&gt;</code> 不再默认渲染根元素, 但仍然可以用 <code>tag</code> 属性创建根元素</p>
<h4 id="VNode-生命周期事件"><a href="#VNode-生命周期事件" class="headerlink" title="VNode 生命周期事件"></a>VNode 生命周期事件</h4><ul>
<li>Vue 2.x 监听组件生命周期的事件名以 <code>hook:</code> 前缀开头, 并跟随相应的生命周期钩子的名字</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child-component</span> @<span class="attr">hook:updated</span>=<span class="string">&quot;onUpdated&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Vue 3.x 前缀改为 <code>vue:</code> 开头, 这些事件也可用于 HTML 元素, 和在组件上的用法一样<ul>
<li>绝大多数情况下只需要修改前缀. 生命周期钩子 <code>beforeDestroy</code> 和 <code>destroyed</code> 已经分别被重命名为 <code>beforeUnmount</code> 和 <code>unmounted</code>, 所以相应的事件名也需要更新</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child-component</span> @<span class="attr">vue:mounted</span>=<span class="string">&quot;onMounted&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child-component</span> @<span class="attr">vue:before-update</span>=<span class="string">&quot;onBeforeUpdate&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 等同于 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child-component</span> @<span class="attr">vue:beforeUpdate</span>=<span class="string">&quot;onBeforeUpdate&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="侦听数组"><a href="#侦听数组" class="headerlink" title="侦听数组"></a>侦听数组</h4><p>当侦听一个数组时, 只有当数组被替换时才会触发回调, 如果需要在数组被改变时触发回调, 必须指定 <code>deep</code> 选项</p>
]]></content>
      <categories>
        <category>ES</category>
        <category>VueJs</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>VueJs</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>即将废弃或已经废弃的API</title>
    <url>/2021/07/79ace86dbe61/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr">String.prototype.substr()</a></p>
<blockquote>
<p>并非 JavaScript 核心语言的一部分,未来将可能被移除掉, 建议使用 substring() 代替</p>
</blockquote>
</li>
<li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee">arguments.callee</a></p>
<blockquote>
<p>ES5 严格模式下禁止使用此方法，建议使用方法名调用自己</p>
</blockquote>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments">Function.arguments</a> 已废弃</p>
<blockquote>
<p>是一个类数组对象,表示传入函数的实参. 在函数内部直接使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments">arguments</a> 对象访问</p>
</blockquote>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/compile">regexObj.compile</a> 已废弃</p>
<blockquote>
<p>用于编译正则表达式, 和 RegExp 构造函数的作用基本一样</p>
</blockquote>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear">Date.prototype.getYear</a> 已废弃</p>
<blockquote>
<p>使用 getFullYear 代替</p>
</blockquote>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear">Date.prototype.setYear</a> 已废弃</p>
<blockquote>
<p>使用 setFullYear 代替</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>WebAPI</category>
      </categories>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/7df03390b905/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2022/04/1e58889c42cf/</url>
    <content><![CDATA[<h2 id="敲黑板"><a href="#敲黑板" class="headerlink" title="敲黑板"></a>敲黑板</h2><h3 id="启动-nginx-失败"><a href="#启动-nginx-失败" class="headerlink" title="启动 nginx 失败"></a>启动 nginx 失败</h3><p>命令行提示错误 98: address already in use</p>
<p>查找系统进程中已存在的 nginx 进程号, 使用 <code>kill -9 $PID</code> 关闭进程后重启 nginx 服务</p>
<h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><ul>
<li><p>$nginx_version nginx 版本</p>
</li>
<li><p>$connection_requests TCP 链接当前的请求数量</p>
</li>
<li><p>$proxy_protocol_addr 获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</p>
<span id="more"></span></li>
</ul>
<h3 id="request"><a href="#request" class="headerlink" title="$request"></a>$request</h3><ul>
<li><p>$content_length 请求头字段 <code>Content-Length</code></p>
</li>
<li><p>$content_type 请求头字段 <code>Content-Type</code></p>
</li>
<li><p>$document_uri 同 $uri</p>
</li>
<li><p>$document_root 当前请求的文档根目录或别名</p>
</li>
<li><p>$realpath_root 当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</p>
</li>
<li><p>$remote_addr 客户端的 IP 地址</p>
</li>
<li><p>$binary_remote_addr 客户端的 IP 地址(二进制)</p>
</li>
<li><p>$remote_port 客户端的端口号</p>
</li>
<li><p>$remote_user 用于 HTTP 基础认证服务的用户名</p>
</li>
<li><p>$host 请求信息中的 <code>Host</code>, 如果请求中没有 Host 行，则等于设置的服务器名;</p>
</li>
<li><p>$hostname 主机名</p>
</li>
<li><p>$http_user_agent 客户端 agent 信息</p>
</li>
<li><p>$http_cookie 客户端所有的 cookie 信息</p>
</li>
<li><p>$cookie_NAME 获取指定 cookie, 后面的 <code>NAME</code> 为 cookie 的 key</p>
</li>
<li><p>$http_via 最后一个访问服务器的 Ip 地址</p>
</li>
<li><p>$http_x_forwarded_for 相当于网络访问路径</p>
</li>
<li><p>$http_referer 引用地址</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="string">log_format</span> <span class="string">main</span> <span class="string">&#x27;$remote_addr - $remote_user [$time_local] \</span></span><br><span class="line"><span class="string">&quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; \</span></span><br><span class="line"><span class="string">&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$gzip_ratio&quot;&#x27;</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="string">access_log</span> <span class="string">/var/log/nginx/access.log</span> <span class="string">main;</span></span><br></pre></td></tr></table></figure>

<h4 id="request-uri"><a href="#request-uri" class="headerlink" title="$request_uri"></a>$request_uri</h4><ul>
<li><p>$request 代表客户端的请求地址</p>
</li>
<li><p>$request_uri 包含请求参数的原始 URI, 不包含主机名</p>
</li>
<li><p>$request_method HTTP 请求方法，一般为 <code>GET</code> 或 <code>POST</code></p>
</li>
<li><p>$request_body 客户端的请求主体</p>
</li>
<li><p>$request_body_file 将客户端请求主体保存在临时文件中. 文件处理结束后, 此文件需删除</p>
</li>
<li><p>$request_filename 当前连接请求的文件路径, 由 root 或 alias 指令与 URI 请求生成</p>
</li>
<li><p>$request_length 请求的长度 (包括请求的地址, http 请求头和请求主体)</p>
</li>
<li><p>$request_time 处理客户端请求使用的时间; 从读取客户端的第一个字节开始计时</p>
</li>
<li><p>$uri 当前请求的 URI</p>
</li>
<li><p>$arg_name 请求中的的参数名, 即”?”后面的 arg_name=arg_value 形式的 arg_name</p>
</li>
<li><p>$args 请求中的参数值</p>
</li>
<li><p>$is_args 如果请求中有参数, 值为 “?”, 否则为空字符串</p>
</li>
<li><p>$query_string 同$args</p>
</li>
<li><p>$request_completion 如果请求结束, 设置为 OK, 否则为空</p>
</li>
</ul>
<h3 id="server"><a href="#server" class="headerlink" title="$server"></a>$server</h3><ul>
<li><p>$time_local 服务器时间(LOG Format 格式)</p>
</li>
<li><p>$sent_http_NAME 可以设置任意 http 响应头字段, 变量名中的后半部分 NAME 能够替换成任意响应头字段, 连字符用下划线代替</p>
<ul>
<li>$sent_http_content_type ‘text/html’</li>
<li>$sent_http_content_length 1024</li>
</ul>
</li>
</ul>
<h4 id="server-uri"><a href="#server-uri" class="headerlink" title="$server_uri"></a>$server_uri</h4><ul>
<li><p>$scheme HTTP 方法(如 http, https)</p>
</li>
<li><p>$server_protocol 请求使用的协议, 通常是 HTTP/1.0 或 HTTP/1.1</p>
</li>
<li><p>$server_addr 服务器地址</p>
</li>
<li><p>$server_name 服务器名称</p>
</li>
<li><p>$server_port 服务器端口号</p>
</li>
<li><p>$status HTTP 响应代码</p>
</li>
<li><p>$body_bytes_sent 响应时发送的背景 body 字节数</p>
</li>
<li><p>$limit_rate 限制连接速率</p>
</li>
</ul>
<h3 id="invalid-referer"><a href="#invalid-referer" class="headerlink" title="$invalid_referer"></a>$invalid_referer</h3><p>如果 <code>valid_referers</code> 验证 <code>Referer</code> 请求字段有效则为空字符串, 否则为 1</p>
<h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><h3 id="valid-referers-验证请求头"><a href="#valid-referers-验证请求头" class="headerlink" title="valid_referers 验证请求头"></a>valid_referers 验证请求头</h3><ul>
<li>none 允许 Referer 头域中不存在的情况</li>
<li>blocked 允许 Referer 头域的值被防火墙或代理服务器删除或伪装的情况下, 并且值不以 http:// 或 https:// 开头的情况</li>
<li>server_names 设置一个或多个 URL</li>
<li>arbitrary string 任意字符串</li>
<li>regular expression 第一个字符为 ~ 开头的正则表达式</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> server_names</span><br><span class="line">               <span class="regexp">*.example.com</span> <span class="regexp">example.*</span> www.example.org/galleries/</span><br><span class="line">               ~\.google\.;</span><br><span class="line"><span class="comment"># 防盗链</span></span><br><span class="line"><span class="section">location</span> <span class="regexp">~* \.(gif|jpg|png|jpeg)$</span> &#123;</span><br><span class="line">  <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">  <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.test.com</span>;</span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">    <span class="comment">#rewrite ^/ http://static.test.cn/images/403.jpg;</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="add-header-添加响应头字段"><a href="#add-header-添加响应头字段" class="headerlink" title="add_header 添加响应头字段"></a>add_header 添加响应头字段</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">add_header</span> name value [always]; <span class="comment"># 基础语法</span></span><br></pre></td></tr></table></figure>

<h4 id="作用场景"><a href="#作用场景" class="headerlink" title="作用场景"></a>作用场景</h4><ul>
<li>http</li>
<li>server</li>
<li>location</li>
<li>if in location</li>
</ul>
<h5 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="comment"># 允许跨域主机名</span></span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&quot;Access-Control-Allow-Origin&quot;</span> *;</span><br><span class="line">  <span class="comment"># 允许携带 cookie 信息</span></span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&quot;Access-Control-Allow-Credentials&quot;</span> <span class="string">&quot;true&quot;</span>;</span><br><span class="line">  <span class="comment"># 允许跨域请求的方法</span></span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&quot;Access-Control-Allow-Methods&quot;</span> <span class="string">&quot;OPTIONS,GET,POST,PUT,DELETE,HEAD&quot;</span>;</span><br><span class="line">  <span class="comment"># 允许跨域请求时携带的头部信息</span></span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&quot;Access-Control-Allow-Headers&quot;</span> *;</span><br><span class="line">  <span class="comment"># 允许发送按段获取资源的请求</span></span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&quot;Access-Control-Expose-Headers&quot;</span> <span class="string">&quot;Content-Length,Content-Range&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment"># 对于Options方式的请求返回204，表示接受跨域请求</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="如果当前层添加了-add-header-则不能从上层继承"><a href="#如果当前层添加了-add-header-则不能从上层继承" class="headerlink" title="如果当前层添加了 add_header, 则不能从上层继承"></a>如果当前层添加了 <code>add_header</code>, 则不能从上层继承</h4><h4 id="仅当状态码为-ngx-http-headers-module-模块列出时-add-header-添加的标头字段有效"><a href="#仅当状态码为-ngx-http-headers-module-模块列出时-add-header-添加的标头字段有效" class="headerlink" title="仅当状态码为 ngx_http_headers_module 模块列出时, add_header 添加的标头字段有效"></a>仅当状态码为 <code>ngx_http_headers_module</code> 模块列出时, <code>add_header</code> 添加的标头字段有效</h4><p>200、201 (1.3.10)、204、206、301、302、303、304、307 (1.1.16、1.0.13) 或 308</p>
<h4 id="如果设置一个非有效状态码-则会忽略-add-header-添加的标头字段"><a href="#如果设置一个非有效状态码-则会忽略-add-header-添加的标头字段" class="headerlink" title="如果设置一个非有效状态码, 则会忽略 add_header 添加的标头字段"></a>如果设置一个非有效状态码, 则会忽略 <code>add_header</code> 添加的标头字段</h4><h4 id="always-忽略状态码强制添加标头字段"><a href="#always-忽略状态码强制添加标头字段" class="headerlink" title="always 忽略状态码强制添加标头字段"></a>always 忽略状态码强制添加标头字段</h4><h3 id="rewrite-重写请求中的-URI"><a href="#rewrite-重写请求中的-URI" class="headerlink" title="rewrite 重写请求中的 URI"></a>rewrite 重写请求中的 URI</h3><p>至少有两个参数, 第一个参数匹配 URI 的正则表达式, 第二个参数是替换匹配的 URI, 第三个参数是标志位, 可以停止处理进一步的 rewrite 指令或发送重定向状态码(301|302)</p>
<ul>
<li>last 停止执行当前 server 上下文中的指令, 会继续搜索新 URI 匹配的位置</li>
<li>break 停止执行当前 server 上下文中的指令, 取消搜索新 URI 匹配的位置, 不执行新位置中的 rewrite 指令</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(/download/.*)/media/(\w+)\.?.*$</span> <span class="variable">$1</span>/mp3/<span class="variable">$2</span>.mp3 <span class="literal">last</span>;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/users/(.*)$</span> /show?user=<span class="variable">$1</span> <span class="literal">break</span>;</span><br></pre></td></tr></table></figure>

<h3 id="proxy-set-header"><a href="#proxy-set-header" class="headerlink" title="proxy_set_header"></a>proxy_set_header</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> nginx_boot &#123;</span><br><span class="line">  <span class="comment"># ip_hash;</span></span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.1.2:8080</span> weight=<span class="number">100</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.1.2:8081</span> weight=<span class="number">200</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.1.2:8082</span> weight=<span class="number">300</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> html;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Reap-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://nginx_boot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="try-files-尝试检查文件"><a href="#try-files-尝试检查文件" class="headerlink" title="try_files 尝试检查文件"></a>try_files 尝试检查文件</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果源文件不存在则内部重定向最后一个参数指定的 URI, 返回 /www/data/images/default.gif</span></span><br><span class="line"><span class="section">location</span> /images/ &#123;</span><br><span class="line">  <span class="attribute">root</span> /www/data;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> /images/default.gif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件或者目录不存在则返回404</span></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">$uri</span>.html =<span class="number">404</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件或者目录不存在, 则请求重定向到指定位置然后传递给代理服务器</span></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">@backend</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">location</span> <span class="variable">@backend</span> &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://backend.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="location-路径匹配"><a href="#location-路径匹配" class="headerlink" title="location 路径匹配"></a><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#location">location 路径匹配</a></h3><h4 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h4><table>
<thead>
<tr>
<th align="center">符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">~</td>
<td>正则匹配，区分大小写</td>
</tr>
<tr>
<td align="center">~*</td>
<td>正则匹配，不区分大小写</td>
</tr>
<tr>
<td align="center">^~</td>
<td>普通字符匹配，如果该选项匹配，则，只匹配改选项，不再向下匹配其他选项</td>
</tr>
<tr>
<td align="center">=</td>
<td>普通字符匹配，精确匹配</td>
</tr>
<tr>
<td align="center">@</td>
<td>定义一个命名的 location，用于内部定向，例如 error_page，try_files</td>
</tr>
</tbody></table>
<h4 id="匹配优先级-跟-location-的书写顺序关系不大"><a href="#匹配优先级-跟-location-的书写顺序关系不大" class="headerlink" title="匹配优先级( 跟 location 的书写顺序关系不大 )"></a>匹配优先级( 跟 location 的书写顺序关系不大 )</h4><ol>
<li><p>精确匹配：</p>
<p>= 前缀的指令严格匹配这个查询。</p>
<p>如果找到，停止搜索。</p>
</li>
<li><p>普通字符匹配：</p>
<p>所有剩下的常规字符串，最长的匹配。</p>
<p>如果这个匹配使用^〜前缀，搜索停止。</p>
</li>
<li><p>正则匹配：</p>
<p>正则表达式，在配置文件中定义的顺序，匹配到一个结果，搜索停止；</p>
</li>
<li><p>默认匹配：</p>
<p>如果第 3 条规则产生匹配的话，结果被使用。</p>
<p>否则，如同从第 2 条规则被使用。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>server</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>linux工具</title>
    <url>/2022/05/bc4d38208f0f/</url>
    <content><![CDATA[<h3 id="命令行输出内容变身"><a href="#命令行输出内容变身" class="headerlink" title="命令行输出内容变身"></a>命令行输出内容变身</h3><p>格式: \033[显示方式;前景色;背景色 m …… \033[0m</p>
<ul>
<li>\033[ 固定格式</li>
<li>\033[0m 非必需, 如果省略表示后面输出内容的样式都会应用当前设置的样式</li>
</ul>
<h4 id="属性集"><a href="#属性集" class="headerlink" title="属性集"></a>属性集</h4><table>
<thead>
<tr>
<th>前景色</th>
<th>背景色</th>
<th>色值</th>
</tr>
</thead>
<tbody><tr>
<td>30</td>
<td>40</td>
<td>黑色</td>
</tr>
<tr>
<td>31</td>
<td>41</td>
<td>红色</td>
</tr>
<tr>
<td>32</td>
<td>42</td>
<td>绿色</td>
</tr>
<tr>
<td>33</td>
<td>43</td>
<td>黄色</td>
</tr>
<tr>
<td>34</td>
<td>44</td>
<td>蓝色</td>
</tr>
<tr>
<td>35</td>
<td>45</td>
<td>紫红色</td>
</tr>
<tr>
<td>36</td>
<td>46</td>
<td>青蓝色</td>
</tr>
<tr>
<td>37</td>
<td>47</td>
<td>白色</td>
</tr>
</tbody></table>
<h4 id="显示方式"><a href="#显示方式" class="headerlink" title="显示方式"></a>显示方式</h4><table>
<thead>
<tr>
<th align="center">显示方式</th>
<th>表现行为</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td>默认</td>
</tr>
<tr>
<td align="center">1</td>
<td>高亮</td>
</tr>
<tr>
<td align="center">4</td>
<td>下划线</td>
</tr>
<tr>
<td align="center">5</td>
<td>闪烁</td>
</tr>
<tr>
<td align="center">7</td>
<td>反色</td>
</tr>
<tr>
<td align="center">8</td>
<td>不可见</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出字体为绿色的 你好hello world</span></span><br><span class="line">[root@localhost ~]<span class="comment"># printf &#x27;\033[1;32m你好hello world\033[0m\n&#x27;</span></span><br><span class="line"><span class="comment"># 输出字体为绿色并带有下划线的 你好hello world</span></span><br><span class="line">[root@localhost ~]<span class="comment"># printf &#x27;\033[4;32m你好hello world\033[0m\n&#x27;</span></span><br><span class="line"><span class="comment"># 输出背景色为绿色的 你好hello world</span></span><br><span class="line">[root@localhost ~]<span class="comment"># printf &#x27;\033[7;32m你好hello world\033[0m\n&#x27;</span></span><br><span class="line"><span class="comment"># 输出内容不可见</span></span><br><span class="line">[root@localhost ~]<span class="comment"># printf &#x27;\033[8;32m你好hello world\033[0m\n&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="ssh-操作"><a href="#ssh-操作" class="headerlink" title="ssh 操作"></a>ssh 操作</h3><ul>
<li>ssh-keyscan 收集公钥中的主机地址</li>
<li>ssh-copy-id 将本地的公钥文件复制到远程主机对应账户下的 authorized_keys 文件中</li>
<li>ssh-keygen 生成非对称密钥对</li>
</ul>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[vagrant@centos8s ~]<span class="comment"># ssh-keygen -t &lt;密钥类型&gt; -f &lt;input_keyfile&gt; -C &lt;comment&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ssh-agent ssh 认证代理, 通常和 ssh-add 配合使用管理本地密钥<ul>
<li>-s 在标准输出上初始化 bourne shell</li>
<li>-k 关闭当前的 agent(代理), 通过环境变量 SSH_AGNENT_PID</li>
</ul>
</li>
<li>ssh-add 管理本地密钥<ul>
<li>-l 列出所有的密钥摘要信息</li>
<li>-L 列出所有的公钥信息</li>
<li>-d &lt;input_keyfile&gt; 移除指定的密钥</li>
<li>-D 移除所有的密钥</li>
<li>-x 锁定 agent(代理)</li>
<li>-X 解锁 agent(代理)</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 ssh -T 测试连通性</span></span><br><span class="line">[vagrant@centos8s ~]$ ssh -T git@github.com</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br><span class="line"><span class="comment"># 或者使用 -i 每次都指定密钥</span></span><br><span class="line">[vagrant@centos8s ~]$ ssh -i ~/.ssh/github_25519 -T git@github.com</span><br><span class="line">Hi ......! You\<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 如果出现提示</span></span><br><span class="line"><span class="string"># Could not open a connection to your authentication agent.</span></span><br><span class="line"><span class="string"># 初始化一个 bash</span></span><br><span class="line"><span class="string">[vagrant@centos8s ~]$ eval `ssh-agent -s`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 使用 ssh-add 将密钥添加到 ssh 认证代理</span></span><br><span class="line"><span class="string">[vagrant@centos8s ~]$ ssh-add ~/.ssh/github_25519</span></span><br><span class="line"><span class="string">Identity added: /home/vagrant/.ssh/github_25519 (......@163.com)</span></span><br><span class="line"><span class="string">[vagrant@centos8s ~]$ ssh-add -l</span></span><br><span class="line"><span class="string">256 SHA256:CfRvLFZMgJ/p7r5ywt8BSQ2T1qEYtjCGDvVDVeYOtmY ......@163.com (ED25519)</span></span><br><span class="line"><span class="string"># 不需要使用 -i 指定密钥</span></span><br><span class="line"><span class="string">[vagrant@centos8s ~]$ ssh -T git@github.com</span></span><br><span class="line"><span class="string">Hi ......! You\&#x27;</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除指定的密钥</span></span><br><span class="line">[vagrant@centos8s ~]$ ssh-add -d ~/.ssh/github_25519</span><br><span class="line">Identity removed: /home/vagrant/.ssh/github_25519 (......@163.com)</span><br><span class="line"><span class="comment"># 移除所有的密钥</span></span><br><span class="line">[vagrant@centos8s ~]$ ssh-add -D</span><br><span class="line">All identities removed.</span><br><span class="line"><span class="comment"># 列出所有的密钥摘要信息</span></span><br><span class="line">[vagrant@centos8s ~]$ ssh-add -l</span><br><span class="line">The agent has no identities.</span><br></pre></td></tr></table></figure>

<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>awk 是一种可以对文本和输入数据进行处理的编程语言, 默认情况下, awk 对文件的每一行都视为一条记录, 然后每一条记录被进一步分解成一系列的字段</p>
<ul>
<li>-f scriptFile 从脚本文件中读取 awk 命令</li>
<li>-v var=value 赋值一个用户定义变量, 将外部变量传递给 awk</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># awk -v name=&quot;hello world&quot; -F : &#x27;&#123;print $1&#125;&#x27; /etc/passwd</span></span><br></pre></td></tr></table></figure>

<h4 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h4><ul>
<li>OFMT 输出数字格式(默认%.6g)</li>
<li>CONVFMT 数字转换格式(默认值为%.6g)ENVIRON 环境变量关联数组</li>
<li>ENVIRON 数组, 存储当前系统的环境变量, ENVIRON[‘PATH’]</li>
<li>ERRNO 最后一个系统错误的描述</li>
<li>FILENAME 当前正在处理的文件名</li>
<li>FIELDWIDTHS 以空格分隔的字段宽度</li>
<li>PROCINFO 数组, 存储当前系统运行时信息, PROCINFO[‘uid’]</li>
<li>IGNORECASE 如果为真, 则进行忽略大小写的匹配</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># git branch -r | awk &#x27;BEGIN &#123;print &quot;hello awk, I am coming\n&quot;&#125;END&#123;print &quot;hello awk, good bye\n&quot;&#125;&#123;printf &quot;NF--%s NR--%s FNR--%s $0--%s\n&quot;,NF,NR,FNR,$0;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="字段分隔符"><a href="#字段分隔符" class="headerlink" title="字段分隔符"></a>字段分隔符</h5><ul>
<li>-F 字段分隔符</li>
<li>FS 字段的分隔符, 默认为空格, 可以使用 -F 参数设置</li>
<li>OFS 输出的字段分隔符, 默认为空格</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># awk &#x27;&#123;FS=&quot;:&quot;;print $1&#125;&#x27; /etc/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment"># awk -F : &#x27;&#123;print $1&#125;&#x27; /etc/passwd</span></span><br></pre></td></tr></table></figure>

<h5 id="记录分隔符"><a href="#记录分隔符" class="headerlink" title="记录分隔符"></a>记录分隔符</h5><ul>
<li>RS 输入记录的分隔符, 默认为换行符</li>
<li>ORS 输出的记录分隔符, 默认为换行符</li>
</ul>
<h5 id="记录统计"><a href="#记录统计" class="headerlink" title="记录统计"></a>记录统计</h5><ul>
<li>$0 完整的输入记录</li>
<li>$1-$n 表示当前行第几个字段, $(NF - n) 动态计算第几个字段</li>
<li>NF 当前记录中的字段个数</li>
<li>NR 已经读出的记录数(默认从 1 开始)</li>
<li>FNR 当前处理的记录号</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo 2 | awk -v sum=2 &#x27;&#123;printf &quot;FS = %s\nOFS = %s\nRS = %s\nORS = %s\nNF = %d\nNR = %d\nFNR = %d\n$0 = %s\n$1 = %s\n$2 = %s&quot;, FS, OFS, RS, ORS, NF, NR, FNR, $0, $1, $2&#125;&#x27;</span></span><br><span class="line">FS =</span><br><span class="line">OFS =</span><br><span class="line">RS =</span><br><span class="line"></span><br><span class="line">ORS =</span><br><span class="line"></span><br><span class="line">NF = 1</span><br><span class="line">NR = 1</span><br><span class="line">FNR = 1</span><br><span class="line"><span class="variable">$0</span> = 2</span><br><span class="line"><span class="variable">$1</span> = 2</span><br><span class="line"><span class="variable">$2</span> =</span><br></pre></td></tr></table></figure>

<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul>
<li>ARGC 命令行参数个数(不包括 awk 的选项和 awk 的程序内容)</li>
<li>ARGV 命令行参数序列数组,下标从 0 开始</li>
<li>ARGIND 命令行中当前文件的位置(从 0 开始算)</li>
</ul>
<h5 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h5><ul>
<li>BEGIN { 这里面是行处理语句执行前的语句 }</li>
<li>END { 这里面是行处理语句执行完成后的语句 }</li>
<li>{ 这里面是处理每一行时要执行的语句 }</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># awk &#x27;&#123; sum += $1 &#125;END&#123; print sum &#125;&#x27; file</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 2 | awk -v sum=2 &#x27;BEGIN&#123;print &quot;hello awk&quot;&#125;END&#123;print &quot;good bye awk&quot;&#125;&#123;printf &quot;sum = %.2f\n&quot;, sum += $1&#125;&#x27;</span></span><br><span class="line">hello awk</span><br><span class="line"><span class="built_in">sum</span> = 4.00</span><br><span class="line">good <span class="built_in">bye</span> awk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 1.1 | awk -v sum=2 &#x27;BEGIN&#123;print &quot;hello awk&quot;&#125;END&#123;print &quot;good bye awk&quot;&#125;&#123;printf &quot;sum = %.2f\n&quot;, sum += $1&#125;&#x27;</span></span><br><span class="line">hello awk</span><br><span class="line"><span class="built_in">sum</span> = 3.10</span><br><span class="line">good <span class="built_in">bye</span> awk</span><br></pre></td></tr></table></figure>

<ul>
<li>if 语句</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo -e &quot;1 a\n2 b\n3 c&quot; | awk &#x27;&#123;if ($1 &gt; 1) print $0&#125;&#x27;</span></span><br><span class="line">2 b</span><br><span class="line">3 c</span><br></pre></td></tr></table></figure>

<ul>
<li>while 和 do…while</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo 3 | awk &#x27;&#123;i=$1; while (i &lt;= 5) &#123;print i; i++&#125;&#125;&#x27;</span></span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<ul>
<li>for 语句</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo 3 | awk &#x27;&#123;for(i=1; i &lt;= 2;i++) &#123;print i&#125;&#125;&#x27;</span></span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<ul>
<li>switch 语句</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo 3 | awk &#x27;&#123;switch ($1) &#123;case 1: print &quot;一&quot;;break; case 2: print &quot;二&quot;;break; case 3: print &quot;三&quot;;break; default: print &quot;其它&quot;;&#125;&#125;&#x27;</span></span><br><span class="line">三</span><br></pre></td></tr></table></figure>

<h5 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h5><ul>
<li>gsub(r, s) 在整个 $0 中用 s 替换 r</li>
<li>gsub(r, s, t) 在整个 t 中用 s 替换 r</li>
<li>index(s, t) 返回 s 中字符串 t 的第一位置</li>
<li>length(s) 返回 s 的长度</li>
<li>match(s, r) 测试 s 是否包含匹配 r 的字符串</li>
<li>split(s, a, fs) 在 fs 上将 s 分成序列 a</li>
<li>sprint(fmt, exp) 返回经 fmt 格式化后的 exp</li>
<li>sub(r, s) 用 $0 中最左边最长的子串代替 s</li>
<li>substr(r, p) 返回字符串 s 中从 p 开始的后缀部分</li>
<li>substr(s, p, n) 返回字符串 s 中从 p 开始长度为 n 的后缀部分</li>
</ul>
<h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><p>将参数列表转换成小块分段传递给其他命令, 以避免参数列表过长的问题, 可单独使用, 也可以使用管道符、重定位符等其他命令配合使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xargs [OPTION]... COMMAND INITIAL-ARGS...</span><br></pre></td></tr></table></figure>

<ul>
<li>-E EOFString 指定逻辑 EOF 字符串以替换缺省的下划线(_), xargs 命令读取标准输入直到达到 EOF 或指定的字符串</li>
<li>-I replaceString 插入标准输入的每一行作为 command 参数的自变量, 把它插入每个发生的 replaceString 的 Argument 中</li>
<li>-n number 指定传递给执行命令的参数个数, 默认是所有</li>
<li>-p 每执行一个 argument 时询问一次用户</li>
<li>-a file 从文件中读入作为 stdin</li>
<li>-s size 命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数</li>
<li>-t 执行命令之前先打印执行命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -I 指定参数自变量</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo &quot;file1 file2 file3&quot; | xargs -t -I % sh -c &#x27;touch %;ls -l %&#x27;</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># sh -c &quot;touch file&#123;1..3&#125;&quot;;ls -l</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-d 设置自定义分隔符</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo -n file1#file2#file3#file4 | xargs -d \# -t touch</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># touch file&#123;1..4&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><blockquote>
<p>BRE 定义了 4 组元字符 <code>[ ]</code> <code>.</code> <code>^</code> <code>$</code><br>ERE 增加了 3 组元字符 <code>&#123; &#125;</code> <code>()</code> <code>|</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep [OPTION]... PATTERN [FILE]...</span><br></pre></td></tr></table></figure>

<ul>
<li><p>-V,--version 显示版本信息</p>
</li>
<li><p>-c,--count 统计符合字符串条件的行数</p>
</li>
<li><p>-i,--ignore-case 忽略大小写</p>
</li>
<li><p>-e,--regexp=PATTERN 使用正则表达式匹配</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 -e 参数 需要将正则中的部分字符转义才能使用</span></span><br><span class="line">[root@localhost ~]<span class="comment"># grep -i -e &quot;foo\|bar&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>-E,--extended-regexp 使用扩展正则表达式匹配(ERE)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grep -i -E &quot;foo|bar&quot; # 此处不需要进行字符转义</span></span><br></pre></td></tr></table></figure></li>
<li><p>-G,--basic-regexp 使用基础正则表达式(BRE)</p>
</li>
<li><p>-A{NUM},--after-context=NUM 查找某些字符的内容, 并向下延伸 <code>NUM</code> 行</p>
</li>
<li><p>-B{NUM},--before-context=NUM 查找某些字符的内容, 并向上延伸 <code>NUM</code> 行</p>
</li>
<li><p>-C{NUM},--context=NUM 查找某些字符的内容, 并向上和向下各延伸 <code>NUM</code> 行</p>
</li>
<li><p>-f File,--file=File 从文件中提取模板</p>
</li>
<li><p>-h,--no-filename 当搜索多个文件时, 不显示匹配文件名前缀</p>
</li>
<li><p>-o,--only-matching 只显示正则表达式匹配的部分</p>
</li>
<li><p>-q,--quiet 取消显示,只返回退出状态, <code>0</code> 表示找到了匹配的行</p>
</li>
<li><p>-l,--files-with-matches 打印匹配模板的文件清单</p>
</li>
<li><p>-L,--files-without-match 打印不匹配模板的文件清单</p>
</li>
<li><p>-n,--line-number 在匹配的行前面打印行号</p>
</li>
<li><p>-v,--invert-match 显示不包括文本的所有信息</p>
</li>
<li><p>-R,-r,--recursive 递归的读取目录下的所有文件,包括子目录</p>
</li>
</ul>
<h3 id="批量删除本地关联的-git-远程分支"><a href="#批量删除本地关联的-git-远程分支" class="headerlink" title="批量删除本地关联的 git 远程分支"></a>批量删除本地关联的 git 远程分支</h3><ul>
<li><p>awk 和 xargs 命令结合使用</p>
</li>
<li><p>不带远程名称的过滤</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 格式化输出所有本地关联的分支名</span></span><br><span class="line">$ git branch -r | \</span><br><span class="line">  grep -i <span class="string">&#x27;origin/feature*&#x27;</span> | \</span><br><span class="line">  awk <span class="string">&#x27;&#123;FS=&quot;/&quot;; \</span></span><br><span class="line"><span class="string">    printf &quot;FS %4s OFS %4s NF %4s NR %4s $0 %4s $1 %4s\n&quot;,FS,OFS,NF,NR,$0,$1; \</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$ git branch -r | \</span><br><span class="line">  awk <span class="string">&#x27;BEGIN&#123;IGNORECASE=1&#125; \</span></span><br><span class="line"><span class="string">    /origin\/feature/&#123; \</span></span><br><span class="line"><span class="string">      FS=&quot;/&quot;; \</span></span><br><span class="line"><span class="string">      printf &quot;FS %4s OFS %4s NF %4s NR %4s $0 %4s $1 %4s\n&quot;,FS,OFS,NF,NR,$0,$1; \</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span></span><br><span class="line">FS    / OFS      NF    1 NR    1 <span class="variable">$0</span>   origin/feature-BUSINESS-11269 <span class="variable">$1</span> origin/feature-BUSINESS-11269</span><br><span class="line">FS    / OFS      NF    2 NR    2 <span class="variable">$0</span>   origin/feature-BUSINESS-11374 <span class="variable">$1</span>   origin</span><br><span class="line">FS    / OFS      NF    2 NR    3 <span class="variable">$0</span>   origin/feature-mall-20220406 <span class="variable">$1</span>   origin</span><br><span class="line">FS    / OFS      NF    2 NR    4 <span class="variable">$0</span>   origin/feature-mall-entry <span class="variable">$1</span>   origin</span><br><span class="line">FS    / OFS      NF    2 NR    5 <span class="variable">$0</span>   origin/feature-privacy-20220329 <span class="variable">$1</span>   origin</span><br><span class="line">FS    / OFS      NF    2 NR    6 <span class="variable">$0</span>   origin/feature-service_tpl-20220418 <span class="variable">$1</span>   origin</span><br><span class="line">FS    / OFS      NF    2 NR    7 <span class="variable">$0</span>   origin/feature_BUSINESS-0707 <span class="variable">$1</span>   origin</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行删除分支操作</span></span><br><span class="line"><span class="comment"># BEGIN&#123;printf &quot;\nawk begin filtering\n\n&quot;;&#125;END&#123;printf &quot;\ndelete successfully\n&quot;;&#125;</span></span><br><span class="line">$ git branch -r | \</span><br><span class="line">  grep -i <span class="string">&#x27;origin/revert*&#x27;</span> | \</span><br><span class="line">  awk <span class="string">&#x27;&#123;printf &quot;%4s\n&quot;,$0;&#125;&#x27;</span> | \  <span class="comment"># awk &#x27;&#123;printf $0 &quot;\n&quot;;&#125;&#x27;</span></span><br><span class="line">  xargs -t -I &#123;&#125; git branch -dr &#123;&#125;</span><br><span class="line">Deleted remote-tracking branch origin/revert-0946083d (was 795de8b941).</span><br><span class="line">Deleted remote-tracking branch origin/revert-4835d8ea (was eac88d3e28).</span><br><span class="line"><span class="comment">## 或</span></span><br><span class="line">$ git branch -r | \</span><br><span class="line">  awk <span class="string">&#x27;BEGIN&#123;IGNORECASE=1&#125;/origin\/revert/&#123;printf &quot;%4s\n&quot;,$0&#125;&#x27;</span> | \</span><br><span class="line">  xargs -t -I &#123;&#125; git branch -dr &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>包含主机名的过滤</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># IGNORECASE=1 开启忽略大小写</span></span><br><span class="line"><span class="comment"># $0~/origin\/feature/ 判断分支名是否包含 origin/feature</span></span><br><span class="line"><span class="comment"># 使用内置函数 gsub 全局替换 remotes 为空</span></span><br><span class="line">$ git branch -a | \</span><br><span class="line">  awk <span class="string">&#x27;BEGIN&#123;IGNORECASE=1&#125;&#123; \</span></span><br><span class="line"><span class="string">    if($0~/origin\/feature/)&#123; \</span></span><br><span class="line"><span class="string">      gsub(/remotes\//, &quot; &quot;, $0); \</span></span><br><span class="line"><span class="string">      printf &quot;%4s\n&quot;,$0; \</span></span><br><span class="line"><span class="string">    &#125; \</span></span><br><span class="line"><span class="string">  &#125;&#x27;</span> | \</span><br><span class="line">  xargs -t -I &#123;&#125; git branch -dr &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="scp-主机之间复制文件"><a href="#scp-主机之间复制文件" class="headerlink" title="scp 主机之间复制文件"></a>scp 主机之间复制文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp [options] [[user@]host1:]file1 ... [[user@]host2:]file2</span><br></pre></td></tr></table></figure>

<ul>
<li>-C 传输过程中允许压缩文件</li>
<li>-p 保留源文件的修改时间, 访问时间, 访问权限</li>
<li>-q 不显示传输进度条</li>
<li>-r 递归复制整个目录</li>
<li>-v 详细方式显示输出</li>
<li>-P 指定数据传输的端口号</li>
<li>-l 限制传输带宽 KB/s</li>
</ul>
<h4 id="本地复制到远程"><a href="#本地复制到远程" class="headerlink" title="本地复制到远程"></a>本地复制到远程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝文件, 可以使用原文件名也可以重新命名文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># scp -Cp /home/workspace/file1.txt root@192.168.1.3:/home/workspace/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># scp -rCp /home/workspace/ root@192.168.1.3:/home/workspace/</span></span><br></pre></td></tr></table></figure>

<h4 id="远程复制到本地"><a href="#远程复制到本地" class="headerlink" title="远程复制到本地"></a>远程复制到本地</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝文件, 可以使用原文件名也可以重新命名文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># scp -Cp root@192.168.1.3:/home/workspace/file1.txt /home/workspace/</span></span><br><span class="line"><span class="comment"># 拷贝目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># scp -rCp root@192.168.1.3:/home/workspace/ /home/workspace</span></span><br></pre></td></tr></table></figure>

<h3 id="firewall-cmd-防火墙"><a href="#firewall-cmd-防火墙" class="headerlink" title="firewall-cmd 防火墙"></a>firewall-cmd 防火墙</h3><ul>
<li>--permanent # 永久修改</li>
<li>--reload # 重新加载防火墙配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]firewall-cmd --list-all <span class="comment"># 显示所有信息</span></span><br><span class="line">[root@centos7 ~]firewall-cmd --list-ports <span class="comment"># 显示端口信息</span></span><br><span class="line">[root@centos7 ~]firewall-cmd --remove-ports=&lt;port&gt;/&lt;protocol&gt; <span class="comment"># 显示端口信息</span></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]firewall-cmd --add-port=&lt;port&gt;/&lt;protocol&gt; --permanent <span class="comment"># 永久修改防火墙配置</span></span><br></pre></td></tr></table></figure>

<h3 id="crontab-定时任务"><a href="#crontab-定时任务" class="headerlink" title="crontab 定时任务"></a>crontab 定时任务</h3><ul>
<li>-u 指定用户</li>
<li>-e 使用编辑器设置时程表</li>
<li>-r 删除时程表</li>
<li>-l 列出目前的时程表</li>
</ul>
<h4 id="每分钟向指定文件追加写入一条数据"><a href="#每分钟向指定文件追加写入一条数据" class="headerlink" title="每分钟向指定文件追加写入一条数据"></a>每分钟向指定文件追加写入一条数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /root/workspace/crontab-out-format.sh</span></span><br><span class="line"></span><br><span class="line">file=/root/workspace/crontab-out-format.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">dateFormat</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> $(/bin/date +<span class="string">&quot;hello crontab %Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$file</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> $(dateFormat) &gt;&gt; <span class="variable">$file</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">touch</span> <span class="variable">$file</span></span><br><span class="line">  <span class="built_in">echo</span> $(dateFormat) &gt;&gt; <span class="variable">$file</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">[root@centos7 workspace]<span class="comment"># crontab -l  # 列出当前用户的所有任务</span></span><br><span class="line">* * * * * /bin/bash /root/workspace/crontab-out-format.sh <span class="comment"># 定时任务</span></span><br></pre></td></tr></table></figure>

<h3 id="tar-归档"><a href="#tar-归档" class="headerlink" title="tar 归档"></a>tar 归档</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar [OPTION...] [FILE]...</span><br></pre></td></tr></table></figure>

<ul>
<li><p>-t,--list 列出压缩文件中的信息</p>
</li>
<li><p>-u,--update 用已打包的文件的较新版本更新 tar 文件</p>
</li>
<li><p>-d,--diff,--compare 将文件系统里的文件和 tar 文件里的文件进行比较</p>
</li>
<li><p>--delete 删除 tar 文件里面的文件, 不能用于已保存在磁带上的 tar 文件</p>
</li>
<li><p>-v,--verbose 列出每一步处理涉及的文件的信息</p>
</li>
<li><p>-k,--keep-old-files 不覆盖文件系统上已有的文件</p>
</li>
<li><p>-f,--file 指定要处理的文件名</p>
</li>
<li><p>-w 每一步都要求确认</p>
</li>
<li><p>--atime-preserve 不改变转储文件的存取时间</p>
</li>
<li><p>-m,--modification-time 当从一个档案中恢复文件时, 不使用新的时间标签</p>
</li>
<li><p>-C,--directory DIR 转到指定的目录</p>
</li>
</ul>
<h4 id="压缩工具"><a href="#压缩工具" class="headerlink" title="压缩工具"></a>压缩工具</h4><ul>
<li>-j,--bzip2 调用 bzip2 执行压缩或解压缩</li>
<li>-J,--xz,--lzma 调用 XZ Utils 执行压缩或解压缩</li>
<li>-z,--gzip,--gunzip,--ungzip 调用 gzip 执行压缩或解压缩</li>
<li>-Z,--compress,--uncompress 调用 compress 执行压缩或解压缩</li>
</ul>
<h4 id="归档压缩"><a href="#归档压缩" class="headerlink" title="归档压缩"></a>归档压缩</h4><ul>
<li>-c,--create 创建新的 tar 文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 gzip 压缩归档 workspace 目录</span></span><br><span class="line">[root@centos7 ~]tar -czvf workspace.tar.gz ./workspace</span><br></pre></td></tr></table></figure>

<h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><ul>
<li>-x,--extract 解开 tar 文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 gzip 解压缩到当前目录下的 redis-stable 目录</span></span><br><span class="line">[root@centos7 ~]tar -xzvf redis-stable.tar.gz redis-stable</span><br></pre></td></tr></table></figure>

<h4 id="向压缩包添加文件"><a href="#向压缩包添加文件" class="headerlink" title="向压缩包添加文件"></a>向压缩包添加文件</h4><ul>
<li>-r,--append 向压缩包中添加文件, 如果压缩包不存在则新建压缩包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 archive.tar 压缩包中添加文件 file1.txt file2.txt</span></span><br><span class="line">[root@centos7 ~]tar -rf archive.tar file1.txt file2.txt</span><br></pre></td></tr></table></figure>

<h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><ul>
<li>--help [all] For all options use the manual</li>
<li>-v,--verbose Make the operation more talkative</li>
<li>-#,--progress-bar Display transfer progress as a bar</li>
<li>-L,--location Follow redirects</li>
<li>-X,--request &lt;method&gt; Specify request method to use</li>
<li>-H,--header &lt;header/@file&gt; Pass custom headers to server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --<span class="built_in">help</span> all</span><br><span class="line"></span><br><span class="line">curl --location --request POST <span class="string">&#x27;https://developer.toutiao.com/api/apps/v2/jscode2session&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Access-Token: clt.01*********3d3d&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="string">  &quot;age&quot;: 18</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-b,--cookie &lt;data|filename&gt; Send cookies from string/load from file</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --location --request POST <span class="string">&#x27;https://developer.toutiao.com/api/apps/v2/jscode2session&#x27;</span> \</span><br><span class="line">--cookie <span class="string">&#x27;name=zhangsan;age=18&#x27;</span> \</span><br><span class="line">-v</span><br><span class="line"></span><br><span class="line">curl --location --request POST <span class="string">&#x27;https://developer.toutiao.com/api/apps/v2/jscode2session&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Cookie: name=zhangsan;age=18&#x27;</span> \</span><br><span class="line">-v</span><br></pre></td></tr></table></figure>

<ul>
<li>-d<ul>
<li>--data &lt;data&gt; HTTP POST data</li>
<li>--data-ascii &lt;data&gt; HTTP POST ASCII data</li>
<li>--data-binary &lt;data&gt; HTTP POST binary data</li>
<li>--data-raw &lt;data&gt; HTTP POST data, ‘@’ allowed</li>
<li>--data-urlencode &lt;data&gt; HTTP POST data URL encoded</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --location --request POST <span class="string">&#x27;https://developer.toutiao.com/api/apps/v2/jscode2session&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Access-Token: clt.01*********3d3d&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \</span><br><span class="line">--data-urlencode <span class="string">&#x27;client-key=tt10abc********&#x27;</span> \</span><br><span class="line">--data-urlencode <span class="string">&#x27;client_secret=7820************&#x27;</span> \</span><br><span class="line">--data-urlencode <span class="string">&#x27;code=ffab5ec*********&#x27;</span> \</span><br><span class="line">--data-urlencode <span class="string">&#x27;grant_type=authorization_code&#x27;</span></span><br><span class="line"></span><br><span class="line">curl --location --request POST <span class="string">&#x27;https://developer.toutiao.com/api/apps/v2/jscode2session&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Access-Token: clt.01*********3d3d&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">--data-raw <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;app_id&quot;: &quot;tt*******&quot;,</span></span><br><span class="line"><span class="string">  &quot;app_name&quot;: &quot;douyin&quot;,</span></span><br><span class="line"><span class="string">  &quot;path&quot;:&quot;xxxx&quot;,</span></span><br><span class="line"><span class="string">  “query”: &quot;&#123;xxx:xxxx&#125;&quot;，</span></span><br><span class="line"><span class="string">  “expire_time”: 16444464021,</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>-F</p>
<ul>
<li>--form &lt;name-content&gt; Specify multipart MIME data</li>
<li>--form-escape Escape form fields using backslash</li>
<li>--form-string &lt;name=string&gt; Specify multipart MIME data</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --location --request POST <span class="string">&#x27;https://developer.toutiao.com/api/apps/v2/jscode2session&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Access-Token: clt.01*********3d3d&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Content-Type: multipart/form-data&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Accept: */*&#x27;</span> \</span><br><span class="line">--form <span class="string">&#x27;appid=tt1yyyy&#x27;</span> \</span><br><span class="line">--form <span class="string">&#x27;material_type=&quot;1000&quot;&#x27;</span> \</span><br><span class="line">--form <span class="string">&#x27;material_file=@&quot;/Users/xxx.jpg&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-o,--output &lt;file&gt; Write to file instead of stdout</li>
<li>--output-dir &lt;dir&gt; Directory to save files in</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3</title>
    <url>/2021/06/c430903d5070/</url>
    <content><![CDATA[<h2 id="全局-API"><a href="#全局-API" class="headerlink" title="全局 API"></a>全局 API</h2><h3 id="应用实例-API"><a href="#应用实例-API" class="headerlink" title="应用实例 API"></a>应用实例 API</h3><blockquote>
<p>调用 createApp 返回一个应用实例，该实例提供了一个应用上下文, 应用实例挂载的整个组件树共享相同的上下文</p>
</blockquote>
<h4 id="createApp"><a href="#createApp" class="headerlink" title="createApp()"></a>createApp()</h4><p>创建一个应用实例</p>
<ul>
<li>参数<ul>
<li>{Object} rootComponent 根组件选项</li>
<li>{Object} rootProps 传递给根组件的 props</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* root component options */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* root component props */</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="createSSRApp"><a href="#createSSRApp" class="headerlink" title="createSSRApp()"></a>createSSRApp()</h4><p>以 <code>SSR</code> 模式创建一个应用实例, 用法和 <code>createApp()</code> 相同</p>
<h4 id="app-mount"><a href="#app-mount" class="headerlink" title="app.mount()"></a>app.mount()</h4><p>将应用实例挂载到一个容器元素中</p>
<ul>
<li>参数可以是一个实际的 DOM 元素或一个 CSS 选择器, 返回根组件实例</li>
<li>如果该组件有 <code>template</code> 模板或定义了 <code>render</code> 函数, 则替换容器内所有现存的 DOM 节点, 否则使用容器元素的 innerHTML 作为模板</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="comment">/* */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.mount(&#x27;#app&#x27;);</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure>

<h4 id="app-unmount"><a href="#app-unmount" class="headerlink" title="app.unmount()"></a>app.unmount()</h4><p>卸载一个已挂载的应用实例, 同时触发该应用组件树内所有组件的卸载生命周期钩子</p>
<h4 id="app-provide"><a href="#app-provide" class="headerlink" title="app.provide()"></a>app.provide()</h4><p>提供一个值, 可以在应用中的所有后代组件中注入使用</p>
<ul>
<li>参数<ul>
<li>key, 注入的 key</li>
<li>value, 注入的 key 对应的值, 返回应用实例本身</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;span&gt;&#123;&#123;name&#125;&#125;&lt;/span&gt;&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hello world&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="app-component"><a href="#app-component" class="headerlink" title="app.component()"></a>app.component()</h4><p>注册或查找全局组件, 根据参数个数区分</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="comment">/* */</span>);</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/*组件配置项*/</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>); <span class="comment">// 查找已注册的组件</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="app-directive"><a href="#app-directive" class="headerlink" title="app.directive()  "></a>app.directive() <em id="directive"></em> <!-- markdownlint-disable-line --></h4><p>注册或查找全局指令, 根据参数个数区分</p>
<blockquote>
<p>自定义指令主要是为了<strong>重用</strong>涉及普通元素的底层 DOM 访问的逻辑<br>只有当所需功能只能通过直接的 DOM 操作来实现时, 才应该使用自定义指令</p>
</blockquote>
<p>一个自定义指令由一个包含类似组件生命周期钩子的对象来定义</p>
<ul>
<li><p>当在组件上使用自定义指令时, 它会始终应用于组件的根节点</p>
</li>
<li><p>如果组件存在多个根节点时, 指令将会被忽略并且抛出一个警告</p>
</li>
<li><p>钩子参数</p>
<ul>
<li>el 指令绑定的元素, 可用于直接操作 DOM</li>
<li>binding 一个对象<ul>
<li>value 传递给指令的值, 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> 的值为 2</li>
<li>oldValue 之前的值, 仅在 <a href="#onBeforeUpdate"><code>beforeUpdate</code></a> 和 <a href="#onUpdated"><code>updated</code></a> 中可用</li>
<li>arg 传递给指令的参数, 例如 <code>v-my-directive:name</code> 的参数为 <code>name</code></li>
<li>modifiers 一个包含修饰符的对象, 例如 <code>v-my-directive.foo.bar</code> 的修饰符对象为 <code>&#123;foo: true, bar: true&#125;</code></li>
<li>instance 使用该指令的组件实例</li>
<li>dir 指令的定义对象</li>
</ul>
</li>
<li>vnode 代表绑定元素的底层 VNode</li>
<li>prevVnode 之前的渲染中代表指令所绑定元素的 VNode, 仅在 <a href="#onBeforeUpdate"><code>beforeUpdate</code></a> 和 <a href="#onUpdated"><code>updated</code></a> 中可用</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">v-my-directive:name.foo.bar</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="comment">/* */</span>);</span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 自定义指令钩子:</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * created 在绑定元素的 attribute 或事件监听器被应用之前调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * beforeMount 在绑定元素的父组件挂载之前调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * mounted 绑定元素的父组件被挂载时调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * beforeUpdate 在包含组件的 VNode 更新之前调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * updated 在包含组件的 VNode 及其子组件的 VNode 更新之后调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * beforeUnmount 在绑定元素的父组件卸载之前调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * unmounted 卸载绑定元素的父组件时调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 简化形式: 仅需要在 `mounted` 和 `updated` 上实现相同的行为</span></span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* 在 mounted 和 updated 时都调用 */</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="app-use"><a href="#app-use" class="headerlink" title="app.use()"></a>app.use()</h4><p>安装一个 <strong>插件</strong>, 插件可以是一个包含 <code>install()</code> 方法的对象或者是一个安装函数本身</p>
<ul>
<li>参数<ul>
<li>第一个参数为插件本身</li>
<li>可选, 第二个参数作为插件选项将会传递给插件的 <code>install()</code>方法</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="comment">/* */</span>);</span><br><span class="line"><span class="comment">// 包含 install 方法的对象</span></span><br><span class="line"><span class="keyword">const</span> myPlugins = &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app, options</span>) &#123;</span><br><span class="line">    <span class="comment">/* 配置此应用 */</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">app.<span class="title function_">use</span>(myPlugins, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">  <span class="comment">/* 传递给 install 方法的可选的选项 */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装函数</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 配置此应用 */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="app-mixin"><a href="#app-mixin" class="headerlink" title="app.mixin()"></a>app.mixin()</h4><p>应用一个全局的 mixin, 作用于应用中的每个组件实例 (不推荐使用), 在 Vue 3 中为了向后兼容</p>
<h4 id="app-runWithContext"><a href="#app-runWithContext" class="headerlink" title="app.runWithContext()"></a>app.runWithContext()</h4><blockquote>
<p>Vue 3.3 支持</p>
</blockquote>
<p>使用当前应用作为注入上下文执行回调函数, 在回调同步调用期间, 即使没有当前活动的组件实例, inject() 调用也可以从当前应用提供的值中查找注入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">provide</span>(<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> injected = app.<span class="title function_">runWithContext</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">inject</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(injected); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h4 id="app-version"><a href="#app-version" class="headerlink" title="app.version"></a>app.version</h4><p>提供当前应用所使用的 Vue 版本号, 插件中可根据此执行不同的逻辑</p>
<h4 id="app-config"><a href="#app-config" class="headerlink" title="app.config"></a>app.config</h4><p>应用实例暴露出的一个 <code>config</code> 对象, 其中包含了对此应用实例的配置</p>
<h5 id="app-config-errorHandler"><a href="#app-config-errorHandler" class="headerlink" title="app.config.errorHandler"></a>app.config.errorHandler</h5><p>用于为应用实例内抛出的未捕获错误指定一个全局处理函数</p>
<h5 id="app-config-warnHandler"><a href="#app-config-warnHandler" class="headerlink" title="app.config.warnHandler"></a>app.config.warnHandler</h5><p>用于为 Vue 的运行时警告指定一个自定义处理函数</p>
<h5 id="app-config-performance"><a href="#app-config-performance" class="headerlink" title="app.config.performance"></a>app.config.performance</h5><p>设置为 <code>true</code> 可在浏览器工具的 <strong>性能/时间线</strong> 页启用对组件初始化、编译、渲染和修改的性能表现追踪</p>
<h5 id="app-config-compilerOptions"><a href="#app-config-compilerOptions" class="headerlink" title="app.config.compilerOptions"></a>app.config.compilerOptions</h5><p>配置 <strong>运行时编译器</strong> 的选项</p>
<ul>
<li><p>app.config.compilerOptions.isCustomElement 用于指定一个检查方法来识别原生自定义元素</p>
</li>
<li><p>app.config.compilerOptions.whitespace 用于调整模板中空格的处理行为 <code>condense(default) | preserve</code></p>
</li>
<li><p>app.config.compilerOptions.delimiters 用于调整模板内文本插值的分隔符, 默认 [‘, ‘]</p>
</li>
<li><p>app.config.compilerOptions.comments 用于调整是否移除模板中的 HTML 注释</p>
</li>
</ul>
<h5 id="app-config-globalProperties"><a href="#app-config-globalProperties" class="headerlink" title="app.config.globalProperties"></a>app.config.globalProperties</h5><p>用于注册能够被应用实例内所有组件实例访问到的全局属性的对象, 对 Vue 2 中 <code>Vue.prototype</code> 使用方式的一种替代</p>
<h5 id="app-config-optionMergeStrategies"><a href="#app-config-optionMergeStrategies" class="headerlink" title="app.config.optionMergeStrategies"></a>app.config.optionMergeStrategies</h5><p>用于定义自定义组件选项的合并策略的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="comment">/* */</span>);</span><br><span class="line">app.<span class="property">config</span>.<span class="property">errorHandler</span> = (err, instance, info)&#123;<span class="comment">/* */</span>&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">name</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$xhr</span> = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="property">config</span>.<span class="property">compilerOptions</span>.<span class="property">isCustomElement</span> = (tag)&#123;</span><br><span class="line">  <span class="keyword">return</span>  tag.<span class="title function_">startsWith</span>(<span class="string">&#x27;icon-&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><p>暴露当前所使用的 Vue 的版本号</p>
<h4 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick()  "></a>nextTick() <em id="nextTick"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>Dom 更新不是同步的, Vue 会在 <code>next tick</code> 更新周期中缓冲所有状态的修改, 以确保进行了多次状态修改, 每个组件都只会被更新一次</p>
</blockquote>
<p>等待下一次 DOM 更新刷新的工具方法, 可以在状态改变后立即使用以等待 DOM 更新完成</p>
<ul>
<li>传递一个回调函数作为参数</li>
<li>或者 await 返回的 Promise</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; version, nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(version); <span class="comment">// 打印当前使用的 Vue 版本</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM 还未更新&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">nextTick</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM 已更新&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="defineComponent"><a href="#defineComponent" class="headerlink" title="defineComponent()  "></a>defineComponent() <em id="defineComponent"></em> <!-- markdownlint-disable-line --></h4><p>创建一个合成类型的构造函数, 用于手动渲染函数、TSX 和 IDE 工具支持</p>
<ul>
<li>参数为组件选项对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">MyComponent</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>Vue 3.3 支持, 备用签名, 旨在与<a href="#composition-api">组合式 API</a>和<a href="#rendering-func">渲染函数</a>或 JSX 一起使用</li>
<li>参数为 setup 函数, 函数名称作为组件名称使用, 第二个可选参数为其它选项</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, defineComponent, ref, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HelloWorld</span> = <span class="title function_">defineComponent</span>(</span><br><span class="line">  <span class="function">(<span class="params">props, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染函数或 JSX</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, count.<span class="property">value</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* 其他选项, 例如声明 props 和 emits */</span></span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">foo</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&#x27;Hello Foo&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">visible</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">        <span class="attr">default</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">HelloWorld</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="defineAsyncComponent"><a href="#defineAsyncComponent" class="headerlink" title="defineAsyncComponent()"></a>defineAsyncComponent()</h4><p>创建一个只有在需要时才会加载的异步组件</p>
<ul>
<li>参数为配置加载行为的选项对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>) <span class="comment">// 工厂函数</span></span><br><span class="line">  <span class="attr">loadingComponent</span>: <span class="title class_">LoadingComponent</span>,  <span class="comment">// 加载异步组件时要使用的组件</span></span><br><span class="line">  <span class="attr">errorComponent</span>: <span class="title class_">ErrorComponent</span>, <span class="comment">// 加载失败时要使用的组件</span></span><br><span class="line">  <span class="attr">delay</span>: <span class="number">200</span>, <span class="comment">// 在显示 loadingComponent 之前的延迟 | 默认值：200（单位 ms）</span></span><br><span class="line">  <span class="comment">// 如果提供了 timeout ，并且加载组件的时间超过了设定值，将显示错误组件</span></span><br><span class="line">  <span class="comment">// 默认值：Infinity（即永不超时，单位 ms）</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">suspensible</span>: <span class="literal">false</span>, <span class="comment">// 定义组件是否可挂起 | 默认值：true</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; error 错误信息对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; retry 一个函数，用于指示当 promise 加载器 reject 时，加载器是否应该重试</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; fail  一个函数，指示加载程序结束退出</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; attempts 允许的最大重试次数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="title function_">onError</span>(<span class="params">error, retry, fail, attempts</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">message</span>.<span class="title function_">match</span>(<span class="regexp">/fetch/</span>) &amp;&amp; attempts &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="comment">// 请求发生错误时重试，最多可尝试 3 次</span></span><br><span class="line">      <span class="title function_">retry</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 注意，retry/fail 就像 promise 的 resolve/reject 一样：</span></span><br><span class="line">      <span class="comment">// 必须调用其中一个才能继续错误处理。</span></span><br><span class="line">      <span class="title function_">fail</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>参数为异步加载函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册异步组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComp</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span><br><span class="line">  <span class="title function_">import</span>(<span class="string">&#x27;./components/AsyncComponent.vue&#x27;</span>);</span><br><span class="line">);</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;async-component&#x27;</span>, <span class="title class_">AsyncComp</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册异步组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp, defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">AsyncComponent</span>: <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">import</span>(<span class="string">&#x27;./components/AsyncComponent.vue&#x27;</span>);</span><br><span class="line">    ),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="defineCustomElement"><a href="#defineCustomElement" class="headerlink" title="defineCustomElement()"></a><a href="#defineComponent">defineCustomElement()</a></h4><p>和 <code>defineComponent()</code> 接收的参数相同, 返回值是一个可以通过 <code>customElements.define()</code> 注册的<strong>自定义元素</strong>构造器(继承自 <code>HTMLElement</code>)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineCustomElement &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyVueElement</span> = <span class="title function_">defineCustomElement</span>(&#123;</span><br><span class="line">  <span class="comment">/* 和 defineComponent() 接收的参数相同 */</span></span><br><span class="line">  <span class="attr">props</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">emits</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`...`</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* defineCustomElement 特有的: 注入进入 shadow root 的 css */</span></span><br><span class="line">  <span class="attr">styles</span>: [<span class="string">`/* inlined css */`</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-vue-element&#x27;</span>, <span class="title class_">MyVueElement</span>);</span><br></pre></td></tr></table></figure>

<h2 id="组合式-API"><a href="#组合式-API" class="headerlink" title="组合式 API  "></a>组合式 API <em id="composition-api"></em> <!-- markdownlint-disable-line --></h2><blockquote>
<p>组合式函数(Composables) 是一个利用 Vue 的组合式 API 来封装和复用有 <strong>状态逻辑</strong> 的函数</p>
</blockquote>
<p>组合式 API 的核心思想是直接在函数作用域内定义响应式状态变量, 并将从多个函数中得到的状态组合起来处理复杂问题, 这种形式更加自由灵活和高效.</p>
<p>组合式 API(composition API) 是一系列 API 的集合, 能够通过函数而不是声明选项的方式书写 Vue 组件来实现更加简洁高效的逻辑复用(<a href="#optional-api">选项式 API</a> 中主要的逻辑复用机制是 mixins), 涵盖以下方面的 API</p>
<ul>
<li>响应式 API: 例如 <a href="#ref">ref()</a> 和 <a href="#reactive">reactive()</a>, 可以直接创建响应式状态、计算属性和侦听器</li>
<li>生命周期钩子: 例如 <a href="#onMounted">onMounted()</a> 和 <a href="#onUnmounted">onUnmounted()</a>, 可以在组件各个生命周期阶段添加逻辑</li>
<li>依赖注入: 例如 provide() 和 inject(), 可以在使用响应式 API 时, 利用 Vue 的依赖注入系统</li>
</ul>
<h3 id="setup"><a href="#setup" class="headerlink" title="setup()"></a>setup()</h3><blockquote>
<p>对于结合单文件组件使用的组合式 API 推荐使用 <code>&lt;script setup&gt;</code> 语法</p>
</blockquote>
<p><code>setup()</code> 钩子是在组件中使用 <a href="#composition-api">组合式 API</a> 的入口, 通常在两个情况下使用</p>
<ul>
<li>需要在<strong>非单文件组件</strong>中使用 <a href="#composition-api">组合式 API</a> 时</li>
<li>需要在基于 <a href="#optional-api">选项式 API</a> 的组件中集成基于 <a href="#composition-api">组合式 API</a> 的代码时</li>
</ul>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul>
<li><p>在创建组件实例时, 在初始 prop 解析之后立即调用 setup</p>
</li>
<li><p>在生命周期方面, 在 <code>beforeCreate</code> 钩子之前调用</p>
</li>
<li><p>getCurrentInstance</p>
<ul>
<li>支持访问内部组件实例，用于高阶用法或库的开发</li>
<li>只能在 setup 或生命周期钩子中调用</li>
</ul>
</li>
<li><p><code>setup()</code> 应该同步地返回一个对象, 唯一可以使用 <code>async setup()</code> 的情况是该组件是 <a href="#suspense">&lt;Suspense&gt;</a> 组件地后裔</p>
</li>
</ul>
<h4 id="访问-Props"><a href="#访问-Props" class="headerlink" title="访问 Props"></a>访问 Props</h4><ul>
<li><code>setup()</code> 的第一个参数, 是响应式地并且会在传入新的 props 时同步更新</li>
<li>不能直接对 props 进行解构操作, 会丢失响应性, 可以通过 <code>toRefs()</code> 和 <code>toRef()</code> 工具函数辅助完成</li>
</ul>
<h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><p><code>setup()</code> 的第二个参数为一个<strong>上下文</strong>对象, 暴露了其他一些在 <code>setup()</code> 中可能会用到的值, 该上下文对象是非响应式的, 可以安全地解构, attrs 和 slots 都是非响应式的, 如果需要根据 attrs 或 slots 的改变执行副作用, 需要在 onBeforeUpdate 钩子中执行相关逻辑</p>
<ul>
<li>attrs 透传 Attributes, 等价于 $attrs, 除了组件声明的 <code>props</code> 和 <code>emits</code> 之外的其他 attribute<ul>
<li>当一个组件以单个元素为根作渲染时, 透传的 attribute 会自动被添加到根元素上, 如果有多个根节点时没有自动 attribute 透传行为, 如果 $attrs 没有被显式绑定将会抛出一个运行时警告</li>
<li>深层组件继承时, 透传的 attribute 不会包含子组件上声明过的 props 或者针对 emits 声明事件的 v-on 侦听函数</li>
</ul>
</li>
<li>slots <a href="#v-slot">插槽</a>, 等价于 $slots</li>
<li>emit 触发事件, 等价于 $emit</li>
<li>expose 用于显示的限制该组件暴露出的属性, 父组件将仅能访问 expose 函数暴露出的内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; emit, expose &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> publicCount = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_">expose</span>(&#123; <span class="attr">count</span>: publicCount &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;my-event&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; publicCount &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="使用-slot-渲染"><a href="#使用-slot-渲染" class="headerlink" title="使用 slot 渲染"></a>使用 <a href="#v-slot">slot</a> 渲染</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, defineComponent, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HelloWorld</span> = <span class="title function_">defineComponent</span>(</span><br><span class="line">  <span class="function">(<span class="params">props, &#123; slots &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 `?.` 可选链运算符判断插槽函数不存在则使用默认值渲染</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> [</span><br><span class="line">      <span class="title function_">h</span>(</span><br><span class="line">        <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">        slots?.<span class="property">default</span>?.() || <span class="string">&#x27;rendered content from self by default slot...&#x27;</span></span><br><span class="line">      ),</span><br><span class="line">      <span class="title function_">h</span>(</span><br><span class="line">        <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">        slots?.<span class="property">header</span>?.() || <span class="string">&#x27;rendered content from self by header slot...&#x27;</span></span><br><span class="line">      ),</span><br><span class="line">    ];</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* 其它选项 */</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; slots &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">h</span>(</span><br><span class="line">        <span class="title class_">HelloWorld</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// VNode 生命周期事件琢磨中...</span></span><br><span class="line">          <span class="string">&#x27;onVue:before-mount&#x27;</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child component hooks triggered...&#x27;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 传递单个默认插槽函数</span></span><br><span class="line">        <span class="comment">// () =&gt; &#x27;rendered content from father component by default slot...&#x27;,</span></span><br><span class="line">        <span class="comment">// 传递具名插槽函数, 使用插槽函数对象形式传递</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">default</span>: <span class="function">() =&gt;</span></span><br><span class="line">            <span class="string">&#x27;rendered content from father component by default slot...&#x27;</span>,</span><br><span class="line">          <span class="attr">header</span>: <span class="function">() =&gt;</span></span><br><span class="line">            <span class="title function_">h</span>(</span><br><span class="line">              <span class="string">&#x27;span&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;rendered content from father component by header slot...&#x27;</span></span><br><span class="line">            ),</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;hello-world&#x27;</span>, <span class="title class_">HelloWorld</span>);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="使用-slotscope-渲染"><a href="#使用-slotscope-渲染" class="headerlink" title="使用 slotscope 渲染"></a>使用 <a href="#v-slot">slot</a>scope 渲染</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, defineComponent, h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HelloWorld</span> = <span class="title function_">defineComponent</span>(</span><br><span class="line">  <span class="function">(<span class="params">props, &#123; attrs, slots &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="string">&#x27;from hello world component&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> age = attrs.<span class="property">age</span> &gt; <span class="number">0</span> ? attrs.<span class="property">age</span> : <span class="number">18</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props); <span class="comment">// &#123;&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(slots); <span class="comment">// &#123;default: renderFnWithContext()&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(attrs); <span class="comment">// &#123;name: &#x27;from createApp&#x27;, age: -1&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, slots.<span class="title function_">default</span>(&#123; <span class="attr">message</span>: message, <span class="attr">age</span>: age &#125;));</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* 其它选项 */</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">h</span>(</span><br><span class="line">        <span class="title class_">HelloWorld</span>,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;from createApp&#x27;</span>, <span class="attr">age</span>: -<span class="number">1</span> &#125;,</span><br><span class="line">        <span class="comment">// 传递单个默认插槽函数</span></span><br><span class="line">        <span class="function">(<span class="params">slotScope</span>) =&gt;</span></span><br><span class="line">          slotScope.<span class="property">message</span> + <span class="string">&#x27; - &#x27;</span> + slotScope.<span class="property">age</span> + <span class="string">&#x27; - others from createApp&#x27;</span></span><br><span class="line">      );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;hello-world&#x27;</span>, <span class="title class_">HelloWorld</span>);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="返回渲染函数"><a href="#返回渲染函数" class="headerlink" title="返回渲染函数"></a>返回<a href="#rendering-func">渲染函数</a></h4><blockquote>
<p>返回<a href="#rendering-func"><strong>渲染函数</strong></a>将会阻止返回其他东西, 对于父组件通过模板引用组件暴露的属性使用 <code>expose()</code> 方法解决</p>
</blockquote>
<ul>
<li>返回一个 <a href="#rendering-func"><strong>渲染函数</strong></a>, 此时在渲染函数中可以直接使用在同一作用域下声明的响应式状态</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; expose &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> object = <span class="title function_">reactive</span>(&#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; ++count.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expose</span>(&#123; increment &#125;); <span class="comment">// 组件暴露 increment 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, [count.<span class="property">value</span>, object.<span class="property">foo</span>]);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="响应式-核心"><a href="#响应式-核心" class="headerlink" title="响应式: 核心"></a>响应式: 核心</h3><ul>
<li>响应式状态默认是深层次的, 即对深层次的响应式状态的更改也能被检测到</li>
<li>只有代理对象是响应式的, 更改原始对象不会触发更新, 使用响应式系统时仅使用声明对象的代理版本</li>
</ul>
<h4 id="ref"><a href="#ref" class="headerlink" title="ref()  "></a>ref() <em id="ref"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>当在模板中使用了一个 ref, 然后改变这个 ref 的值, Vue 会自动检测到这个变化并相应地更新 DOM, 这个过程通过一个基于依赖追踪的响应式系统实现的, 当一个组件首次渲染时, Vue 会追踪在渲染过程中使用的每一个 ref, 当一个 ref 被修改时, 它会触发追踪它的组件的一次重新渲染, 在标准的 javascript 中无法检测普通变量的修改, 可以通过 getter 和 setter 方法来拦截对象属性的 get 和 set 操作.<br>.value 属性给予了 Vue 一个机会来检测 ref 何时被访问或修改, 在其内部, Vue 在它的 getter 中执行追踪, 在它的 setter 中执行触发, 概念上 ref 可以看作是一个这样的对象.</p>
</blockquote>
<p>接受一个内部值, 返回一个响应式可更改的 ref 对象, 此对象只有一个指向其内部值的属性 <code>.value</code></p>
<ul>
<li>将一个对象赋值给 ref, 那么这个对象将通过 <code>reactive()</code> 转为具有深层次响应式的对象, 如果对象中包含了嵌套的 ref, 它们将被深层地解包</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">nested</span>: &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">arr</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>],</span><br><span class="line">&#125;);</span><br><span class="line">obj.<span class="property">value</span>.<span class="property">nested</span>.<span class="property">count</span>++;</span><br><span class="line">obj.<span class="property">value</span>.<span class="property">arr</span>.<span class="title function_">push</span>(<span class="string">&#x27;baz&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>一个包含对象类型值的 ref 可以响应式的替换整个对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 0</span></span><br><span class="line">count.<span class="property">value</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objRef = <span class="title function_">ref</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line">objRef.<span class="property">value</span> = &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;; <span class="comment">// 响应式替换</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ref 被传递给函数或是从<strong>一般对象</strong>上被解构时, 不会丢失响应性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="title function_">ref</span>(<span class="number">0</span>),</span><br><span class="line">  <span class="attr">bar</span>: <span class="title function_">ref</span>(<span class="number">1</span>),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 该函数接收一个 ref 需要通过 .value 取值, 但会保持响应性</span></span><br><span class="line"><span class="title function_">callSomeFn</span>(obj.<span class="property">foo</span>);</span><br><span class="line"><span class="comment">// 解构 ref 仍然是响应性的</span></span><br><span class="line"><span class="keyword">const</span> &#123; foo, bar &#125; = obj;</span><br></pre></td></tr></table></figure>

<ul>
<li>当 ref 在模板中作为<strong>顶层属性</strong>被访问时, 它们会被自动解包, 不需要使用 <code>.value</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// ref 非渲染上下文顶层属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="title function_">ref</span>(<span class="number">1</span>) &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// ref 为渲染上下文顶层属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 不需要使用 .value 访问 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 需要使用 .value 访问 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;obj.foo.value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="computed"><a href="#computed" class="headerlink" title="computed()  "></a>computed() <em id="computed"></em> <!-- markdownlint-disable-line --></h4><p>返回一个只读的响应式 ref 对象, 该 ref 通过 .value 暴露 getter 函数的返回值</p>
<ul>
<li>接受一个 getter 函数</li>
<li>接受一个带有 get 和 set 函数的对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接受一个 getter 函数</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> plusOne = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> + <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(plusOne.<span class="property">value</span>); <span class="comment">// 2</span></span><br><span class="line">plusOne.<span class="property">value</span>++; <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受一个带有 get 和 set 函数的对象</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> plusOne = <span class="title function_">computed</span>(&#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function">() =&gt;</span> count.<span class="property">value</span> + <span class="number">1</span>,</span><br><span class="line">  <span class="attr">set</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    count.<span class="property">value</span> = val - <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">plusOne.<span class="property">value</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<h4 id="reactive"><a href="#reactive" class="headerlink" title="reactive()  "></a>reactive() <em id="reactive"></em> <!-- markdownlint-disable-line --></h4><p>返回一个对象的响应式代理</p>
<ul>
<li>对同一个<strong>原始对象</strong>调用 <code>reactive()</code> 总是返回同样的<strong>代理对象</strong></li>
<li>对一个已存在的<strong>代理对象</strong>调用 <code>reactive()</code> 总是返回其本身</li>
</ul>
<p><strong>局限性</strong> <!--markdownlint-disable-line--></p>
<ul>
<li>有限的值类型: 只能用于对象类型(对象、数组、Map、Set 这样的集合类型), 不能持有 <code>string</code>, <code>number</code>, <code>boolean</code> 这样的原始类型</li>
<li>不能替换整个对象: 因为 Vue 的响应式系统是通过属性访问进行追踪的, 因此需要始终保持对响应式对象的<strong>相同引用</strong>,</li>
<li>对解构操作不友好: 将响应式对象的属性赋值或解构至本地变量时、或是将该属性传入一个函数时将失去响应性</li>
</ul>
<p>==建议使用 <code>ref()</code> 作为生命响应式状态的主要 API==</p>
<ul>
<li>将一个 ref 作为响应式对象的属性被访问或修改时自动解包</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// ref 会解包</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  count,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span> === count.<span class="property">value</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动更新 `state.value`</span></span><br><span class="line">count.<span class="property">value</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>, state.<span class="property">count</span>); <span class="comment">// 1 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动更新 `count` ref</span></span><br><span class="line">state.<span class="property">count</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>, state.<span class="property">count</span>); <span class="comment">// 2 2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将一个新的 ref 赋值给一个关联了已有 ref 的属性, 那么旧的 ref 会被替换</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> otherCount = <span class="title function_">ref</span>(<span class="number">4</span>);</span><br><span class="line">state.<span class="property">count</span> = otherCount;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>, state.<span class="property">count</span>); <span class="comment">// 2 4</span></span><br></pre></td></tr></table></figure>

<ul>
<li>只有当嵌套在一个深层响应式对象内时, 才会发生 ref 解包, 当其作为 <a href="#shallowReactive"><strong>浅层响应式对象</strong></a> 的属性被访问时不会被解包</li>
<li>当 ref 作为响应式数组或原生集合类型(如 Map)中的元素被访问时, 不会被解包</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowReactive, reactive, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">// 浅层响应式对象, ref 作为其属性被访问时不会被解包</span></span><br><span class="line"><span class="keyword">const</span> sr = <span class="title function_">shallowReactive</span>(&#123;</span><br><span class="line">  <span class="attr">arr</span>: <span class="title function_">ref</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sr.<span class="property">arr</span>.<span class="property">value</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生集合中包含 ref 元素时, ref 不会解包</span></span><br><span class="line"><span class="keyword">const</span> books = <span class="title function_">reactive</span>([<span class="title function_">ref</span>(<span class="string">&#x27;Vue 3.0&#x27;</span>)]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(books[<span class="number">0</span>].<span class="property">value</span>); <span class="comment">// 需要使用 .value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="title function_">reactive</span>(<span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;count&#x27;</span>, <span class="title function_">ref</span>(<span class="number">0</span>)]]));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;count&#x27;</span>).<span class="property">value</span>); <span class="comment">// 需要使用 .value</span></span><br></pre></td></tr></table></figure>

<h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly()  "></a>readonly() <em id="readonly"></em> <!-- markdownlint-disable-line --></h4><ul>
<li>接受一个对象(响应式或普通)或一个 ref, 返回原值的只读代理</li>
<li>任何被访问的嵌套属性也是只读的, 它的 ref 解包行为与 reactive() 相同, 但解包得到的值是只读的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, readonly, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> copy = <span class="title function_">readonly</span>(original);</span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(copy.<span class="property">count</span>); <span class="comment">// 用于响应性追踪</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 变更 original 会触发依赖于副本的侦听器</span></span><br><span class="line">original.<span class="property">count</span>++;</span><br><span class="line"><span class="comment">// 警告! // 变更副本将失败并导致警告</span></span><br><span class="line">copy.<span class="property">count</span>++;</span><br></pre></td></tr></table></figure>

<h4 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect()  "></a>watchEffect() <em id="watchEffect"></em> <!-- markdownlint-disable-line --></h4><p>立即执行一个函数, 同时响应式地追踪其依赖, 并在依赖更新时重新执行函数</p>
<ul>
<li>第一个参数是要运行的副作用函数, 该函数接收一个函数用来注册清理回调, 清理回调会在该副作用函数下一次执行之前被调用</li>
<li>第二个参数是可选项, 用来调整副作用的刷新时机或调试副作用的依赖</li>
<li>返回值是一个用来停止该副作用的函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> stop = <span class="title function_">watchEffect</span>(</span><br><span class="line">  <span class="function">(<span class="params">onCleanup</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 输出 0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">flush</span>: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">    <span class="title function_">onTrick</span>(<span class="params">e</span>) &#123;&#125;,</span><br><span class="line">    <span class="title function_">onTrigger</span>(<span class="params">e</span>) &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">count.<span class="property">value</span>++; <span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不再需要此侦听器时</span></span><br><span class="line"><span class="title function_">stop</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>副作用刷新时机, 会在组件更新之前执行副作用</p>
<ul>
<li>如果需要在组件更新后重新运行侦听器副作用</li>
<li>flush<ul>
<li>pre: ‘默认值’, 指定的回调应该在渲染前被调用</li>
<li>post: 将回调推迟到渲染之后调用, 注意：这也将推迟副作用的初始运行，直到组件的首次渲染完成。</li>
<li>sync: ‘始终同步触发’, 低效</li>
</ul>
</li>
</ul>
</li>
<li><p>副作用清除 onCleanup</p>
<ul>
<li>副作用即将重新执行时</li>
<li>侦听器被停止(setup 或 lifeCycle Hooks 中使用过, 则在组件卸载时)</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(<span class="keyword">async</span> (onCleanup) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; response, cancel &#125; = <span class="title function_">doAsyncWork</span>(id.<span class="property">value</span>);</span><br><span class="line">  <span class="comment">// cancel 会在 id 更改时调用</span></span><br><span class="line">  <span class="comment">// 取消之前未完成的请求</span></span><br><span class="line">  <span class="title function_">onCleanup</span>(cancel);</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>侦听器调试, 只能用于开发模式下<ul>
<li>onTrack 响应式 property 和 ref 作为依赖项被追踪时被调用</li>
<li>onTrigger 依赖项变更导致副作用被触发时被调用</li>
</ul>
</li>
</ul>
<h4 id="watchPostEffect"><a href="#watchPostEffect" class="headerlink" title="watchPostEffect()"></a><a href="#watchEffect">watchPostEffect()</a></h4><p><code>watchEffect()</code> 使用 flush: ‘post’ 选项时的别名</p>
<h4 id="watchSyncEffect"><a href="#watchSyncEffect" class="headerlink" title="watchSyncEffect()"></a><a href="#watchEffect">watchSyncEffect()</a></h4><p><code>watchEffect()</code> 使用 flush: ‘sync’ 选项时的别名</p>
<h4 id="watch"><a href="#watch" class="headerlink" title="watch()  "></a>watch() <em id="watch"></em> <!-- markdownlint-disable-line --></h4><ul>
<li>侦听一个或多个响应式数据源, 并在数据源变化时调用所给的回调函数, 使用方式和 this.$watch 和 watch 选项完全等效</li>
<li>默认是浅层侦听, 仅在侦听的属性被赋新值时才触发回调, 而嵌套属性的变化不会触发, 如果需要侦听嵌套属性, 使用 <code>deep: true</code> 选项</li>
<li>默认是懒侦听的, 仅在侦听源发生变化时才触发回调, 如果需要在创建侦听器时立即执行一遍回调, 使用 <code>immediate: true</code> 选项</li>
</ul>
<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul>
<li><p>第一个参数是侦听器的源, 支持包含返回值的函数、ref、响应式对象、或者以上类型的值组成的数组</p>
</li>
<li><p>第二个参数是侦听源发生变化时调用的函数, 函数接收三个参数: 新值、旧值，及一个用于注册副作用清理的回调函数</p>
</li>
<li><p>第三个参数是一个配置项对象</p>
<ul>
<li>immediate 在侦听器创建时立即触发回调, 第一次调用时旧值为 <code>undefined</code></li>
<li>deep 如果源是对象, 强制深度遍历, 以便在深层级变更时触发回调</li>
<li>flush 调整回调函数的刷新时机, 见 <a href="#watchEffect">watchEffect()</a></li>
<li>onTrack/onTrigger 调试侦听器的依赖, 见 <a href="#watchEffect">watchEffect()</a></li>
<li>once 回调函数只会执行一次, 侦听器将在回调函数首次运行后自动停止, Vue 3.4 支持</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侦听一个 getter 函数</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> state.<span class="property">count</span>,</span><br><span class="line">  <span class="function">(<span class="params">newVal, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当侦听 getter 函数, 回调函数只在此函数的返回值变化时才会触发, 监听深层级变更时触发需要设置 &#123;deep: true&#125;</span></span><br><span class="line">  <span class="comment">// 当前侦听一个响应式对象, 默认自动开启深层级模式</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">once</span>: <span class="literal">true</span>, <span class="comment">// 侦听器只会执行一次后自动停止</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侦听一个 ref</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">count, prevCount</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侦听多个源</span></span><br><span class="line"><span class="keyword">const</span> stop = <span class="title function_">watch</span>([fooRef, barRef], <span class="function">(<span class="params">[foo, bar], [prevFoo, prevBar]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* */</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 停止侦听器</span></span><br><span class="line"><span class="title function_">stop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 副作用清理</span></span><br><span class="line"><span class="title function_">watch</span>(id, <span class="keyword">async</span> (newValue, oldValue, onCleanup) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; response, cancel &#125; = <span class="title function_">doAsyncWork</span>(newValue);</span><br><span class="line">  <span class="comment">// 当 id 变化时, cancel 被调用</span></span><br><span class="line">  <span class="comment">// 取消之前的未完成的请求</span></span><br><span class="line">  <span class="title function_">onCleanup</span>(cancel);</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="与-watchEffect-的区别"><a href="#与-watchEffect-的区别" class="headerlink" title="与 watchEffect() 的区别"></a>与 <a href="#watchEffect">watchEffect()</a> 的区别</h5><ul>
<li>惰性执行副作用</li>
<li>更具体地说明应触发侦听器重新运行的状态</li>
<li>访问被侦听状态的先前值和当前值</li>
<li>侦听多个源</li>
</ul>
<h3 id="响应式-工具"><a href="#响应式-工具" class="headerlink" title="响应式: 工具"></a>响应式: 工具</h3><h4 id="isRef"><a href="#isRef" class="headerlink" title="isRef()"></a>isRef()</h4><p>检查某个值是否是 ref</p>
<h4 id="unref"><a href="#unref" class="headerlink" title="unref()"></a>unref()</h4><p>如果参数是 ref, 则返回 ref 指向的内部值, 否则返回参数本身. 是 <code>isRef(val) ? val.value : val</code> 的一个语法糖</p>
<h4 id="toRef"><a href="#toRef" class="headerlink" title="toRef()"></a>toRef()</h4><p>将值、refs 或 getters 规范化为 refs(Vue 3.3 支持)</p>
<p>基于响应式对象上的一个属性, 新创建一个对应的 ref, 此 ref 与其源属性保持同步, 改变源属性的值将更新 ref 的值, 反之亦然</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> fooRef = <span class="title function_">toRef</span>(state, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="comment">// 更改 ref 会更新源属性</span></span><br><span class="line">fooRef.<span class="property">value</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">foo</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 更改源属性会更新 ref</span></span><br><span class="line">state.<span class="property">foo</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fooRef.<span class="property">value</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h4 id="toValue"><a href="#toValue" class="headerlink" title="toValue()"></a>toValue()</h4><blockquote>
<p>Vue 3.3 支持</p>
</blockquote>
<p>将值、refs 或 getters 规范化为值, 与 unref() 类似, 不同的是此函数也会规范化 getter 函数, 如果参数是一个 getter, 它将会被调用并且返回它的返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; toValue, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="title function_">toValue</span>(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">toValue</span>(<span class="title function_">ref</span>(<span class="number">1</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">toValue</span>(<span class="function">() =&gt;</span> <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h4 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs()"></a>toRefs()</h4><blockquote>
<p>方便消费组件可以在不丢失响应性的情况下对返回的对象进行分解/扩散</p>
</blockquote>
<p>将一个响应式对象转换为一个普通对象, 这个普通对象的每个属性都指向源对象相应属性的 ref, 每个单独的 ref 都是使用 <code>toRef()</code> 创建的</p>
<ul>
<li>toRefs 在调用时只为源对象上的可以枚举的属性创建 ref, 如果为可能还不存在的属性创建 ref 时, 使用 toRef</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> stateAsRefs = <span class="title function_">toRefs</span>(state);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">stateAsRefs 的类型:</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  foo: Ref&lt;number&gt;,</span></span><br><span class="line"><span class="comment">  bar: Ref&lt;number&gt;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ref 和原始 property 已经 &quot;链接&quot; 起来了</span></span><br><span class="line">state.<span class="property">foo</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stateAsRefs.<span class="property">foo</span>.<span class="property">value</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">stateAsRefs.<span class="property">foo</span>.<span class="property">value</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">foo</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h4 id="isProxy"><a href="#isProxy" class="headerlink" title="isProxy()"></a>isProxy()</h4><p>检查一个对象是否由 <code>reactive()</code>, <code>readonly()</code>, <code>shallowReactive()</code>, <code>shallowReadonly()</code> 创建的代理</p>
<h4 id="isReactive"><a href="#isReactive" class="headerlink" title="isReactive()"></a>isReactive()</h4><p>检查一个对象是否由 <code>reactive()</code>, <code>shallowReactive()</code> 创建的代理</p>
<h4 id="isReadonly"><a href="#isReadonly" class="headerlink" title="isReadonly()"></a>isReadonly()</h4><p>检查对象是否是由 <code>readonly()</code>, <code>shallowReadonly()</code> 创建的只读代理, 只读对象的属性可以更改, 但不能通过传入的对象直接赋值</p>
<h3 id="响应式-进阶"><a href="#响应式-进阶" class="headerlink" title="响应式: 进阶"></a>响应式: 进阶</h3><h4 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef()"></a>shallowRef()</h4><p><a href="#ref">ref()</a> 的浅层作用形式</p>
<ul>
<li>浅层 ref 的内部值将会原样存储和暴露, 并且不会被深层递归地转为响应式</li>
<li>只有对 <code>.value</code> 的访问是响应式的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">shallowRef</span>(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="comment">// 不会触发更改</span></span><br><span class="line">state.<span class="property">value</span>.<span class="property">count</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会触发更新</span></span><br><span class="line">state.<span class="property">value</span> = &#123; <span class="attr">count</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef()"></a>triggerRef()</h4><p>强制触发依赖一个 <code>浅层 ref</code> 的副作用, 通常对浅引用的内部值进行深度变更后使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowRef, watchEffect, triggerRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shallow = <span class="title function_">shallowRef</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立刻执行一次副作用, 输出 hello world</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(shallow.<span class="property">value</span>.<span class="property">name</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改不会触发副作用, ref 是浅层的</span></span><br><span class="line">shallow.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;hello gg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动触发浅层 ref 的副作用, 输出 hello gg</span></span><br><span class="line"><span class="title function_">triggerRef</span>(shallow);</span><br></pre></td></tr></table></figure>

<h4 id="customRef"><a href="#customRef" class="headerlink" title="customRef()"></a>customRef()</h4><blockquote>
<p>它需要一个工厂函数，该函数接收 track 和 trigger 函数作为参数，并且应该返回一个带有 get 和 set 的对象</p>
</blockquote>
<p>创建一个自定义的 ref, 显式声明对其依赖追踪和更新触发的控制方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> /&gt;</span> <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> text = <span class="title function_">useDebouncedRef</span>(<span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; customRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建一个防抖 ref, 只在最后一次 set 调用后的一段固定间隔后再调用</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">useDebouncedRef</span>(<span class="params">value, delay = <span class="number">200</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> timeout;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="title function_">customRef</span>(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">track</span>();</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="built_in">clearTimeout</span>(timeout);</span></span><br><span class="line"><span class="language-javascript">          timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            value = newValue;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">trigger</span>();</span></span><br><span class="line"><span class="language-javascript">          &#125;, delay);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive()  "></a>shallowReactive() <em id="shallowReactive"></em> <!-- markdownlint-disable-line --></h4><p><a href="#reactive">reactive()</a> 的浅层作用形式</p>
<ul>
<li>没有深层级的转换, 浅层响应式对象里只有根级别的属性是响应式的</li>
<li>属性的值会被原样存储和暴露, 值为 ref 的属性不会自动解包</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowReactive, isReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">shallowReactive</span>(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">nested</span>: &#123; <span class="attr">bar</span>: <span class="number">2</span> &#125; &#125;);</span><br><span class="line"><span class="comment">// 更改状态自身的属性是响应式的</span></span><br><span class="line">state.<span class="property">foo</span>++;</span><br><span class="line"><span class="comment">// 嵌套对象不会被转为响应式</span></span><br><span class="line"><span class="title function_">isReactive</span>(state.<span class="property">nested</span>); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 不是响应式的</span></span><br><span class="line">state.<span class="property">nested</span>.<span class="property">bar</span>++;</span><br></pre></td></tr></table></figure>

<h4 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly()"></a>shallowReadonly()</h4><p><a href="#readonly">readonly()</a> 的浅层作用形式</p>
<ul>
<li>没有深层级的转换, 只有根层级的属性变为了只读</li>
<li>属性的值会被原样存储和暴露, 值为 ref 的属性不会自动解包</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowReadonly, isReadonly &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">shallowReadonly</span>(&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">nested</span>: &#123; <span class="attr">bar</span>: <span class="number">2</span> &#125; &#125;);</span><br><span class="line"><span class="comment">// 更改状态自身的属性会失败</span></span><br><span class="line">state.<span class="property">foo</span>++;</span><br><span class="line"><span class="comment">// 可以更改嵌套的属性</span></span><br><span class="line"><span class="title function_">isReadonly</span>(state.<span class="property">nested</span>); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 允许更改嵌套的属性</span></span><br><span class="line">state.<span class="property">nested</span>.<span class="property">bar</span>++;</span><br></pre></td></tr></table></figure>

<h4 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw()"></a>toRaw()</h4><blockquote>
<p>可用于临时读取数据而无需承担代理访问/跟踪开销，也可用于写入数据而避免触发更改. 不建议保留对原始对象的持久引用</p>
</blockquote>
<p>返回由 <code>reactive()</code>, <code>readonly()</code>, <code>shallowReactive()</code>, <code>shallowReadonly()</code> 创建的的代理对应的原始对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> reactiveFoo = <span class="title function_">reactive</span>(foo);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toRaw</span>(reactiveFoo) === foo); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw()"></a>markRaw()</h4><p>将一个对象标记为不可转为代理并返回该对象本身</p>
<ul>
<li>有些值不应该是响应式的，例如复杂的第三方类实例或 Vue 组件对象</li>
<li>当渲染具有不可变数据源的大列表时，跳过代理转换可以提高性能</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; markRaw, reactive, isReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="title function_">markRaw</span>(&#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(<span class="title function_">reactive</span>(foo))); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套在其他响应式对象中时也可以使用</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="title function_">reactive</span>(&#123; foo &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(bar.<span class="property">foo</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="effectScope"><a href="#effectScope" class="headerlink" title="effectScope()  "></a>effectScope() <em id='effectscope'></em> <!-- markdownlint-disable-line --></h4><p>创建一个 effect 作用域, 可以捕获其中所创建的响应式副作用(计算属性和侦听器), 这样捕获到的副作用可以一起处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; effectScope, watch, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 effect 作用域</span></span><br><span class="line"><span class="keyword">const</span> scope = <span class="title function_">effectScope</span>();</span><br><span class="line"></span><br><span class="line">scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> doubled = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> counter.<span class="property">value</span> * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">watch</span>(doubled, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(doubled.<span class="property">value</span>, newValue, oldValue)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count: &#x27;</span>, doubled.<span class="property">value</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止当前作用域内的所有 effect</span></span><br><span class="line">scope.<span class="title function_">stop</span>();</span><br></pre></td></tr></table></figure>

<h4 id="getCurrentScope"><a href="#getCurrentScope" class="headerlink" title="getCurrentScope()"></a><a href="#effectscope">getCurrentScope()</a></h4><p>如果存在则返回当前活跃的 effect 作用域</p>
<h4 id="onScopeDispose"><a href="#onScopeDispose" class="headerlink" title="onScopeDispose()"></a><a href="#effectscope">onScopeDispose()</a></h4><blockquote>
<p>此方法可以作为可复用的组合式函数中 <code>onUnmounted</code> 的替代品, 它并不与组件耦合, 因为每个 Vue 组件的 setup 函数也是在一个 effect 作用域中调用的</p>
</blockquote>
<p>在当前活跃的 effect 作用域上注册一个处理回调函数, 当相关的 effect 作用域停止时会调用注册的回调函数, 这个方法可以作为可复用的组合式函数中的 onUnmounted 的替代</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onScopeDispose &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onScopeDispose</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;活跃的 effect 作用域被停止...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><blockquote>
<p>所有生命周期钩子函数必须在组件的 <code>setup()</code> 阶段<strong>同步调用</strong></p>
</blockquote>
<h4 id="VNode-生命周期事件"><a href="#VNode-生命周期事件" class="headerlink" title="VNode 生命周期事件"></a>VNode 生命周期事件</h4><p>VNode 生命周期事件前缀从 <code>hook:</code> 更改为 <code>vue:</code>, 这些事件也可用于 HTML 元素, 和在组件上的用法一样</p>
<ul>
<li><code>vue:</code> 前缀为固定格式, 生命周期事件名可以使用 <code>kebab-case</code> 或者 <code>camelCase</code> 格式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Vue 2.x --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child-component</span> @<span class="attr">hook:mounted</span>=<span class="string">&quot;onMounted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Vue 3.x --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child-component</span> @<span class="attr">vue:mounted</span>=<span class="string">&quot;onMounted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child-component</span> @<span class="attr">vue:before-update</span>=<span class="string">&quot;onBeforeUpdate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 等同于 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child-component</span> @<span class="attr">vue:beforeUpdate</span>=<span class="string">&quot;onBeforeUpdate&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, createApp, defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HelloWorld</span> = <span class="title function_">defineComponent</span>(</span><br><span class="line">  <span class="function">(<span class="params">props, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;hello world component&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* 其它选项 */</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;h1&gt;This is template option.&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;hello-world @vue:before-mount=&quot;helloWorldBeforeMount&quot;&gt;&lt;/hello-world&gt;`</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">helloWorldBeforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;child component hooks before-mount triggered...&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;hello-world&#x27;</span>, <span class="title class_">HelloWorld</span>);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="onBeforeMount"><a href="#onBeforeMount" class="headerlink" title="onBeforeMount()  "></a>onBeforeMount() <em id="onBeforeMount"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>注册一个回调函数在组件 <strong>挂载之前</strong> 调用, 组件已经完成其响应式状态的设置, 但还没有创建 DOM 节点</p>
<h4 id="onMounted"><a href="#onMounted" class="headerlink" title="onMounted()  "></a>onMounted() <em id="onMounted"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>注册一个回调函数在组件 <strong>挂载完成</strong> 之后执行</p>
<ul>
<li>其所有同步子组件都已经被挂载(不包含 <strong>异步组件</strong> 或 <a href="#suspense">&lt;Suspense&gt;</a> 树内的组件)</li>
<li>其自身的 DOM 树已经创建完成并插入了父容器中, 仅当根容器存在于文档中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;el&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> el = <span class="title function_">ref</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(el.<span class="property">value</span>); <span class="comment">// &lt;div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="onBeforeUpdate"><a href="#onBeforeUpdate" class="headerlink" title="onBeforeUpdate()  "></a>onBeforeUpdate() <em id="onBeforeUpdate"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>注册一个回调函数在组件因为响应式状态变更而更新其 DOM 树之前调用</p>
<h4 id="onUpdated"><a href="#onUpdated" class="headerlink" title="onUpdated()  "></a>onUpdated() <em id="onUpdated"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>父组件的更新钩子在其子组件的更新钩子之后调用, 钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>注册一个回调函数在组件因为响应式状态变更而更新其 DOM 树之后调用</p>
<ul>
<li>如果需要在某个特定的状态更改后访问更新后的 DOM, 使用 <a href="#nextTick"><code>nextTick()</code></a></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, onUpdated &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;count&#x27;</span>).<span class="property">textContent</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="onBeforeUnmount"><a href="#onBeforeUnmount" class="headerlink" title="onBeforeUnmount()  "></a>onBeforeUnmount() <em id="onBeforeUnmount"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>注册一个回调函数在组件实例被 <strong>卸载之前</strong> 调用, 此时组件实例还保有全部的功能</p>
<h4 id="onUnmounted"><a href="#onUnmounted" class="headerlink" title="onUnmounted()  "></a>onUnmounted() <em id="onUnmounted"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>注册一个回调函数在组件实例被 <strong>卸载之后</strong> 调用</p>
<ul>
<li>其所有子组件都已经被卸载</li>
<li>所有相关的响应式作用(<strong>渲染作用</strong> 以及 <code>setup()</code> 时创建的计算属性和侦听器)都已经停止</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> intervalId;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/* */</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(intervalId));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="onActivated"><a href="#onActivated" class="headerlink" title="onActivated()  "></a>onActivated() <em id="onActivated"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>注册一个回调函数, 如果组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分, 当组件被插入到 DOM 中时调用</p>
<h4 id="onDeactivated"><a href="#onDeactivated" class="headerlink" title="onDeactivated()  "></a>onDeactivated() <em id="onDeactivated"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>注册一个回调函数, 如果组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分, 当组件从 DOM 中移除时调用</p>
<h4 id="onErrorCaptured"><a href="#onErrorCaptured" class="headerlink" title="onErrorCaptured()  "></a>onErrorCaptured() <em id="onErrorCaptured"></em> <!-- markdownlint-disable-line --></h4><p>注册一个回调函数在捕获了后代组件传递的错误时调用</p>
<h5 id="错误来源"><a href="#错误来源" class="headerlink" title="错误来源"></a>错误来源</h5><ul>
<li>组件渲染</li>
<li>事件处理器</li>
<li>生命周期钩子</li>
<li><code>setup()</code> 函数</li>
<li>侦听器</li>
<li>自定义指令钩子</li>
<li>过渡钩子</li>
</ul>
<p>函数参数包含三个, 通过返回 <code>false</code> 阻止错误继续向上传递</p>
<ul>
<li>错误对象</li>
<li>触发该错误的组件实例</li>
<li>说明错误来源类型的的信息字符串</li>
</ul>
<h5 id="错误传递规则"><a href="#错误传递规则" class="headerlink" title="错误传递规则"></a>错误传递规则</h5><ul>
<li>默认情况下, 所有的错误都会被发送到应用级 <code>app.config.errorHandler</code>(前提已经定义), 这样这些错误都能在一个统一的地方报告给分析服务</li>
<li>如果组件的继承链或组件链上存在多个 <code>errorCaptured</code> 钩子, 对于同一个错误, 这些钩子会被按从底到上的顺序一一调用, 这个过程称为 <strong>向上传递</strong>, 类似于原生 DOM 事件的冒泡机制</li>
<li>如果 <code>errorCaptured</code> 钩子本身抛出了一个错误, 那么这个错误和原来捕获到的错误都将被发送到 <code>app.config.errorHandler</code></li>
<li><code>errorCaptured</code> 钩子可以通过返回 <code>false</code> 来阻止错误继续向上传递</li>
</ul>
<h4 id="onRenderTracked"><a href="#onRenderTracked" class="headerlink" title="onRenderTracked()  "></a>onRenderTracked() <em id="onRenderTracked"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>仅在开发模式下可用, 且在服务器端渲染期间不会被调用</p>
</blockquote>
<p>注册一个回调函数在组件渲染过程中追踪到响应式依赖时调用</p>
<h4 id="onRenderTriggered"><a href="#onRenderTriggered" class="headerlink" title="onRenderTriggered()  "></a>onRenderTriggered() <em id="onRenderTriggered"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>仅在开发模式下可用, 且在服务器端渲染期间不会被调用</p>
</blockquote>
<p>注册一个回调函数在组件的响应式依赖的变更触发了组件渲染时调用</p>
<h4 id="onServerPrefetch"><a href="#onServerPrefetch" class="headerlink" title="onServerPrefetch()  "></a>onServerPrefetch() <em id="onServerPrefetch"></em> <!-- markdownlint-disable-line --></h4><p>注册一个异步函数, 在组件实例在服务器上被渲染之前调用, 可用于执行一些仅存在于服务端的数据抓取过程</p>
<ul>
<li>如果返回一个 Promise, 服务端渲染会在渲染该组件前等待该 Promise 完成</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, onServerPrefetch, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> data = <span class="title function_">ref</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onServerPrefetch</span>(<span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 在服务器上预加载数据</span></span></span><br><span class="line"><span class="language-javascript">    data.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">fetchOnServer</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(!data.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在客户端组件挂载时再进行数据加载</span></span></span><br><span class="line"><span class="language-javascript">      data.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">fetchOnClient</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><h4 id="provide"><a href="#provide" class="headerlink" title="provide()  "></a>provide() <em id="provide"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p><code>provide()</code> 必须在组件的 <code>setup()</code> 阶段同步调用</p>
</blockquote>
<p>允许组件向其所有后代组件注入一个依赖, 不论组件层次深度</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">provide</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;hello world&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 或者是返回一个对象的函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">provide</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; <span class="attr">foo</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">provide</span>(<span class="string">&#x27;count&#x27;</span>, count);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="inject"><a href="#inject" class="headerlink" title="inject()  "></a>inject() <em id="inject"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p><code>inject()</code> 必须在组件的 <code>setup()</code> 阶段同步调用</p>
</blockquote>
<p>注入一个由祖先组件或整个应用(通过 <code>app.provide()</code> ) 提供的值</p>
<ul>
<li><p>第一个参数为注入的 key, 通过遍历父组件链匹配 key 来确定最近的组件所提供的值, 否则将返回 undefined</p>
</li>
<li><p>第二个参数可选, 即在没有匹配到 key 时使用的默认值,</p>
<ul>
<li>如果为一个工厂函数, 则用来返回某些创建复杂的值</li>
<li>如果默认值本身是一个函数, 则需要将 true 作为第三个参数传入, 表明这个函数就是默认值而不是工厂函数</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 注入值的默认方式</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count = <span class="title function_">inject</span>(<span class="string">&#x27;count&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 注入一个值, 如果为空则使用提供的默认值</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> foo = <span class="title function_">inject</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;default value&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 注入一个值, 如果为空则使用提供的工厂函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> bar = <span class="title function_">inject</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Map</span>());</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 注入一个值, 表明提供的默认值是一个函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> fn = <span class="title function_">inject</span>(<span class="string">&#x27;fn&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="hasInjectionContext"><a href="#hasInjectionContext" class="headerlink" title="hasInjectionContext()"></a>hasInjectionContext()</h4><blockquote>
<p>Vue 3.3 支持</p>
</blockquote>
<p>如果 <code>inject()</code> 可以在错误的地方被调用而不触发警告, 则返回 true. 适用于希望在内部使用 <code>inject()</code> 而不向用户发出警告的库.</p>
<h2 id="选项式-API"><a href="#选项式-API" class="headerlink" title="选项式 API  "></a>选项式 API <em id="optional-api"></em> <!-- markdownlint-disable-line --></h2><p>选项式 API 以 <code>组件实例</code> 的概念为中心(this), 将响应性相关的细节抽象出来, 并强制按照选项来组织代码, 从而对初学者而言更为友好</p>
<h3 id="状态选项"><a href="#状态选项" class="headerlink" title="状态选项"></a>状态选项</h3><h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><blockquote>
<p>以 _ 和 $ 开头的属性不会被组件实例代理, 因为它们可能和 Vue 的内置属性, API 方法冲突</p>
</blockquote>
<p>用于声明组件初始响应式状态的函数</p>
<h4 id="props"><a href="#props" class="headerlink" title="props  "></a>props <em id="props"></em> <!-- markdownlint-disable-line --></h4><p>用于声明组件的 props</p>
<ul>
<li><p>使用字符串数组的简易形式</p>
</li>
<li><p>使用对象的完整形式, 可以对单个 prop 进行更详细的配置</p>
<ul>
<li>type 定义 prop 的类型, 可以为原生构造函数之一</li>
<li>default 为该 prop 指定一个当其没有被传入值或值为 undefined 时的默认值,<br>对象或数组的默认值必须从一个工厂函数返回, 工厂函数也接收原始 prop 对象作为参数</li>
<li>required 定义该 prop 是否必需传入</li>
<li>validator 将 prop 值作为唯一参数传入的自定义验证函数</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 简易形式</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span><br><span class="line">  <span class="comment">// 对象形式</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>, <span class="comment">// 类型检查</span></span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">validator</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">0</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hobbies</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="function">(<span class="params">prop</span>) =&gt;</span> [<span class="string">&#x27;reading&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="computed-1"><a href="#computed-1" class="headerlink" title="computed"></a>computed</h4><p>用于声明在组件实例上暴露的计算属性</p>
<ul>
<li>包含一个只有 getter 函数的方法, 方法名为计算属性的名称</li>
<li>包含一个具有 get 和 set 函数的对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 只读计算属性</span></span><br><span class="line">    <span class="title function_">name</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 可读可写计算属性</span></span><br><span class="line">    <span class="attr">agePlus</span>: &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="variable language_">this</span>.<span class="property">age</span> + val;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><blockquote>
<p>在声明方法时避免使用箭头函数, 因为它们不能通过 this 访问组件实例</p>
</blockquote>
<p>用于声明要混入到组件实例中的方法</p>
<h4 id="watch-1"><a href="#watch-1" class="headerlink" title="watch"></a><a href="#watch">watch</a></h4><p>用于声明在数据更改时调用的侦听回调</p>
<ul>
<li>普通形式</li>
<li>对象形式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// 侦听根级属性</span></span><br><span class="line">    <span class="title function_">age</span>(<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(val, oldVal);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 字符串方法名称</span></span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;otherMethod&#x27;</span>,</span><br><span class="line">    <span class="comment">// 深度侦听属性</span></span><br><span class="line">    <span class="attr">c</span>: &#123;</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">val, oldVal</span>) &#123;&#125;,</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      <span class="title function_">onTrack</span>(<span class="params">e</span>) &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 侦听单个嵌套属性</span></span><br><span class="line">    <span class="string">&#x27;c.d&#x27;</span>: <span class="keyword">function</span> (<span class="params">val, oldVal</span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">// 该回调函数在侦听开始之后立即调用</span></span><br><span class="line">    <span class="attr">e</span>: &#123;</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params">val, oldVal</span>) &#123;&#125;,</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 回调数组, 将会被逐一调用</span></span><br><span class="line">    <span class="attr">f</span>: [</span><br><span class="line">      <span class="string">&#x27;handler&#x27;</span>,</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">handle2</span>(<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;handle2 triggered&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="keyword">function</span> <span class="title function_">handle3</span>(<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;handle3 triggered&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="emits"><a href="#emits" class="headerlink" title="emits  "></a>emits <em id="emits"></em> <!-- markdownlint-disable-line --></h4><p>用于声明由组件触发的自定义事件</p>
<ul>
<li>使用字符串数组的简易形式</li>
<li>使用对象的完整形式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 简易形式</span></span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;check&#x27;</span>],</span><br><span class="line">  <span class="comment">// 对象形式</span></span><br><span class="line">  <span class="attr">emits</span>: &#123;</span><br><span class="line">    <span class="comment">// 没有验证函数</span></span><br><span class="line">    <span class="attr">click</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 具有验证函数</span></span><br><span class="line">    <span class="attr">submit</span>: <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (payload.<span class="property">email</span> &amp;&amp; payload.<span class="property">password</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`Invalid submit event payload!`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;check&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h4><blockquote>
<p>保持私有的内部状态或方法, 以避免紧耦合</p>
</blockquote>
<p>用于声明当组件实例被父组件通过模板引用访问时暴露的公共属性, 当使用 expose 时, 只有显式列出的属性将在组件实例上暴露</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">expose</span>: [<span class="string">&#x27;publicProp&#x27;</span>, <span class="string">&#x27;publicMethod&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="渲染选项"><a href="#渲染选项" class="headerlink" title="渲染选项"></a>渲染选项</h3><h4 id="template"><a href="#template" class="headerlink" title="template"></a>template</h4><blockquote>
<p>通过 <code>template</code> 选项提供的模板将会在运行时即时编译</p>
</blockquote>
<p>用于声明组件的字符串模板</p>
<ul>
<li>如果字符串以 <code>#</code> 开头, 它将被用作 <code>querySelector</code> 的选择器, 并使用所选中元素的 <code>innerHTML</code> 作为模板字符串</li>
<li>如果存在 <code>render</code> 选项, 则 <code>template</code> 选项将被忽略</li>
<li>如果应用的根组件不含任何 <code>template</code> 或 <code>render</code> 选项, Vue 将尝试使用所挂载元素的 <code>innerHTML</code> 来作为模板</li>
</ul>
<h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><blockquote>
<p><code>render</code> 具有比 <code>template</code> 更高的优先级</p>
</blockquote>
<p>用于编程式地创建组件虚拟 DOM 树的函数</p>
<h4 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h4><p>用于配置组件模板的运行时编译选项, 支持与应用级 <code>app.config.compilerOptions</code> 相同的选项, 并针对当前组件有更高的优先级</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;#tpl&#x27;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;, [<span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;This is tag p&#x27;</span>), <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)]);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">compilerOptions</span>: &#123;</span><br><span class="line">    <span class="attr">delimiters</span>: [<span class="string">&#x27;&#123;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#125;&#x27;</span>],</span><br><span class="line">    <span class="attr">comments</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">isCustomElement</span>(<span class="params">tag</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> tag.<span class="title function_">startsWith</span>(<span class="string">&#x27;icon-&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="生命周期选项"><a href="#生命周期选项" class="headerlink" title="生命周期选项"></a>生命周期选项</h3><blockquote>
<p><a href="#composition-api">组合式 API</a> 中的 <code>setup()</code> 钩子函数会在所有 <a href="#optional-api">选项式 API</a> 钩子之前调用</p>
</blockquote>
<h4 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h4><p>在组件实例初始化完成之后立即调用</p>
<h4 id="created"><a href="#created" class="headerlink" title="created"></a>created</h4><p>在组件实例处理完所有与状态相关的选项后调用, 此时挂载阶段还未开始, <code>$el</code> 属性仍不可用</p>
<h4 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a><a href="#onBeforeMount">beforeMount</a></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>在组件被 <strong>挂载之前</strong> 调用, 组件已经完成了其响应式状态的设置, 但还没有创建 DOM 节点, 将首次执行 DOM 渲染过程</p>
<h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a><a href="#onMounted">mounted</a></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>在组件被 <strong>挂载之后</strong> 调用</p>
<h4 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a><a href="#onBeforeUpdate">beforeUpdate</a></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>在组件因为响应式状态变更而更新其 DOM 树之前调用</p>
<h4 id="updated"><a href="#updated" class="headerlink" title="updated"></a><a href="#onUpdated">updated</a></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>在组件因为响应式状态变更而更新其 DOM 树之后调用</p>
<h4 id="beforeUnmount"><a href="#beforeUnmount" class="headerlink" title="beforeUnmount"></a><a href="#onBeforeUnmount">beforeUnmount</a></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>在组件实例被 <strong>卸载之前</strong> 调用</p>
<h4 id="unmounted"><a href="#unmounted" class="headerlink" title="unmounted"></a><a href="#onUnmounted">unmounted</a></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>在组件实例被 <strong>卸载之后</strong> 调用</p>
<h4 id="activated"><a href="#activated" class="headerlink" title="activated"></a><a href="#onActivated">activated</a></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>如果组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分, 当组件被插入到 DOM 中时调用</p>
<h4 id="deactivated"><a href="#deactivated" class="headerlink" title="deactivated"></a><a href="#onDeactivated">deactivated</a></h4><blockquote>
<p>钩子函数在服务器端渲染期间不会被调用</p>
</blockquote>
<p>如果组件实例是 <code>&lt;KeepAlive&gt;</code> 缓存树的一部分, 当组件从 DOM 中移除时调用</p>
<h4 id="errorCaptured"><a href="#errorCaptured" class="headerlink" title="errorCaptured"></a><a href="#onErrorCaptured">errorCaptured</a></h4><p>在捕获了后代组件传递的错误时调用</p>
<h4 id="renderTracked"><a href="#renderTracked" class="headerlink" title="renderTracked"></a><a href="#onRenderTracked">renderTracked</a></h4><blockquote>
<p>仅在开发模式下可用, 且在服务器端渲染期间不会被调用</p>
</blockquote>
<p>在一个响应式依赖被组件的渲染作用追踪后调用</p>
<h4 id="renderTriggered"><a href="#renderTriggered" class="headerlink" title="renderTriggered"></a><a href="#onRenderTriggered">renderTriggered</a></h4><blockquote>
<p>仅在开发模式下可用, 且在服务器端渲染期间不会被调用</p>
</blockquote>
<p>在一个响应式依赖被组件触发了重新渲染之后调用</p>
<h4 id="serverPrefetch"><a href="#serverPrefetch" class="headerlink" title="serverPrefetch"></a><a href="#onServerPrefetch">serverPrefetch</a></h4><p>在组件实例在服务器上被渲染之前要完成的异步函数</p>
<h3 id="组合选项"><a href="#组合选项" class="headerlink" title="组合选项"></a>组合选项</h3><h4 id="provide-1"><a href="#provide-1" class="headerlink" title="provide"></a><a href="#provide">provide</a></h4><p>用于提供可以被后代组件注入的值</p>
<h4 id="inject-1"><a href="#inject-1" class="headerlink" title="inject"></a><a href="#inject">inject</a></h4><p>用于声明要通过从上层提供方匹配并注入当前组件的属性</p>
<ul>
<li>一个字符串数组</li>
<li>一个对象<ul>
<li>匹配可注入的 key(String 或者 Symbol)</li>
<li>一个对象<ul>
<li>from 属性表示匹配可用的注入的来源</li>
<li>default 属性用作候补值, 和 props 的默认值类似</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 字符串数组</span></span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">  <span class="comment">// 对象形式指定默认值</span></span><br><span class="line">  <span class="attr">inject</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123; <span class="attr">default</span>: <span class="string">&#x27;foo&#x27;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 对象形式指定来源</span></span><br><span class="line">  <span class="attr">inject</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123;</span><br><span class="line">      <span class="attr">from</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 对象形式使用工厂函数</span></span><br><span class="line">  <span class="attr">inject</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123;</span><br><span class="line">      <span class="attr">from</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h4><blockquote>
<p>Mixin 钩子的调用顺序与提供它们的选项顺序相同, 且会在组件自身的钩子前调用</p>
</blockquote>
<p>一个包含组件选项对象的数组, 这些选项都将被混入到当前组件的实例中(不推荐使用)</p>
<h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><blockquote>
<p><code>extends</code> 和 <code>mixin</code> 实现上几乎相同, 但是表达的目标不同, <code>mixins</code> 选项基本用于组合功能, <code>extends</code> 一般更关注继承关系, 为<a href="#optional-api">选项式 API</a>设计的</p>
</blockquote>
<p>要继承的 <strong>基类</strong> 组件, 同 <code>mixins</code> 一样, 所有选项都将使用相关的策略进行合并, 不会处理 setup() 钩子的合并</p>
<h3 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h3><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><blockquote>
<p>使用 name 选项可以覆盖推导出的名称, 或是在没有推导出名字是显式提供一个</p>
</blockquote>
<p>用于显式声明组件展示时的名称</p>
<ul>
<li>在组件自己的模板中递归引用自己时</li>
<li>在 Vue 开发者工具中的组件树显示时</li>
<li>在组件抛出的警告追踪栈信息中显示时</li>
</ul>
<h5 id="场景-1"><a href="#场景-1" class="headerlink" title="场景 1"></a>场景 1</h5><p>使用单文件组件时, 组件会根据其文件名推导出其名称, 例如 <code>MyComponent.vue</code> 的文件会推导出显式名称为 <code>MyComponent</code></p>
<h5 id="场景-2"><a href="#场景-2" class="headerlink" title="场景 2"></a>场景 2</h5><p>当使用 <code>app.component</code> 注册全局组件时, 这个全局 ID 会自动设置为其名称</p>
<h4 id="inheritAttrs"><a href="#inheritAttrs" class="headerlink" title="inheritAttrs  "></a>inheritAttrs <em id="inheritAttrs"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>默认情况下, 父组件传递的没有被子组件解析为 <code>props</code> 的 <code>attributes</code> 绑定会被透传</p>
</blockquote>
<p>用于控制是否启用默认的组件 <code>attribute</code> 透传行为, 默认为 true</p>
<ul>
<li>使用 <a href="#script-setup">&lt;script setup&gt;</a> 的<a href="#composition-api">组合式 API</a> 中声明这个选项时, 需要一个额外的 <code>&lt;script&gt;</code> 块</li>
<li>Vue 3.3 支持, 使用 <a href="#defineOptions">defineOptions</a> 声明</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单独 script 块声明 inheritAttrs 选项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SFC 组合式 API --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> msg = <span class="string">&#x27;hello world&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;input&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 暴露外部可访问的公共属性</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">defineExpose</span>(&#123; msg &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// vue 3.3 使用宏函数定义其它杂项</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">defineOptions</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Comp-A&#x27;</span>, <span class="attr">inheritAttrs</span>: <span class="literal">false</span> &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="components"><a href="#components" class="headerlink" title="components"></a>components</h4><p>用于注册对当前组件实例可用的组件的配置对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Foo</span>,</span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: &#123;</span><br><span class="line">      <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;Register local components...&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="directives"><a href="#directives" class="headerlink" title="directives"></a><a href="#directive">directives</a></h4><p>用于注册对当前组件实例可用的指令的配置对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="comment">// 在模板中启用 v-focus 指令</span></span><br><span class="line">    <span class="attr">focus</span>: &#123;</span><br><span class="line">      <span class="comment">/* 自定义指令的钩子函数配置 */</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="组件实例"><a href="#组件实例" class="headerlink" title="组件实例"></a>组件实例</h3><p>除了 $data 下的嵌套属性外, 其它的属性都是只读的</p>
<h4 id="data-1"><a href="#data-1" class="headerlink" title="$data"></a>$data</h4><p>从 <code>data</code> 选项函数返回的对象, 会被组件赋为响应式, 组件实例将会代理其数据对象的属性访问</p>
<h4 id="props-1"><a href="#props-1" class="headerlink" title="$props"></a><a href="#props">$props</a></h4><p>表示组件当前已解析的 <code>props</code> 对象</p>
<h4 id="el"><a href="#el" class="headerlink" title="$el"></a>$el</h4><p>该组件实例管理的 DOM 根节点, $el 直到组件 <strong>挂载完成</strong> 之前都是 undefined</p>
<h4 id="options"><a href="#options" class="headerlink" title="$options"></a>$options</h4><p>已解析的用于实例化当前组件的组件选项</p>
<ul>
<li>全局 mixin</li>
<li>组件 <code>extends</code> 的基组件</li>
<li>组件级 mixin</li>
</ul>
<h4 id="parent"><a href="#parent" class="headerlink" title="$parent"></a>$parent</h4><p>当前组件可能存在的父组件实例, 如果当前组件是顶层组件, 则为 null</p>
<h4 id="root"><a href="#root" class="headerlink" title="$root"></a>$root</h4><p>当前组件树的根组件实例, 如果当前组件实例没有父组件, 则为本身</p>
<h4 id="slots"><a href="#slots" class="headerlink" title="$slots"></a><a href="#v-slot">$slots</a></h4><p>表示父组件传入 <strong>插槽</strong> 的对象</p>
<h4 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h4><p>包含 DOM 元素和组件实例的对象, 通过 <strong>模板引用</strong> 注册</p>
<h4 id="attrs"><a href="#attrs" class="headerlink" title="$attrs"></a>$attrs</h4><p>包含了组件所有透传 <code>attributes</code> 的对象</p>
<h4 id="watch-2"><a href="#watch-2" class="headerlink" title="$watch()"></a><a href="#watch">$watch()</a></h4><p>用于命令式地创建侦听器的 API</p>
<h4 id="emit"><a href="#emit" class="headerlink" title="$emit()"></a>$emit()</h4><p>在当前组件触发一个自定义事件, 任何额外的参数都将传递给事件监听器的回调函数</p>
<h4 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="$forceUpdate()"></a>$forceUpdate()</h4><p>强制当前组件重新渲染, 仅仅影响实例本身和插入插槽内容的子组件</p>
<h4 id="nextTick-1"><a href="#nextTick-1" class="headerlink" title="$nextTick()"></a><a href="#nextTick">$nextTick()</a></h4><blockquote>
<p>和全局的 <code>nextTick</code> 的区别是传递给 <code>this.$nextTick()</code> 的回调函数会带上绑定当前组件实例上下文的 <code>this</code></p>
</blockquote>
<p>绑定在实例上的 <code>nextTick()</code> 函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="内置内容"><a href="#内置内容" class="headerlink" title="内置内容"></a>内置内容</h2><h3 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h3><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>更新元素的文本内容</p>
<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>更新元素的 <code>innerHTML</code></p>
<h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p>基于表达式值的真假来改变元素的可见性, 通过设置内联样式的 <code>display</code> CSS 属性来工作</p>
<h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>基于表达式值的真假来条件性地渲染元素或者模板片段, 同时使用 <code>v-if</code> 和 <code>v-for</code> 时, 前者的优先级更高</p>
<h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4><p>表示 <code>v-if</code> 或 <code>v-if</code> / <code>v-else-if</code> 链式调用的块</p>
<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>基于原始数据多次渲染元素或模板块</p>
<h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><blockquote>
<p>和原生 DOM 事件不一样, 组件触发的事件<strong>没有冒泡机制</strong>, 只能监听直接子组件触发的事件, 平级组件或嵌套组件间通信, 应使用一个外部事件总线或<a href="#store">全局状态管理</a>方案</p>
</blockquote>
<p>给元素绑定事件监听器, 缩写 <code>@</code>, 事件名称可以使用 <code>camelCase</code> 或 <code>kebab-case</code> 形式会被自动格式转换</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;increaseBy&#x27;, 1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MyComponent</span> @<span class="attr">increase-by</span>=<span class="string">&quot;(n) =&gt; count += n&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="内联事件处理器"><a href="#内联事件处理器" class="headerlink" title="内联事件处理器"></a>内联事件处理器</h5><p>事件被触发时执行的内联 javascript 语句(与 onClick 类似)</p>
<ul>
<li><p>需要处理原生 DOM 事件时, 手动传入一个特殊的 $event 变量, 或者使用内联箭头函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内联事件处理器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;log(&#x27;click event&#x27;, $event)&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;(event) =&gt; log(&#x27;click event&#x27;, event)&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="方法事件处理器"><a href="#方法事件处理器" class="headerlink" title="方法事件处理器"></a>方法事件处理器</h5><p>一个指向组件上定义的方法的属性名或是路径</p>
<ul>
<li>自动接收原生 DOM 事件并立即触发执行</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法事件处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;greet&quot;</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">const name = ref(&#x27;Hello Greet&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">function greet(evt)&#123;</span></span><br><span class="line"><span class="comment">  console.log(name.value);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><ul>
<li>.stop 调用 <code>event.stopPropagation()</code></li>
<li>.prevent 调用 <code>event.preventDefault()</code></li>
<li>.capture 在捕获模式添加事件监听器</li>
<li>.self 只有事件从元素本身发出才触发处理函数</li>
<li>.{keyAlias} 只有在某些按键下触发处理函数</li>
<li>.once 最多触发一次处理函数</li>
<li>.passive 通过 <code>&#123;passive: true&#125;</code> 附加一个 DOM 事件</li>
</ul>
<h5 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h5><ul>
<li>.enter</li>
<li>.tab</li>
<li>.delete 捕获 delete 和 backspace 两个按键</li>
<li>.esc</li>
<li>.space</li>
<li>.up</li>
<li>.down</li>
<li>.left 只在鼠标左键事件触发处理函数</li>
<li>.right 只在鼠标右键事件触发处理函数</li>
<li>.middle 只在鼠标中键事件触发处理函数</li>
</ul>
<h5 id="系统按键修饰符"><a href="#系统按键修饰符" class="headerlink" title="系统按键修饰符"></a>系统按键修饰符</h5><ul>
<li>.ctrl</li>
<li>.alt</li>
<li>.shift</li>
<li>.meta</li>
<li>.exact 允许控制触发一个事件所需的确定组合的系统按键修饰符</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当按下 ctrl 时, 即使同时按下 alt 或者 shift 也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅当按下 ctrl 且未按任何其它键时才会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind  "></a>v-bind <em id="v-bind"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p><code>v-bind</code> 的绑定顺序会影响渲染结果</p>
</blockquote>
<p>动态的绑定一个或多个 attribute, 也可以是组件的 prop, 缩写 <code>:</code> 或 <code>.</code>(当使用 <code>.prop</code> 修饰符)</p>
<h5 id="绑定修饰符"><a href="#绑定修饰符" class="headerlink" title="绑定修饰符"></a>绑定修饰符</h5><ul>
<li>.camel 将 <code>kebab-case</code> 命名的属性转变为 <code>camelCase</code> 命名</li>
<li>.prop 强制绑定为 DOM property, 3.2 支持</li>
<li>.attr 强制绑定为 DOM attribute, 3.2 支持</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">:view-box.camel</span>=<span class="string">&quot;viewBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 .prop 修饰符，会从组件选项 props 中移除, </span></span><br><span class="line"><span class="comment">  以 .[attr] 形式出现在组件 attrs 参数中并且**不会显示**在 DOM 上 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 .attr 修饰符，会从组件选项 props 中移除, </span></span><br><span class="line"><span class="comment">  以 ^[attr] 形式出现在组件 attrs 参数中并且**会显示**在 DOM 上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:someProperty.prop</span>=<span class="string">&quot;someObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">.someProperty</span>=<span class="string">&quot;someObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="同名缩写"><a href="#同名缩写" class="headerlink" title="同名缩写"></a>同名缩写</h5><blockquote>
<p>Vue 3.4 支持</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 缩写形式的动态 attribute, 扩展为 :src=&quot;src&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model  "></a>v-model <em id="v-model"></em> <!-- markdownlint-disable-line --></h4><p>在表单输入元素或组件上创建双向绑定</p>
<ul>
<li>&lt;input&gt;</li>
<li>&lt;select&gt;</li>
<li>&lt;textarea&gt;</li>
<li>components</li>
</ul>
<h5 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h5><ul>
<li>.lazy 监听 change 事件而不是 input 事件</li>
<li>.number 将输入的合法字符换转为数字</li>
<li>.trim 移除输入内容两端空格</li>
</ul>
<h5 id="版本迭代"><a href="#版本迭代" class="headerlink" title="版本迭代"></a>版本迭代</h5><ul>
<li><p><a href="#v-bind"><code>v-bind</code></a> 的 <code>.sync</code> 修饰符和组件的 model 选项被<strong>移除</strong>, 使用 <code>v-model</code> 和参数代替</p>
</li>
<li><p>同一组件上可以使用多个 <code>v-model</code> 进行双向绑定</p>
</li>
<li><p>可自定义 <code>v-model</code> 修饰符</p>
</li>
<li><p>自定义组件时 <code>v-model</code> 的 <code>prop</code> 和 <code>event</code> 默认名称已更改</p>
<ul>
<li>prop: <code>value</code> -&gt; <code>modelValue</code></li>
<li>event: <code>input</code> -&gt; <code>update:modelValue</code></li>
</ul>
</li>
</ul>
<h5 id="migration"><a href="#migration" class="headerlink" title="migration"></a>migration</h5><ul>
<li>所有子组件 <code>.sync</code> 修饰符的部分替换为 <code>v-model</code></li>
<li>未带参数的 <code>v-model</code>, 修改子组件的 prop -&gt; <code>modelValue</code>, event -&gt; <code>update:modelValue</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 带参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:title.sync</span>=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 替换为 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:title</span>=<span class="string">&quot;pageTitle&quot;</span> @<span class="attr">update:title</span>=<span class="string">&quot;pageTile = $event&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123; <span class="attr">title</span>: <span class="title class_">String</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:title&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> changePageTitle = <span class="keyword">function</span> (<span class="params">title</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&#x27;update:title&#x27;</span>, title);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 未带参数替换为 v-model --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">v-model</span>=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 以前是`value: String`</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123; <span class="attr">modelValue</span>: <span class="title class_">String</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:modelValue&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> changePageTitle = <span class="keyword">function</span> (<span class="params">title</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, title); <span class="comment">// 以前是 `this.$emit(&#x27;input&#x27;, title)`</span></span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Vue-2-0"><a href="#Vue-2-0" class="headerlink" title="Vue 2.0"></a>Vue 2.0</h5><ul>
<li><code>v-model</code> 只能使用 <code>value</code> 作为 prop, 并监听子组件抛出的 <code>input</code> 事件, 如果使用其他 prop, 必须使用 <code>v-bind.sync</code> 同步</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:value</span>=<span class="string">&quot;pageTitle&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;pageTitle = $event&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 简写方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-model</span>=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">&#x27;value&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;hello value&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Vue-2-2"><a href="#Vue-2-2" class="headerlink" title="Vue 2.2"></a>Vue 2.2</h5><ul>
<li>增加组件选项 <code>model</code>, 允许自定义 <code>v-model</code> 的 prop 和 event, 只能在组件上使用一个 model</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:value</span>=<span class="string">&quot;pageTitle&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;pageTitle = $event&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 简写方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-model</span>=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">model</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">prop</span>: <span class="string">&#x27;title&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">event</span>: <span class="string">&#x27;change&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 这将允许 `value` 属性用于其他用途</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">value</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 使用 `title` 代替 `value` 作为 model 的 prop</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;Default title&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Vue-2-3"><a href="#Vue-2-3" class="headerlink" title="Vue 2.3"></a>Vue 2.3</h5><ul>
<li>增加 <code>.sync</code> 修饰符</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:title</span>=<span class="string">&quot;pageTitle&quot;</span> @<span class="attr">update:title</span>=<span class="string">&quot;pageTitle = $event&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 简写方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:title.sync</span>=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Vue-3-x"><a href="#Vue-3-x" class="headerlink" title="Vue 3.x"></a>Vue 3.x</h5><ul>
<li><code>v-model</code> 默认传递 <code>modelValue</code> prop, 并接收子组件抛出的 <code>update:modelValue</code> 事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 单个 v-model 绑定 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:modelValue</span>=<span class="string">&quot;pageTitle&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">update:modelValue</span>=<span class="string">&quot;pageTitle = $event&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 简写方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-model</span>=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;modelValue&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:modelValue&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 触发事件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, <span class="string">&#x27;hello modelValue&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多个 <code>v-model</code> 绑定</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 多个 v-model 绑定 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:title</span>=<span class="string">&quot;pageTitle&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">update:title</span>=<span class="string">&quot;pageTitle = $event&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:content</span>=<span class="string">&quot;pageContent&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">update:content</span>=<span class="string">&quot;pageContent = $event&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 简写方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-model:title</span>=<span class="string">&quot;pageTitle&quot;</span> <span class="attr">v-model:content</span>=<span class="string">&quot;pageContent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123; <span class="attr">title</span>: <span class="title class_">String</span>, <span class="attr">content</span>: <span class="title class_">String</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:title&#x27;</span>, <span class="string">&#x27;update:content&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;update:title&#x27;</span>, <span class="string">&#x27;hello title&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;update:content&#x27;</span>, <span class="string">&#x27;hello content&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>处理 <code>v-model</code> 修饰符</p>
<ul>
<li>不带参数: 生成的 prop 名称为 <code>modelModifiers</code> 的对象, 包含传入的修饰符</li>
<li>带参数: 生成的 prop 名称为 <code>arg + &#39;Modifiers&#39;</code></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, ref, h, defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v-model 不带参数</span></span><br><span class="line"><span class="comment">// &lt;with-out-args v-model.capitalize=&quot;myText&quot; /&gt;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WithoutArgs</span> = <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;modelValue&#x27;</span>, <span class="string">&#x27;modelModifiers&#x27;</span>],</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update:modelValue&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; emit &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">    <span class="keyword">const</span> emitValue = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">      <span class="keyword">if</span> (props.<span class="property">modelModifiers</span>.<span class="property">capitalize</span>) &#123;</span><br><span class="line">        value = value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, value);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, [</span><br><span class="line">        <span class="string">&#x27;without args &#x27;</span>,</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;input&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">          <span class="attr">placeholder</span>: <span class="string">&#x27;write something...&#x27;</span>,</span><br><span class="line">          <span class="attr">value</span>: props.<span class="property">modelValue</span>,</span><br><span class="line">          <span class="attr">onInput</span>: emitValue,</span><br><span class="line">        &#125;),</span><br><span class="line">      ]);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// v-model 带参数</span></span><br><span class="line"><span class="comment">// &lt;with-args v-model:description.uppercase=&quot;myText&quot; /&gt;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WithArgs</span> = <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;descriptionModifiers&#x27;</span>],</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update:description&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; emit &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">    <span class="keyword">const</span> emitValue = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">      <span class="keyword">if</span> (props.<span class="property">descriptionModifiers</span>.<span class="property">uppercase</span>) &#123;</span><br><span class="line">        value = value.<span class="title function_">toUpperCase</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">emit</span>(<span class="string">&#x27;update:description&#x27;</span>, value);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, [</span><br><span class="line">        <span class="string">&#x27;with args &#x27;</span>,</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;input&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">          <span class="attr">placeholder</span>: <span class="string">&#x27;write something...&#x27;</span>,</span><br><span class="line">          <span class="attr">value</span>: props.<span class="property">description</span>,</span><br><span class="line">          <span class="attr">onInput</span>: emitValue,</span><br><span class="line">        &#125;),</span><br><span class="line">      ]);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> v1 = <span class="title function_">ref</span>(<span class="string">&#x27;hello without args&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> v2 = <span class="title function_">ref</span>(<span class="string">&#x27;hello with args&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> [</span><br><span class="line">      <span class="comment">// 渲染 v-model 不带参数的组件</span></span><br><span class="line">      <span class="title function_">h</span>(<span class="title class_">WithoutArgs</span>, &#123;</span><br><span class="line">        <span class="attr">modelValue</span>: v1.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">modelModifiers</span>: &#123; <span class="attr">capitalize</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        <span class="string">&#x27;onUpdate:modelValue&#x27;</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> (v1.<span class="property">value</span> = value),</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 渲染 v-model 带参数的组件</span></span><br><span class="line">      <span class="title function_">h</span>(<span class="title class_">WithArgs</span>, &#123;</span><br><span class="line">        <span class="attr">description</span>: v2.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">descriptionModifiers</span>: &#123; <span class="attr">uppercase</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        <span class="string">&#x27;onUpdate:description&#x27;</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> (v2.<span class="property">value</span> = value),</span><br><span class="line">      &#125;),</span><br><span class="line">    ];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot  "></a>v-slot <em id="v-slot"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>如果混用了 <strong>具名插槽</strong> 和 <strong>默认插槽</strong>, 则需要为 <strong>默认插槽</strong> 使用显式的 <code>&lt;template&gt;</code> 标签, 直接为组件添加 <code>v-slot</code> 指令将导致编译错误</p>
</blockquote>
<p>用于声明具名插槽或是期望接收 props 的作用域插槽, 缩写 <code>#</code></p>
<h5 id="限制使用"><a href="#限制使用" class="headerlink" title="限制使用"></a>限制使用</h5><p>能够合法在函数参数位置使用的 js 表达式, 支持解构语法. 绑定的值是可选的(只有在给作用域插槽传递 props 才需要)</p>
<ul>
<li>&lt;template&gt;</li>
<li>components(用于带有 prop 的单个默认插槽)</li>
</ul>
<h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><p>组件中包含多个插槽出口, <code>&lt;slot&gt;</code> 内置元素的特殊属性 <code>name</code> 用来给每个插槽分配唯一的 ID 以确定每一处要渲染的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- BaseComponent 组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BaseComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- header 插槽的内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 所有位于顶级的非 template 节点都被隐式地当作默认插槽的内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the first tag p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the second tag p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- footer 插槽的内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BaseComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="动态插槽"><a href="#动态插槽" class="headerlink" title="动态插槽"></a>动态插槽</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态插槽名，支持 `#SlotName` 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>[<span class="attr">dynamicSlotName</span>]&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 等同于 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #[<span class="attr">dynamicSlotName</span>]&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><ul>
<li>默认插槽接收 props, 通过子组件标签上的 <code>v-slot</code> 指令接收一个插槽 props 对象</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">text</span>=<span class="string">&quot;hello text&quot;</span> <span class="attr">message</span>=<span class="string">&quot;hello message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单个默认作用域插槽, 直接使用子组件标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">v-slot</span>=<span class="string">&quot;slotScope&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;slotScope.text&#125;&#125; - &#123;&#123;slotScope.message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>具名插槽 props 可以作为 <code>v-slot</code> 指令的值被访问到 <code>v-slot:name=&quot;slotScope&quot;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 具名作用域插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>=<span class="string">&quot;headerScope&quot;</span>&gt;</span> &#123;&#123; headerScope &#125;&#125; <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用显式的默认插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; message &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><p>跳过该元素及其所有子元素的编译</p>
<h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>仅渲染元素和组件一次, 并跳过之后的更新</p>
<h4 id="v-memo"><a href="#v-memo" class="headerlink" title="v-memo"></a>v-memo</h4><blockquote>
<p>Vue 3.2 支持</p>
</blockquote>
<p>缓存一个模板的子树, 根据传入的依赖值数组的比较结果控制子树的更新</p>
<ul>
<li>如果依赖值为空数组, 功能等同于 <code>v-once</code></li>
<li>结合 <code>v-for</code> 使用, 必须确保和 <code>v-for</code> 用在同一个元素上, 否则无效</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-memo</span>=<span class="string">&quot;[valueA, valueB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-for | v-memo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">v-memo</span>=<span class="string">&quot;[item.id === selected]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>ID: &#123;&#123; item.id &#125;&#125; - selected: &#123;&#123; item.id === selected &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>more child nodes<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4><blockquote>
<p>该指令只在没有构建步骤的环境下需要使用</p>
</blockquote>
<p>用于隐藏尚未完成编译的 DOM 模板</p>
<h3 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件  "></a>内置组件 <em id="built-in-component"></em> <!-- markdownlint-disable-line --></h3><blockquote>
<p>内置组件无需注册便可以直接在模板中使用，同时也支持 <code>tree-shake</code>; 仅在使用时才会包含在构建中<br>在 <a href="#rendering-func"><strong>渲染函数</strong></a> 中使用内置组件时, 需要显式引入</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; h, <span class="title class_">KeepAlive</span>, <span class="title class_">Transition</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title class_">Transition</span>, &#123; <span class="attr">mode</span>: <span class="string">&#x27;out-in&#x27;</span> &#125; <span class="comment">/* ... */</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="lt-Transition-gt"><a href="#lt-Transition-gt" class="headerlink" title="&lt;Transition&gt;"></a>&lt;Transition&gt;</h4><p>为单个元素或组件提供动画过渡效果</p>
<h5 id="lt-Transition-gt-props"><a href="#lt-Transition-gt-props" class="headerlink" title="&lt;Transition&gt; props"></a>&lt;Transition&gt; props</h5><ul>
<li>name</li>
<li>css</li>
<li>type</li>
<li>duration</li>
<li>mode</li>
<li>appear</li>
<li>enterFromClass</li>
<li>enterActiveClass</li>
<li>enterToClass</li>
<li>appearFromClass</li>
<li>appearActiveClass</li>
<li>appearToClass</li>
<li>leaveFromClass</li>
<li>leaveActiveClass</li>
<li>leaveToClass</li>
</ul>
<h5 id="lt-Transition-gt-事件"><a href="#lt-Transition-gt-事件" class="headerlink" title="&lt;Transition&gt; 事件"></a>&lt;Transition&gt; 事件</h5><ul>
<li>@before-enter</li>
<li>@before-leave</li>
<li>@enter</li>
<li>@leave</li>
<li>@appear</li>
<li>@after-enter</li>
<li>@after-leave</li>
<li>@after-appear</li>
<li>@enter-cancelled</li>
<li>@leave-cancelled(v-show only)</li>
<li>@appear-cancelled</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单个元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件钩子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;transition-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Transition</span> @<span class="attr">after-enter</span>=<span class="string">&quot;transitionComplete&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-TransitionGroup-gt"><a href="#lt-TransitionGroup-gt" class="headerlink" title="&lt;TransitionGroup&gt;"></a>&lt;TransitionGroup&gt;</h4><p>为列表中的多个元素或组件提供过渡效果</p>
<h5 id="lt-TransitionGroup-gt-props"><a href="#lt-TransitionGroup-gt-props" class="headerlink" title="&lt;TransitionGroup&gt; props"></a>&lt;TransitionGroup&gt; props</h5><ul>
<li>tag 如果未定义, 则渲染为片段(fragment)</li>
<li>moveClass 用于自定义过渡期间被应用的 CSS class, 使用 <code>kebab-case</code> 格式</li>
</ul>
<h5 id="lt-TransitionGroup-gt-事件"><a href="#lt-TransitionGroup-gt-事件" class="headerlink" title="&lt;TransitionGroup&gt; 事件"></a>&lt;TransitionGroup&gt; 事件</h5><p><code>&lt;TransitionGroup&gt;</code> 抛出与 <code>&lt;Transition&gt;</code> 相同的事件</p>
<h4 id="lt-KeepAlive-gt"><a href="#lt-KeepAlive-gt" class="headerlink" title="&lt;KeepAlive&gt;"></a>&lt;KeepAlive&gt;</h4><p>缓存包裹在其中的动态切换组件</p>
<h5 id="lt-KeepAlive-gt-props"><a href="#lt-KeepAlive-gt-props" class="headerlink" title="&lt;KeepAlive&gt; props"></a>&lt;KeepAlive&gt; props</h5><ul>
<li>include 哪些组件实例可以被缓存</li>
<li>exclude 哪些组件实例不被缓存</li>
<li>max 最多可以缓存多少组件实例</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">include</span>=<span class="string">&quot;a,b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- regex (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Array (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-Teleport-gt"><a href="#lt-Teleport-gt" class="headerlink" title="&lt;Teleport&gt;"></a>&lt;Teleport&gt;</h4><p>移动实际 DOM 节点(非销毁重建),并保持任何组件实例的活动状态</p>
<h5 id="lt-Teleport-gt-props"><a href="#lt-Teleport-gt-props" class="headerlink" title="&lt;Teleport&gt; props"></a>&lt;Teleport&gt; props</h5><ul>
<li>to 必填项, 指定目标容器, 可以是选择器或实际元素</li>
<li>disabled 值为 true 时, 内容将保留在其原始位置不做移动, 值可动态修改</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 正确 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;#some-id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;.some-class&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;[data-teleport]&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 错误 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;h1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;some-string&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;open = true&quot;</span>&gt;</span>Open Modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;open&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello from the modal!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;open = false&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Teleport</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="lt-Suspense-gt"><a href="#lt-Suspense-gt" class="headerlink" title="&lt;Suspense&gt;  "></a>&lt;Suspense&gt; <em id="suspense"></em> <!-- markdownlint-disable-line --></h4><p>用于协调对组件树中嵌套的异步依赖的处理</p>
<h5 id="lt-Suspense-gt-props"><a href="#lt-Suspense-gt-props" class="headerlink" title="&lt;Suspense&gt; props"></a>&lt;Suspense&gt; props</h5><ul>
<li>timeout 渲染新内容耗时超时时间</li>
</ul>
<h5 id="lt-Suspense-gt-事件"><a href="#lt-Suspense-gt-事件" class="headerlink" title="&lt;Suspense&gt; 事件"></a>&lt;Suspense&gt; 事件</h5><ul>
<li>@pending 在 suspense 进入挂起状态时触发</li>
<li>@resolve 在 default 插槽完成获取新内容时触发</li>
<li>@fallback 在 fallback 插槽的内容显示时触发</li>
</ul>
<h5 id="lt-Suspense-gt-插槽"><a href="#lt-Suspense-gt-插槽" class="headerlink" title="&lt;Suspense&gt; 插槽"></a>&lt;Suspense&gt; 插槽</h5><ul>
<li>#default</li>
<li>#fallback</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 具有深层异步依赖的组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Dashboard</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在 #fallback 插槽中显示 “正在加载中” --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span> Loading... <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="内置特殊元素"><a href="#内置特殊元素" class="headerlink" title="内置特殊元素"></a>内置特殊元素</h3><blockquote>
<p><code>&lt;component&gt;</code>, <code>&lt;slot&gt;</code>, <code>&lt;template&gt;</code> 具有类似组件的特性, 也是模板语法的一部分. 但它们并非真正的组件<br>同时在模板编译期间会被编译掉. 因此, 它们通常在模板中使用小写字母</p>
</blockquote>
<h4 id="lt-component-gt"><a href="#lt-component-gt" class="headerlink" title="&lt;component&gt;"></a>&lt;component&gt;</h4><p>用于渲染动态组件或元素的 <code>元组件</code></p>
<h5 id="lt-component-gt-props"><a href="#lt-component-gt-props" class="headerlink" title="&lt;component&gt; props"></a>&lt;component&gt; props</h5><ul>
<li>is 要渲染的实际组件由 <code>is</code> prop 决定<ul>
<li>如果是字符串时, 可以是 HTML 标签名或者组件的注册名</li>
<li>或者是直接绑定到组件的定义</li>
</ul>
</li>
</ul>
<h4 id="lt-slot-gt"><a href="#lt-slot-gt" class="headerlink" title="&lt;slot&gt;"></a>&lt;slot&gt;</h4><p>表示模板中的插槽内容出口</p>
<h5 id="lt-slot-gt-props"><a href="#lt-slot-gt-props" class="headerlink" title="&lt;slot&gt; props"></a>&lt;slot&gt; props</h5><ul>
<li>name 指定插槽名, 缺少时将会渲染默认插槽</li>
</ul>
<h4 id="lt-template-gt"><a href="#lt-template-gt" class="headerlink" title="&lt;template&gt;"></a>&lt;template&gt;</h4><p>当使用内置指令而不在 DOM 中渲染元素时, <code>&lt;template&gt;</code> 标签可以作为占位符使用</p>
<h3 id="内置特殊-Attributes"><a href="#内置特殊-Attributes" class="headerlink" title="内置特殊 Attributes"></a>内置特殊 Attributes</h3><h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><p>主要作为 Vue 的虚拟 DOM 算法提示, 在比较新旧节点列表时用于识别 vnode</p>
<h4 id="ref-1"><a href="#ref-1" class="headerlink" title="ref"></a>ref</h4><blockquote>
<p>ref 数组<code>并不</code>保证与源数组相同的顺序</p>
</blockquote>
<p>用于注册元素或子组件的 <code>模板引用</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;root&quot;</span>&gt;</span>This is a root element<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;itemRefs&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, onBeforeUpdate, onUpdated, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> root = <span class="title function_">ref</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> itemRefs = <span class="title function_">ref</span>([]);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 确保在每次更新之前重置 ref</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onBeforeUpdate</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    itemRefs.<span class="property">value</span> = [];</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onUpdated</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(itemRefs.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// DOM元素将在初始渲染后分配给ref</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(root.<span class="property">value</span>); <span class="comment">// &lt;div&gt;这是根元素&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="is"><a href="#is" class="headerlink" title="is"></a>is</h4><ul>
<li>用于动态绑定组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Foo&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 三目运算中的组件使用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;someCondition ? Foo : Bar&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Foo</span> <span class="keyword">from</span> <span class="string">&#x27;./Foo.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Bar</span> <span class="keyword">from</span> <span class="string">&#x27;./Bar.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>元素位置限制</p>
<p>由于 HTML 元素对于放在其中的元素类型的限制, 例如 ul, ol, table, select 等元素仅放置 li, tr, option 时才会显示, 将导致在使用带有此类限制元素的组件时出现问题.</p>
<ul>
<li>用于原生元素时, 将被作为 <code>Customized built-in element</code>, 如果需要用 Vue 组件替换原生元素, 需要加上 <code>vue:</code> 前缀.</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自定义组件 my-row-component 将作为无效内容被忽略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-row-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-row-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 vue: 前缀才能被解析为一个 vue 组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;vue:my-row-component&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><h3 id="SFC-语法定义"><a href="#SFC-语法定义" class="headerlink" title="SFC 语法定义"></a>SFC 语法定义</h3><ul>
<li><code>&lt;template&gt;</code> 每个 <code>*.vue</code> 文件最多可以包含一个顶层 <code>&lt;template&gt;</code> 块, 包含的内容将被提取传递给 <code>@vue/compiler-dom</code> 编译生成为 <a href="#rendering-func"><strong>渲染函数</strong></a></li>
<li><code>&lt;script&gt;</code> 每个 <code>*.vue</code> 文件最多可以包含一个 <code>&lt;script&gt;</code> 块(使用 <code>&lt;script setup&gt;</code> 除外), 默认导出是 Vue 的组件选项对象</li>
<li><code>&lt;script setup&gt;</code> 每个 <code>*.vue</code> 文件最多可以包含一个 <code>&lt;script setup&gt;</code> 块, 此脚本块将被预处理为组件的 <code>setup()</code> 函数</li>
<li><code>&lt;style&gt;</code> 每个 <code>*.vue</code> 文件可以包含多个 <code>&lt;style&gt;</code> 块</li>
</ul>
<h4 id="src-导入"><a href="#src-导入" class="headerlink" title="src 导入"></a>src 导入</h4><p>可以将单文件组件拆分成多个文件中, 使用 src 导入外部文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">src</span>=<span class="string">&quot;./template.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">src</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="lt-script-setup-gt"><a href="#lt-script-setup-gt" class="headerlink" title="&lt;script setup&gt;"></a>&lt;script setup&gt;</h3><p><em id="script-setup"></em> <!--markdownlint-disable-line--></p>
<blockquote>
<p><code>&lt;script setup&gt;</code> 是在单文件组件(SFC) 中使用 <a href="#composition-api">组合式 API</a> 的编译时语法糖<br><code>&lt;script setup&gt;</code> 中的代码会在每次组件实例被创建的时候执行</p>
</blockquote>
<ul>
<li>更少的样板内容, 更简洁的代码</li>
<li>能够使用纯 TypeScript 声明 props 和 自定义事件</li>
<li>更好的运行时性能(其模板会被编译成同一作用域内的渲染函数, 避免了渲染上下文代理对象)</li>
<li>更好的 IDE 类型推导性能(减少了语言服务器从代码中抽取类型的工作)</li>
</ul>
<h4 id="顶层绑定"><a href="#顶层绑定" class="headerlink" title="顶层绑定"></a>顶层绑定</h4><p>任何在 <code>&lt;script setup&gt;</code> 声明的 <strong>顶层的绑定</strong>(包括变量, 函数声明, 以及 import 导入的内容)都能在模板中直接使用</p>
<h4 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p>单文件组件模板中使用组件可以使用 <code>kebab-case</code> 或者 <code>PascalCase</code> 两种格式, 推荐使用后者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; <span class="title class_">MyComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./MyComponent.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Foo</span> <span class="keyword">from</span> <span class="string">&#x27;./Foo.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Bar</span> <span class="keyword">from</span> <span class="string">&#x27;./Bar.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Foo&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 三目运算中的组件使用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;someCondition ? Foo : Bar&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h5><p>一个单文件组件可以通过它的文件名被其自己所引用, 为防止具名的导入和组件自身推导的名字冲突可以使用别名的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FooBar</span> <span class="keyword">as</span> <span class="title class_">FooBarChild</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./components&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="命名空间组件"><a href="#命名空间组件" class="headerlink" title="命名空间组件"></a>命名空间组件</h5><p>可以使用带 <code>.</code> 的组件标签来引用嵌套在对象属性中的组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Form</span> <span class="keyword">from</span> <span class="string">&#x27;./form-components&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Form.Input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Form.Label</span>&gt;</span>label<span class="tag">&lt;/<span class="name">Form.Label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Form.Input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用自定义指令"><a href="#使用自定义指令" class="headerlink" title="使用自定义指令"></a>使用<a href="#directive">自定义指令</a></h4><p>本地声明自定义指令在 <code>&lt;script setup&gt;</code> 中不需要显式注册, 但必须遵循 <code>vNameOfDirective</code> 的命名规范</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vMyDirective = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params">el, binding, vnode prevVnode</span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updated</span>(<span class="params">el, binding, vnode prevVnode</span>)&#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">unmounted</span>(<span class="params">el, binding, vnode prevVnode</span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-my-directive</span>&gt;</span>This is a heading.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="defineProps-defineEmits"><a href="#defineProps-defineEmits" class="headerlink" title="defineProps|defineEmits"></a>defineProps|defineEmits</h4><ul>
<li><code>defineProps</code> 和 <code>defineEmits</code> 都是只能在 <code>&lt;script setup&gt;</code> 中使用的 <strong>编译器宏</strong>, 不需要导入直接使用, 且会随着 <code>&lt;script setup&gt;</code> 的处理过程一同被编译掉</li>
<li><code>defineProps</code> 接收和 <a href="#props">props</a> 选项相同的值, <code>defineEmits</code> 接收和 <a href="#emits">emits</a> 选项相同的值</li>
<li><code>defineProps</code> 和 <code>defineEmits</code> 在选项传入后会提供恰当的类型推导</li>
<li>传入 <code>defineProps</code> 和 <code>defineEmits</code> 的选项会从 setup 中提升到模块的作用域, 因此, 传入的选项不能引用在 setup 作用域中声明的局部变量</li>
</ul>
<h5 id="使用类型声明时的默认-props-值"><a href="#使用类型声明时的默认-props-值" class="headerlink" title="使用类型声明时的默认 props 值"></a>使用类型声明时的默认 props 值</h5><p>defineProps 不能给使用类型声明的 props 提供默认值, 使用 <code>withDefaults</code> <strong>编译器宏</strong> 解决</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withDefaults &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">Props</span> &#123;</span><br><span class="line">  msg?: string</span><br><span class="line">  labels?: string[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">withDefaults</span>(defineProps&lt;<span class="title class_">Props</span>&gt;(), &#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;hello withDefaults&#x27;</span>,</span><br><span class="line">  <span class="attr">labels</span>: <span class="function">() =&gt;</span> [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="props-emit-类型声明"><a href="#props-emit-类型声明" class="headerlink" title="props|emit 类型声明"></a>props|emit 类型声明</h5><p><code>props</code> 和 <code>emits</code> 都可以通过给 <code>defineProps</code> 和 <code>defineEmits</code> 传递纯类型参数的方式声明</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123; <span class="attr">title</span>: string, <span class="attr">age</span>: number &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">click</span>: <span class="literal">null</span>, <span class="comment">// 没有验证函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 有验证函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">submit</span>: <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (payload.<span class="property">email</span> &amp;&amp; payload.<span class="property">password</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`Invalid submit event payload!`</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose()"></a>defineExpose()</h4><p>使用 <code>&lt;script setup&gt;</code> 的组件是 <strong>默认关闭</strong> 的, 不会暴露任何在 <code>&lt;script setup&gt;</code> 中声明的绑定. 使用 defineExpose 显式指定组件中要暴露出去的属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> b = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">defineExpose</span>(&#123; a, b &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="defineOptions"><a href="#defineOptions" class="headerlink" title="defineOptions()  "></a>defineOptions() <em id="defineOptions"></em> <!--markdownlint-disable-line--></h4><blockquote>
<p>Vue 3.3 支持</p>
</blockquote>
<p>在 <code>&lt;script setup&gt;</code> 中使用 <a href="#optional-api">选项式 API</a> 的<strong>宏</strong>, 无法访问 <code>&lt;script setup&gt;</code> 中不是字面常数的局部变量</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; useSlots &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">defineOptions</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Foo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> slots = <span class="title function_">useSlots</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Compiled Code --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;Foo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inheritAttrs</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; useSlots &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> slots = <span class="title function_">useSlots</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="defineSlots"><a href="#defineSlots" class="headerlink" title="defineSlots()"></a>defineSlots()</h4><blockquote>
<p>Vue 3.3 支持</p>
</blockquote>
<p>只接受类型参数, 没有运行时参数. 用于为 IDE 提供插槽名称 和 props 类型检查的类型提示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> slots = defineSlots&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">default</span>(<span class="attr">props</span>: &#123; <span class="attr">msg</span>: string &#125;): any;</span></span><br><span class="line"><span class="language-javascript">  &#125;&gt;();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="definePropsRefs"><a href="#definePropsRefs" class="headerlink" title="definePropsRefs()"></a>definePropsRefs()</h4><blockquote>
<p>Vue 3.3 支持</p>
</blockquote>
<p>在 <code>&lt;script setup&gt;</code> 中定义一个不会丢失响应性的解构 props 的响应式对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// won&#x27;t lose reactivity with destructuring</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123;foo, bar&#125; = definePropsRefs&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">foo</span>: string,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">bar</span>: number</span></span><br><span class="line"><span class="language-javascript">  &#125;&gt;();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Ref&lt;string&gt;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">value</span>, bar.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="defineRender"><a href="#defineRender" class="headerlink" title="defineRender()"></a>defineRender()</h4><blockquote>
<p>Vue 3.3 支持 <em id="vue3.3"></em> <!-- markdownlint-disable-line --></p>
</blockquote>
<p>在 <code>&lt;script setup&gt;</code> 中定义一个渲染函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// JSX passed directly</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">defineRender</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Or using render function</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">defineRender</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> (</span></span><br><span class="line"><span class="language-javascript">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="defineModel"><a href="#defineModel" class="headerlink" title="defineModel()"></a>defineModel()</h4><blockquote>
<p>Vue 3.4 支持</p>
</blockquote>
<p>如果第一个参数为字符串字面量, 则被用作 prop 名称, 否则 prop 名称默认为 <code>modelValue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 声明 modelValue prop, 由父组件通过 v-model 使用</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> model = <span class="title function_">defineModel</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 或者声明带选项的 modelValue prop</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> model = <span class="title function_">defineModal</span>(&#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在被修改时, 触发 update:modelValue 事件</span></span></span><br><span class="line"><span class="language-javascript">  model.<span class="property">value</span> = <span class="string">&#x27;hello world&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 声明 count prop, 由父组件通过 v-model:count 使用</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count = <span class="title function_">defineModel</span>(<span class="string">&#x27;count&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 或者声明带选项的 count prop</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count = <span class="title function_">defineModel</span>(<span class="string">&#x27;count&#x27;</span>, &#123; <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">default</span>: <span class="number">0</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 在被修改时, 触发 update:count 事件</span></span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>底层编译器将其展开为以下内容</p>
<ul>
<li>一个名为 <code>modelValue</code> 的 prop, 本地的 ref 的值与其同步</li>
<li>一个名为 <code>update:modelValue</code> 的事件, 当本地 ref 的值发生变更时触发</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;modelValue&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:modelValue&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:value</span>=<span class="string">&quot;props.modelValue&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">input</span>=<span class="string">&quot;emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="修饰符和转换器"><a href="#修饰符和转换器" class="headerlink" title="修饰符和转换器"></a>修饰符和转换器</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> [modelValue, modelModifiers] = <span class="title function_">defineModel</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 对应 v-model.trim</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (modelModifiers.<span class="property">trim</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ...</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 通过修饰符使用 set 和 get 转换器对其值进行转换</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> [modelValue, modelModifiers] = <span class="title function_">defineModel</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// get() 省略了，因为这里不需要它</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果使用了 .trim 修饰符，则返回裁剪过后的值</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (modelModifiers.<span class="property">trim</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> value.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 否则，原样返回</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 指定名称的修饰符</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> [firstName, firstNameModifiers] = <span class="title function_">defineModel</span>(<span class="string">&#x27;firstName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(firstNameModifiers.<span class="property">uppercase</span>); <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Vue 3.4 之前</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">firstName</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">firstNameModifiers</span>: &#123; <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;) &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:firstName&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">firstNameModifiers</span>.<span class="property">uppercase</span>); <span class="comment">// true</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">v-model:first-name.uppercase</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="useSlots-useAttrs"><a href="#useSlots-useAttrs" class="headerlink" title="useSlots()|useAttrs()"></a>useSlots()|useAttrs()</h4><ul>
<li>在 SFC 中使用的辅助函数获取 slots 和 attrs</li>
<li>需要手动从 vue 中导入</li>
<li>返回的值和 <code>setupContext.slots</code> 和 <code>setupContext.attrs</code> 是等价的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; useSlots, useAttrs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> slots = <span class="title function_">useSlots</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="与普通-script-一起用"><a href="#与普通-script-一起用" class="headerlink" title="与普通 script 一起用"></a>与普通 script 一起用</h4><ul>
<li>声明无法在 <code>&lt;script setup&gt;</code> 中声明的选项, 例如 <a href="#inheritAttrs">inheritAttrs</a> 或插件的自定义选项(Vue 3.3 使用 <a href="#defineOptions">defineOptions</a> 替代)</li>
<li>声明模块的具名导出(named exports)</li>
<li>运行只需要在模块作用域执行一次的副作用, 或是创建单例对象</li>
</ul>
<h4 id="顶层-await"><a href="#顶层-await" class="headerlink" title="顶层 await"></a>顶层 await</h4><blockquote>
<p><code>&lt;script setup&gt;</code> 中可以使用顶层 await, 结果代码会被编译成 <code>async setup()</code> &gt; <code>async setup()</code> 必须与 <a href="#suspense">&lt;Suspense&gt;</a> <a href="#built-in-component"><strong>内置组件</strong></a>组合使用</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> post = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/post/1&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p>由于模块执行语义的差异, <code>&lt;script setup&gt;</code> 中的代码依赖单文件组件的上下文, 当将其移动到外部的 <code>.js</code> 或 <code>.ts</code> 文件中时, 对于开发者和工具来说都会感到混乱. 因此, <code>&lt;script setup&gt;</code> 不能和 <code>src</code> 属性一起使用</p>
<h3 id="CSS-功能"><a href="#CSS-功能" class="headerlink" title="CSS 功能"></a>CSS 功能</h3><h4 id="组件作用域"><a href="#组件作用域" class="headerlink" title="组件作用域"></a>组件作用域</h4><blockquote>
<p>使用 <code>scoped</code> 后, 父组件的样式不会透传到子组件中，不过, 子组件的 <strong>根节点</strong> 会同时被父组件的作用域样式和子组件的作用域样式影响, 这样设计是为了让父组件可以从布局的角度出发, 调整其子组件根元素的样式</p>
</blockquote>
<h5 id="深度选择器"><a href="#深度选择器" class="headerlink" title="深度选择器"></a>深度选择器</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> :<span class="built_in">deep</span>(.b) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="插槽选择器"><a href="#插槽选择器" class="headerlink" title="插槽选择器"></a>插槽选择器</h5><p>默认情况下, 作用域样式不会影响到 <code>&lt;slot /&gt;</code> 渲染出来的内容, 使用 <code>:slotted</code> 伪类以明确地将插槽内容作为选择器的目标</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-pseudo">:slotted</span>(<span class="selector-tag">div</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="全局选择器"><a href="#全局选择器" class="headerlink" title="全局选择器"></a>全局选择器</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  :<span class="built_in">global</span>(.red) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="css-Modules"><a href="#css-Modules" class="headerlink" title="css Modules"></a>css Modules</h4><p>一个 <code>&lt;style module&gt;</code> 标签会被编译成 <code>CSS Modules</code> 并且将生成的 CSS class 作为 <code>$style</code> 对象暴露给组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;$style.red&quot;</span>&gt;</span>This is should be red.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">module</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="自定义注入名称"><a href="#自定义注入名称" class="headerlink" title="自定义注入名称"></a>自定义注入名称</h5><p>module 属性可以接受一个值作为自定义注入名称代替 <code>$style</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;classes.red&quot;</span>&gt;</span>This is should be red.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">module</span>=<span class="string">&quot;classes&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="与组合式-API一起使用"><a href="#与组合式-API一起使用" class="headerlink" title="与组合式 API一起使用"></a>与<a href="#composition-api">组合式 API</a>一起使用</h5><ul>
<li>使用 <code>useCssModule</code> API 在 <code>setup()</code> 和 <code>&lt;script setup&gt;</code> 中访问注入的 class</li>
<li>使用 <strong>自定义注入名称</strong> 的 <code>&lt;style module&gt;</code>, <code>useCssModule</code> 接收一个匹配的 <code>module</code> attribute 值作为第一个参数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; h, useCssModule &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 默认情况下, 返回 &lt;style module&gt; 的 class</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> style = <span class="title function_">useCssModule</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 自定义注入名称, 返回 &lt;style module=&quot;classes&quot;&gt; 的 class</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> classes = <span class="title function_">useCssModule</span>(<span class="string">&#x27;classes&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="CSS-中的-v-bind"><a href="#CSS-中的-v-bind" class="headerlink" title="CSS 中的 v-bind()"></a>CSS 中的 v-bind()</h4><p>单文件组件的 <code>&lt;style&gt;</code> 标签支持使用 <code>v-bind</code> CSS 函数将 CSS 的值链接到动态的组件状态</p>
<ul>
<li><a href="#optional-api">选项式 API</a>使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="built_in">v-bind</span>(color);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="#composition-api">组合式 API</a> 使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> theme = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="built_in">v-bind</span>(<span class="string">&#x27;theme.color&#x27;</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="进阶-API"><a href="#进阶-API" class="headerlink" title="进阶 API"></a>进阶 API</h2><h3 id="渲染函数"><a href="#渲染函数" class="headerlink" title="渲染函数  "></a>渲染函数 <em id="rendering-func"></em> <!-- markdownlint-disable-line--></h3><ul>
<li>如果组件定义了 setup 并且返回值是一个函数, 则其返回值作为该组件的渲染函数</li>
<li>如果组件定义了 render, 则将其作为渲染函数</li>
<li>如果组件定义了 template, 则将其作为模板进行编译成可执行的渲染函数</li>
<li>如果以上条件都不满足, 则使用容器的 innerHTML 作为模板</li>
</ul>
<h4 id="h"><a href="#h" class="headerlink" title="h()"></a>h()</h4><blockquote>
<p>当创建组件的 vnode 时, 子节点必须以 <strong><a href="#v-slot">插槽</a>函数</strong> 的形式传递, 如果组件只有默认插槽, 可以使用单个 <strong><a href="#v-slot">插槽</a>函数</strong> 传递, 否则, 必须以 <strong><a href="#v-slot">插槽</a>函数</strong> 的对象形式传递</p>
</blockquote>
<p>创建虚拟 DOM 节点(vnode)</p>
<ul>
<li>第一个参数是一个字符串(用于原生元素)或者一个 Vue 组件定义</li>
<li>第二个参数是要传入的 prop, 如果 <strong><a href="#v-slot">插槽</a>函数</strong> 不是对象形式时, 可以省略此参数</li>
<li>第三个参数是子节点</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">h</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;div&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">class</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">style</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">innerHtml</span>: <span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 事件监听以 onXxx 的形式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">onClick</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    [<span class="string">&#x27;hello world&#x27;</span>, <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;gg&#x27;</span>)]</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; h &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Foo</span> <span class="keyword">from</span> <span class="string">&#x27;./Foo.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 传递 prop</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">h</span>(<span class="title class_">Foo</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 等价于 some-prop=&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">someProp</span>: <span class="string">&#x27;hello world&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 等价于 @update=&quot;() =&gt; &#123;&#125;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">onUpdate</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 传递单个默认插槽函数, 可以省略 prop 参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">h</span>(<span class="title class_">Foo</span>, <span class="function">() =&gt;</span> <span class="string">&#x27;default slot&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 传递具名插槽函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 需要使用 null 来避免插槽对象被当作 prop</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">h</span>(<span class="title class_">MyComponent</span>, <span class="literal">null</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;default slot&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">header</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;hello div&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">footer</span>: <span class="function">() =&gt;</span> [<span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;one&#x27;</span>), <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;two&#x27;</span>)],</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="mergeProps"><a href="#mergeProps" class="headerlink" title="mergeProps()"></a>mergeProps()</h4><blockquote>
<p><code>class</code>, <code>style</code> 将被合并成一个对象, <code>onXxx</code> 将被合并成一个数组</p>
</blockquote>
<p>合并多个 props 对象, 用于处理含有特定的 props 参数的情况</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; h, mergeProps &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> one = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">class</span>: <span class="string">&#x27;foo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">onClick</span>: handlerA,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> two = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">class</span>: &#123; <span class="attr">bar</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">onClick</span>: handlerB,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> merged = <span class="title function_">mergeProps</span>(one, two);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   *  class: &#x27;foo bar&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   *  onClick: [handlerA, handlerB]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   * &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="cloneVNode"><a href="#cloneVNode" class="headerlink" title="cloneVNode()"></a>cloneVNode()</h4><p>克隆一个 vnode, 可在原有的基础上添加一些额外的 prop</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; h, cloneVNode &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> original = <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> cloned = <span class="title function_">cloneVNode</span>(original, &#123; <span class="attr">id</span>: <span class="string">&#x27;foo&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="isVNode"><a href="#isVNode" class="headerlink" title="isVNode()"></a>isVNode()</h4><p>判断一个值是否为 vnode 类型</p>
<h4 id="resolveComponent"><a href="#resolveComponent" class="headerlink" title="resolveComponent()"></a>resolveComponent()</h4><blockquote>
<p><code>resolveComponent()</code> 只能在 <a href="#rendering-func"><strong>渲染函数</strong></a> 或 <code>setup()</code> 中使用<br>如果可以直接引入组件就不需要使用此方法</p>
</blockquote>
<p>按名称手动解析已注册的组件, 未找到则抛出一个运行时警告并返回组件名字符串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; h, resolveComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title class_">ButtonComponent</span> = <span class="title function_">resolveComponent</span>(<span class="string">&#x27;ButtonComponent&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title class_">ButtonComponent</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="resolveDirective"><a href="#resolveDirective" class="headerlink" title="resolveDirective()"></a><a href="#directive">resolveDirective()</a></h4><blockquote>
<p><code>resolveDirective()</code> 只能在 <a href="#rendering-func"><strong>渲染函数</strong></a> 或 <code>setup()</code> 中使用<br>如果可以直接引入组件就不需要使用此方法</p>
</blockquote>
<p>按名称手动解析已注册的指令, 未找到则抛出一个运行时警告并返回 undefined</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; resolveDirective &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> myDirective = <span class="title function_">resolveDirective</span>(<span class="string">&#x27;myDirective&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="withDirectives"><a href="#withDirectives" class="headerlink" title="withDirectives()"></a><a href="#directive">withDirectives()</a></h4><p>用于给 vnode 增加自定义指令</p>
<ul>
<li>第一个参数为要添加指令的 vnode</li>
<li>第二个参数为自定义指令数组, 每个自定义指令表示为 <code>[Directive, value, argument, modifiers]</code> 形式的数组<ul>
<li>[directive] 指令本身</li>
<li>[directive, value] 上述内容, 指令的值</li>
<li>[directive, value, arg] 上述内容, 一个 String 参数,eg: v-on:click 中的 click</li>
<li>[directive, value, arg, modifiers] 上述内容, 定义任意修饰符的 key:value 键值对</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; h, withDirectives &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> pin = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pin directive created...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pin directive beforeMount...&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(binding.<span class="property">value</span>, binding.<span class="property">arg</span>, binding.<span class="property">modifiers</span>);</span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;20px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#08f&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="function">() =&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &lt;div v-pin:top.animate=&quot;200&quot;&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">withDirectives</span>(<span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;hello withDirectives&#x27;</span>), [</span></span><br><span class="line"><span class="language-javascript">      [pin, <span class="number">200</span>, <span class="string">&#x27;top&#x27;</span>, &#123; <span class="attr">animate</span>: <span class="literal">true</span> &#125;],</span></span><br><span class="line"><span class="language-javascript">    ]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withDirectives, resolveDirective &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="title function_">resolveDirective</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bar = <span class="title function_">resolveDirective</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">withDirectives</span>(<span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>), [</span><br><span class="line">  [foo, <span class="variable language_">this</span>.<span class="property">x</span>],</span><br><span class="line">  [bar, <span class="variable language_">this</span>.<span class="property">y</span>],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h4 id="withModifiers"><a href="#withModifiers" class="headerlink" title="withModifiers()"></a>withModifiers()</h4><p>用于向事件处理函数添加内置 <code>v-on</code> 修饰符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; h, withModifiers &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> clk = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="function">() =&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">h</span>(</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;button&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 等价于 v-on.stop.prevent</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">onClick</span>: <span class="title function_">withModifiers</span>(</span></span><br><span class="line"><span class="language-javascript">          <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          [<span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;prevent&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        ),</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;Click Me&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="综合使用"><a href="#综合使用" class="headerlink" title="综合使用"></a>综合使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createApp,</span><br><span class="line">  h,</span><br><span class="line">  ref,</span><br><span class="line">  defineComponent,</span><br><span class="line">  resolveComponent,</span><br><span class="line">  resolveDirective,</span><br><span class="line">  withDirectives,</span><br><span class="line">  withModifiers,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HelloWorld</span> = <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span><br><span class="line">  <span class="comment">// 定义局部指令</span></span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123;</span><br><span class="line">      <span class="title function_">created</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;directives foo hooks created trigger... &#x27;</span>, binding);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/* beforeMount, mounted, beforeUpdate, updated, beforeUnmount */</span></span><br><span class="line">      <span class="title function_">unmounted</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;directives foo hooks unmounted trigger... &#x27;</span>, binding);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; slots &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;from hello world component&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> fooV = <span class="title function_">ref</span>(<span class="number">250</span>);</span><br><span class="line">    <span class="keyword">const</span> show = <span class="title function_">ref</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义点击切换自定义指令值的方法</span></span><br><span class="line">    <span class="keyword">const</span> changeFooDirective = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      fooV.<span class="property">value</span> = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>);</span><br><span class="line">      show.<span class="property">value</span> = fooV.<span class="property">value</span> % <span class="number">4</span> === <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析一个已注册的指令, 未找到则抛出运行时警告并返回 undefined</span></span><br><span class="line">    <span class="keyword">const</span> foo = <span class="title function_">resolveDirective</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Must use `.value` to read or write the value wrapped by `ref()`</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">        <span class="title function_">h</span>(</span><br><span class="line">          <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">          slots?.<span class="property">default</span>?.(&#123;</span><br><span class="line">            <span class="attr">message</span>: message.<span class="property">value</span>,</span><br><span class="line">            <span class="attr">age</span>: props.<span class="property">age</span> &gt; <span class="number">0</span> ? props.<span class="property">age</span> : <span class="number">18</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">        ),</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&#x27;p&#x27;</span>, slots?.<span class="property">header</span>?.()),</span><br><span class="line">        show.<span class="property">value</span></span><br><span class="line">          ? <span class="title function_">withDirectives</span>(</span><br><span class="line">              <span class="title function_">h</span>(</span><br><span class="line">                <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">                <span class="title function_">withDirectives</span>(</span><br><span class="line">                  <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, [<span class="string">&#x27;v-foo:bar2.uppercase=&#x27;</span> + fooV.<span class="property">value</span>]),</span><br><span class="line">                  [[foo, fooV.<span class="property">value</span>, <span class="string">&#x27;bar2&#x27;</span>, &#123; <span class="attr">uppercase</span>: <span class="literal">true</span> &#125;]]</span><br><span class="line">                )</span><br><span class="line">              ),</span><br><span class="line">              [[foo, fooV.<span class="property">value</span>, <span class="string">&#x27;bar1&#x27;</span>, &#123; <span class="attr">uppercase</span>: <span class="literal">true</span> &#125;]]</span><br><span class="line">            )</span><br><span class="line">          : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="title function_">h</span>(</span><br><span class="line">          <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">          <span class="title function_">h</span>(</span><br><span class="line">            <span class="string">&#x27;button&#x27;</span>,</span><br><span class="line">            &#123; <span class="attr">onClick</span>: changeFooDirective &#125;,</span><br><span class="line">            <span class="string">&#x27;Click Me - &#x27;</span> + props.<span class="property">age</span></span><br><span class="line">          )</span><br><span class="line">        ),</span><br><span class="line">      ]);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; slots &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> gg = &#123;</span><br><span class="line">      <span class="title function_">created</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;withDirectives gg hooks created trigger... &#x27;</span>, binding);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/* beforeMount, mounted, beforeUpdate, updated, beforeUnmount */</span></span><br><span class="line">      <span class="title function_">unmounted</span>(<span class="params">el, binding, vnode, prevVnode</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;withDirectives gg hooks unmounted trigger... &#x27;</span>, binding);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析一个已注册的组件，未找到则抛出运行时警告并返回组件名字符串</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">HelloWorld</span> = <span class="title function_">resolveComponent</span>(<span class="string">&#x27;hello-world&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> [</span><br><span class="line">      <span class="title function_">withDirectives</span>(</span><br><span class="line">        <span class="title function_">h</span>(</span><br><span class="line">          <span class="title class_">HelloWorld</span>,</span><br><span class="line">          &#123; <span class="attr">name</span>: <span class="string">&#x27;from createApp&#x27;</span>, <span class="attr">age</span>: -<span class="number">1</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">default</span>: <span class="function">(<span class="params">slotScope</span>) =&gt;</span></span><br><span class="line">              slotScope.<span class="property">message</span> +</span><br><span class="line">              <span class="string">&#x27; - &#x27;</span> +</span><br><span class="line">              slotScope.<span class="property">age</span> +</span><br><span class="line">              <span class="string">&#x27; - others from createApp&#x27;</span>,</span><br><span class="line">            <span class="attr">header</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;from createApp by header slot...&#x27;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        ),</span><br><span class="line">        [[gg, <span class="number">1000</span>, <span class="string">&#x27;bottom&#x27;</span>, &#123; <span class="attr">animate</span>: <span class="literal">true</span> &#125;]]</span><br><span class="line">      ),</span><br><span class="line">      <span class="title function_">h</span>(</span><br><span class="line">        <span class="string">&#x27;button&#x27;</span>,</span><br><span class="line">        &#123; <span class="attr">onClick</span>: <span class="title function_">withModifiers</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e), [<span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;prevent&#x27;</span>]) &#125;,</span><br><span class="line">        <span class="string">&#x27;Click Me withModifiers&#x27;</span></span><br><span class="line">      ),</span><br><span class="line">    ];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;hello-world&#x27;</span>, <span class="title class_">HelloWorld</span>);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="自定义指令挂载"><a href="#自定义指令挂载" class="headerlink" title="自定义指令挂载"></a><a href="#directive">自定义指令</a>挂载</h5><p><img data-src="/images/vue3-directives-hooks-1.jpg" alt="vue3-directives-hooks-1"></p>
<h5 id="自定义指令更新"><a href="#自定义指令更新" class="headerlink" title="自定义指令更新"></a><a href="#directive">自定义指令</a>更新</h5><p><img data-src="/images/vue3-directives-hooks-2.jpg" alt="vue3-directives-hooks-2"></p>
<h5 id="自定义指令卸载"><a href="#自定义指令卸载" class="headerlink" title="自定义指令卸载"></a><a href="#directive">自定义指令</a>卸载</h5><p><img data-src="/images/vue3-directives-hooks-3.jpg" alt="vue3-directives-hooks-3"></p>
<h3 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h3><h4 id="renderToString"><a href="#renderToString" class="headerlink" title="renderToString()"></a>renderToString()</h4><blockquote>
<p>导出自 <code>vue/server-renderer</code></p>
</blockquote>
<ul>
<li>传入第二个可选的上下文对象用来在渲染过程中记录额外的数据</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSSRApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">&#x27;vue/server-renderer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createSSRApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;hello world&#x27;</span> &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ctx = &#123;&#125;;</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="title function_">renderToString</span>(app, ctx);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h4 id="renderToNodeStream"><a href="#renderToNodeStream" class="headerlink" title="renderToNodeStream()"></a>renderToNodeStream()</h4><blockquote>
<p>导出自 <code>vue/server-renderer</code></p>
</blockquote>
<p>将输入渲染为一个 <code>Node.js Readable Stream</code> 实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; renderToNodeStream &#125; <span class="keyword">from</span> <span class="string">&#x27;vue/server-renderer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Node.js http 处理函数中使用</span></span><br><span class="line"><span class="keyword">const</span> stream = <span class="title function_">renderToNodeStream</span>(app);</span><br><span class="line">stream.<span class="title function_">pip</span>(res);</span><br></pre></td></tr></table></figure>

<h4 id="pipeToNodeWritable"><a href="#pipeToNodeWritable" class="headerlink" title="pipeToNodeWritable()"></a>pipeToNodeWritable()</h4><blockquote>
<p>导出自 <code>vue/server-renderer</code></p>
</blockquote>
<p>将输入渲染并 pipe 到一个 <code>Node.js Writable Stream</code> 实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; pipeToNodeWritable &#125; <span class="keyword">from</span> <span class="string">&#x27;vue/server-renderer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Node.js http 处理函数中使用</span></span><br><span class="line"><span class="title function_">pipeToNodeWritable</span>(app, &#123;&#125;, res);</span><br></pre></td></tr></table></figure>

<h4 id="renderToWebStream"><a href="#renderToWebStream" class="headerlink" title="renderToWebStream()"></a>renderToWebStream()</h4><blockquote>
<p>导出自 <code>vue/server-renderer</code></p>
</blockquote>
<p>将输入渲染为一个 <code>Web ReadableStream</code> 实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; renderToWebStream &#125; <span class="keyword">from</span> <span class="string">&#x27;vue/server-renderer&#x27;</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="title function_">renderToWebStream</span>(app));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// Response</span></span><br><span class="line">  <span class="comment">// text() 返回 UTF-8 编码的包含 USVString 对象的 Promise 对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> res.<span class="title function_">text</span>());</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h4 id="pipeToWebWritable"><a href="#pipeToWebWritable" class="headerlink" title="pipeToWebWritable()"></a>pipeToWebWritable()</h4><blockquote>
<p>导出自 <code>vue/server-renderer</code></p>
</blockquote>
<p>将输入渲染并 pipe 到一个 <code>Web WritableStream</code> 实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; pipeToWebWritable &#125; <span class="keyword">from</span> <span class="string">&#x27;vue/server-renderer&#x27;</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 创建一个转换流</span></span><br><span class="line">  <span class="keyword">const</span> tfs = <span class="keyword">new</span> <span class="title class_">TransformStream</span>();</span><br><span class="line">  <span class="comment">// 将内容渲染并 pipe 到转换流的可写流</span></span><br><span class="line">  <span class="title function_">pipeToWebWritable</span>(app, &#123;&#125;, tfs.<span class="property">writable</span>);</span><br><span class="line">  <span class="comment">// 根据转换流的可读流创建响应对象</span></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Response</span>(tfs.<span class="property">readable</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pipeToWebWritable &#x27;</span>, res);</span><br><span class="line">  <span class="comment">// text() 返回 UTF-8 编码的包含 USVString 对象的 Promise 对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pipeToWebWritable &#x27;</span>, <span class="keyword">await</span> res.<span class="title function_">text</span>());</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h4 id="renderToSimpleStream"><a href="#renderToSimpleStream" class="headerlink" title="renderToSimpleStream()"></a>renderToSimpleStream()</h4><blockquote>
<p>导出自 <code>vue/server-renderer</code></p>
</blockquote>
<p>通过一个简单的接口, 将输入以 <code>stream</code> 模式进行渲染</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; renderToSimpleStream &#125; <span class="keyword">from</span> <span class="string">&#x27;vue/server-renderer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">renderToSimpleStream</span>(</span><br><span class="line">  app,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_">push</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (chunk == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;renderToSimpleStream render complete: &#x27;</span>, res);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res += chunk;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">destroy</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="useSSRContext"><a href="#useSSRContext" class="headerlink" title="useSSRContext()"></a>useSSRContext()</h4><p>运行时 API, 用于获取传递给 <code>renderToString</code> 或者其他服务端渲染 API 的上下文对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; useSSRContext &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 确保只在服务端渲染时调用</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">SSR</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ctx = <span class="title function_">useSSRContext</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 为上下文对象添加属性</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="工具类型"><a href="#工具类型" class="headerlink" title="工具类型"></a>工具类型</h3><h4 id="PropType-lt-T-gt"><a href="#PropType-lt-T-gt" class="headerlink" title="PropType&lt;T&gt;"></a>PropType&lt;T&gt;</h4><p>用于在用运行时 props 声明时给一个 prop 标注更复杂的类型定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Book</span>&#123;</span><br><span class="line">  <span class="attr">title</span>: string,</span><br><span class="line">  <span class="attr">author</span>: string,</span><br><span class="line">  <span class="attr">year</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">book</span>: &#123;</span><br><span class="line">      <span class="comment">// 提供一个比 `Object` 更具体的类型</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">Book</span>&gt;,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ComponentCustomProperties"><a href="#ComponentCustomProperties" class="headerlink" title="ComponentCustomProperties"></a>ComponentCustomProperties</h4><p>用于增强组件实例类型以支持自定义全局属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span>&#123;</span><br><span class="line">  interface <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$http</span>: <span class="keyword">typeof</span> axios</span><br><span class="line">    <span class="attr">$translate</span>: <span class="function">(<span class="params">key: string</span>) =&gt;</span> string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ComponentCustomOptions"><a href="#ComponentCustomOptions" class="headerlink" title="ComponentCustomOptions"></a>ComponentCustomOptions</h4><p>用来扩展组件选项类型以支持自定义选项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Route</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  interface <span class="title class_">ComponentCustomOptions</span> &#123;</span><br><span class="line">    beforeRouteEnter?(<span class="attr">to</span>: any, <span class="attr">from</span>: any, <span class="attr">next</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span>): <span class="keyword">void</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ComponentCustomProps"><a href="#ComponentCustomProps" class="headerlink" title="ComponentCustomProps"></a>ComponentCustomProps</h4><p>用于扩展全局可用的 TSX props, 以便在 TSX 元素上使用没有在组件选项上定义过的 props</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span>&#123;</span><br><span class="line">  interface <span class="title class_">ComponentCustomProps</span> &#123;</span><br><span class="line">    hello?: string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CSSProperties"><a href="#CSSProperties" class="headerlink" title="CSSProperties"></a>CSSProperties</h4><p>用于扩展在样式属性绑定上允许的值的类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">declare <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  interface <span class="title class_">CSSProperties</span> &#123;</span><br><span class="line">    [<span class="attr">key</span>: <span class="string">`--<span class="subst">$&#123;string&#125;</span>`</span>]: string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义渲染"><a href="#自定义渲染" class="headerlink" title="自定义渲染"></a>自定义渲染</h3><h4 id="createRenderer"><a href="#createRenderer" class="headerlink" title="createRenderer()"></a>createRenderer()</h4><p>创建一个自定义渲染器, 可以在非 DOM 环境中使用 Vue 核心运行时的特性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRenderer &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; render, createApp &#125; = <span class="title function_">createRenderer</span>(&#123;</span><br><span class="line">  patchProp,</span><br><span class="line">  insert,</span><br><span class="line">  remove,</span><br><span class="line">  createElement,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// render 是底层 API</span></span><br><span class="line"><span class="comment">// createApp 返回一个应用实例</span></span><br><span class="line"><span class="keyword">export</span> &#123; render, createApp &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新导出 Vue 的核心 API</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><ul>
<li><p>useLink</p>
</li>
<li><p>useRoute 返回当前的路由地址, 相当于模板中使用 $route</p>
</li>
<li><p>useRouter 返回路由器实例, 相当于模板中使用 $router</p>
</li>
<li><p>路由组件传参, 使用 props 将路由和组件解耦</p>
<ul>
<li>布尔模式: <code>&#123;path: &#39;/users/:id&#39;, component: User, props: true&#125;</code></li>
<li>命名视图: <code>&#123;path: &#39;/users/:id&#39;, components: &#123;default: User, sidebar: SideBar&#125;, props: &#123;default: true, sidebar: true&#125;&#125;</code></li>
<li>对象模式: <code>&#123;path: &#39;/users/profile&#39;, component: User, props: &#123;newsLetterPopup: false&#125;&#125;</code></li>
<li>函数模式: <code>&#123;path: &#39;/search&#39;, component: Search, props: (route) =&gt; (&#123;query: route.query&#125;)&#125;</code></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件 User 和 路由强耦合</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123; <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User &#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 props 设置 true 时, route.params 将被设置为组件的 props</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123; <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>], <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User &#123;&#123;id&#125;&#125;&lt;/div&gt;&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;];</span><br></pre></td></tr></table></figure>

<ul>
<li>beforeEnter 路由独享的守卫, <strong>只在进入路由时触发</strong>, 不会在 params, query, hash 改变时触发</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 从 /users/2 到 /users/3，/users/2#info 到 /users/2#projects 不会触发</span></span><br><span class="line">      <span class="comment">// reject navigation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<ul>
<li>onBeforeRouteUpdate 组合式 API 中使用组件 update 守卫</li>
<li>onBeforeRouteLeave 组合式 API 中使用组件 leave 守卫</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onBeforeRouteUpdate, onBeforeRouteLeave &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> userData = <span class="title function_">ref</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onBeforeRouteLeave</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> answer = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;leave?&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 取消导航并停留在同一页面上</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (!answer) <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onBeforeRouteUpdate</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (to.<span class="property">params</span>.<span class="property">id</span> != <span class="keyword">from</span>.<span class="property">params</span>.<span class="property">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      userData.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">fetchUser</span>(to.<span class="property">params</span>.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><ul>
<li>当同时提供了 path, params 参数时, params 会被忽略</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// params 不能和 path 同时使用</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用 name 和 params 组合</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span> &#125; &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>替换当前位置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">replace</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">router.<span class="title function_">replace</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia  "></a>Pinia <em id="store"></em> <!-- markdownlint-disable-line --></h2><p>store 是一个用 <a href="#reactive">reactive</a> 包装的对象, 不需要使用 .value 访问, 使用解构的方式将会丢失响应性</p>
<ul>
<li>defineStore 创建 store, 可使用 Option 对象 或 Setup 函数</li>
<li>storeToRefs() 从 store 中提取属性时保持其响应性, 并且跳过所有的 action 或非响应式(不是 ref 或 reactive)的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia, defineStore, storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="comment">// 创建 pinia 并挂载到 vue 实例</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"><span class="comment">// 定义 store</span></span><br><span class="line"><span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> doubleCount = count.<span class="property">value</span> * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">const</span> increment = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    count.<span class="property">value</span>++;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123; count &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>();</span><br><span class="line"><span class="comment">// count, doubleCount 是响应式的 ref</span></span><br><span class="line"><span class="comment">// 同时通过插件添加的属性也会被提取为 ref</span></span><br><span class="line"><span class="comment">// 并且会跳过所有的 action 或非响应式(不是 ref 或 reactive) 的属性</span></span><br><span class="line"><span class="keyword">const</span> &#123; count, doubleCount &#125; = <span class="title function_">storeToRefs</span>(counter);</span><br><span class="line"><span class="comment">// 作为 action 的 increment 可以直接解构</span></span><br><span class="line"><span class="keyword">const</span> &#123; increment &#125; = counter;</span><br></pre></td></tr></table></figure>

<ul>
<li>store.$dispose() 停止 store 的相关作用域, 并从 store 注册表中删除它. 插件可以覆盖此方法来清理已添加的任何副作用函数</li>
<li>store.$reset() 重置 state 为初始值<ul>
<li>使用 选项式 API 创建的 store 调用此方法, 使用 setup 创建的 store 调用此方法报错 <code>Error: ... is built using the setup syntax and does not implement $reset()</code></li>
</ul>
</li>
<li>store.$patch() 批量修改 state, 可接收一个对象或者一个函数, 如果参数为函数, 函数接收一个参数 state 表示当前 store</li>
<li>store.$subscribe() 订阅 state, 侦听 state 及其变化在 patch 后只触发一次,<br>默认情况下, state 订阅器被绑定在使用的组件上, 当组件卸载时, 它们将被自动移除, 如果想在组件卸载时仍保留它们, 传入第二个参数 <code>&#123; detached: true &#125;</code>, 将订阅器从组件中分离</li>
<li>store.$onAction() 订阅 action, 传递给它的回调函数会在 action 本身之前执行,<br>默认情况下, action 订阅器被绑定在使用的组件上, 当组件卸载时, 它们将被自动移除, 如果想在组件卸载时仍保留它们, 传入第二个参数 true, 将订阅器从组件中分离</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./useCounterStore.js&#x27;</span>; <span class="comment">// counter</span></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>();</span><br><span class="line"><span class="keyword">const</span> unsubscribe = counter.$onAction(</span><br><span class="line">  <span class="function">(<span class="params">&#123; name, store, args, after, onError &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    <span class="comment">// after 函数将在 action 成功并完全运行后触发, 等待着任何返回的 promise</span></span><br><span class="line">    <span class="title function_">after</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">    <span class="comment">// onError 函数将在 action 抛出或返回一个拒绝的 promise 时触发</span></span><br><span class="line">    <span class="title function_">onError</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">true</span> <span class="comment">// 组件卸载时订阅器仍会被保留</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line"><span class="title function_">unsubscribe</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>setMapStoreSuffix() 修改 pinia 为每个 store 的 id 后面加上后缀, 默认 ‘Store’, 修改后会影响调用辅助函数 mapStores 后的 store 的访问方式</li>
<li>mapStores() 将整个 store 映射为组件的计算属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapStores &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./useCounterStore.js&#x27;</span>; <span class="comment">// counter</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./useUserStore.js&#x27;</span>; <span class="comment">// user</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 需要使用 id+&#x27;Store&#x27; 的形式访问每个 store</span></span><br><span class="line">    ...<span class="title function_">mapStores</span>(useCounterStore, useUserStore),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">m1</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">counterStore</span>.<span class="property">count</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counterStore</span>.<span class="title function_">increment</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>mapState() 辅助函数, 将 state 属性映射为只读的计算属性</li>
<li>mapWritableState() 辅助函数, 将 state 映射为可修改的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./useCounterStore.js&#x27;</span>; <span class="comment">// counter</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapState</span>(useCounterStore, [<span class="string">&#x27;count&#x27;</span>]),</span><br><span class="line">    ...<span class="title function_">mapState</span>(useCounterStore, &#123;</span><br><span class="line">      <span class="attr">myCount</span>: <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">      <span class="attr">double</span>: <span class="function">(<span class="params">store</span>) =&gt;</span> store.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>mapActions() 辅助函数, 将 action 属性映射为组件的方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./useCounterStore.js&#x27;</span>; <span class="comment">// counter</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 将 increment 方法注册为组件的 myIncrement 方法</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(useCounterStore, &#123;</span><br><span class="line">      <span class="attr">myIncrement</span>: <span class="string">&#x27;increment&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ES</category>
        <category>VueJs</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>VueJs</tag>
        <tag>Vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>shell语法</title>
    <url>/2022/04/616714173ca1/</url>
    <content><![CDATA[<h3 id="shell-重置密码"><a href="#shell-重置密码" class="headerlink" title="shell 重置密码"></a>shell 重置密码</h3><ol>
<li>开机按 <code>e</code> 键进入内核编辑</li>
<li>光标移动到倒数第二段 <code>Linux16</code> 末尾添加 <code>init=/bin/sh</code></li>
<li><code>ctrl + x</code> 进行引导启动, 成功进入命令提示界面</li>
<li>输入 <code>mount -o remount, rw /</code> 挂载根目录</li>
<li>使用 <code>passwd</code> 命令修改指定用户密码</li>
<li>直到提示 <code>passwd: all authentication tokens updated successfully.</code></li>
<li>输入 <code>touch /.autorelabel</code> 回车</li>
<li>输入 <code>exec /sbin/init</code> 回车重启系统</li>
</ol>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul>
<li>export 导出全局变量</li>
<li>declare 声明变量</li>
<li>unset 删除变量</li>
<li>local 声明局部变量,一般用于函数内部</li>
</ul>
<span id="more"></span>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id=""><a href="#" class="headerlink" title="[ ] | [[ ]]"></a>[ ] | [[ ]]</h4><p>运算表达式两边必须要有空格</p>
<h4 id="-1"><a href="#-1" class="headerlink" title="${}"></a>${}</h4><p>用于变量替换, 便于理解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A=B</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$AB</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;A&#125;</span>B</span><br><span class="line">BB</span><br></pre></td></tr></table></figure>

<h4 id="高版本支持"><a href="#高版本支持" class="headerlink" title="$[ ] | $(( )) | (( )) 高版本支持"></a>$[ ] | $(( )) | (( )) 高版本支持</h4><p>用于进行数学计算，对于浮点数是当作字符串处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=5;b=7;c=2</span><br><span class="line"><span class="built_in">echo</span> $((a+b*c))</span><br><span class="line">19</span><br><span class="line"><span class="built_in">echo</span> $[a+b*c]</span><br><span class="line">19</span><br><span class="line"><span class="built_in">echo</span> $((<span class="variable">$a</span>+<span class="variable">$b</span>*<span class="variable">$c</span>))</span><br><span class="line">19</span><br><span class="line"><span class="built_in">echo</span> $[<span class="variable">$a</span>+<span class="variable">$b</span>*<span class="variable">$c</span>]</span><br><span class="line">19</span><br></pre></td></tr></table></figure>

<h4 id="-2"><a href="#-2" class="headerlink" title="$( )"></a>$( )</h4><p>命令替换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker rm -f $(docker ps -aq) # 移除所有容器</span></span><br></pre></td></tr></table></figure>

<h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><table>
<thead>
<tr>
<th align="center">算术运算符</th>
<th align="center">说明</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加法</td>
<td align="center">echo $((a+b))</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减法</td>
<td align="center">echo $((a-b))</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘法</td>
<td align="center">echo $((a*b))</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除法</td>
<td align="center">echo $((a/b))</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取余</td>
<td align="center">echo $((a%b))</td>
</tr>
<tr>
<td align="center">=</td>
<td align="center">赋值</td>
<td align="center">a=b</td>
</tr>
<tr>
<td align="center">==</td>
<td align="center">相等，判断两个数字是否相等，相等则返回 true</td>
<td align="center">echo $[ ${a} == ${b} ]</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不相等，判断两个数字是否相等，不相等则返回 true</td>
<td align="center">echo $[ ${a} != ${b} ]</td>
</tr>
</tbody></table>
<h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><table>
<thead>
<tr>
<th align="center">在 [ ] 中使用的比较符</th>
<th align="center">在 (( )) 和 [[]] 中使用的比较符</th>
<th align="center">说明</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-eq</td>
<td align="center">==</td>
<td align="center">equal 的缩写，表示相等</td>
<td align="center">[ ${a} -eq ${b} ] | [[${a} == ${b}]] | ((${a} == ${b}))</td>
</tr>
<tr>
<td align="center">-ne</td>
<td align="center">!=</td>
<td align="center">not equal 的缩写，表示不相等</td>
<td align="center">[ ${a} -ne ${b} ] | [[${a} != ${b}]] | ((${a} != ${b}))</td>
</tr>
<tr>
<td align="center">-gt</td>
<td align="center">&gt;</td>
<td align="center">greater than 的缩写，表示大于</td>
<td align="center">[ ${a} -gt ${b} ] | [[${a} &gt; ${b}]] | ((${a} &gt; ${b}))</td>
</tr>
<tr>
<td align="center">-ge</td>
<td align="center">&gt;=</td>
<td align="center">greater equal 的缩写，表示大于等于</td>
<td align="center">[ ${a} -ge ${b} ] | [[${a} &gt;= ${b}]]|((${a} &gt;= ${b}))</td>
</tr>
<tr>
<td align="center">-lt</td>
<td align="center">&lt;</td>
<td align="center">least than 的缩写，表示小于</td>
<td align="center">[ ${a} -lt ${b} ] | [[${a} &lt; ${b}]] | ((${a} &lt; ${b}))</td>
</tr>
<tr>
<td align="center">-le</td>
<td align="center">&lt;=</td>
<td align="center">least equal 的缩写，表示小于等于</td>
<td align="center">[ ${a} -le ${b} ] | [[${a} &lt;= ${b}]]|((${a} &lt;= ${b}))</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$string</span> -ne <span class="string">&#x27;abc&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Not equal&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Equal&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -ge <span class="variable">$b</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Greater equal&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Not greater equal&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table>
<thead>
<tr>
<th align="center">在 [ ] 中使用的比较符</th>
<th align="center">在 (( )) 和 [[]] 中使用的比较符</th>
<th align="center">说明</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">赋值</td>
<td align="center">a=10</td>
<td align="center">b=25</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">-a</td>
<td align="center">&amp;&amp;</td>
<td align="center">与运算，两个表达式都为 true,才返回 true</td>
<td align="center">[ $a -lt 20 -a $b -gt 20 ] 返回 true</td>
</tr>
<tr>
<td align="center">-o</td>
<td align="center">||</td>
<td align="center">或运算，有一个表达式都为 true,则返回 true</td>
<td align="center">[ $a -lt 20 -o $b -gt 100 ] 返回 true</td>
</tr>
<tr>
<td align="center">!</td>
<td align="center">!</td>
<td align="center">非运算，表达式为 true,则返回 false</td>
<td align="center">[ !false ] 返回 true</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=5</span><br><span class="line">b=12</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 50 -a  <span class="variable">$b</span> -gt 8 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;And(-a) expr result is true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;And(-a) expr result is false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt 50 -o <span class="variable">$b</span> -gt 12 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Or(-o) expr result is true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Or(-o) expr result is false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串运算符-字符串运算不需要转义"><a href="#字符串运算符-字符串运算不需要转义" class="headerlink" title="字符串运算符, [ ] 字符串运算不需要转义"></a>字符串运算符, [ ] 字符串运算不需要转义</h4><table>
<thead>
<tr>
<th align="center">字符串运算符</th>
<th align="center">说明</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">检测两个字符串是否相等，相等则返回 true</td>
<td align="center">[ ${a} = ${b} ]</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">检测两个字符串是否相等，不相等则返回 true</td>
<td align="center">[ ${a} != ${b} ]</td>
</tr>
<tr>
<td align="center">-z</td>
<td align="center">检测字符串长度是否为 0，为 0 则返回 true</td>
<td align="center">[ -z ${b} ]</td>
</tr>
<tr>
<td align="center">-n</td>
<td align="center">检测字符串长度是否不为 0，不为 0 则返回 true</td>
<td align="center">[ -n ${b} ]</td>
</tr>
<tr>
<td align="center">str</td>
<td align="center">检测字符串是否为 null，不为 null 则返回 true</td>
<td align="center">[ ${b} ]</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=hello</span><br><span class="line">b=world</span><br><span class="line"><span class="keyword">if</span> [ a = b ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;string a equal string b&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;string a not equal string b&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h4><table>
<thead>
<tr>
<th align="center">文件测试运算符</th>
<th align="center">说明</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-b</td>
<td align="center">检测文件是否是块设备文件，如果是，则返回 true</td>
<td align="center">[ -b $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-c</td>
<td align="center">检测文件是否是字符设备文件，如果是，则返回 true</td>
<td align="center">[ -c $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">检测文件是否是目录文件，如果是，则返回 true</td>
<td align="center">[ -d $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-f</td>
<td align="center">检测文件是否是普通文件（既不是目录也不是设备文件），如果是，则返回 true</td>
<td align="center">[ -f $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-g</td>
<td align="center">检测文件是否设置了 SGID 位，如果是，则返回 true</td>
<td align="center">[ -g $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-k</td>
<td align="center">检测文件是否设置了粘着位（stucky Bit），如果是，则返回 true</td>
<td align="center">[ -k $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-p</td>
<td align="center">检测文件是否具名管道，如果是，则返回 true</td>
<td align="center">[ -p $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-u</td>
<td align="center">检测文件是否设置了 SUID 位，如果是，则返回 true</td>
<td align="center">[ -u $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">检测文件是否可读，如果是，则返回 true</td>
<td align="center">[ -r $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-w</td>
<td align="center">检测文件是否可写，如果是，则返回 true</td>
<td align="center">[ -w $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-x</td>
<td align="center">检测文件是否可执行，如果是，则返回 true</td>
<td align="center">[ -x $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-s</td>
<td align="center">检测文件是否为不为空（文件大小是否不为 0），如果不为 0，则返回 true</td>
<td align="center">[ -s $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-e</td>
<td align="center">检测文件(包括目录)是否存在，如果存在，则返回 true</td>
<td align="center">[ -e $file ] 返回 true</td>
</tr>
<tr>
<td align="center">-a</td>
<td align="center">检测文件(包括目录)是否存在(此命令已废弃)，如果存在，则返回 true</td>
<td align="center">[ -e $file ] 返回 true</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -e .node ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;this file is exists&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;this file not exists&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -s .zshrc ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;file not empty&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;file is empty&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="重定向-管道-流"><a href="#重定向-管道-流" class="headerlink" title="重定向 | 管道 | 流"></a>重定向 | 管道 | 流</h4><h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><ul>
<li><code>&gt;</code> 输出重定向, 文件覆盖</li>
<li><code>&gt;&gt;</code> 输出重定向, 文件末尾追加</li>
<li><code>2&gt;</code> 标准错误输出, 文件覆盖</li>
<li><code>2&gt;&gt;</code> 标准错误输出, 文件末尾追加</li>
<li><code>2&gt;&amp;1</code> 标准输出和标准错误输出</li>
<li><code>&lt;</code> 输入重定向</li>
<li><code>&lt;&lt;</code> 输入重定向</li>
</ul>
<h5 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h5><ul>
<li><code>|</code> 连接两个命令, 第一个命令的输出作为第二个命令的输入</li>
</ul>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当 then 单独另写一行时, 分号不能省略</span></span><br><span class="line"><span class="keyword">if</span> [-e /root/workspace/test.txt ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">printf</span> <span class="string">&quot;hello world %s %s\n&quot;</span> $(/bin/date +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"><span class="comment"># 当 then 单独另写一行时, 分号不能省略</span></span><br><span class="line"><span class="keyword">elif</span> [ -s /root/workspace/test.txt ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">printf</span> <span class="string">&quot;hello world\n&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">printf</span> <span class="string">&quot;hello gg\n&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区分系统信息</span></span><br><span class="line"><span class="built_in">echo</span> $(systeminfo);</span><br><span class="line"></span><br><span class="line"><span class="comment"># if [ -f &#x27;./node-v18.18.0-linux-x64/bin/npm&#x27; ]; then</span></span><br><span class="line"><span class="comment">#   ./node-v18.18.0-linux-x64/bin/npm -v;</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># if [ -f &quot;./node-v18.18.0-win-x86/npm&quot; ]; then</span></span><br><span class="line"><span class="comment">#   ./node-v18.18.0-win-x64/node -v;</span></span><br><span class="line"><span class="comment">#   ./node-v18.18.0-win-x64/npm -v;</span></span><br><span class="line"><span class="comment">#   ./node-v18.18.0-win-x86/npm install;</span></span><br><span class="line"><span class="comment">#   if [[ $? != 0 ]]; then</span></span><br><span class="line"><span class="comment">#     echo -e &quot;\e[1;32mnpm install failure\e[0m&quot;;</span></span><br><span class="line"><span class="comment">#     exit;</span></span><br><span class="line"><span class="comment">#   fi</span></span><br><span class="line"><span class="comment">#   ./node-v18.18.0-win-x86/npm run build;</span></span><br><span class="line"><span class="comment">#   if [[ $? == 0 ]]; then</span></span><br><span class="line"><span class="comment">#     echo -e &quot;\e[1;32mbuild success\e[0m&quot;;</span></span><br><span class="line"><span class="comment">#   else</span></span><br><span class="line"><span class="comment">#     echo -e &quot;\e[1;31mbuild failure\e[0m&quot;;</span></span><br><span class="line"><span class="comment">#   fi</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#   echo &#x27;npm command not found...&#x27;;</span></span><br><span class="line"><span class="comment"># fi</span></span><br></pre></td></tr></table></figure>

<h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a=20</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$a</span> <span class="keyword">in</span></span><br><span class="line">  10)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a的值为 10&quot;</span></span><br><span class="line">  ;;</span><br><span class="line">  20)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a的值为 20&quot;</span> <span class="comment"># 输出 a 的值为 20</span></span><br><span class="line">  ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;a的值不是10也不是20&quot;</span></span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当 do 单独另写一行时, 分号不能省略</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;; <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 依次输出 for do 1 到 10</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;for do &quot;</span> <span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">j=1</span><br><span class="line"><span class="comment"># 当 do 单独另写一行时, 分号不能省略</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$j</span> -lt 10 ]; <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 依次输出 while do 1 到 9</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;while do &quot;</span> <span class="variable">$&#123;j&#125;</span></span><br><span class="line">  j=$[j+1]</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">k=1</span><br><span class="line"><span class="comment"># 当 do 单独另写一行时, 分号不能省略</span></span><br><span class="line">until [ <span class="variable">$k</span> -gt 10 ]; <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 依次输出 until do 1 到 10</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;until do &quot;</span> <span class="variable">$&#123;k&#125;</span></span><br><span class="line">  k=$[k+1]</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h4><ul>
<li>*|@ 获取数组的所有元素, <code>$&#123;arr[*]&#125;</code></li>
<li>! 获取数组的所有键, <code>$&#123;!arr[*]&#125;</code></li>
<li># 获取数组的长度, <code>$&#123;#arr[*]&#125;</code></li>
</ul>
<h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><ul>
<li>bash 只支持一维数组</li>
<li>初始化时不需要定义数组的大小, 定义时用小括号将用空格分隔的元素包含起来</li>
<li>数组元素的下标由 0 开始</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arr=(1 2 3 <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;arr[0]=&quot;</span> <span class="variable">$&#123;arr[0]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;arr[1]=&quot;</span> <span class="variable">$&#123;arr[1]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;arr[2]=&quot;</span> <span class="variable">$&#123;arr[2]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;arr[3]=&quot;</span> <span class="variable">$&#123;arr[3]&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;arr[*]=&quot;</span> <span class="variable">$&#123;arr[*]&#125;</span>  <span class="comment"># 输出所有元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;arr[@]=&quot;</span> <span class="variable">$&#123;arr[@]&#125;</span>  <span class="comment"># 输出所有元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;arr的键为 &quot;</span> <span class="variable">$&#123;!arr[*]&#125;</span></span><br><span class="line"><span class="comment"># arr的键为  0 1 2 3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;arr的长度为 &quot;</span> <span class="variable">$&#123;#arr[*]&#125;</span></span><br><span class="line"><span class="comment"># 获取数组的长度与获取字符串长度的方法相同</span></span><br><span class="line"></span><br><span class="line">str=helloworld</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;str 的长度为 &quot;</span> <span class="variable">$&#123;#str&#125;</span>  <span class="comment"># str 的长度为 10</span></span><br></pre></td></tr></table></figure>

<h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h4><ul>
<li>关联数组, 使用 <code>declare -A</code> 声明</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">declare</span> -A site=([<span class="string">&#x27;google&#x27;</span>]=<span class="string">&#x27;www.google.com&#x27;</span> [<span class="string">&#x27;baidu&#x27;</span>]=<span class="string">&#x27;www.baidu.com&#x27;</span> [<span class="string">&#x27;taobao&#x27;</span>]=<span class="string">&#x27;www.taobao.com&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;site[&#x27;google&#x27;]=&quot;</span> <span class="variable">$&#123;site[&#x27;google&#x27;]&#125;</span></span><br><span class="line"><span class="comment"># site[&#x27;google&#x27;]= www.google.com</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;site[&#x27;baidu&#x27;]=&quot;</span> <span class="variable">$&#123;site[&#x27;baidu&#x27;]&#125;</span></span><br><span class="line"><span class="comment"># site[&#x27;baidu&#x27;]= www.baidu.com</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;site[&#x27;taobao&#x27;]=&quot;</span> <span class="variable">$&#123;site[&#x27;taobao&#x27;]&#125;</span></span><br><span class="line"><span class="comment"># site[&#x27;taobao&#x27;]= www.taobao.com</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;site的所有元素是 &quot;</span> <span class="variable">$&#123;site[*]&#125;</span></span><br><span class="line"><span class="comment"># site的所有元素是  www.google.com www.taobao.com www.baidu.com</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;site的所有元素是 &quot;</span> <span class="variable">$&#123;site[@]&#125;</span></span><br><span class="line"><span class="comment"># site的所有元素是  www.google.com www.taobao.com www.baidu.com</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;site的键为 &quot;</span> <span class="variable">$&#123;!site[*]&#125;</span></span><br><span class="line"><span class="comment"># site的键为  google taobao baidu</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;site的长度为 &quot;</span> <span class="variable">$&#123;#site[*]&#125;</span></span><br><span class="line"><span class="comment"># site的长度为  3</span></span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul>
<li>function 是关键字, 用来定义函数</li>
<li>name 是函数名</li>
<li>statements 函数体中的执行语句</li>
<li>return value 函数的返回值, 一般表示函数的返回状态, 0 表示成功, 其他值表示失败, 只能是 0 - 255 之间的数字</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标准语法</span></span><br><span class="line">[<span class="keyword">function</span>] function_name [()] &#123;</span><br><span class="line">  statements</span><br><span class="line">  [<span class="built_in">return</span> value]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义函数时, 关键字 function 和 () 可以二选一</li>
<li>定义函数时, 不需要提前指定参数, 在函数体内使用参数时, 使用 <code>特殊变量</code> 获取</li>
<li>函数调用时, 函数名后面不需要带小括号, 如果有参数时，多个参数之间用空格分隔</li>
<li>获取函数的返回值<ul>
<li>一种是借助全局变量, 将得到的结果赋值给全局变量</li>
<li>一种是在函数内使用 <code>echo</code>, <code>printf</code> 命令将结果输出, 在函数外部使用 <code>$( )</code> 或者 <code>\</code>`` 捕获结果</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">dateFormat</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> $(/bin/date +<span class="string">&quot;hello crontab %Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(dateFormat) <span class="comment"># 获取函数的结果</span></span><br></pre></td></tr></table></figure>

<h4 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h4><table>
<thead>
<tr>
<th align="center">变量</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$0</td>
<td align="center">当前脚本的文件名</td>
</tr>
<tr>
<td align="center">$n(n&gt;=1)</td>
<td align="center">传递给脚本或函数的参数, n 是一个数字, 表示第几个参数</td>
</tr>
<tr>
<td align="center">$#</td>
<td align="center">传递给脚本或函数的参数个数</td>
</tr>
<tr>
<td align="center">$*</td>
<td align="center">传递给脚本或函数的所有参数, 当前脚本的所有参数作为一个参数</td>
</tr>
<tr>
<td align="center">$@</td>
<td align="center">传递给脚本或函数的所有参数,当前脚本的所有参数分别作为一个参数, 当被双引号包含时, $@ 和 $* 有所不同</td>
</tr>
<tr>
<td align="center">$?</td>
<td align="center">上个命令的退出状态,或函数的返回值</td>
</tr>
<tr>
<td align="center">$$</td>
<td align="center">当前 Shell 进程 ID, 对于 Shell 脚本, 就是这些脚本所在的进程 ID</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>systemd</title>
    <url>/2022/05/0d965ffa3e9b/</url>
    <content><![CDATA[<h2 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h2><p>systemd(system daemon)是 linux 下的一种 init 软件, 提供更优秀的框架以表示系统服务间的依赖关系, 并依此实现系统初始化时服务的并行启动, 同时达到降低 shell 的系统开销的效果, 最终代替常用的 System V 与 BSD 风格 init 程序</p>
<ul>
<li>采用 socket 激活式与总线激活式服务, 以提高相互依赖的各服务的并行运行性能</li>
<li>采用 cgroup 代替 PID 来追踪进程, 依此即使是两次 fork 之后生成的守护进程也不会脱离 systemd 的控制</li>
</ul>
<h3 id="CGroup"><a href="#CGroup" class="headerlink" title="CGroup"></a>CGroup</h3><blockquote>
<p>cgroup 是 linux 内核的一个功能, 用来限制、控制与分离一个进程组的资源(如 CPU、内存、磁盘输入输出等)</p>
</blockquote>
<p>cgroup 是 linux 内核提供的一种机制, 这种机制可以根据需求把一系列系统任务及其子任务整合(或分隔)到按资源划分等级的不同组内, 从而为系统资源管理提供一个统一的框架. 简单说, cgroup 可以限制、记录任务组所使用的物理资源, 本质上来说, cgroup 是内核附加在程序上的一系列钩子(hook), 通过程序运行时对资源的调度触发相应的钩子以达到资源追踪和限制的目的.</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul>
<li>资源限制: cgroup 可以对任务需要的资源总额进行限制, 例如设定任务运行使用的内存上限, 一旦超出就触发 OOM</li>
<li>优先级分配: 通过分配的 CPU 时间片数量和磁盘 IO 带宽, 实际上就等于控制了任务运行的优先级</li>
<li>资源统计: cgroup 可以统计系统的资源使用量, 例如 CPU 使用时长、内存使用量等</li>
<li>任务控制: cgroup 可以对任务执行挂起、恢复等操作</li>
</ul>
<span id="more"></span>

<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li>Task 表示系统中的进程, cgroup 对 task 对其 cpu, mem 等资源进行限制</li>
<li>Subsystem 子系统, 表示一个资源调用控制器, cgroup 支持 cpu,mem 等 subsystem<ul>
<li>blkio 对块设备的 IO 进行限制</li>
<li>cpu 限制 CPU 时间片的额分配, 和 cpuacct 挂载在同一目录</li>
<li>cpuacct 生成 cgroup 种的任务占用 CPU 资源的报告, 与 CPU 挂载在同一目录</li>
<li>cpuset 给 cgroup 中的任务分配独立的 CPU(多处理器系统)和内存节点</li>
<li>devices 允许或禁止 cgroup 中的任务访问块设备</li>
<li>freezer 暂停/恢复 cgroup 中的任务</li>
<li>hugetlb 限制使用的内存页数量</li>
<li>memory 对 cgroup 中的任务的可用内存进行限制, 并自动生成资源占用报告</li>
<li>net_cls 使用等级识别符(classid)标记网络数据包, 让 linux 流量控制器(tc 指令)可以识别来自特定 cgroup 任务的数据包, 并进行网络限制</li>
<li>net_prio 允许基于 cgroup 设置网络流量的优先级</li>
<li>perf_event 允许使用 perf 工具来监控 cgroup</li>
<li>pids 限制任务的数量</li>
</ul>
</li>
<li>Controller Group 控制, 对一种或多种资源设置限制, 是 group 进行资源控制的基本单位, task 可以加入到某个控制组种或一个控制组迁移到另一个</li>
<li>Hierarchy 由一系 Controller Group 组成的树结构</li>
</ul>
<h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img data-src="/images/systemd-1.webp" alt="systemd-1"></p>
<h3 id="hostnamectl"><a href="#hostnamectl" class="headerlink" title="hostnamectl"></a>hostnamectl</h3><p>管理当前主机信息</p>
<ul>
<li>status 查看当前主机的设置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># hostnamectl status</span></span><br><span class="line">  Static hostname: centos7.localdomain</span><br><span class="line">        Icon name: computer-vm</span><br><span class="line">          Chassis: vm</span><br><span class="line">      Machine ID: afcca427b44c4f139ef788ed3b33b7e1</span><br><span class="line">          Boot ID: 312745f18eaa4b3eb809d0f361ad43bc</span><br><span class="line">  Virtualization: kvm</span><br><span class="line">Operating System: CentOS Linux 7 (Core)</span><br><span class="line">      CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">          Kernel: Linux 3.10.0-1160.90.1.el7.x86_64</span><br><span class="line">    Architecture: x86-64</span><br></pre></td></tr></table></figure>

<ul>
<li>set-hostname NAME 设置系统主机名</li>
<li>set-icon-name NAME 设置主机的图标名称</li>
<li>set-chassis NAME 设置主机的基础架构名称</li>
<li>set-deployment NAME 设置主机的部署环境</li>
<li>set-location NAME 设置主机的位置</li>
</ul>
<h3 id="localectl"><a href="#localectl" class="headerlink" title="localectl"></a>localectl</h3><p>管理本地化设置</p>
<ul>
<li>status 查看本地化配置项</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># localectl status</span></span><br><span class="line">System Locale: LANG=zh_CN.utf8</span><br><span class="line">    VC Keymap: us</span><br><span class="line">  X11 Layout: n/a</span><br></pre></td></tr></table></figure>

<ul>
<li>list-locales 查看系统中的本地化配置</li>
<li>set-locale LOCALE 设置系统的本地化</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># localectl set-locale LANG=zh_CN.utf8</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># source /etc/locale.conf # 重新加载本地化配置文件</span></span><br><span class="line"><span class="comment"># 或者使用 newgrp - # 如果有 - 标志表示重新初始化用户环境同重新登陆, 没有 - 表示当前的环境和工作目录不做改变</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># newgrp -</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># locale  # 显示本地化设置</span></span><br><span class="line">LANG=zh_CN.utf8</span><br><span class="line">LC_CTYPE=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_NUMERIC=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_TIME=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_COLLATE=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_MONETARY=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_MESSAGES=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_PAPER=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_NAME=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_ADDRESS=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_TELEPHONE=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_MEASUREMENT=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_IDENTIFICATION=<span class="string">&quot;zh_CN.utf8&quot;</span></span><br><span class="line">LC_ALL=</span><br></pre></td></tr></table></figure>

<h3 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h3><p>管理系统的日期时间设置</p>
<p>RTC(real-time clock) 指硬件时间(BIOS 时间), 专用于记录时间, 有电池供电, 不受服务器和操作系统的开启关闭影响</p>
<p>NTP(network time protocol)网络时间协议, 用来同步化计算机时间的一种协议, 提高精准度的时间校正</p>
<ul>
<li>status 显示日期时间设置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># timedatectl status</span></span><br><span class="line">      Local time: Thu 2023-05-18 14:49:36 CST</span><br><span class="line">  Universal time: Thu 2023-05-18 06:49:36 UTC</span><br><span class="line">        RTC time: Thu 2023-05-18 14:49:36</span><br><span class="line">       Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">     NTP enabled: <span class="built_in">yes</span></span><br><span class="line">NTP synchronized: <span class="built_in">yes</span></span><br><span class="line"> RTC <span class="keyword">in</span> <span class="built_in">local</span> TZ: <span class="built_in">yes</span></span><br><span class="line">      DST active: n/a</span><br><span class="line"></span><br><span class="line">Warning: The system is configured to <span class="built_in">read</span> the RTC time <span class="keyword">in</span> the <span class="built_in">local</span> time zone.</span><br><span class="line">         This mode can not be fully supported. It will create various problems</span><br><span class="line">         with time zone changes and daylight saving time adjustments. The RTC</span><br><span class="line">         time is never updated, it relies on external facilities to maintain it.</span><br><span class="line">         If at all possible, use RTC <span class="keyword">in</span> UTC by calling</span><br><span class="line">         <span class="string">&#x27;timedatectl set-local-rtc 0&#x27;</span>.</span><br></pre></td></tr></table></figure>

<ul>
<li>set-time TIME 设置系统时间</li>
<li>set-timezone ZONE 设置系统时区</li>
<li>list-timezones 显示系统支持的时区</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># timedatectl set-timezone Asia/Shanghai # 设置时区</span></span><br><span class="line"></span><br><span class="line">[root@centos7 workspace]<span class="comment"># timedatectl list-timezones</span></span><br><span class="line">Africa/Abidjan</span><br><span class="line">Africa/Accra</span><br><span class="line">Africa/Addis_Ababa</span><br><span class="line">Africa/Algiers</span><br><span class="line">Africa/Asmara</span><br><span class="line">Africa/Bamako</span><br><span class="line">Asia/Shanghai</span><br></pre></td></tr></table></figure>

<ul>
<li>set-local-rtc BOOL 设置本地时间</li>
<li>set-ntp BOOL 开启 NTP 同步</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># timedatectl set-local-rtc 1 # 设置本地时间</span></span><br><span class="line">[root@centos7 workspace]<span class="comment"># timedatectl set-local-rtc 0 # 设置 UTC 时间</span></span><br><span class="line"></span><br><span class="line">[root@centos7 workspace]<span class="comment"># timedatectl set-ntp 1 # 开启 NTP 同步</span></span><br></pre></td></tr></table></figure>

<h3 id="loginctl"><a href="#loginctl" class="headerlink" title="loginctl"></a>loginctl</h3><p>常看当前登录的用户</p>
<h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><ul>
<li>list-sessions 显示会话列表</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># loginctl list-sessions</span></span><br><span class="line">SESSION        UID USER             SEAT</span><br><span class="line">      8       1000 vagrant</span><br><span class="line">      9       1000 vagrant</span><br><span class="line"></span><br><span class="line">2 sessions listed.</span><br></pre></td></tr></table></figure>

<ul>
<li>session-show [ID…] 显示会话的状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># loginctl session-status 9</span></span><br><span class="line">9 - vagrant (1000)</span><br><span class="line">           Since: Thu 2023-05-18 10:13:35 CST; 4h 53min ago</span><br><span class="line">          Leader: 3294 (sshd)</span><br><span class="line">          Remote: 10.0.2.2</span><br><span class="line">         Service: sshd; <span class="built_in">type</span> <span class="built_in">tty</span>; class user</span><br><span class="line">           State: active</span><br><span class="line">            Unit: session-9.scope</span><br><span class="line">                  ├─3294 sshd: vagrant [priv]</span><br><span class="line">                  ├─3297 sshd: vagrant@pts/1</span><br><span class="line">                  ├─3298 -bash</span><br><span class="line">                  ├─3531 su - root</span><br><span class="line">                  ├─3535 -bash</span><br><span class="line">                  ├─4673 loginctl session-status 9</span><br><span class="line">                  └─4674 less</span><br><span class="line"></span><br><span class="line">May 18 10:13:35 centos7.localdomain systemd[1]: Started Session 9 of user vagrant.</span><br><span class="line">May 18 10:13:35 centos7.localdomain sshd[3294]: pam_unix(sshd:session): session opened <span class="keyword">for</span> user vagrant by (uid=0)</span><br><span class="line">May 18 10:13:43 centos7.localdomain su[3531]: (to root) vagrant on pts/1</span><br><span class="line">May 18 10:13:43 centos7.localdomain su[3531]: pam_unix(su-l:session): session opened <span class="keyword">for</span> user root by vagrant(uid=1000)</span><br></pre></td></tr></table></figure>

<ul>
<li>show-session [ID…] 显示会话的属性</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># loginctl show-session 9</span></span><br><span class="line">Id=9</span><br><span class="line">User=1000</span><br><span class="line">Name=vagrant</span><br><span class="line">Timestamp=Thu 2023-05-18 10:13:35 CST</span><br><span class="line">TimestampMonotonic=3227303782</span><br><span class="line">VTNr=0</span><br><span class="line">Remote=<span class="built_in">yes</span></span><br><span class="line">RemoteHost=10.0.2.2</span><br><span class="line">Service=sshd</span><br><span class="line">Scope=session-9.scope</span><br><span class="line">Leader=3294</span><br><span class="line">Audit=9</span><br><span class="line">Type=<span class="built_in">tty</span></span><br><span class="line">Class=user</span><br><span class="line">Active=<span class="built_in">yes</span></span><br><span class="line">State=active</span><br><span class="line">IdleHint=no</span><br><span class="line">IdleSinceHint=0</span><br><span class="line">IdleSinceHintMonotonic=0</span><br><span class="line">LockedHint=no</span><br></pre></td></tr></table></figure>

<ul>
<li>activate [ID] 激活会话</li>
<li>lock-session [ID…] 屏幕锁定一个或多个会话</li>
<li>unlock-session [ID…] 屏幕解锁一个或多个会话</li>
<li>lock-sessions 屏幕锁定当前所有的会话</li>
<li>unlock-sessions 屏幕解锁当前所有的会话</li>
<li>terminate-session ID… 终止退出多个会话</li>
<li>kill-session ID… 终止退出多个会话</li>
</ul>
<h4 id="User"><a href="#User" class="headerlink" title="User"></a>User</h4><ul>
<li>list-users 显示所有用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># loginctl list-users</span></span><br><span class="line">  UID USER</span><br><span class="line">1000 vagrant</span><br><span class="line"></span><br><span class="line">1 <span class="built_in">users</span> listed.</span><br></pre></td></tr></table></figure>

<ul>
<li>user-status [USER…] 显示用户状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># loginctl user-status vagrant</span></span><br><span class="line">vagrant (1000)</span><br><span class="line">           Since: Thu 2023-05-18 10:13:33 CST; 5h 4min ago</span><br><span class="line">           State: active</span><br><span class="line">        Sessions: 46 *9</span><br><span class="line">            Unit: user-1000.slice</span><br><span class="line">                  ├─session-46.scope</span><br><span class="line">                  │ ├─4951 sshd: vagrant [priv]</span><br><span class="line">                  │ ├─4954 sshd: vagrant@pts/0</span><br><span class="line">                  │ ├─4955 -bash</span><br><span class="line">                  │ ├─5236 su - root</span><br><span class="line">                  │ └─5240 -bash</span><br><span class="line">                  └─session-9.scope</span><br><span class="line">                    ├─3294 sshd: vagrant [priv]</span><br><span class="line">                    ├─3297 sshd: vagrant@pts/1</span><br><span class="line">                    ├─3298 -bash</span><br><span class="line">                    ├─3531 su - root</span><br><span class="line">                    ├─3535 -bash</span><br><span class="line">                    ├─5452 loginctl user-status vagrant</span><br><span class="line">                    └─5453 less</span><br><span class="line"></span><br><span class="line">May 18 15:11:35 centos7.localdomain su[4995]: pam_unix(su-l:session): session opened <span class="keyword">for</span> user root by vagrant(uid=1000)</span><br><span class="line">May 18 15:12:49 centos7.localdomain su[4995]: pam_unix(su-l:session): session closed <span class="keyword">for</span> user root</span><br><span class="line">May 18 15:12:59 centos7.localdomain sudo[5228]:  vagrant : TTY=pts/0 ; PWD=/home/vagrant ; USER=root ; COMMAND=/bin/logi</span><br><span class="line">May 18 15:12:59 centos7.localdomain sudo[5228]: pam_unix(sudo:session): session opened <span class="keyword">for</span> user root by vagrant(uid=0)</span><br><span class="line">May 18 15:12:59 centos7.localdomain sudo[5228]: pam_unix(sudo:session): session closed <span class="keyword">for</span> user root</span><br><span class="line">May 18 15:13:56 centos7.localdomain su[5232]: pam_unix(su-l:auth): authentication failure; <span class="built_in">logname</span>=vagrant uid=1000 euid</span><br><span class="line">May 18 15:13:56 centos7.localdomain su[5232]: pam_succeed_if(su-l:auth): requirement <span class="string">&quot;uid &gt;= 1000&quot;</span> not met by user <span class="string">&quot;root</span></span><br><span class="line"><span class="string">May 18 15:13:58 centos7.localdomain su[5232]: FAILED SU (to root) vagrant on pts/0</span></span><br><span class="line"><span class="string">May 18 15:14:08 centos7.localdomain su[5236]: (to root) vagrant on pts/0</span></span><br><span class="line"><span class="string">May 18 15:14:08 centos7.localdomain su[5236]: pam_unix(su-l:session): session opened for user root by vagrant(uid=1000)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>show-user [USER…] 显示用户的属性</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># loginctl show-user vagrant</span></span><br><span class="line">UID=1000</span><br><span class="line">GID=1000</span><br><span class="line">Name=vagrant</span><br><span class="line">Timestamp=Thu 2023-05-18 10:13:33 CST</span><br><span class="line">TimestampMonotonic=3225226215</span><br><span class="line">RuntimePath=/run/user/1000</span><br><span class="line">Slice=user-1000.slice</span><br><span class="line">Display=9</span><br><span class="line">State=active</span><br><span class="line">Sessions=46 9</span><br><span class="line">IdleHint=no</span><br><span class="line">IdleSinceHint=0</span><br><span class="line">IdleSinceHintMonotonic=0</span><br><span class="line">Linger=no</span><br></pre></td></tr></table></figure>

<ul>
<li>enable-linger [USER…] 启用一个或多个用户的延迟状态</li>
<li>disable-linger [USER…] 禁用一个或多个用户的延迟状态</li>
<li>terminate-user USER… 终止退出一个或多个用户的会话</li>
<li>kill-user USER… 终止退出用户的会话</li>
</ul>
<h4 id="Seat"><a href="#Seat" class="headerlink" title="Seat"></a>Seat</h4><ul>
<li>list-seats 列出本机上的所有可用席位</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># loginctl list-seats</span></span><br><span class="line">SEAT</span><br><span class="line">seat0</span><br><span class="line"></span><br><span class="line">1 seats listed.</span><br></pre></td></tr></table></figure>

<ul>
<li>seat-status [NAME…] 显示可用席位的状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># loginctl seat-status seat0</span></span><br><span class="line">seat0</span><br><span class="line">  Devices:</span><br><span class="line">          ├─/sys/devices/LNXSYSTM:00/LNXPWRBN:00/input/input0</span><br><span class="line">          │ input:input0 <span class="string">&quot;Power Button&quot;</span></span><br><span class="line">          ├─/sys/devices/LNXSYSTM:00/LNXSLPBN:00/input/input1</span><br><span class="line">          │ input:input1 <span class="string">&quot;Sleep Button&quot;</span></span><br><span class="line">          ├─/sys/devices/LNXSYSTM:00/device:00/PNP0A03:00/LNXVIDEO:00/input/input4</span><br><span class="line">          │ input:input4 <span class="string">&quot;Video Bus&quot;</span></span><br><span class="line">          ├─/sys/devices/pci0000:00/0000:00:02.0/drm/card0</span><br><span class="line">          │ drm:card0</span><br><span class="line">          ├─/sys/devices/pci0000:00/0000:00:02.0/graphics/fb0</span><br><span class="line">          │ [MASTER] graphics:fb0 <span class="string">&quot;vboxdrmfb&quot;</span></span><br><span class="line">          ├─/sys/devices/pci0000:00/0000:00:04.0/input/input6</span><br><span class="line">          │ input:input6 <span class="string">&quot;VirtualBox mouse integration&quot;</span></span><br><span class="line">          ├─/sys/devices/platform/i8042/serio0/input/input2</span><br><span class="line">          │ input:input2 <span class="string">&quot;AT Translated Set 2 keyboard&quot;</span></span><br><span class="line">          ├─/sys/devices/platform/i8042/serio1/input/input3</span><br><span class="line">          │ input:input3 <span class="string">&quot;ImExPS/2 Generic Explorer Mouse&quot;</span></span><br><span class="line">          └─/sys/devices/platform/pcspkr/input/input5</span><br><span class="line">            input:input5 <span class="string">&quot;PC Speaker&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>show-seat [NAME…] 显示席位的属性</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># loginctl show-seat seat0</span></span><br><span class="line">Id=seat0</span><br><span class="line">CanMultiSession=<span class="built_in">yes</span></span><br><span class="line">CanTTY=<span class="built_in">yes</span></span><br><span class="line">CanGraphical=<span class="built_in">yes</span></span><br><span class="line">Sessions=</span><br><span class="line">IdleHint=<span class="built_in">yes</span></span><br><span class="line">IdleSinceHint=0</span><br><span class="line">IdleSinceHintMonotonic=0</span><br></pre></td></tr></table></figure>

<ul>
<li>attach NAME DEVICE… 将指定的设备连接到指定的席位上</li>
<li>flush-devices 删除所有之前用 attach 命令连接的设备(同时也删除了所有之前用 attach 命令创建的席位)</li>
<li>terminate-seat NAME… 结束指定席位上的所有会话, 将杀死指定席位上的所有会话进程, 同时释放与之关联的所有资源</li>
</ul>
<h3 id="journalctl"><a href="#journalctl" class="headerlink" title="journalctl"></a>journalctl</h3><p>管理系统运行日志</p>
<ul>
<li>-S,--since=DATE 显示指定日期开始之后的日志</li>
<li>-U,--until=DATE 显示指定日期开始之前的日志</li>
<li>-b,--boot[=ID] 显示指定 boot 的日志</li>
<li>--list-boots 显示所有的 boot</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># journalctl --list-boots</span></span><br><span class="line">0 312745f18eaa4b3eb809d0f361ad43bc 四 2023-05-18 09:19:48 CST—四 2023-05-18 16:01:01 CST</span><br></pre></td></tr></table></figure>

<ul>
<li>-k,--dmesg 显示本次启动时的日志</li>
<li>-u,--unit=UNIT 显示指定 Unit 的日志</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># journalctl --since &quot;2 hours ago&quot; -u redis.service</span></span><br><span class="line">-- Logs begin at 四 2023-05-18 16:09:37 CST, end at 四 2023-05-18 16:22:59 CST. --</span><br><span class="line">5月 18 16:20:54 centos7 systemd[1]: Stopping redis-server...</span><br><span class="line">5月 18 16:20:54 centos7 systemd[1]: Stopped redis-server.</span><br><span class="line">5月 18 16:22:59 centos7 systemd[1]: Starting redis-server...</span><br><span class="line">5月 18 16:22:59 centos7 systemd[1]: Started redis-server.</span><br></pre></td></tr></table></figure>

<ul>
<li>-e,--pager-end 立刻跳到页面结尾</li>
<li>-f,--follow 阻塞 journalctl 进程监听系统运行日志</li>
<li>-n,--lines[=INTEGER] 控制显示日志的行数</li>
<li>-r,--reverse 倒叙输出日志</li>
<li>-0,--output=STRING 设置输出日志的格式<ul>
<li>short</li>
<li>short-iso</li>
<li>short-precise</li>
<li>short-monotonic</li>
<li>verbose</li>
<li>export</li>
<li>json</li>
<li>json-pretty</li>
<li>json-sse</li>
<li>cat</li>
</ul>
</li>
<li>--verify 校验日志的一致性</li>
<li>--header 显示 journal 的头部信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># journalctl --header</span></span><br><span class="line">File Path: /run/log/journal/afcca427b44c4f139ef788ed3b33b7e1/system.journal</span><br><span class="line">File ID: 498fe2e44a684bf7a8353f3e9d09b4f4</span><br><span class="line">Machine ID: afcca427b44c4f139ef788ed3b33b7e1</span><br><span class="line">Boot ID: 33002b9c227345c98ada60a3f1a386c5</span><br><span class="line">Sequential Number ID: 498fe2e44a684bf7a8353f3e9d09b4f4</span><br><span class="line">State: ONLINE</span><br><span class="line">Compatible Flags:</span><br><span class="line">Incompatible Flags: COMPRESSED-XZ</span><br><span class="line">Header size: 240</span><br><span class="line">Arena size: 8388368</span><br><span class="line">Data Hash Table Size: 20913</span><br><span class="line">Field Hash Table Size: 333</span><br><span class="line">Rotate Suggested: no</span><br><span class="line">Head Sequential Number: 1</span><br><span class="line">Tail Sequential Number: 977</span><br><span class="line">Head Realtime Timestamp: 四 2023-05-18 16:09:37 CST</span><br><span class="line">Tail Realtime Timestamp: 四 2023-05-18 16:30:01 CST</span><br><span class="line">Tail Monotonic Timestamp: 20min 23.207s</span><br><span class="line">Objects: 4090</span><br><span class="line">Entry Objects: 977</span><br><span class="line">Data Objects: 2241</span><br><span class="line">Data Hash Table Fill: 10.7%</span><br><span class="line">Field Objects: 43</span><br><span class="line">Field Hash Table Fill: 12.9%</span><br><span class="line">Tag Objects: 0</span><br><span class="line">Entry Array Objects: 827</span><br><span class="line">Disk usage: 8.0M</span><br></pre></td></tr></table></figure>

<h3 id="systemd-analyze"><a href="#systemd-analyze" class="headerlink" title="systemd-analyze"></a>systemd-analyze</h3><p>查看当前系统的启动耗时</p>
<ul>
<li>time 有无此命令都可以</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 workspace]<span class="comment"># systemd-analyze time</span></span><br><span class="line">Startup finished <span class="keyword">in</span> 492ms (kernel) + 3.958s (initrd) + 38.325s (userspace) = 42.776s</span><br></pre></td></tr></table></figure>

<ul>
<li>blame 查看每个服务的启动耗时</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemd-analyze blame</span></span><br><span class="line">    ...    </span><br><span class="line">    3.804s docker.service</span><br><span class="line">    3.677s dev-mapper-centos\x2droot.device</span><br><span class="line">    3.581s NetworkManager-wait-online.service</span><br><span class="line">    3.362s lvm2-monitor.service</span><br><span class="line">    2.831s boot.mount</span><br><span class="line">    2.692s containerd.service</span><br><span class="line">    2.666s tuned.service</span><br><span class="line">    1.988s lvm2-pvscan@8:2.service</span><br><span class="line">    1.464s sysroot.mount</span><br><span class="line">    1.413s dracut-initqueue.service</span><br><span class="line">    1.164s firewalld.service</span><br><span class="line">     875ms vboxadd.service</span><br><span class="line">     560ms systemd-journald.service</span><br><span class="line">     548ms initrd-switch-root.service</span><br><span class="line">     490ms kmod-static-nodes.service</span><br><span class="line">     481ms vboxadd-x11.service</span><br><span class="line">     481ms polkit.service</span><br><span class="line">     471ms rhel-domainname.service</span><br><span class="line">     443ms systemd-remount-fs.service</span><br><span class="line">     418ms vboxadd-service.service</span><br><span class="line">     407ms sshd.service</span><br><span class="line">     396ms auditd.service</span><br><span class="line">     392ms systemd-sysctl.service</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<ul>
<li>critical-chain 显示瀑布状的启动过程流</li>
</ul>
<h3 id="systemd-cgls"><a href="#systemd-cgls" class="headerlink" title="systemd-cgls"></a>systemd-cgls</h3><p>递归显示 cgroup 内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># systemd-cgls</span></span><br><span class="line">├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">├─user.slice</span><br><span class="line">│ └─user-1000.slice</span><br><span class="line">│   ├─session-51.scope</span><br><span class="line">│   │ ├─6018 sshd: vagrant [priv]</span><br><span class="line">│   │ ├─6021 sshd: vagrant@pts/1</span><br><span class="line">│   │ ├─6022 -bash</span><br><span class="line">│   │ ├─6255 su - root</span><br><span class="line">│   │ └─6259 -bash</span><br><span class="line">│   └─session-50.scope</span><br><span class="line">│     ├─5989 sshd: vagrant [priv]</span><br><span class="line">│     ├─5992 sshd: vagrant@pts/0</span><br><span class="line">│     ├─5993 -bash</span><br><span class="line">│     ├─6047 su - root</span><br><span class="line">│     ├─6051 -bash</span><br><span class="line">│     ├─6557 systemd-cgls</span><br><span class="line">│     └─6558 less</span><br><span class="line">└─system.slice</span><br><span class="line">  ├─vboxadd-service.service</span><br><span class="line">  │ └─3167 /usr/sbin/VBoxService --pidfile /var/run/vboxadd-service.sh</span><br><span class="line">  ├─docker.service</span><br><span class="line">  │ └─1182 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">  ├─postfix.service</span><br><span class="line">  │ ├─1123 /usr/libexec/postfix/master -w</span><br><span class="line">  │ ├─1126 qmgr -l -t unix -u</span><br><span class="line">  │ └─4421 pickup -l -t unix -u</span><br><span class="line">  ├─redis.service</span><br><span class="line">  │ └─1057 /usr/local/bin/redis-server 127.0.0.1:6379</span><br><span class="line">  ├─sshd.service</span><br><span class="line">  │ └─1028 /usr/sbin/sshd -D -u0</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<h3 id="systemd-cgtop"><a href="#systemd-cgtop" class="headerlink" title="systemd-cgtop"></a>systemd-cgtop</h3><p>显示 cgroup 的资源使用情况, 类似与 top 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Path                                                                             Tasks   %CPU   Memory  Input/s Output/s</span><br><span class="line">/                                                                                   77    2.3   437.4M        -        -</span><br><span class="line">/user.slice                                                                         11    1.8    35.1M        -        -</span><br><span class="line">/system.slice                                                                        -    0.2   373.4M        -        -</span><br><span class="line">/system.slice/redis.service                                                          1    0.2     9.2M        -        -</span><br><span class="line">/system.slice/containerd.service                                                     1    0.0    58.5M        -        -</span><br><span class="line">/system.slice/rsyslog.service                                                        1    0.0     2.5M        -        -</span><br><span class="line">/system.slice/tuned.service                                                          1    0.0    13.2M        -        -</span><br><span class="line">/system.slice/vboxadd-service.service                                                1    0.0     1.4M        -        -</span><br><span class="line">/system.slice/haveged.service                                                        1    0.0     5.8M        -        -</span><br><span class="line">/system.slice/NetworkManager.service                                                 2      -    11.9M        -        -</span><br><span class="line">/system.slice/auditd.service                                                         1      -     2.9M        -        -</span><br><span class="line">/system.slice/chronyd.service                                                        1      -     1.1M        -        -</span><br><span class="line">/system.slice/crond.service                                                          1      -   756.0K        -        -</span><br><span class="line">/system.slice/dbus.service                                                           1      -     1.7M        -        -</span><br><span class="line">/system.slice/docker.service                                                         1      -   123.8M        -        -</span><br><span class="line">/system.slice/firewalld.service                                                      1      -    34.0M        -        -</span><br><span class="line">/system.slice/sshd.service                                                           1      -     5.1M        -        -</span><br><span class="line">/system.slice/sys-kernel-debug.mount                                                 -      -   256.0K        -        -</span><br><span class="line">/system.slice/system-getty.slice                                                     1      -   188.0K        -        -</span><br><span class="line">/system.slice/system-getty.slice/getty@tty1.service                                  1      -        -        -        -</span><br><span class="line">/system.slice/system-lvm2\x2dpvscan.slice                                            -      -     4.0K        -        -</span><br><span class="line">/system.slice/systemd-journald.service                                               1      -     1.2M        -        -</span><br><span class="line">/system.slice/systemd-logind.service                                                 1      -   960.0K        -        -</span><br><span class="line">/system.slice/systemd-udevd.service                                                  1      -    20.1M        -        -</span><br><span class="line">/system.slice/vagrant_data.mount                                                     -      -    16.0K        -        -</span><br><span class="line">/user.slice/user-1000.slice/session-50.scope                                         6      -        -        -        -</span><br><span class="line">/user.slice/user-1000.slice/session-51.scope                                         5      -        -        -        -</span><br></pre></td></tr></table></figure>

<h3 id="systemd-nspawn"><a href="#systemd-nspawn" class="headerlink" title="systemd-nspawn"></a>systemd-nspawn</h3><p>生成一个用于调试、测试和构建的最小命名空间容器</p>
<h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><p>systemd 系统控制和服务管理工具的主命令, systemd 开启和监督整个系统是基于 Unit 的概念, Unit 是由一个与配置文件名同名的名字和类型组成</p>
<table>
<thead>
<tr>
<th align="center">Runlevel</th>
<th>Target Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td>runlevel0.target, poweroff.target</td>
<td>Shut down and power off the system</td>
</tr>
<tr>
<td align="center">1</td>
<td>runlevel1.target, rescue.target</td>
<td>Set up a rescue shell</td>
</tr>
<tr>
<td align="center">2</td>
<td>runlevel2.target, multi-user.target</td>
<td>Set up a non-graphical multi-user system</td>
</tr>
<tr>
<td align="center">3</td>
<td>runlevel3.target, multi-user.target</td>
<td>Set up a non-graphical multi-user system</td>
</tr>
<tr>
<td align="center">4</td>
<td>runlevel4.target, multi-user.target</td>
<td>Set up a non-graphical multi-user system</td>
</tr>
<tr>
<td align="center">5</td>
<td>runlevel5.target, graphical.target</td>
<td>Set up a graphical multi-user system</td>
</tr>
<tr>
<td align="center">6</td>
<td>runlevel6.target, reboot.target</td>
<td>Shut down and reboot the system</td>
</tr>
</tbody></table>
<ul>
<li><p>start 启动服务</p>
</li>
<li><p>stop 停止服务</p>
</li>
<li><p>reload 重新加载配置文件不重启服务</p>
</li>
<li><p>restart 重启服务</p>
</li>
<li><p>enable 允许开机启动</p>
</li>
<li><p>disable 取消开机启动</p>
</li>
<li><p>status 查看服务的状态</p>
</li>
<li><p>is-active 查看服务是否正在运行</p>
</li>
<li><p>is-enabled 查看服务是否开机启动</p>
</li>
<li><p>show 查看服务的详细信息</p>
</li>
<li><p>default 进入系统默认模式</p>
</li>
<li><p>rescue 进入系统救援模式</p>
</li>
<li><p>emergency 进入系统应急模式</p>
</li>
<li><p>halt 关闭系统</p>
</li>
<li><p>poweroff 关闭系统</p>
</li>
<li><p>reboot 重启系统</p>
</li>
<li><p>daemon-reload 重新加载 systemd 系统管理配置项</p>
</li>
<li><p>daemon-reexec 重新执行 systemd 系统管理器</p>
</li>
</ul>
<h4 id="Unit-类型"><a href="#Unit-类型" class="headerlink" title="Unit 类型"></a>Unit 类型</h4><p>每个配置单元都有一个对应的配置文件</p>
<ul>
<li>service: .service, 代表一个后台服务进程, 例如 mysqld、nginx</li>
<li>socket: .socket, 此类配置单元封装系统和互联网中的一个套接字, 每个套接字配置单元都有一个相应的服务配置单元, 相应的服务在第一个连接进入套接字时就会自动启动(例如 nscd.socket 在有新连接后会启动 nscd.service)</li>
<li>device: .device, 此类配置单元封装一个存在于 linux 设备树中的设备, 每个使用 udev 规则标记的设备都会在 systemd 中作为一个设备配置单元出现</li>
<li>mount: .mount, 此类配置单元封装文件系统结构层次中的一个挂载点, systemd 将对这个挂载点进行监控和管理, systemd 会将 /etc/fstab 中的条目都转换为挂载点, 并在开机时处理</li>
<li>automount: .automount, 此类配置单元封装文件系统结构层次中的一个自动挂载点, 每个自动挂载配置单元对应一个挂载配置单元</li>
<li>swap: .swap, 和挂载配置单元类似, 可以用交换配置单元来定义系统中的交换分区, 让这些交换分区在启动时被激活</li>
<li>target: .target, 此类配置单元为其它配置单元进行逻辑分组, 它们本身没有任何行为, 只是引用其他配置单元, 这样就可以对配置单元做一个统计的控制</li>
<li>timer: .timer, 定时器配置单元用来定时触发用户定义的操作, 这类配置单元取代了 atd, crond 等传统的定时服务</li>
<li>snapshot: .snapshot, 与 target 配置单元类似, 快照是一组配置单元, 保存了系统当前的运行状态</li>
<li>path: .path, 用于定义文件系统中的文件或目录</li>
</ul>
<h4 id="配置文件项"><a href="#配置文件项" class="headerlink" title="配置文件项"></a>配置文件项</h4><h5 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h5><p>用来定义单元的元数据, 以及配置与其他 Unit 的关系</p>
<ul>
<li>Description 当前服务的简单描述</li>
<li>Documentation 文档地址</li>
<li>Requires 表示强依赖关系, 即某些服务停止运行或退出, 该服务也必须停止或退出</li>
<li>Wants 表示弱依赖关系, 即某些服务停止运行或退出不会影响该服务继续运行</li>
<li>After 表示在什么服务之后启动</li>
<li>Before 表示在什么服务之前启动</li>
<li>Conflicts 表示指定的 Unit 不能与当前 Unit 同时运行</li>
<li>Condition 表示当前 Unit 运行必须满足的条件, 否则不会运行</li>
<li>Assert 表示当前 Unit 运行必须满足的条件, 否则会报启动失败</li>
</ul>
<h5 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h5><p>定义如何安装此配置文件</p>
<ul>
<li>Alias 为当前 Unit 定义一个用于启动的别名</li>
<li>Also 当前 Unit 被激活时, 同时被激活的其他 Unit</li>
<li>DefaultInstance 实例单元的限制, 这个选项指定如果 Unit 被允许运行时的默认实例</li>
<li>RequiredBy 当前 Unit 被允许运行需要的一系列依赖 Unit, RequiredBy 列表从 Require 获得依赖信息</li>
<li>WantedBy 表示该服务所在的 target, target 表示一组服务, 大多的服务都附在 multi-user.target 组, 这个组的所有服务都将开机启动</li>
</ul>
<h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><p>配置 service, 只有 service 类型的 Unit 才有此项</p>
<ul>
<li><p>Type 定义启动时的进程行为</p>
<ul>
<li>simple 默认值, 执行 ExecStart 指定的命令, 启动主进程</li>
<li>forking 以 fork 方式从父进程创建子进程, 此时父进程将会退出, 子进程成为主进程</li>
<li>oneshot 与 simple 类似, 但只执行一次, Systemd 等待此进程执行完后, 才启动其他服务</li>
<li>dbus 与 simple 类似, 但会等待 D-Bus 信号后启动</li>
<li>notify 与 simple 类似, 启动结束后会发出通知信号, Systemd 再启动其他服务</li>
<li>idle 与 simple 类似, 等待其他任务都执行完成, 才会启动该服务</li>
</ul>
</li>
<li><p>ExecStart 定义启动进程时执行的命令或脚本</p>
</li>
<li><p>ExecStartPre 定义启动服务之前执行的命令或脚本</p>
</li>
<li><p>ExecStartPost 定义启动服务之后执行的命令或脚本</p>
</li>
<li><p>ExecStop 定义停止服务时执行的命令或脚本</p>
</li>
<li><p>ExecStopPost 定义停止服务之后执行的命令或脚本</p>
</li>
<li><p>RestartSec 定义 Systemd 重启服务之前等待的秒数</p>
</li>
<li><p>TimeoutSec 定义 Systemd 停止服务之前等待的秒数</p>
</li>
<li><p>ExecReload 定义重启服务时执行的命令或脚本</p>
</li>
<li><p>KillMode 定义 Systemd 如何停止服务</p>
<ul>
<li>control-group 默认值, 当前控制组内的所有子进程都会被杀掉</li>
<li>process 只杀主进程</li>
<li>mixed 主进程将受到 SIGTERM 信号, 子进程受到 SIGKILL 信号</li>
<li>none 不杀掉任何进程, 只执行服务的 stop 命令</li>
</ul>
</li>
<li><p>Restart 定义 Systemd 重启服务的方式</p>
<ul>
<li>no 默认值, 退出后不会重启</li>
<li>on-success 只有正常退出时(退出状态码为 0), 才会重启</li>
<li>on-failure 非正常退出时(退出状态码非 0), 包括信号被终止和超时才会重启</li>
<li>on-abnormal 只有被信号终止和超时才会重启</li>
<li>on-abort 只有在收到没有捕捉到的信号终止时才会重启</li>
<li>on-watchdog 超时退出才会重启</li>
<li>always 不管什么原因总是重启</li>
</ul>
</li>
<li><p>TimeoutStartSec 设置该服务允许的最大启动时长, 设置为0 表示永不超时</p>
</li>
<li><p>TimeoutStopSec 设置该服务允许的最大停止时长, 设置为0 表示永不超时</p>
</li>
<li><p>User 定义服务的用户名</p>
</li>
<li><p>Group 运行服务的用户组, 会影响服务对本地文件系统的访问权限</p>
</li>
<li><p>PIDFile 定义守护进程的 PID 文件, 必须为绝对路径</p>
</li>
<li><p>Nice 定义服务的进程优先级,值越小优先级越高, 默认为0, -20 ~ 19</p>
</li>
<li><p>Environment 为服务添加环境变量</p>
</li>
<li><p>EnvironmentFile 定义环境变量配置文件</p>
</li>
<li><p>PrivateTmp 定义是否分配独立空间</p>
</li>
<li><p>RootDirectory 配置服务进程的根目录, 服务将无法访问指定目录以外的任何文件</p>
</li>
<li><p>WorkingDirectory 定义服务的安装目录</p>
</li>
</ul>
<h5 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h5><ul>
<li>OnBootSec 当开机多久后才执行当前 Unit</li>
<li>OnUnitActiveSec 这个 timer 配置文件所管理的那个 Unit 在最后一次启动后, 相隔多久再执行一次</li>
<li>OnUnitInactiveSec 这个 timer 配置文件所管理的那个 Unit 在最后一次停止后, 相隔多久再执行一次</li>
<li>OnCalendar 使用实际时间(非循环时间)的方式来启动服务</li>
<li>OnActiveSec 当 timers.target 启动多久后才执行当前 Unit</li>
<li>OnStartupSec 当 Systemd 第一次启动后多久才执行当前 Unit</li>
</ul>
<h4 id="配置-service"><a href="#配置-service" class="headerlink" title="配置 service"></a>配置 service</h4><ul>
<li>Redis.service</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /root/workspace/redis6379.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h4 id="配置-target"><a href="#配置-target" class="headerlink" title="配置 target"></a>配置 target</h4><ul>
<li>multi-user.target</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  This file is part of systemd.</span><br><span class="line">#</span><br><span class="line">#  systemd is free software; you can redistribute it and/or modify it</span><br><span class="line">#  under the terms of the GNU Lesser General Public License as published by</span><br><span class="line">#  the Free Software Foundation; either version 2.1 of the License, or</span><br><span class="line">#  (at your option) any later version.</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Multi-User System</span><br><span class="line">Documentation=man:systemd.special(7)</span><br><span class="line">Requires=basic.target</span><br><span class="line">Conflicts=rescue.service rescue.target</span><br><span class="line">After=basic.target rescue.service rescue.target</span><br><span class="line">AllowIsolate=yes</span><br></pre></td></tr></table></figure>

<h4 id="配置-timer"><a href="#配置-timer" class="headerlink" title="配置 timer"></a>配置 timer</h4><ul>
<li>systemd-tmpfiles-clean.timer</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  This file is part of systemd.</span><br><span class="line">#</span><br><span class="line">#  systemd is free software; you can redistribute it and/or modify it</span><br><span class="line">#  under the terms of the GNU Lesser General Public License as published by</span><br><span class="line">#  the Free Software Foundation; either version 2.1 of the License, or</span><br><span class="line">#  (at your option) any later version.</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Daily Cleanup of Temporary Directories</span><br><span class="line">Documentation=man:tmpfiles.d(5) man:systemd-tmpfiles(8)</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnBootSec=15min # 当开机多久后才执行当前 Unit</span><br><span class="line">OnUnitActiveSec=1d  # 这个 timer 配置文件所管理的那个 Unit 在最后一次启动后, 相隔多久再执行一次</span><br><span class="line">#OnUnitInactiveSec # 这个 timer 配置文件所管理的那个 Unit 在最后一次停止后, 相隔多久再执行一次</span><br><span class="line">#OnCalendar # 使用实际时间(非循环时间)的方式来启动服务</span><br><span class="line">#OnActiveSec  # 当 timers.target 启动多久后才执行当前 Unit</span><br><span class="line">#OnStartupSec # 当 Systemd 第一次启动后多久才执行当前 Unit</span><br></pre></td></tr></table></figure>

<h4 id="配置-mount"><a href="#配置-mount" class="headerlink" title="配置 mount"></a>配置 mount</h4><ul>
<li>tmp.mount</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  This file is part of systemd.</span><br><span class="line">#</span><br><span class="line">#  systemd is free software; you can redistribute it and/or modify it</span><br><span class="line">#  under the terms of the GNU Lesser General Public License as published by</span><br><span class="line">#  the Free Software Foundation; either version 2.1 of the License, or</span><br><span class="line">#  (at your option) any later version.</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Temporary Directory</span><br><span class="line">Documentation=man:hier(7)</span><br><span class="line">Documentation=http://www.freedesktop.org/wiki/Software/systemd/APIFileSystems</span><br><span class="line">ConditionPathIsSymbolicLink=!/tmp</span><br><span class="line">DefaultDependencies=no</span><br><span class="line">Conflicts=umount.target</span><br><span class="line">Before=local-fs.target umount.target</span><br><span class="line"></span><br><span class="line">[Mount]</span><br><span class="line">What=tmpfs</span><br><span class="line">Where=/tmp</span><br><span class="line">Type=tmpfs</span><br><span class="line">Options=mode=1777,strictatime</span><br><span class="line"></span><br><span class="line"># Make &#x27;systemctl enable tmp.mount&#x27; work:</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=local-fs.target</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>vagrant</title>
    <url>/2022/04/6a14bcf31f14/</url>
    <content><![CDATA[<h2 id="敲黑板"><a href="#敲黑板" class="headerlink" title="敲黑板"></a>敲黑板</h2><h3 id="vagrant-命令行报错-Encoding-UndefinedConversionError"><a href="#vagrant-命令行报错-Encoding-UndefinedConversionError" class="headerlink" title="vagrant 命令行报错 Encoding::UndefinedConversionError"></a>vagrant 命令行报错 Encoding::UndefinedConversionError</h3><p>使用 vagrant 命令时提示 process_builder.rb:44:in `encode!’: “\xE5” to UTF-8 in conversion from ASCII-8BIT to UTF-8 to UTF-16LE (Encoding::UndefinedConversionError)</p>
<p>本例使用的 vagrant 版本为 2.2.10, 安装目录：&lt;br/&gt; D:\HashiCorp\Vagrant\embedded\gems\2.2.10\gems\childprocess-4.0.0\lib\childprocess\windows\process_builder.rb 第 44 行</p>
<p>修改 newstr.encode!(‘UTF-16LE’) 为 &lt;br/&gt; newstr.encode!(‘UTF-16LE’, invalid: :replace, undef: :replace, replace: ‘?’) <a href="https://blog.csdn.net/qq_41606390/article/details/122854431">参考连接</a></p>
<h3 id="vagrant-自制-box-启动时-Authentication-failure"><a href="#vagrant-自制-box-启动时-Authentication-failure" class="headerlink" title="vagrant 自制 box 启动时 Authentication failure"></a>vagrant 自制 box 启动时 Authentication failure</h3><ul>
<li>vagrant 2.3.6</li>
<li>virtualBox 7.0.8</li>
<li>win 11</li>
</ul>
<blockquote>
<p>Authentication failure 是 ssh 登录证书错误, 但虚拟机已经启动完成</p>
</blockquote>
<ul>
<li><code>.ssh/authorized_keys</code> 或 <code>.vagrant/machines/default/virtualbox/private_key</code> 有变化(内容改动/文件存在)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">==&gt; default: Forwarding ports...</span><br><span class="line">    default: 22 (guest) =&gt; 2222 (host) (adapter 1)</span><br><span class="line">==&gt; default: Booting VM...</span><br><span class="line">==&gt; default: Waiting <span class="keyword">for</span> machine to boot. This may take a few minutes...</span><br><span class="line">    default: SSH address: 127.0.0.1:2222</span><br><span class="line">    default: SSH username: vagrant</span><br><span class="line">    default: SSH auth method: private key</span><br><span class="line">    default: Warning: Authentication failure. Retrying...</span><br><span class="line">    default: Warning: Authentication failure. Retrying...</span><br><span class="line">    default: Warning: Authentication failure. Retrying...</span><br><span class="line">    default: Warning: Authentication failure. Retrying...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>vagrant 官方提供了一对默认的 keypair,<br>公钥预先存放在 box 的 vagrant 家目录 <code>.ssh/authorized_keys</code> 文件中(公钥末尾包含 vagrant insecure public key),<br>私钥存放在宿主机 vagrant 安装目录的 .vagrant.d 下的 <code>insecure_private_key</code> 文件中.</p>
<p>当 vagrant up 启动虚拟机时, 第一次登录虚拟机使用的是官方提供的 keypair, 然后 vagrant 在宿主机生成一对新的 keypair,<br>将公钥更新虚拟机中 vagrant 家目录 <code>.ssh/authorized_keys</code> 文件内容,<br>将私钥存放到初始化虚拟机目录的 <code>.vagrant/machines/default/virtualbox/private_key</code> 文件中.</p>
<blockquote>
<p>为了安全考虑才会有替换公钥的过程, 否则任何人使用官方公钥都可以登录</p>
</blockquote>
<p>解决办法:</p>
<ul>
<li>通过用户密码登录虚拟机</li>
<li>使用命令 <code>wget</code> 将官方不安全的公钥更新指定文件 <code>/home/vagrant/.ssh/authorized_keys</code><ul>
<li>-O file, 指定文件名</li>
<li><code>https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub</code></li>
</ul>
</li>
<li>使用命令 <code>chmod</code> 修改 <code>authorized_keys</code> 文件仅属主可读写</li>
<li>退出并关闭虚拟机</li>
<li>使用命令 <code>vagrant package</code> 重新打包</li>
<li>使用命令 <code>vagrant box add</code> 导入打包的 box 文件</li>
<li>使用导入的 box 创建并启动虚拟机</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title>web-component</title>
    <url>/2024/02/8030afef2dbd/</url>
    <content><![CDATA[<h2 id="Web-Component"><a href="#Web-Component" class="headerlink" title="Web Component"></a>Web Component</h2><p>Web Component 是一套不同的技术, 允许创建可重用的定制元素(它们的功能封装在代码之外)并且在 web 应用中使用它们</p>
<ul>
<li>Custom element(自定义元素): 一组 JavaScript API, 允许自定义元素及其行为, 然后在用户界面中按照需要使用它们</li>
<li>Shadow DOM(影子 DOM): 一组 JavaScript API, 用于将封装的 “影子”DOM 树附加到指定元素(与页面 DOM 分开呈现)并控制其关联的功能. 通过这种方式, 可以保持自定义元素的功能私有, 这样它们就可以被脚本化和样式化,而不用担心与文档的其他部分发生冲突</li>
<li>HTML template(HTML 模板): <code>&lt;template&gt;</code> 和 <code>&lt;slot&gt;</code> 元素可以编写不在呈现页面中显示的标记模板. 然后它们可以作为自定义元素结构的基础被多次重用</li>
</ul>
<h2 id="自定义元素"><a href="#自定义元素" class="headerlink" title="自定义元素"></a>自定义元素</h2><p>==封装== ==重用==</p>
<p>创建自定义元素, 扩展浏览器中可用的元素集</p>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li>自定义内置元素, 继承自标准的 HTML 元素, 例如 HTMLImageElement, HTMLParagraphElement</li>
<li>独立自定义元素, 继承自 HTML 元素基类 HTMLElement, 必须从头实现它们的行为</li>
</ul>
<h3 id="实现自定义元素"><a href="#实现自定义元素" class="headerlink" title="实现自定义元素"></a>实现自定义元素</h3><p>使用 ES6 中的类实现一个自定义元素, 该类可以扩展 HTMLElement 或者其它定制的接口</p>
<ul>
<li>在构造函数中设置初始化状态和默认值, 注册事件监听器, 创建一个影子根(shadowRoot)</li>
<li>在构造函数中不能检查元素的属性或子元素, 不能添加新的属性或子元素</li>
</ul>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WordCount</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLParagraphElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 自定义元素功能 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PopupInfo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 必须首先调用 super 方法</span></span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 创建影子根</span></span><br><span class="line">    <span class="keyword">const</span> shadow = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建几个 span</span></span><br><span class="line">    <span class="keyword">const</span> wrapper = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    wrapper.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;wrapper&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> icon = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    icon.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;icon&#x27;</span>);</span><br><span class="line">    icon.<span class="title function_">setAttribute</span>(<span class="string">&#x27;tabindex&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> info = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    info.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取属性内容然后将其放入 info 这个 span 内</span></span><br><span class="line">    <span class="keyword">const</span> text = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-text&#x27;</span>);</span><br><span class="line">    info.<span class="property">textContent</span> = text;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入图标</span></span><br><span class="line">    <span class="keyword">let</span> imgUrl;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;img&#x27;</span>)) &#123;</span><br><span class="line">      imgUrl = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      imgUrl = <span class="string">&#x27;img/default.png&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    img.<span class="property">src</span> = imgUrl;</span><br><span class="line">    icon.<span class="title function_">appendChild</span>(img);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一些 CSS 应用于影子 DOM</span></span><br><span class="line">    <span class="keyword">const</span> style = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(style.<span class="property">isConnected</span>);</span><br><span class="line"></span><br><span class="line">    style.<span class="property">textContent</span> = <span class="string">`</span></span><br><span class="line"><span class="string">      .wrapper &#123;</span></span><br><span class="line"><span class="string">        position: relative;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      .info &#123;</span></span><br><span class="line"><span class="string">        font-size: 0.8rem;</span></span><br><span class="line"><span class="string">        width: 200px;</span></span><br><span class="line"><span class="string">        display: inline-block;</span></span><br><span class="line"><span class="string">        border: 1px solid black;</span></span><br><span class="line"><span class="string">        padding: 10px;</span></span><br><span class="line"><span class="string">        background: white;</span></span><br><span class="line"><span class="string">        border-radius: 10px;</span></span><br><span class="line"><span class="string">        opacity: 0;</span></span><br><span class="line"><span class="string">        transition: 0.6s all;</span></span><br><span class="line"><span class="string">        position: absolute;</span></span><br><span class="line"><span class="string">        bottom: 20px;</span></span><br><span class="line"><span class="string">        left: 10px;</span></span><br><span class="line"><span class="string">        z-index: 3;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      img &#123;</span></span><br><span class="line"><span class="string">        width: 1.2rem;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      .icon:hover + .info, .icon:focus + .info &#123;</span></span><br><span class="line"><span class="string">        opacity: 1;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将创建好的元素附加到影子 DOM 上</span></span><br><span class="line">    shadow.<span class="title function_">appendChild</span>(style);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(style.<span class="property">isConnected</span>);</span><br><span class="line">    shadow.<span class="title function_">appendChild</span>(wrapper);</span><br><span class="line">    wrapper.<span class="title function_">appendChild</span>(icon);</span><br><span class="line">    wrapper.<span class="title function_">appendChild</span>(info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义元素生命周期"><a href="#自定义元素生命周期" class="headerlink" title="自定义元素生命周期"></a>自定义元素生命周期</h4><ul>
<li>connectedCallback() 每当元素添加到文档中时调用, 对自定义元素的操作在此钩子中实现</li>
<li>disconnectedCallback() 每当元素从文档中移除时调用</li>
<li>adoptedCallback() 每当元素被移动到新文档中时调用</li>
<li>attributeChangedCallback() 在属性更改、添加、移除或替换时调用, 接收三个参数,<ul>
<li>name, 发生变化的属性名称</li>
<li>oldValue, 属性的旧值</li>
<li>newValue, 属性的新值</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">customElements</span>.<span class="title function_">define</span>(</span><br><span class="line">  <span class="string">&#x27;my-custom-element&#x27;</span>,</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自定义元素添加到页面&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">disconnectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自定义元素从页面中移除&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">adoptedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自定义元素移动到新页面&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">attributeChangedCallback</span>(<span class="params">name, oldValue, newValue</span>) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="响应属性变化"><a href="#响应属性变化" class="headerlink" title="响应属性变化"></a>响应属性变化</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">customElements</span>.<span class="title function_">define</span>(</span><br><span class="line">  <span class="string">&#x27;my-custom-element&#x27;</span>,</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLElement</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> observedAttributes = [<span class="string">&#x27;size&#x27;</span>]; <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">attributeChangedCallback</span>(<span class="params">name, oldValue, newValue</span>) &#123;</span><br><span class="line">      <span class="comment">// size 在被更改时触发</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`属性 <span class="subst">$&#123;name&#125;</span> 已由 <span class="subst">$&#123;oldValue&#125;</span> 变更为 <span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  size 在被更改时触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-custom-element</span> <span class="attr">size</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-custom-element</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义元素注册"><a href="#自定义元素注册" class="headerlink" title="自定义元素注册"></a>自定义元素注册</h3><p>注册自定义元素使用 <code>window.customElements.define()</code> 方法, 接收三个参数</p>
<ul>
<li>name, 自定义元素的名称, 使用 <code>kebab-case</code> 格式</li>
<li>constructor, 自定义元素的构造函数</li>
<li>options, 可选, 一个对象,<ul>
<li>extends, 指定自定义元素要扩展的内置元素名称</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">customElements</span>.<span class="title function_">define</span>(</span><br><span class="line">  <span class="string">&#x27;word-count&#x27;</span>,</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLParagraphElement</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自定义元素添加到页面&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">extends</span>: <span class="string">&#x27;p&#x27;</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">customElements</span>.<span class="title function_">define</span>(<span class="string">&#x27;popup-info&#x27;</span>, <span class="title class_">PopupInfo</span>);</span><br></pre></td></tr></table></figure>

<h3 id="使用自定义元素"><a href="#使用自定义元素" class="headerlink" title="使用自定义元素"></a>使用自定义元素</h3><ul>
<li>自定义内置元素</li>
</ul>
<p>使用内置元素时, 将自定义元素的名称作为 is 属性的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">is</span>=<span class="string">&quot;word-count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>独立自定义元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">popup-info</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 元素内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">popup-info</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="影子-DOM"><a href="#影子-DOM" class="headerlink" title="影子 DOM"></a>影子 DOM</h2><p>将一个 DOM 树附加到一个元素上, 并且使该树的的内部与页面中运行的 Javascript 和 CSS 相互隔离</p>
<ul>
<li>影子宿主(Shadow host), 影子 DOM 附加到的常规 DOM 节点</li>
<li>影子树(Shadow tree), 影子 DOM 内部的 DOM 树</li>
<li>影子边界(Shadow boundary), 影子 DOM 终止, 常规 DOM 开始的地方</li>
<li>影子根(Shadow root), 影子树的根节点</li>
</ul>
<h3 id="创建影子-DOM"><a href="#创建影子-DOM" class="headerlink" title="创建影子 DOM"></a>创建影子 DOM</h3><p>使用页面中指定的 DOM 元素作为影子宿主, 调用宿主的 <code>attachShadow()</code> 方法创建影子 DOM</p>
<ul>
<li>Element.shadowRoot 通过影子宿主的 shadowRoot 属性访问影子 DOM 的内部</li>
<li>Element.attachShadow() 创建影子 DOM<ul>
<li>mode, 指定影子 DOM 树的封装模式<ul>
<li>open, 允许从外部访问影子 DOM 根节点, Element.shadowRoot 返回一个 ShadowRoot 对象</li>
<li>closed, 拒绝从外部访问关闭的 影子 DOM 根节点, Element.shadowRoot 返回 null</li>
</ul>
</li>
<li>delegatesFocus, 焦点委托, 当设置为 true 时, 指定减轻自定义元素的聚焦性能问题行为</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;host&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> host = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#host&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> shadow = host.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  span.<span class="property">textContent</span> = <span class="string">&quot;I&#x27;m in the shadow DOM&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  shadow.<span class="title function_">appendChild</span>(span);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS-封装"><a href="#CSS-封装" class="headerlink" title="CSS 封装"></a>CSS 封装</h3><h4 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h4><blockquote>
<p>创建单一样式表并将其与多个 DOM 树共享</p>
</blockquote>
<p>通过构建一个 <code>CSSStyleSheet</code> 对象并将其附加到影子根</p>
<ul>
<li>replace() 和 replaceSync() 替换当前样式表的内容, 只能用在通过 CSSStyleSheet 构造函数创建的 styleSheet 对象上<ul>
<li>replace() 方法异步的设置其内容, 返回一个 Promise</li>
<li>replaceSync() 方法同步的设置其内容</li>
</ul>
</li>
<li>insertRule(rule [, index]) 向当前样式表指定位置插入样式规则, index 默认为 0, 返回值为新插入的规则在样式表中的索引</li>
<li>deleteRule(index) 从样式表中删除指定的样式规则, index 为样式规则的索引</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空的 CSSStyleSheet 对象</span></span><br><span class="line"><span class="keyword">const</span> sheet = <span class="keyword">new</span> <span class="title class_">CSSStyleSheet</span>();</span><br><span class="line"><span class="comment">// 使用 replace 或 replaceSync 方法设置其内容</span></span><br><span class="line">sheet.<span class="title function_">replaceSync</span>(<span class="string">&#x27;span &#123; color: red; border: 2px dotted black;&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#host&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建影子 DOM</span></span><br><span class="line"><span class="keyword">const</span> shadow = host.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// 将 styleSheet 添加到影子根的 adoptedStyleSheets 属性中</span></span><br><span class="line">shadow.<span class="property">adoptedStyleSheets</span> = [sheet];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">span.<span class="property">textContent</span> = <span class="string">&quot;I&#x27;m in the shadow DOM&quot;</span>;</span><br><span class="line">shadow.<span class="title function_">appendChild</span>(span);</span><br></pre></td></tr></table></figure>

<h4 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h4><blockquote>
<p>不需要在不同组件之间共享样式表</p>
</blockquote>
<p>通过在 <code>template</code> 元素的声明中添加一个 <code>&lt;style&gt;</code> 元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-custom-element&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>shadow DOM<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;host&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> host = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#host&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> shadow = host.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;my-custom-element&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  shadow.<span class="title function_">appendChild</span>(template.<span class="property">content</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="template-和-slots"><a href="#template-和-slots" class="headerlink" title="template 和 slots"></a>template 和 slots</h2><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p><code>template</code> 元素中的内容不会在 DOM 中呈现, 但仍可用 javascript 去引用它</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-paragraph&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is my paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">customElements</span>.<span class="title function_">define</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;my-paragraph&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLElement</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> template = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;my-paragraph&#x27;</span>).<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> shadowRoot = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Node.cloneNode() 返回调用该方法的节点的一个副本</span></span></span><br><span class="line"><span class="language-javascript">        shadowRoot.<span class="title function_">appendChild</span>(template.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="slots"><a href="#slots" class="headerlink" title="slots"></a>slots</h3><blockquote>
<p>使用 slots 增加 template 元素的灵活性</p>
</blockquote>
<ul>
<li>标记中包含未定义相关的插槽内容或者浏览器不支持 slot 属性时显示默认内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;my-paragraph&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;my-text&quot;</span>&gt;</span>default text<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">my-paragraph</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;my-text&quot;</span>&gt;</span>from slot<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-paragraph</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">customElements</span>.<span class="title function_">define</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&#x27;my-paragraph&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">HTMLElement</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;my-paragraph&#x27;</span>).<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> shadowRoot = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;).<span class="title function_">appendChild</span>(</span></span><br><span class="line"><span class="language-javascript">          template.<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  );</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebAPI</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>web-component</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序</title>
    <url>/2021/12/869c5fdf0d37/</url>
    <content><![CDATA[<h3 id="敲黑板"><a href="#敲黑板" class="headerlink" title="敲黑板"></a>敲黑板</h3><h4 id="隐私协议"><a href="#隐私协议" class="headerlink" title="隐私协议"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/user-privacy/PrivacyAuthorize.html">隐私协议</a></h4><ul>
<li><p>2.32.3 开始支持</p>
</li>
<li><p>2023-09-15 之后, 隐私相关功能默认开始, 对于未声明的处理用户信息的接口或组件直接禁用</p>
</li>
<li><p>wx.getPrivacySetting 查询微信侧记录的用户是否有待同意的隐私政策信息, 通过返回结果 res 中的 needAuthorization 字段获取, true 表示还没同意过</p>
</li>
<li><p>wx.openPrivacyContract 此接口打开 <code>wx.getPrivacySetting</code> 获取到的开发者在小程序管理后台配置的 《小程序用户隐私保护指引》名称信息的页面</p>
</li>
<li><p>wx.requirePrivacyAuthorize 模拟隐私接口调用, 并触发隐私弹窗逻辑</p>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/privacy/wx.onNeedPrivacyAuthorization.html">wx.onNeedPrivacyAuthorization</a> 监听隐私接口需要用户授权事件, 当需要用户进行隐私授权时会触发. 触发事件时, 开发者需要弹出隐私协议说明,<br>并在用户同意或拒绝授权后调用回调接口 resolve 触发原隐私接口或组件继续执行.</p>
<ul>
<li>resolve 是一个函数, 主动调用触发原隐私接口或组件继续执行</li>
<li>eventInfo 表示触发本次事件的关联信息</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用户触发此组件时, 微信会同步收到同意信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事件回调表示用户已同意隐私政策后的处理逻辑 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">open-type</span>=<span class="string">&quot;agreePrivacyAuthorization&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bind:agreeprivacyauthorization</span>=<span class="string">&quot;handleAgreePrivacyAuthorization&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  同意</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="耦合使用"><a href="#耦合使用" class="headerlink" title="耦合使用"></a>耦合使用</h5><ul>
<li>隐私同意按钮 与 <a href="#getPhoneNumber">手机号快速验证组件</a>、<a href="#getPhoneNumber">手机号实时验证组件</a> 耦合使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">open-type</span>=<span class="string">&quot;getPhoneNumber|agreePrivacyAuthorization&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bind:getphonenumber</span>=<span class="string">&quot;handleGetPhoneNumber&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bind:agreeprivacyauthorization</span>=<span class="string">&quot;handleAgreePrivacyAuthorization&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  同意隐私协议并授权手机号</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">open-type</span>=<span class="string">&quot;getUserInfo|agreePrivacyAuthorization&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bind:getuserinfo</span>=<span class="string">&quot;handleGetUserInfo&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bind:agreeprivacyauthorization</span>=<span class="string">&quot;handleAgreePrivacyAuthorization&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  同意隐私协议并获取头像昵称信息</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="清空历史同步状态"><a href="#清空历史同步状态" class="headerlink" title="清空历史同步状态"></a>清空历史同步状态</h5><p>物理删除小程序时将清空历史同步状态, 下次访问小程序时, 需要重新同步微信当前用户是否同意隐私信息收集使用规则</p>
<h4 id="头像昵称-API-调整"><a href="#头像昵称-API-调整" class="headerlink" title="头像昵称 API 调整"></a><a href="https://developers.weixin.qq.com/community/develop/doc/00022c683e8a80b29bed2142b56c01">头像昵称 API 调整</a></h4><ul>
<li>20221026 起, 小程序 wx.getUserProfile 接口将被收回, wx.getUserInfo 接口获取用户头像将统一返回默认灰色头像，昵称将统一返回 “微信用户”</li>
<li>2.21.2 基础库开始, 如果业务需获取用户头像昵称，可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/userProfile.html">头像昵称填写能力</a></li>
</ul>
<h4 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h4><h5 id="地理位置-API-调整"><a href="#地理位置-API-调整" class="headerlink" title="地理位置 API 调整"></a><a href="https://developers.weixin.qq.com/community/develop/doc/000a02f2c5026891650e7f40351c01?blockType=1">地理位置 API 调整</a></h5><ul>
<li>20220628 起, 使用地理位置 API 需要在 app.json 配置项 requirePrivateInfos 提前声明</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;requirePrivateInfos&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;chooseAddress&quot;</span><span class="punctuation">,</span> <span class="string">&quot;getFuzzyLocation&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>部分 API 需要在管理后台申请接口权限</li>
</ul>
<p><img data-src="/images/wx-1.png" alt="wx-1"></p>
<h5 id="接口权限申请"><a href="#接口权限申请" class="headerlink" title="接口权限申请"></a><a href="https://developers.weixin.qq.com/community/develop/doc/000e8ccb5ac498318cbd26c495bc01?blockType=1">接口权限申请</a></h5><ul>
<li><p>getFuzzyLocation</p>
</li>
<li><p>getLocation</p>
</li>
<li><p>onLocationChange</p>
</li>
<li><p>chooseAddress</p>
</li>
<li><p>choosePoi</p>
</li>
<li><p>chooseLocation</p>
</li>
<li><p>20220418 起, 如果使用以上接口, 需要在小程序管理后台申请接口权限</p>
</li>
<li><p>地理位置新增接口和相关流程调整</p>
</li>
</ul>
<h5 id="choosePoi-chooseLocation"><a href="#choosePoi-chooseLocation" class="headerlink" title="choosePoi|chooseLocation"></a><a href="https://developers.weixin.qq.com/community/develop/doc/0006e45df2cac030e6edf367c56001?blockType=1">choosePoi|chooseLocation</a></h5><ul>
<li>20220613 起, 使用该接口不在需要用户授权 scope.userLocation</li>
<li>wx.choosePoi 回调信息中不再返回真实的经纬度信息, 全部返回(0,0)</li>
</ul>
<h5 id="getFuzzyLocation"><a href="#getFuzzyLocation" class="headerlink" title="getFuzzyLocation"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html">getFuzzyLocation</a></h5><ul>
<li>2.25.0 开始, 新增获取模糊地理位置接口, 接口规则同 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/location/wx.chooseLocation.html">chooseLocation</a></li>
</ul>
<h4 id="getPhoneNumber"><a href="#getPhoneNumber" class="headerlink" title="getPhoneNumber  "></a><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/phonenumber/phonenumber.getPhoneNumber.html">getPhoneNumber</a> <em id="getPhoneNumber"></em> <!--markdownlint-disable-line--></h4><ul>
<li><p>e.detail.encryptedData</p>
</li>
<li><p>e.detail.iv</p>
</li>
<li><p>20230826 开始收费, 分为 手机号快速验证组件 和 手机号实时验证组件</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">open-type</span>=<span class="string">&quot;getPhoneNumber&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bind:getphonenumber</span>=<span class="string">&quot;getPhoneNumber&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- getRealtimePhoneNumber 回调函数参数不再包含 encryptedData 和 iv, 仅可通过返回的 code 换取手机号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">open-type</span>=<span class="string">&quot;getRealtimePhoneNumber&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bind:getrealtimephonenumber</span>=<span class="string">&quot;getrealtimephonenumber&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="wx-openSetting"><a href="#wx-openSetting" class="headerlink" title="wx.openSetting"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.openSetting.html">wx.openSetting</a></h4><ul>
<li>2.3.0 开始, <a href="https://developers.weixin.qq.com/community/develop/doc/000cea2305cc5047af5733de751008">打开小程序设置页</a></li>
</ul>
<p>改为由用户行为触发, 直接调用此 API 无效, 需要在页面中使用 button 组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法一 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">&quot;openSetting&quot;</span> <span class="attr">bind:opensetting</span>=<span class="string">&quot;callback&quot;</span>&gt;</span>打开设置页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 方法二 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">&quot;openSetting&quot;</span>&gt;</span>打开设置页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">openSetting()&#123; wx.openSetting() &#125;</span><br></pre></td></tr></table></figure>

<h4 id="wx-getSetting"><a href="#wx-getSetting" class="headerlink" title="wx.getSetting"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/wx.getSetting.html">wx.getSetting</a></h4><ul>
<li>2.10.1 开始, withSubscriptions 参数控制是否同时获取用户订阅消息的订阅状态, 默认 false</li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/setting/SubscriptionsSetting.html">SubscriptionsSetting</a> 订阅消息设置<ul>
<li>mainSwitch 布尔值, 标识订阅消息的总开关</li>
<li>itemSettings 一个对象, 包含每一项订阅消息的订阅状态</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">getSetting</span>(&#123; <span class="attr">withSubscriptions</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">authSetting</span>); <span class="comment">// 用户授权结果</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ers.<span class="property">subscriptionsSetting</span>); <span class="comment">// 当参数 withSubscriptions 为 true 时返回此结果</span></span><br><span class="line">    <span class="comment">/*&#123;</span></span><br><span class="line"><span class="comment">      mainSwitch: true, // 订阅消息总开关</span></span><br><span class="line"><span class="comment">      // itemSettings 只返回用户勾选过订阅面板中的 &quot;总是保持以上选择, 不再询问&quot; 的订阅消息</span></span><br><span class="line"><span class="comment">      itemSettings: &#123;</span></span><br><span class="line"><span class="comment">        // 每一项开关</span></span><br><span class="line"><span class="comment">        // 每一项键为消息模板 id, 值为 accept, reject, ban, filter</span></span><br><span class="line"><span class="comment">      &#125; </span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">miniprogramAuthSetting</span>); <span class="comment">// 在插件种调用时, 返回宿主小程序的用户授权结果</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="wx-requestSubscribeMessage-订阅消息"><a href="#wx-requestSubscribeMessage-订阅消息" class="headerlink" title="wx.requestSubscribeMessage 订阅消息  "></a><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeMessage.html">wx.requestSubscribeMessage</a> 订阅消息 <em id="subscribe"></em> <!--markdownlint-disable-line--></h4><p>调起客户端小程序订阅消息界面, 返回用户订阅消息的操作结果, 如果用户勾选了订阅消息界面的 <strong>总是保持以上选择，不再询问</strong> 选项时, 消息模板会被记录在用户的小程序设置页, 并且在每次调用此 API 时不再弹出订阅消息界面(只返回订阅消息结果), 通过 <code>wx.getSetting</code> API 可以获取用户订阅消息的订阅状态</p>
<ul>
<li>一次性模板 id 和永久模板 id 不能同时混用</li>
<li>IOS 7.0.6/Android 7.0.7 之后支持多个同类型消息模板, 一次最多可订阅 3 条</li>
<li>2.8.2 开始, 用户发生点击行为或者发起支付回调后, 才可以调起订阅消息界面<ul>
<li>可以在事件处理函数中使用同步调用方式</li>
<li>不能在异步回调中调用, 否则报错(requestSubscribeMessage:fail can only be invoked by user TAP gesture.)</li>
</ul>
</li>
<li>2.10.0 开始, 支持订阅语音消息提醒</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">requestSubscribeMessage</span>(&#123; <span class="attr">tmplIds</span>: [] <span class="comment">/*消息模板 id*/</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// API 调用成功之后返回的参数</span></span><br><span class="line">    &#123;</span><br><span class="line">      [<span class="variable constant_">TEMPLATE_ID</span>]: <span class="string">&#x27;accept&#x27;</span>, <span class="comment">// reject, ban, filter</span></span><br><span class="line">      <span class="attr">errMsg</span>: <span class="string">&#x27;requestSubscribeMessage:ok&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// API 调用失败返回的参数(部分状态码)</span></span><br><span class="line">    <span class="comment">// 使用 Promise 方式无法捕获 MiniProgramError</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">errCode</span>: <span class="number">20004</span>,</span><br><span class="line">      <span class="attr">errMsg</span>: <span class="string">&quot;requestSubscribeMessage:fail:The main switch is switched off&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h5 id="总是保持以上选择，不再询问"><a href="#总是保持以上选择，不再询问" class="headerlink" title="总是保持以上选择，不再询问"></a><strong>总是保持以上选择，不再询问</strong></h5><ul>
<li>已勾选(默认), 每次调用此 API 不再弹出订阅消息界面, 只返回记录在用户的小程序设置页中的订阅消息结果</li>
<li>未勾选, 每次调用此 API 都会弹出订阅消息界面</li>
</ul>
<h5 id="订阅消息的总开关"><a href="#订阅消息的总开关" class="headerlink" title="订阅消息的总开关"></a>订阅消息的总开关</h5><p>订阅消息的总开关 <strong>关闭</strong> 时, 调用此 API 会报一个小程序错误, 可以使用 App.onError 或者 wx.onError 捕获错误</p>
<p><img data-src="/images/wx-2.jpg" alt="wx-2"></p>
<h4 id="组件behaviors"><a href="#组件behaviors" class="headerlink" title="组件behaviors"></a>组件<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html">behaviors</a></h4><ul>
<li>自定义组件混入 behaviors, 在 attached 钩子函数中调用混入的方法获取不到, 需要在 ready 中调用</li>
</ul>
<h4 id="ios-微信小程序-input-输入框使用-bind-focus-时-在-input-获取焦点后会出现输入法键盘-然后点击其他下拉框或自定义组件会出现-input-仍然可以编辑状态"><a href="#ios-微信小程序-input-输入框使用-bind-focus-时-在-input-获取焦点后会出现输入法键盘-然后点击其他下拉框或自定义组件会出现-input-仍然可以编辑状态" class="headerlink" title="ios 微信小程序 input 输入框使用 bind:focus 时, 在 input 获取焦点后会出现输入法键盘,然后点击其他下拉框或自定义组件会出现 input 仍然可以编辑状态"></a>ios 微信小程序 input 输入框使用 bind:focus 时, 在 input 获取焦点后会出现输入法键盘,然后点击其他下拉框或自定义组件会出现 input 仍然可以编辑状态</h4><ul>
<li>修改 input 的 focus 属性</li>
</ul>
<h4 id="小程序多-appId-平台提审和接口域名切换"><a href="#小程序多-appId-平台提审和接口域名切换" class="headerlink" title="小程序多 appId 平台提审和接口域名切换"></a>小程序多 appId 平台提审和接口域名切换</h4><p>使用以下 API 获取小程序 appId, 根据 appid 推送不同平台和切换不同接口域名</p>
<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/base/app/life-cycle/wx.getLaunchOptionsSync.html">wx.getLaunchOptionsSync</a> 获取小程序启动时的参数, 与 App.onLaunch 的回调参数一致<ul>
<li>2.1.2 支持</li>
</ul>
</li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/account-info/wx.getAccountInfoSync.html">wx.getAccountInfoSync</a> 获取当前帐号信息, 线上小程序版本号仅支持在正式版小程序中获取, 开发版和体验版中无法获取<ul>
<li>2.2.2 支持</li>
</ul>
</li>
</ul>
<h4 id="单页应用添加微信分享打包后分享时好好坏"><a href="#单页应用添加微信分享打包后分享时好好坏" class="headerlink" title="单页应用添加微信分享打包后分享时好好坏"></a>单页应用添加微信分享打包后分享时好好坏</h4><ul>
<li><a href="https://developer.work.weixin.qq.com/document/path/90542">企微</a> 微信 JSSDK 签名的 url 和当前显示的 url 不一致导致自定义分享信息失败,在路由钩子函数或者监听路由变化时重新请求接口签名</li>
<li><a href="https://developers.weixin.qq.com/community/develop/doc/000088945c4320dae71d677d15b400?jumpto=reply&parent_commentid=000062cf8fcaf80be71d58bd15b4&commentid=000a68a75ac9188cf81d2be8353c">微信</a> 微信中打开普通 URL 链接分享仍为普通 URL 链接, 卡片形式的链接不受此影响</li>
</ul>
<h4 id="小程序内嵌-H5-页区分运行环境"><a href="#小程序内嵌-H5-页区分运行环境" class="headerlink" title="小程序内嵌 H5 页区分运行环境"></a>小程序内嵌 H5 页区分运行环境</h4><p>小程序内嵌 H5 页区分运行环境是小程序还是 H5 执行不同逻辑调用 wx.miniProgram.getEnv 依赖微信 JSSDK 1.4 以上版本, 微信 JSSDK 1.0 报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="keyword">var</span> result = ua.<span class="title function_">match</span>(<span class="regexp">/MicroMessenger/i</span>);</span><br><span class="line"><span class="keyword">if</span> (result &amp;&amp; result[<span class="number">0</span>] == <span class="string">`micromessenger`</span>) &#123;</span><br><span class="line">  <span class="comment">//ios的ua中无miniProgram，但都有MicroMessenger（表示是微信浏览器）</span></span><br><span class="line">  wx.<span class="property">miniProgram</span>.<span class="title function_">getEnv</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">miniprogram</span>) &#123;</span><br><span class="line">      <span class="comment">// 小程序内</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 非小程序内</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 非小程序内</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑层"><a href="#逻辑层" class="headerlink" title="逻辑层"></a>逻辑层</h3><h4 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html">注册页面</a></h4><ul>
<li>options 2.10.1, 页面的组件选项, 同 <a href="#zidingyizujian">Component 构造器</a>中的 options</li>
<li>behaviors 2.9.2, 使多个页面可以共享相同的数据和方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// my-behavior.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Behavior</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">sharedMethod</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">sharedText</span> === <span class="string">&#x27;This is a piece of data shared between pages.&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// page-a.js</span></span><br><span class="line"><span class="keyword">const</span> myBehaviors = <span class="built_in">require</span>(<span class="string">&#x27;./my-behavior.js&#x27;</span>);</span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">behaviors</span>: [myBehaviors],</span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">sharedText</span> === <span class="string">&#x27;This is a piece of data shared between pages.&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="API"><a href="#API" class="headerlink" title="API"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API">API</a></h4><ul>
<li>2.10.2 支持 callback 和 promise 两种调用方式. 接口参数 Object 对象不包含 success/fail/complete 时默认返回 promise, 否则按回调方式执行,无返回值</li>
</ul>
<h4 id="Router"><a href="#Router" class="headerlink" title="Router"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Router.html">Router</a></h4><p>页面路由器对象, 可以通过 <code>this.pageRouter</code> 或 <code>this.router</code> 获取当前页面或自定义组件的路由器对象</p>
<ul>
<li>2.16.1 支持</li>
</ul>
<p>同 wx 对象同名的 5 个方法 <code>switchTab</code>, <code>reLaunch</code>, <code>redirectTo</code>, <code>navigateTo</code>, <code>navigateBack</code> 功能相同, 唯一区别是, 页面路由器中的方法调用时, 相对路径永远相对于 this 指代的页面或自定义组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index/index.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="title function_">wxNavAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 如果此时已经跳转到了 pack/index 页面, 才调用到此方法</span></span><br><span class="line">    <span class="comment">// 跳转的新页面路径为 pack/new-page</span></span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;./new-page&#x27;</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">routerNavAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 如果此时已经跳转到了 pack/index 页面, 才调用到此方法</span></span><br><span class="line">    <span class="comment">// 跳转的新页面路径为 index/new-page</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pageRouter</span>.<span class="title function_">navigateTo</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;./new-page&#x27;</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>this.pageRouter</code> 和 <code>this.router</code> 在页面中获得相同的路由器对象</li>
<li>在自定义组件中, <code>this.pageRouter</code> 将相对于自定义组件所在的页面进行路由跳转, <code>this.router</code> 相对于自定义组件本身的路径</li>
</ul>
<h3 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h3><h4 id="WXML"><a href="#WXML" class="headerlink" title="WXML"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/">WXML</a></h4><ul>
<li>dataset 自定义数据以 <code>data-</code> 开头, 多个单词使用连字符 <code>-</code> 连接, 此写法会被自动转换成驼峰写法, 大写字符会自动转换成小写字符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data-element-type <span class="comment">/* 最终会呈现为 */</span> event.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">elementType</span></span><br><span class="line">data-elementType <span class="comment">/* 最终会呈现为 */</span> event.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">elementtype</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue自定义事件绑定使用 kebab-case 写法</span></span><br><span class="line">v-<span class="attr">bind</span>:my-event</span><br></pre></td></tr></table></figure>

<ul>
<li>2.9.3 支持简易双向绑定 <code>model:property=&quot;&#123;&#123;myProperty&#125;&#125;&quot;</code></li>
</ul>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件</a></h4><ul>
<li>1.5.0 支持事件捕获阶段, 可使用 <code>capture-bind</code>, <code>capture-catch</code> 关键字</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 执行顺序: handleTap2、handleTap4、handleTap3、handleTap1 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果将第一个 capture-bind 改为 capture-catch，将只触发 handleTap2  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bind:touchstart</span>=<span class="string">&quot;handleTap1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">capture-bind:touchstart</span>=<span class="string">&quot;handleTap2&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  outer view</span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">bind:touchstart</span>=<span class="string">&quot;handleTap3&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">capture-bind:touchstart</span>=<span class="string">&quot;handleTap4&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    inner view</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2.4.4 支持 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/interactive-animation.html">WXS 函数响应事件</a></li>
<li>2.8.1 支持所有组件 <code>bind:event_name</code> 事件绑定方式</li>
<li>2.8.2 支持 <code>mut-bind</code> 事件绑定, 所有 <code>mut-bind</code> 之间是”互斥”的, 只会有其中一个绑定函数被触发, 同时,不会影响到 <code>bind</code> 和 <code>catch</code> 的绑定效果</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 点击 inter view 会依次调用 handleTap3、handleTap2 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 点击 middle view 会依次调用 handleTap2、handleTap1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">&quot;outer&quot;</span> <span class="attr">mut-bind:tap</span>=<span class="string">&quot;handleTap1&quot;</span>&gt;</span></span><br><span class="line">  outer view</span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">bind:tap</span>=<span class="string">&quot;handleTap2&quot;</span>&gt;</span></span><br><span class="line">    middle view</span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span> <span class="attr">mut-bind:tap</span>=<span class="string">&quot;handleTap3&quot;</span>&gt;</span> inner view <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="响应显示区域"><a href="#响应显示区域" class="headerlink" title="响应显示区域"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html">响应显示区域</a></h4><ul>
<li>2.4.0 支持屏幕旋转, 可配置全局或者页面的屏幕旋转</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;pageOrientation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2.5.0 支持 <code>pageOrientation</code> 设置为 <code>landscape</code> 表示为固定横屏显示</li>
<li>2.3.0 支持 iPad 小程序屏幕旋转, <code>仅支持</code>在 app.json 中配置</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;resizable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2.4.0 支持页面 <code>resize</code> 生命周期监听页面显示区域变化</li>
<li>windows wx 3.3 支持小程序<code>分栏模式</code>, 在 app.json 中配置</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;resizable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;frameset&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/animation.html">动画</a></h4><ul>
<li>2.9.0 支持<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/animation.html">关键帧动画</a>代替旧的 <code>wx.createAnimation</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// selector String, required, 选择器</span></span><br><span class="line"><span class="comment">// keyframes Array, required, 关键帧信息</span></span><br><span class="line"><span class="comment">// duration Number, required, 动画持续时长(单位毫秒)</span></span><br><span class="line"><span class="comment">// callback function, not required, 动画完成后的回调</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">animate</span>(selector, keyframes, duration, callback);</span><br><span class="line"><span class="comment">// 清楚动画执行完毕后的属性</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">clearAnimation</span>(selector, options, callback);</span><br></pre></td></tr></table></figure>

<h4 id="初始渲染缓存"><a href="#初始渲染缓存" class="headerlink" title="初始渲染缓存"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/initial-rendering-cache.html">初始渲染缓存</a></h4><ul>
<li><p>2.11.1 支持</p>
<ul>
<li>支持的内置组件<ul>
<li>view</li>
<li>text</li>
<li>button</li>
<li>image</li>
<li>scroll-view</li>
<li>rich-text</li>
</ul>
</li>
<li>启用初始化渲染缓存指定页面,在 <code>页面.json</code> 配置文件中配置, 不包含任何 <code>setData</code> 的结果</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;initialRenderingCache&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>缓存所有页面, 在 <code>app.json</code> 中配置</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;initialRenderingCache&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>初始渲染缓存页面中添加动态内容, <code>页面.json</code> 配置文件</p>
<ul>
<li>此方法调用不能早于 <code>Page</code> 的 <code>onReady</code> 或者 <code>Component</code> 的 <code>ready</code> 生命周期, 否则影响性能</li>
<li>参数传入 <code>null</code> 可禁用初始渲染缓存</li>
</ul>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;initialRenderingCache&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dynamic&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="attr">wx</span>:<span class="keyword">if</span>=<span class="string">&#x27;&#123;&#123;loading&#125;&#125;&#x27;</span>&gt;&#123;&#123; loadingHint &#125;&#125;&lt;/view&gt;;</span><br><span class="line"><span class="comment">// 页面中调用此方法启用</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">loading</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这一部分数据将被应用于界面上，相当于在初始 data 基础上额外进行一次 setData</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setInitialRenderingCache</span>(&#123; <span class="attr">loadingHint</span>: <span class="string">&#x27;正在加载&#x27;</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="小程序运行时"><a href="#小程序运行时" class="headerlink" title="小程序运行时"></a>小程序运行时</h3><h4 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/operating-mechanism.html">运行机制</a></h4><ul>
<li>前台进入后台 <code>5秒</code> 后进入挂起状态, 小程序代码停止运行</li>
<li>挂起状态维持 <code>30分钟</code> 后会被销毁, 如果小程序占用系统资源过高,可能会被系统销毁或者微信客户端主动回收</li>
</ul>
<h5 id="小程序启动"><a href="#小程序启动" class="headerlink" title="小程序启动"></a>小程序启动</h5><ul>
<li>冷启动: 小程序首次打开或者销毁后再次打开</li>
<li>热启动: 已经打开过小程序, 然后在一段时间内再次打开该小程序, 此时小程序并未被销毁, 只是从后台状态切换到前台状态</li>
</ul>
<h5 id="前台和后台"><a href="#前台和后台" class="headerlink" title="前台和后台"></a>前台和后台</h5><p>包括但不限于以下情况再次进入微信并打开小程序都会重新进入前台状态:</p>
<ul>
<li>点击右上角胶囊按钮离开小程序</li>
<li>IOS 从屏幕左侧右滑离开小程序</li>
<li>安卓点击返回键离开小程序</li>
<li>小程序前台运行时直接把微信切后台(手势或 Home 键)</li>
<li>小程序前台运行时直接锁屏</li>
</ul>
<h5 id="重新启动策略"><a href="#重新启动策略" class="headerlink" title="重新启动策略"></a>重新启动策略</h5><ul>
<li><p>2.8.0 支持如果冷启动时不带<code>path</code>参数, 默认进入小程序的首页, 在 <code>页面.json</code> 或者 <code>app.json</code> 修改小程序冷启动时的默认行为</p>
<ul>
<li>如果小程序退出时间过久 <code>1天</code>, 下次冷启动时不遵循此规则</li>
</ul>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* homePageAndLatestPage */</span></span><br><span class="line"><span class="comment">//如果从这个页面退出小程序，下次冷启动后立刻加载这个页面，页面的参数保持不变（不可用于 tab 页）</span></span><br><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;restartStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;homePage&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h5><p>小程序可能被销毁之前, 页面回调函数 <code>onSaveExitState</code> 会被调用, 如果需要保留页面页面中的状态, 可以在这个回调函数中保存一些数据, 下次启动时可以通过 <code>exitState</code> 获得已保存得数据, 如果小程序退出时间过久<code>1天</code>会丢弃保存的数据</p>
<ul>
<li>2.7.4 支持</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;restartStrategy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;homePageAndLatestPage&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 尝试获得上一次退出前 onSaveExitState 保存的数据</span></span><br><span class="line">    <span class="keyword">var</span> prevExitState = <span class="variable language_">this</span>.<span class="property">exitState</span>;</span><br><span class="line">    <span class="keyword">if</span> (prevExitState !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果是根据 restartStrategy 配置进行的冷启动，就可以获取到</span></span><br><span class="line">      prevExitState.<span class="property">myDataField</span> === <span class="string">&#x27;myData&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onSaveExitState</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> exitState = &#123; <span class="attr">myDataField</span>: <span class="string">&#x27;myData&#x27;</span> &#125;; <span class="comment">// 需要保存的数据</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">data</span>: exitState,</span><br><span class="line">      <span class="comment">// 超时时刻, 默认:当前时间 + 1天</span></span><br><span class="line">      <span class="attr">expireTimeStamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() + <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="更新机制"><a href="#更新机制" class="headerlink" title="更新机制"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/update-mechanism.html">更新机制</a></h4><p>正常情况下, 在小程序发布新版后 24 小时之后, 新版本可以覆盖 99% 以上的用户</p>
<ul>
<li>小程序每次 冷启动 时都会异步检查是否有更新版本, 如果有更新版本, 将会异步下载新版本的代码包并在下一次冷启动时替换使用</li>
<li>启动时使用 API <code>wx.getUpdateManager</code> 进行处理</li>
</ul>
<h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件  "></a>自定义组件 <em id="zidingyizujian"></em> <!-- markdownlint-disable-line --></h3><ul>
<li>1.6.3 支持</li>
</ul>
<h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/component.html">构造器</a></h4><ul>
<li><p>data</p>
</li>
<li><p>methods</p>
</li>
<li><p>externalClasses 组件接收的外部样式类, 一个字符串数组</p>
</li>
<li><p>properties</p>
<ul>
<li>配置项中使用驼峰写法(propertyName), 在 xml 文件中使用连字符写法(property-name)</li>
</ul>
</li>
<li><p>behaviors</p>
<ul>
<li>自定义组件引入的 behaviors 定义的方法在 attached 钩子函数中获取不到，需要在 ready 中调用</li>
</ul>
</li>
<li><p><a href="#relations">relations</a> 组件关系定义</p>
</li>
<li><p><a href="#observers">observers</a> 数据监听器</p>
</li>
<li><p>options</p>
<ul>
<li>multipleSlots 是否在组件定义时的选项中启用多 slot 支持</li>
<li>styleIsolation 组件样式隔离选项, 取值 ‘isolated’, ‘apply-shared’, ‘shared’<ul>
<li>‘isolated’ 启用样式隔离, 默认值</li>
<li>‘apply-shared’ 页面 wxss 样式将影响到自定义组件, 但反之不会影响</li>
<li>‘shared’ 页面样式和自定义组件样式相互影响, 插件中不可用, 使用 Component 构造器创建页面时, 默认此项</li>
<li>‘page-isolated’ 此页面禁用 app.wxss, 同时, 页面的 wxss 不会影响到其它自定义组件</li>
<li>‘page-apply-shared’ 此页面禁用 app.wxss, 同时, 页面 wxss 不会影响到其他自定义组件, 但设为 shared 的自定义组件会影响到页面</li>
<li>‘page-shared’ 此页面禁用 app.wxss, 同时, 页面 wxss 样式会影响到其他设为 apply-shared 或 shared 的自定义组件, 也会受到设为 shared 的自定义组件的影响</li>
</ul>
</li>
<li>addGlobalClass: true // 等价于设置 <code>styleIsolation: apply-shared</code></li>
<li><a href="#pureDataPattern">pureDataPattern</a> 指定符合规则的字段为纯数据字段, 仅作为当前组件内部使用不参与页面渲染, 2.10.1 开始可以在 json 文件中配置</li>
<li>virtualHost: true 虚拟化组件节点</li>
</ul>
</li>
<li><p>生命周期</p>
<ul>
<li>lifetimes 2.2.3 支持, 优先级最高会覆盖外部定义的生命周期钩子<ul>
<li>created 在组件实例刚刚被创建时执行，注意此时不能调用 setData</li>
<li>attached 在组件实例进入页面节点树时执行, 大部分初始化工作可以在此方法内执行</li>
<li>ready 在组件布局完成后执行</li>
<li>moved 在组件实例被移动到节点树另一个位置时执行</li>
<li>detached 在组件实例被从页面节点树移除时执行</li>
<li>error 当组件方法抛出错误时执行, 基础库 2.4.1 支持</li>
</ul>
</li>
<li>pageLifetimes 组件所在页面的生命周期<ul>
<li>show 组件所在的页面被展示时执行</li>
<li>hide 组件所在的页面被隐藏时执行</li>
<li>resize 组件所在的页面尺寸变化时执行</li>
<li>routeDone 组件所在页面路由动画完成时执行, 基础库 2.31.2 支持</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="#generic-node">抽象节点</a></p>
</li>
<li><p>this.selectComponent(selector) 父组件中获取子组件实例对象</p>
</li>
<li><p>this.triggerEvent(evtName, evtDetail, evtOptions) 组件触发事件</p>
</li>
</ul>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/">引用</a></h4><ul>
<li>在 <code>页面.json</code> 文件中配置</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;component-tag-name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;path/to/the/custom/component&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>页面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 以下是对一个自定义组件的引用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-tag-name</span> <span class="attr">inner-text</span>=<span class="string">&quot;Some text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="模板和样式"><a href="#模板和样式" class="headerlink" title="模板和样式"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html">模板和样式</a></h4><ul>
<li><p>slot</p>
<ul>
<li>开启多个 slot</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">multipleSlots</span>: <span class="literal">true</span>, <span class="comment">// 在组件定义时的选项中启用多slot支持</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">properties</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;before&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是组件的内部节点<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;after&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用组件的页面模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;before&quot;</span>&gt;</span>这里是插入到组件slot-before中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;after&quot;</span>&gt;</span>这里是插入到组件slot-after中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>组件样式隔离, 避免组件内部使用的<code>标签下选择器样式</code>污染页面</p>
<ul>
<li>2.6.5 支持 <code>js</code> 中配置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123; <span class="attr">styleIsolation</span>: <span class="string">&#x27;isolated&#x27;</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>2.10.1 支持在 <code>页面.json</code> 或者 <code>自定义组件.json</code> 中配置</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;styleIsolation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;isolated&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>外部样式应用</p>
<ul>
<li>1.9.90 支持</li>
<li>2.7.1 支持多个 <code>class</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 组件 custom-component.js */</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">externalClasses</span>: [<span class="string">&#x27;my-class&#x27;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件 custom-component.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">custom-component</span> <span class="attr">class</span>=<span class="string">&quot;my-class&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>这段文本的颜色由组件外的 class 决定&lt;/custom-component</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="组件间通信与事件"><a href="#组件间通信与事件" class="headerlink" title="组件间通信与事件"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html">组件间通信与事件</a></h4><ul>
<li>WXML 数据绑定: 用于父组件向子组件的指定属性设置数据</li>
<li>事件: 用于子组件向父组件传递数据</li>
<li>父组件中获取子组件实例对象 this.selectComponent(selector), 可以直接访问子组件的任意数据和方法</li>
</ul>
<h4 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html">behaviors</a></h4><ul>
<li><p>内置 behaviors</p>
<ul>
<li>wx://form-field</li>
<li>wx://form-field-group 2.10.2 支持</li>
<li>wx://form-field-button 2.10.3 支持</li>
<li>wx://component-export 2.2.3 支持</li>
</ul>
</li>
<li><p>同名字段覆盖和组合规则</p>
<ul>
<li>同名属性和方法<ul>
<li>组件本身的属性和方法覆盖 behavior 中的</li>
<li>behavior 中定义靠后的覆盖靠前的</li>
<li>嵌套引用 behavior 的情况, 父 behavior 覆盖子 behavior 中</li>
</ul>
</li>
<li>同名数据字段<ul>
<li>对象类型进行对象合并</li>
<li>其余情况进行数据覆盖: 组件 &gt; 父 behavior &gt; 子 behavior 、 靠后的 behavior &gt; 靠前的 behavior</li>
</ul>
</li>
<li>生命周期钩子不会覆盖,逐个调用<ul>
<li>behavior 优先于组件执行</li>
<li>子 behavior 优先于 父 behavior 执行</li>
<li>靠前的 behavior 优先于 靠后的 behavior 执行</li>
<li>多次引用 behavior, 生命周期只会被执行一次</li>
</ul>
</li>
</ul>
</li>
<li><p>2.15.0 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html">behaviors 中声明的生命周期钩子会被 Page 和 Component 构造器中声明的同名钩子覆盖执行, 和上面文档中描述的不一样</a></p>
</li>
</ul>
<h4 id="组件之间关系"><a href="#组件之间关系" class="headerlink" title="组件之间关系  "></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/relations.html">组件之间关系</a> <em id="relations"></em> <!-- markdownlint-disable-line --></h4><ul>
<li>type 目标组件的相对关系<ul>
<li>parent</li>
<li>child</li>
<li>ancestor</li>
<li>descendant</li>
</ul>
</li>
<li>linked 关系生命周期函数, 当关系被建立在页面节点树中时触发, 触发时机在组件 attached 之后</li>
<li>linkChanged 关系生命周期函数, 当关系在页面节点树中发生改变时触发, 触发时机在组件 moved 之后</li>
<li>unlinked 关系生命周期函数, 当关系脱离页面节点树时触发, 触发时机在组件 detached 之后</li>
<li>target 关联的目标节点所应具有的 behavior，所有拥有这一 behavior 的组件节点都会被关联</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">custom-li</span>&gt;</span> item 1 <span class="tag">&lt;/<span class="name">custom-li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">custom-li</span>&gt;</span> item 2 <span class="tag">&lt;/<span class="name">custom-li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">custom-ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// path/to/custom-ul.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">relations</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;./custom-li&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;child&#x27;</span>, <span class="comment">// 关联的目标节点应为子节点</span></span><br><span class="line">      <span class="attr">linked</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="comment">// 每次有custom-li被插入时执行，target是该节点实例对象，触发在该节点attached生命周期之后</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">linkChanged</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="comment">// 每次有custom-li被移动后执行，target是该节点实例对象，触发在该节点moved生命周期之后</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">unlinked</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="comment">// 每次有custom-li被移除时执行，target是该节点实例对象，触发在该节点detached生命周期之后</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">_getAllLi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 使用getRelationNodes可以获得nodes数组，包含所有已关联的custom-li，且是有序的</span></span><br><span class="line">      <span class="keyword">var</span> nodes = <span class="variable language_">this</span>.<span class="title function_">getRelationNodes</span>(<span class="string">&#x27;path/to/custom-li&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">ready</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_getAllLi</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// path/to/custom-li.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">relations</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;./custom-ul&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;parent&#x27;</span>, <span class="comment">// 关联的目标节点应为父节点</span></span><br><span class="line">      <span class="attr">linked</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="comment">// 每次被插入到custom-ul时执行，target是custom-ul节点实例对象，触发在attached生命周期之后</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">linkChanged</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="comment">// 每次被移动后执行，target是custom-ul节点实例对象，触发在moved生命周期之后</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">unlinked</span>: <span class="keyword">function</span> (<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="comment">// 每次被移除时执行，target是custom-ul节点实例对象，触发在detached生命周期之后</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="数据监听器"><a href="#数据监听器" class="headerlink" title="数据监听器  "></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html">数据监听器</a> <em id="observers"></em> <!-- markdownlint-disable-line--></h4><p>用于监听和响应任何属性和数据字段的变化,作用类似于计算属性</p>
<ul>
<li>2.6.1 支持</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this.data.sum 永远是 this.data.numberA 与 this.data.numberB 的和</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">attached</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">numberA</span>: <span class="number">1</span>, <span class="attr">numberB</span>: <span class="number">2</span> &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">observers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;numberA, numberB&#x27;</span>: <span class="keyword">function</span> (<span class="params">numberA, numberB</span>) &#123;</span><br><span class="line">      <span class="comment">// 在 numberA 或者 numberB 被设置时，执行这个函数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="attr">sum</span>: numberA + numberB &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="纯数据字段"><a href="#纯数据字段" class="headerlink" title="纯数据字段  "></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/pure-data.html">纯数据字段</a> <em id="pureDataPattern"></em> <!-- markdownlint-disable-line --></h4><ul>
<li><p>纯数据字段是一些不用于界面渲染的 data 字段(包括 setData 设置的字段), 既不会展示在界面上,也不会传递给其他组件，可以用于提升页面更新性能</p>
</li>
<li><p>属性中的纯数据字段的属性不会触发 observer, 需要使用 observers(<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html">数据监听器</a>) 监听</p>
</li>
<li><p>2.8.2 支持</p>
</li>
<li><p>2.10.1 支持在 json 配置文件中配置 pureDataPattern 项</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">pureDataPattern</span>: <span class="regexp">/^_/</span>, <span class="comment">// 指定所有 _ 开头的数据字段为纯数据字段</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="literal">true</span>, <span class="comment">// 普通数据字段</span></span><br><span class="line">    <span class="attr">_b</span>: <span class="literal">true</span>, <span class="comment">// 纯数据字段</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="抽象节点"><a href="#抽象节点" class="headerlink" title="抽象节点  "></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/generics.html">抽象节点</a> <em id="generic-node"></em> <!-- markdownlint-disable-line --></h4><blockquote>
<p>1.9.6 支持</p>
</blockquote>
<p>有时, 自定义组件模板中的一些节点，其对应的自定义组件不是由自定义组件本身确定的，而是自定义组件的调用者确定的。这时可以把这个节点声明为<strong>抽象节点</strong></p>
<ul>
<li>抽象节点 generic 引用的 <code>generic:xxx=&quot;yyy&quot;</code> 中的值 yyy 只能是静态值, 不能包含数据绑定, 抽象节点特性不适用动态节点绑定的场景</li>
<li>componentGenerics 抽象节点配置项</li>
</ul>
<p>index</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.wxml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用抽象节点组件时必须指定使用的具体组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自定义单选框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">generic-node</span> <span class="attr">generic:selectable</span>=<span class="string">&quot;custom-radio&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自定义复选框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">generic-node</span> <span class="attr">generic:selectable</span>=<span class="string">&quot;custom-checkbox&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* index.json */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;generic-node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/pages/generic-node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;custom-radio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/pages/custom-radio&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;custom-checkbox&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/pages/custom-checkbox&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>generic-node</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- generic-node.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>generic-node header<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectable</span> <span class="attr">selected</span>=<span class="string">&quot;&#123;&#123;selected&#125;&#125;&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;&#123;&#123;false&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">selectable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>generic-node footer<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* generic-node.json */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;component&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;componentGenerics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* 在 componentGenerics 中声明抽象节点名为 selectable, 可以命名为任意名字 */</span></span><br><span class="line">    <span class="attr">&quot;selectable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selectable&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">/* 为抽象节点指定默认组件 */</span></span><br><span class="line">      <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;path/to/default/component&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义组件扩展"><a href="#自定义组件扩展" class="headerlink" title="自定义组件扩展"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/extend.html">自定义组件扩展</a></h4><ul>
<li>2.2.3 支持, 详细用法看文档</li>
</ul>
<h4 id="开发第三方自定义组件"><a href="#开发第三方自定义组件" class="headerlink" title="开发第三方自定义组件"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/trdparty.html">开发第三方自定义组件</a></h4><ul>
<li>2.2.1 支持</li>
</ul>
<h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/unit-test.html">单元测试</a></h4><ul>
<li>2.2.1 支持</li>
</ul>
<h4 id="获取更新性能统计信息"><a href="#获取更新性能统计信息" class="headerlink" title="获取更新性能统计信息"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/update-perf-stat.html">获取更新性能统计信息</a></h4><ul>
<li>2.12.0 支持</li>
</ul>
<h4 id="占位组件"><a href="#占位组件" class="headerlink" title="占位组件  "></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/placeholder.html">占位组件</a> <em id="componentplaceholder"></em> <!-- markdownlint-disable-line --></h4><p>在使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html">分包异步化</a> 或 用时注入 等特性时, 不可用的自定义组件使用 占位组件 临时替代渲染, 使渲染过程不被阻塞</p>
<ul>
<li>2.11.2 支持</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 组件 comp-a 的占位组件为内置组件 view */</span></span><br><span class="line"><span class="comment">/* 组件 comp-b 的占位组件为自定义组件 comp-c */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;comp-a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../comp/compA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comp-b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../comp/compB&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comp-c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../comp/compC&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;componentPlaceholder&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;comp-a&quot;</span><span class="punctuation">:</span> <span class="string">&quot;view&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comp-b&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comp-c&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件是对一组 js 接口、<a href="#zidingyizujian">自定义组件</a>或页面的封装, 用于嵌入到小程序中使用. 插件不能独立运行, 必须嵌入到其它小程序中才能使用<br>第三方小程序在使用插件时, 无法看到插件的代码, 因此, 插件适合用来封装自己的功能或服务, 提供给第三方小程序进行展示和使用.</p>
<p>插件开发者可以像开发小程序一样编写一个插件并上传代码, 在插件发布之后, 其它小程序方可调用, 小程序平台托管插件代码, 其它小程序调用时上传的插件代码会随小程序一起下载运行</p>
<p>插件拥有更强的独立性, 拥有独立的 API 接口、域名列表等, 但同时会受到一些限制, 如 一些 API 无法调用或功能受限</p>
<h4 id="开发插件"><a href="#开发插件" class="headerlink" title="开发插件"></a>开发插件</h4><p>插件跳转链接: <code>plugin-private://PLUGIN_APPID/PATH/TO/PAGE</code></p>
<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/requireMiniProgram.html">requireMiniProgram</a> 在插件中获取由使用者小程序导出的内容, 基础库 2.11.1 支持</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用者小程序</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Greetings from Weixin MiniProgram!&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件</span></span><br><span class="line"><span class="keyword">const</span> miniProgramExports = requireMiniProgram();</span><br><span class="line">miniProgramExports.<span class="title function_">greeting</span>(); <span class="comment">// &quot;Greetings from Weixin MiniProgram!&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="插件目录结构"><a href="#插件目录结构" class="headerlink" title="插件目录结构"></a>插件目录结构</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugin</span><br><span class="line">  |- components</span><br><span class="line">    |- hello-component.js</span><br><span class="line">    |- hello-component.json</span><br><span class="line">    |- hello-component.wxml</span><br><span class="line">    |- hello-component.wxss</span><br><span class="line">  |- pages</span><br><span class="line">    |- hello-page.js</span><br><span class="line">    |- hello-page.json</span><br><span class="line">    |- hello-page.wxml</span><br><span class="line">    |- hello-page.wxss</span><br><span class="line">  |- index.js</span><br><span class="line">  |- plugin.json</span><br></pre></td></tr></table></figure>

<h5 id="插件配置文件"><a href="#插件配置文件" class="headerlink" title="插件配置文件"></a>插件配置文件</h5><blockquote>
<p>向使用者小程序开放的所有自定义组件、页面和 js 接口都必须在插件配置文件 <code>plugin.json</code> 中列出</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* plugin.json */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;publicComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hello-component&quot;</span><span class="punctuation">:</span> <span class="string">&quot;components/hello-component&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hello-page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/hello-page&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="引用小程序的自定义组件"><a href="#引用小程序的自定义组件" class="headerlink" title="引用小程序的自定义组件"></a>引用小程序的自定义组件</h5><p>如果需要在页面或自定义组件中将一部分区域交给使用者小程序渲染, 但在插件中不能直接指定使用者小程序的自定义组件路径, 因此无法直接通过 <code>usingComponents</code> 得方式来引用, 需要使用 <a href="#generic-node">抽象节点</a></p>
<p>插件自定义组件 plugin-view</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* plugin/components/plugin-view.json */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;componentGenerics&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mp-view&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- plugin/components/plugin-view.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>小程序插件组件<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mp-view</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>小程序中引用 plugin-view</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- miniprogram/page/index.wxml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin-view</span> <span class="attr">generic:mp-view</span>=<span class="string">&quot;comp-from-miniprogram&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果是插件页本身就是一个页面顶层组件, 小程序不会引用它, 无法通过 <code>generic:xxx=&quot;&quot;</code> 的方式来指定抽象节点实现, 因此, 基础库 2.12.2 支持, 小程序可以在插件的配置里为插件页指定抽象节点实现</li>
</ul>
<p>例如插件页面名为 plugin-index</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* app.json */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;plugin-name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wxAPPID&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">/* 2.12.2 为插件页指定抽象节点实现 */</span></span><br><span class="line">      <span class="attr">&quot;genericsImplementation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;plugin-index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;mp-view&quot;</span><span class="punctuation">:</span> <span class="string">&quot;components/comp-from-miniprogram&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="其它注意事项"><a href="#其它注意事项" class="headerlink" title="其它注意事项"></a>其它注意事项</h5><ul>
<li>插件可以预览和上传, 但没有体验版</li>
<li>插件可以同时有多个线上版本, 由使用插件的使用者小程序决定具体使用的版本号</li>
<li>手机预览和提审插件时, 会使用一个特殊的小程序来套用项目中 miniprogram 文件夹下的小程序, 从而预览插件</li>
</ul>
<p>插件之间互相调用</p>
<ul>
<li>插件不能直接引用其它插件, 必须在使用者小程序的配置中声明引用之后互相调用</li>
<li>对于 js 接口, 可以使用 <code>requirePlugin</code>, 但不能直接在文件开头使用, 因为被依赖的插件可能还没有被初始化</li>
</ul>
<h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>使用插件之前需要先在小程序管理后台添加插件, 如果插件无需申请, 添加后可直接使用, 否则需要申请并等待插件开发者通过后方可使用</p>
<ul>
<li>主包引用插件</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* app.json */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;plugin-name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wxAPPID&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">/* 2.11.1 使用者小程序通过 export 向插件导出内容 */</span></span><br><span class="line">      <span class="comment">/* 插件内使用 requireMiniProgram 全局函数获取使用者小程序导出的内容 */</span></span><br><span class="line">      <span class="attr">&quot;export&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">whoami</span>: <span class="string">&#x27;Wechat MiniProgram&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// plugin.js</span></span><br><span class="line">requireMiniProgram().<span class="property">whoami</span>; <span class="comment">// &#x27;Wechat MiniProgram&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>分包引用插件<ul>
<li>默认情况下, 仅能在分包内使用当前分包引用的插件, 除非通过 分包异步化 进行异步的跨分包引用</li>
<li>同一个插件不能被多个分包同时引用</li>
<li>如果基础库 &lt; 2.9.0, 不能从分包外的页面直接跳入到分包内的插件页面, 需要先跳入分包内的非插件页面、再跳入同一分包内的插件页面</li>
</ul>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* app.json */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="attr">&quot;subPackages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;packageA&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span> <span class="comment">/* 分包别名, 预下载时可用 */</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;pages/page-a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pages/page-b&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;plugin-name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wxAPPID&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="跳转插件页面"><a href="#跳转插件页面" class="headerlink" title="跳转插件页面"></a>跳转插件页面</h5><p><code>plugin://PLUGIN_NAME/PLUGIN_PAGE</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">&quot;plugin://PLUGIN_NAME/PLUGIN_PAGE&quot;</span>&gt;</span>To plugin page!<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="插件使用组件的限制"><a href="#插件使用组件的限制" class="headerlink" title="插件使用组件的限制"></a>插件使用组件的限制</h4><p>不能在插件页面中使用</p>
<ul>
<li>开放能力(open-type)为以下之一的 button<ul>
<li>contact(打开客服会话)</li>
<li>getPhoneNumber(获取用户手机号)</li>
<li>getUserInfo(获取用户信息)</li>
</ul>
</li>
<li>open-data</li>
<li>web-view</li>
</ul>
<p>以下组件在插件中使用需要基础库版本支持</p>
<ul>
<li>navigator 需要基础库 2.1.0</li>
<li>live-player 和 live-pusher 需要基础库 2.3.0</li>
</ul>
<h4 id="插件功能页"><a href="#插件功能页" class="headerlink" title="插件功能页"></a>插件功能页</h4><blockquote>
<p>2.1.0 支持, 使用插件功能页之前, 先激活功能页特性, 配置对应的功能页函数, 再使用 <code>functional-page-navigator</code> 组件跳转到插件功能页</p>
</blockquote>
<p>插件功能页是插件所有者小程序中的一个特殊页面, 使用插件功能页可以完成某些接口或 API 在插件中的调用限制</p>
<ul>
<li>插件所有者小程序配置激活插件功能页</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* app.json */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">  <span class="attr">&quot;functionalPages&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* independent: true 表示插件功能页的代码独立于其它代码,*/</span></span><br><span class="line">    <span class="comment">/* 这意味着插件功能页可以被独立下载、加载, 具有更好的性能表现 */</span></span><br><span class="line">    <span class="comment">/* 但同时使插件功能页目录 functional-page/ 不能 require 这个目录以外的文件(反之亦然) */</span></span><br><span class="line">    <span class="attr">&quot;independent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;functionalPages&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">/* 旧式写法 */</span></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>跳转到插件功能页<ul>
<li>version 跳转到的小程序版本, 线上版本必须是 release</li>
<li>name 要跳转的功能页</li>
<li>args 功能页参数, 格式与具体功能页相关</li>
<li>bind:success 功能页返回且操作成功时触发, detail 格式与具体功能页相关</li>
<li>bind:fail 功能页返回且操作失败时触发, detail 格式与具体功能页相关</li>
<li>bind:cancel 因用户操作从功能页返回时触发</li>
</ul>
</li>
</ul>
<p>不能使用 wx.navigateTo 进行跳转, 需要使用 <code>functional-page-navigator</code> 组件跳转</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">functional-page-navigator</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;loginAndGetUserInfo&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">args</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">bind:success</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录到插件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">functional-page-navigator</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="用户信息功能页"><a href="#用户信息功能页" class="headerlink" title="用户信息功能页"></a>用户信息功能页</h5><p>用于帮助插件获取用户信息, 相当于 wx.login 和 wx.getUserInfo 的功能</p>
<h5 id="支付功能页"><a href="#支付功能页" class="headerlink" title="支付功能页"></a>支付功能页</h5><p>支付功能页用于帮助完成支付, 相当于 wx.requestPayment 的功能</p>
<p>插件使用支付功能时, 需要在管理后台进行额外的权限申请, 主体为个人小程序在使用插件时, 无论是否通过申请都无法正常使用插件里的支付功能</p>
<ul>
<li>2.22.1 开始, 插件内可以直接调用 wx.requestPluginPayment 实现跳转支付, 通过 <code>functional-page-navigator</code> 跳转将被废弃</li>
<li>满足以下条件时, 调用 wx.requestPluginPayment 或点击 navigator 将直接拉起支付收银台, 跳过支付功能页<ul>
<li>小程序与插件绑定在同一个 open 平台账号上</li>
<li>小程序与插件均为 open 账号的同主体/关联主体时</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// functional-page/request-payment.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">beforeRequestPayment</span> = <span class="keyword">function</span> (<span class="params">paymentArgs, callback</span>) &#123;</span><br><span class="line">  <span class="comment">// paymentArgs 通过 functional-page-navigator 的 arg 参数中 paymentArgs 字段传递到此功能页的自定义数据</span></span><br><span class="line">  <span class="comment">// callback 回调函数, 调用该函数后, 小程序将发起支付, 类似于 wx.requestPayment</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="配置功能页函数"><a href="#配置功能页函数" class="headerlink" title="配置功能页函数"></a>配置功能页函数</h6><p>支付功能页需要在插件中提供一个函数来响应插件中的支付调用, 即在插件中跳转到支付功能页或调用 wx.requestPluginPayment 时, 这个函数就会在合适的时机被调用来帮助完成支付, 如果不提供功能页函数, 功能页将通过 fail 事件返回错误</p>
<p>支付功能页函数应以导出函数的方式提供在插件所有者小程序的根目录下的 functional-page/request-payment.js 文件中名为 beforeRequestPayment</p>
<h5 id="收获地址功能页"><a href="#收获地址功能页" class="headerlink" title="收获地址功能页"></a>收获地址功能页</h5><ul>
<li>2.16.1 开始, 插件内可直接使用 wx.chooseAddress 实现对应的功能, 点击 <code>functional-page-navigator</code> 将不再进入功能页</li>
</ul>
<h5 id="发票功能页"><a href="#发票功能页" class="headerlink" title="发票功能页"></a>发票功能页</h5><ul>
<li>2.16.1 开始, 插件内可直接使用 wx.chooseInvoice 实现对应的功能, 点击 <code>functional-page-navigator</code> 将不再进入功能页</li>
</ul>
<h5 id="发票抬头功能页"><a href="#发票抬头功能页" class="headerlink" title="发票抬头功能页"></a>发票抬头功能页</h5><ul>
<li>2.16.1 开始, 插件内可直接使用 wx.chooseInvoiceTitle 实现对应的功能, 点击 <code>functional-page-navigator</code> 将不再进入功能页</li>
</ul>
<h3 id="基础能力"><a href="#基础能力" class="headerlink" title="基础能力"></a>基础能力</h3><h3 id="连接硬件能力"><a href="#连接硬件能力" class="headerlink" title="连接硬件能力"></a>连接硬件能力</h3><h3 id="开放能力"><a href="#开放能力" class="headerlink" title="开放能力"></a>开放能力</h3><h3 id="移动应用"><a href="#移动应用" class="headerlink" title="移动应用"></a>移动应用</h3><h4 id="微信内网页跳转-APP"><a href="#微信内网页跳转-APP" class="headerlink" title="微信内网页跳转 APP"></a><a href="https://developers.weixin.qq.com/doc/oplatform/Mobile_App/WeChat_H5_Launch_APP.html">微信内网页跳转 APP</a></h4><p>使用 <a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html">微信开放标签</a> 完成微信内网页跳转到 APP 的需求</p>
<ul>
<li>微信开放标签只开放给 JS 接口安全域名, 使用前必须保证网页所属的域名已绑定为服务号的 JS 接口安全域名</li>
<li>微信内网页无法跳转任意 APP, 需要在 微信开放平台 登记域名与移动应用(APP)的绑定关系, 网页只能跳转其域名绑定的移动应用(APP)</li>
</ul>
<p>微信开放平台 -&gt; 管理中心 -&gt; 公众号详情页 -&gt; 接口信息</p>
<h4 id="开放标签"><a href="#开放标签" class="headerlink" title="开放标签"></a>开放标签</h4><h5 id="跳转小程序"><a href="#跳转小程序" class="headerlink" title="跳转小程序"></a>跳转小程序</h5><p><code>&lt;wx-open-launch-weapp&gt;</code></p>
<p>已认证的服务号(绑定 <code>JS接口安全域名</code> )下的网页可使用此标签跳转 <strong>任意小程序</strong></p>
<p>页面中点击标签按钮跳转小程序, h5 通过开放标签打开小程序的场景值为 1167</p>
<ul>
<li>属性<ul>
<li>appid 必填, 跳转的小程序 appid, 以 <code>wx</code> 开头的 id</li>
<li>username 非必填, 跳转的小程序原始 id, 以 <code>gh_</code> 开头的 id(跳转时优先使用 appid, 没有则使用 username)</li>
<li>path 非必填, 跳转的小程序页面路径及参数</li>
<li>env-version 非必填, 跳转的小程序版本, release, develop, trial</li>
<li>extra-data 非必填, 以 JSON 格式传递给小程序的数据</li>
</ul>
</li>
<li>插槽<ul>
<li>default 必填, 跳转按钮模板及样式</li>
</ul>
</li>
<li>事件<ul>
<li>ready 标签初始化完毕, 可进行点击操作</li>
<li>launch 用户点击跳转按钮并对确认弹框进行操作后触发</li>
<li>error 用户点击跳转按钮后出现错误</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wx-open-launch-weapp</span> <span class="attr">appid</span>=<span class="string">&quot;&quot;</span> <span class="attr">username</span>=<span class="string">&quot;&quot;</span> <span class="attr">path</span>=<span class="string">&quot;pages/index?id=1&amp;num=2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/wxtag-template&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.btn</span>&#123;<span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">14px</span>;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>打开小程序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">wx-open-launch-weapp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;launch&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>, evt.<span class="property">detail</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="跳转-App"><a href="#跳转-App" class="headerlink" title="跳转 App"></a>跳转 App</h5><p><code>&lt;wx-open-launch-app&gt;</code></p>
<p>已认证的服务号(绑定 <code>JS接口安全域名</code> )下的网页可使用此标签跳转绑定关系的 App</p>
<ul>
<li>属性<ul>
<li>appid 必填, 跳转的移动应用的 AppID</li>
<li>extinfo 非必填, 跳转所需要的额外信息</li>
</ul>
</li>
<li>插槽<ul>
<li>default 必填, 跳转按钮模板及样式</li>
</ul>
</li>
<li>事件<ul>
<li>ready 标签初始化完毕, 可进行点击操作</li>
<li>launch 用户点击跳转按钮并对确认弹框进行操作后触发</li>
<li>error 用户点击跳转按钮后出现错误</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wx-open-launch-app</span> <span class="attr">appid</span>=<span class="string">&quot;&quot;</span> <span class="attr">extinfo</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/wxtag-template&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="selector-class">.btn</span>&#123;<span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">214px</span>;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>打开App<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">wx-open-launch-app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;launch&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>, evt.<span class="property">detail</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="订阅通知"><a href="#订阅通知" class="headerlink" title="订阅通知"></a>订阅通知</h5><blockquote>
<p>部分规则和返回数据结构参考 <a href="#subscribe">wx.requestSubscribeMessage</a></p>
</blockquote>
<p><code>&lt;wx-open-subscribe&gt;</code></p>
<p>已认证的服务号(绑定 <code>JS接口安全域名</code> )下的网页可使用此标签调起订阅通知界面, 返回订阅通知的操作结果</p>
<ul>
<li>属性<ul>
<li>template 必填, 消息模板 id, 多个模板 id 以逗号分隔</li>
</ul>
</li>
<li>插槽<ul>
<li>default 必填, 订阅按钮模板及样式</li>
<li>style 非必填, 用于集中定义 default 插槽所需用到的样式</li>
</ul>
</li>
<li>事件<ul>
<li>success 订阅按钮操作成功事件</li>
<li>error 订阅按钮操作失败事件</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wx-open-subscribe</span> <span class="attr">template</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/wxtag-template&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;style&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="language-handlebars">      <span class="selector-class">.subscribe-btn</span> &#123;</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="language-handlebars">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="language-handlebars">        <span class="attribute">background</span>: <span class="number">#0088ff</span>;</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="language-handlebars">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/wxtag-template&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;subscribe-btn&quot;</span>&gt;</span>一次性模板消息订阅<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">wx-open-subscribe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;success&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>, evt.<span class="property">detail</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>, evt.<span class="property">detail</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="音频播放"><a href="#音频播放" class="headerlink" title="音频播放"></a>音频播放</h5><p><code>&lt;wx-open-audio&gt;</code></p>
<p>已认证的服务号(绑定 <code>JS接口安全域名</code> )下的网页可使用此标签进行浮窗音频播放</p>
<ul>
<li>属性<ul>
<li>src 必填, 设置音频播放链接</li>
<li>title 非必填, 设置音频名称</li>
<li>episode 非必填, 设置专辑名称</li>
<li>singer 非必填, 设置歌手名称</li>
<li>cover 非必填, 设置专辑封面</li>
</ul>
</li>
<li>插槽<ul>
<li>default 非必填, 播放按钮默认视图, 用于音频未在播放状态时显示, 如果没有则显示默认音频播放按钮(40px*40px)</li>
<li>playing 非必填, 用于音频在播放时显示, 如果没有则显示 default 插槽视图或默认音频按钮</li>
<li>style 非必填, 用于集中定义 default 插槽和 playing 插槽所需要用到的样式</li>
</ul>
</li>
<li>事件<ul>
<li>ready 音频初始化完成</li>
<li>w3c 中定义的音频支持的事件</li>
</ul>
</li>
<li>实例方法<ul>
<li>load 重新加载音频</li>
<li>play 播放音频</li>
<li>pause 暂停播放音频</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wx-open-audio</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span> <span class="attr">episode</span>=<span class="string">&quot;&quot;</span> <span class="attr">singer</span>=<span class="string">&quot;&quot;</span> <span class="attr">cover</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/wxtag-template&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;playBackground&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/wxtag-template&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;playing&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pauseBackground&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/wxtag-template&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;style&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      .playBackground&#123; &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      .pauseBackground&#123; &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">wx-open-audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> audio = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;audio&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  audio.<span class="title function_">addEventListener</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ready&#x27;</span>, evt);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  audio.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadedmetadata&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;loadedmetadata&#x27;</span>, evt);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  audio.<span class="title function_">addEventListener</span>(<span class="string">&#x27;play&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;play&#x27;</span>, evt);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  audio.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pause&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pause&#x27;</span>, evt);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  audio.<span class="title function_">addEventListener</span>(<span class="string">&#x27;ended&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ended&#x27;</span>, evt);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wx</category>
      </categories>
      <tags>
        <tag>wx</tag>
      </tags>
  </entry>
</search>
